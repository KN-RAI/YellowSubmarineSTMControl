
YellowSubmarineSTMControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef10  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800f110  0800f110  0001f110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f69c  0800f69c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f69c  0800f69c  0001f69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6a4  0800f6a4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f6a4  0800f6a4  0001f6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f6ac  0800f6ac  0001f6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f6b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c88  200001e4  0800f894  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e6c  0800f894  00024e6c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025fa5  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e0e  00000000  00000000  000461b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc8  00000000  00000000  0004afc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ae0  00000000  00000000  0004cc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f648  00000000  00000000  0004e770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002279d  00000000  00000000  0007ddb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d8c4  00000000  00000000  000a0555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ade19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008da0  00000000  00000000  001ade6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f0f8 	.word	0x0800f0f8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0800f0f8 	.word	0x0800f0f8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <_ZN5DHT2217pinChangeCallBackEv>:
#include <DHT22_TempHumidity.h>
#include"main.h"

//###############################################################################################################
void  DHT22::pinChangeCallBack()
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  this->time = HAL_GetTick();
 80009e4:	f001 fcfa 	bl	80023dc <HAL_GetTick>
 80009e8:	4602      	mov	r2, r0
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	661a      	str	r2, [r3, #96]	; 0x60
  if(this->cnt < sizeof(this->data)-1)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80009f4:	2b52      	cmp	r3, #82	; 0x52
 80009f6:	d81d      	bhi.n	8000a34 <_ZN5DHT2217pinChangeCallBackEv+0x58>
  {
	  this->data[this->cnt] = this->tim->Instance->CNT - this->lastCNT;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	f8b1 105e 	ldrh.w	r1, [r1, #94]	; 0x5e
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	440b      	add	r3, r1
 8000a16:	729a      	strb	r2, [r3, #10]
	  this->lastCNT = this->tim->Instance->CNT;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	665a      	str	r2, [r3, #100]	; 0x64
	  this->cnt++;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  }
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_ZN5DHT227delayUsEt>:
//###############################################################################################################
void  DHT22::delayUs(uint16_t delay)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	807b      	strh	r3, [r7, #2]
	this->tim->Instance->CNT=0;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  while(this->tim->Instance->CNT < delay);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a5a:	887b      	ldrh	r3, [r7, #2]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	bf34      	ite	cc
 8000a60:	2301      	movcc	r3, #1
 8000a62:	2300      	movcs	r3, #0
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d000      	beq.n	8000a6c <_ZN5DHT227delayUsEt+0x30>
 8000a6a:	e7f2      	b.n	8000a52 <_ZN5DHT227delayUsEt+0x16>
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <_ZN5DHT226outputEv>:
//###############################################################################################################
void  DHT22::output()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio;
  this->gpio->BSRR = this->pin;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	891a      	ldrh	r2, [r3, #8]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	619a      	str	r2, [r3, #24]
  gpio.Mode = GPIO_MODE_OUTPUT_OD;
 8000a8a:	2311      	movs	r3, #17
 8000a8c:	613b      	str	r3, [r7, #16]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61bb      	str	r3, [r7, #24]
  gpio.Pin = this->pin;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	891b      	ldrh	r3, [r3, #8]
 8000a96:	60fb      	str	r3, [r7, #12]
  gpio.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(this->gpio,&gpio);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f107 020c 	add.w	r2, r7, #12
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 fe6c 	bl	8002784 <HAL_GPIO_Init>
}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <_ZN5DHT225inputEv>:
//###############################################################################################################
void  DHT22::input()
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio;
  gpio.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000abc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000ac0:	613b      	str	r3, [r7, #16]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61bb      	str	r3, [r7, #24]
  gpio.Pin = this->pin;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	891b      	ldrh	r3, [r3, #8]
 8000aca:	60fb      	str	r3, [r7, #12]
  gpio.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(this->gpio,&gpio);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f107 020c 	add.w	r2, r7, #12
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 fe52 	bl	8002784 <HAL_GPIO_Init>
}
 8000ae0:	bf00      	nop
 8000ae2:	3720      	adds	r7, #32
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <_ZN5DHT226decodeEPh>:
//###############################################################################################################
bool  DHT22::decode(uint8_t *byteArray)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  int8_t bit;
      if((this->data[0] < 60) || (this->data[0] > 100) || (this->data[1] < 60) || (this->data[1] > 100))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	7a9b      	ldrb	r3, [r3, #10]
 8000af6:	2b3b      	cmp	r3, #59	; 0x3b
 8000af8:	d90b      	bls.n	8000b12 <_ZN5DHT226decodeEPh+0x2a>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7a9b      	ldrb	r3, [r3, #10]
 8000afe:	2b64      	cmp	r3, #100	; 0x64
 8000b00:	d807      	bhi.n	8000b12 <_ZN5DHT226decodeEPh+0x2a>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	7adb      	ldrb	r3, [r3, #11]
 8000b06:	2b3b      	cmp	r3, #59	; 0x3b
 8000b08:	d903      	bls.n	8000b12 <_ZN5DHT226decodeEPh+0x2a>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	7adb      	ldrb	r3, [r3, #11]
 8000b0e:	2b64      	cmp	r3, #100	; 0x64
 8000b10:	d901      	bls.n	8000b16 <_ZN5DHT226decodeEPh+0x2e>
        return false;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e069      	b.n	8000bea <_ZN5DHT226decodeEPh+0x102>
      bit = 7;
 8000b16:	2307      	movs	r3, #7
 8000b18:	73fb      	strb	r3, [r7, #15]
      for(uint8_t i=0 ; i<80 ; i+=2)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	73bb      	strb	r3, [r7, #14]
 8000b1e:	7bbb      	ldrb	r3, [r7, #14]
 8000b20:	2b4f      	cmp	r3, #79	; 0x4f
 8000b22:	d862      	bhi.n	8000bea <_ZN5DHT226decodeEPh+0x102>
      {
        if((this->data[i+2] >= 35) && (this->data[i+2] <= 70))
 8000b24:	7bbb      	ldrb	r3, [r7, #14]
 8000b26:	3302      	adds	r3, #2
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	7a9b      	ldrb	r3, [r3, #10]
 8000b2e:	2b22      	cmp	r3, #34	; 0x22
 8000b30:	d955      	bls.n	8000bde <_ZN5DHT226decodeEPh+0xf6>
 8000b32:	7bbb      	ldrb	r3, [r7, #14]
 8000b34:	3302      	adds	r3, #2
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	7a9b      	ldrb	r3, [r3, #10]
 8000b3c:	2b46      	cmp	r3, #70	; 0x46
 8000b3e:	d84e      	bhi.n	8000bde <_ZN5DHT226decodeEPh+0xf6>
        {
          if((this->data[i+3] >= 10) && (this->data[i+3] <= 45))
 8000b40:	7bbb      	ldrb	r3, [r7, #14]
 8000b42:	3303      	adds	r3, #3
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	4413      	add	r3, r2
 8000b48:	7a9b      	ldrb	r3, [r3, #10]
 8000b4a:	2b09      	cmp	r3, #9
 8000b4c:	d917      	bls.n	8000b7e <_ZN5DHT226decodeEPh+0x96>
 8000b4e:	7bbb      	ldrb	r3, [r7, #14]
 8000b50:	3303      	adds	r3, #3
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	7a9b      	ldrb	r3, [r3, #10]
 8000b58:	2b2d      	cmp	r3, #45	; 0x2d
 8000b5a:	d810      	bhi.n	8000b7e <_ZN5DHT226decodeEPh+0x96>
            *byteArray &= ~(1<<bit);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b25a      	sxtb	r2, r3
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	2101      	movs	r1, #1
 8000b68:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6c:	b25b      	sxtb	r3, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	b25b      	sxtb	r3, r3
 8000b72:	4013      	ands	r3, r2
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	701a      	strb	r2, [r3, #0]
 8000b7c:	e01e      	b.n	8000bbc <_ZN5DHT226decodeEPh+0xd4>
          else if((this->data[i+3] >= 55) && (this->data[i+3] <= 95))
 8000b7e:	7bbb      	ldrb	r3, [r7, #14]
 8000b80:	3303      	adds	r3, #3
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	7a9b      	ldrb	r3, [r3, #10]
 8000b88:	2b36      	cmp	r3, #54	; 0x36
 8000b8a:	d915      	bls.n	8000bb8 <_ZN5DHT226decodeEPh+0xd0>
 8000b8c:	7bbb      	ldrb	r3, [r7, #14]
 8000b8e:	3303      	adds	r3, #3
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	4413      	add	r3, r2
 8000b94:	7a9b      	ldrb	r3, [r3, #10]
 8000b96:	2b5f      	cmp	r3, #95	; 0x5f
 8000b98:	d80e      	bhi.n	8000bb8 <_ZN5DHT226decodeEPh+0xd0>
            *byteArray |= (1<<bit);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b25a      	sxtb	r2, r3
 8000ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	4313      	orrs	r3, r2
 8000bae:	b25b      	sxtb	r3, r3
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	e001      	b.n	8000bbc <_ZN5DHT226decodeEPh+0xd4>
          else
            return false;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e016      	b.n	8000bea <_ZN5DHT226decodeEPh+0x102>
          bit--;
 8000bbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	73fb      	strb	r3, [r7, #15]
          if(bit == -1)
 8000bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd0:	d107      	bne.n	8000be2 <_ZN5DHT226decodeEPh+0xfa>
          {
            bit = 7;
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	73fb      	strb	r3, [r7, #15]
            byteArray++;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	603b      	str	r3, [r7, #0]
          if(bit == -1)
 8000bdc:	e001      	b.n	8000be2 <_ZN5DHT226decodeEPh+0xfa>
          }
        }
        else
          return false;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e003      	b.n	8000bea <_ZN5DHT226decodeEPh+0x102>
      for(uint8_t i=0 ; i<80 ; i+=2)
 8000be2:	7bbb      	ldrb	r3, [r7, #14]
 8000be4:	3302      	adds	r3, #2
 8000be6:	73bb      	strb	r3, [r7, #14]
 8000be8:	e799      	b.n	8000b1e <_ZN5DHT226decodeEPh+0x36>
      }

}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_ZN5DHT224initEP17TIM_HandleTypeDeftP12GPIO_TypeDeft>:
//###############################################################################################################
bool DHT22::init(TIM_HandleTypeDef *tim,uint16_t  timerBusFrequencyMHz, GPIO_TypeDef *gpio, uint16_t  pin)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b084      	sub	sp, #16
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	60f8      	str	r0, [r7, #12]
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4613      	mov	r3, r2
 8000c04:	80fb      	strh	r3, [r7, #6]
	this->tim = tim;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	68ba      	ldr	r2, [r7, #8]
 8000c0a:	601a      	str	r2, [r3, #0]
	this->gpio = gpio;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	683a      	ldr	r2, [r7, #0]
 8000c10:	605a      	str	r2, [r3, #4]
	this->pin = pin;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	8b3a      	ldrh	r2, [r7, #24]
 8000c16:	811a      	strh	r2, [r3, #8]
  output();
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff ff2d 	bl	8000a78 <_ZN5DHT226outputEv>
  this->tim->Init.Prescaler = timerBusFrequencyMHz - 1;
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
  this->tim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  this->tim->Init.Period = 0xFFFF;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c38:	60da      	str	r2, [r3, #12]
  this->tim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  HAL_TIM_Base_Init(this->tim);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f004 f81a 	bl	8004c80 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(this->tim);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f004 f86d 	bl	8004d30 <HAL_TIM_Base_Start>
  while(HAL_GetTick()<2000)
 8000c56:	f001 fbc1 	bl	80023dc <HAL_GetTick>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000c60:	4293      	cmp	r3, r2
 8000c62:	bf94      	ite	ls
 8000c64:	2301      	movls	r3, #1
 8000c66:	2300      	movhi	r3, #0
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <_ZN5DHT224initEP17TIM_HandleTypeDeftP12GPIO_TypeDeft+0x80>
	   HAL_Delay(5);
 8000c6e:	2005      	movs	r0, #5
 8000c70:	f001 fbc0 	bl	80023f4 <HAL_Delay>
  while(HAL_GetTick()<2000)
 8000c74:	e7ef      	b.n	8000c56 <_ZN5DHT224initEP17TIM_HandleTypeDeftP12GPIO_TypeDeft+0x60>
  return true;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_ZN5DHT224readEv>:
//###############################################################################################################
bool  DHT22::read()
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t  startTime;

      output();
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff fef5 	bl	8000a78 <_ZN5DHT226outputEv>
      this->gpio->BSRR = (this->pin)<<16;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	891b      	ldrh	r3, [r3, #8]
 8000c92:	041a      	lsls	r2, r3, #16
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	619a      	str	r2, [r3, #24]
      HAL_Delay(1);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f001 fbaa 	bl	80023f4 <HAL_Delay>
      this->gpio->BSRR = this->pin;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	891a      	ldrh	r2, [r3, #8]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	619a      	str	r2, [r3, #24]
      delayUs(5);
 8000caa:	2105      	movs	r1, #5
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff fec5 	bl	8000a3c <_ZN5DHT227delayUsEt>
      this->gpio->BSRR = (this->pin)<<16;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	891b      	ldrh	r3, [r3, #8]
 8000cb6:	041a      	lsls	r2, r3, #16
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	619a      	str	r2, [r3, #24]
      delayUs(5);
 8000cbe:	2105      	movs	r1, #5
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff febb 	bl	8000a3c <_ZN5DHT227delayUsEt>
      this->cnt = 0;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      this->lastCNT = 0;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	665a      	str	r2, [r3, #100]	; 0x64
      this->tim->Instance->CNT = 0;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
      startTime = HAL_GetTick();
 8000cde:	f001 fb7d 	bl	80023dc <HAL_GetTick>
 8000ce2:	6178      	str	r0, [r7, #20]
      input();
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff fee5 	bl	8000ab4 <_ZN5DHT225inputEv>
      while(1)
      {
        if(HAL_GetTick() - this->time > 1)
 8000cea:	f001 fb77 	bl	80023dc <HAL_GetTick>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	bf8c      	ite	hi
 8000cfa:	2301      	movhi	r3, #1
 8000cfc:	2300      	movls	r3, #0
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0f2      	beq.n	8000cea <_ZN5DHT224readEv+0x6a>
        {
          uint8_t data[5];
          if(decode(data) == false)
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4619      	mov	r1, r3
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff feec 	bl	8000ae8 <_ZN5DHT226decodeEPh>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	bf0c      	ite	eq
 8000d16:	2301      	moveq	r3, #1
 8000d18:	2300      	movne	r3, #0
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <_ZN5DHT224readEv+0xa4>
            return false;
 8000d20:	2300      	movs	r3, #0
 8000d22:	e033      	b.n	8000d8c <_ZN5DHT224readEv+0x10c>
          if(((data[0] + data[1] + data[2] + data[3]) & 0x00FF) != data[4])
 8000d24:	7b3b      	ldrb	r3, [r7, #12]
 8000d26:	461a      	mov	r2, r3
 8000d28:	7b7b      	ldrb	r3, [r7, #13]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	7bba      	ldrb	r2, [r7, #14]
 8000d2e:	4413      	add	r3, r2
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	4413      	add	r3, r2
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	7c3a      	ldrb	r2, [r7, #16]
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d001      	beq.n	8000d40 <_ZN5DHT224readEv+0xc0>
            return false;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e025      	b.n	8000d8c <_ZN5DHT224readEv+0x10c>

          this->temperature = (float)(data[2]*256 + data[3]) / 10.0f;
 8000d40:	7bbb      	ldrb	r3, [r7, #14]
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	7bfa      	ldrb	r2, [r7, #15]
 8000d46:	4413      	add	r3, r2
 8000d48:	ee07 3a90 	vmov	s15, r3
 8000d4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d50:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000d54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
          this->humidity = (float)(data[0]*256 + data[1]) / 10.0f;
 8000d5e:	7b3b      	ldrb	r3, [r7, #12]
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	7b7a      	ldrb	r2, [r7, #13]
 8000d64:	4413      	add	r3, r2
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d6e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000d72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

          this->dataValid = true;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          output();
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fe77 	bl	8000a78 <_ZN5DHT226outputEv>
          return true;
 8000d8a:	2301      	movs	r3, #1
        }
      }

}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <_ZN4LSM6C1Ev>:

#define DS33_WHO_ID    0x69

// Constructors ////////////////////////////////////////////////////////////////

LSM6::LSM6(void)
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
{
  _device = device_auto;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  io_timeout = 0;  // 0 = no timeout
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	851a      	strh	r2, [r3, #40]	; 0x28
  did_timeout = false;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_ZN4LSM64initE19__I2C_HandleTypeDefNS_10deviceTypeENS_8sa0StateE>:
{
  return io_timeout;
}

bool LSM6::init(I2C_HandleTypeDef _hi2c,deviceType device, sa0State sa0)
{
 8000dc0:	b084      	sub	sp, #16
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	f107 0014 	add.w	r0, r7, #20
 8000dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->hi2c=_hi2c;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	332c      	adds	r3, #44	; 0x2c
 8000dd6:	f107 0114 	add.w	r1, r7, #20
 8000dda:	224c      	movs	r2, #76	; 0x4c
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f009 fe1b 	bl	800aa18 <memcpy>
	device = device_DS33;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60

    // make sure device and SA0 were successfully detected; otherwise, indicate failure
    if (device == device_auto || sa0 == sa0_auto)
 8000de8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d003      	beq.n	8000df8 <_ZN4LSM64initE19__I2C_HandleTypeDefNS_10deviceTypeENS_8sa0StateE+0x38>
 8000df0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d101      	bne.n	8000dfc <_ZN4LSM64initE19__I2C_HandleTypeDefNS_10deviceTypeENS_8sa0StateE+0x3c>
    {
      return false;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	e01e      	b.n	8000e3a <_ZN4LSM64initE19__I2C_HandleTypeDefNS_10deviceTypeENS_8sa0StateE+0x7a>
    }

  _device = device;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8000e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(device==device_DS33)
 8000e06:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d111      	bne.n	8000e32 <_ZN4LSM64initE19__I2C_HandleTypeDefNS_10deviceTypeENS_8sa0StateE+0x72>
  {
      address = (sa0 == sa0_high) ? DS33_SA0_HIGH_ADDRESS : DS33_SA0_LOW_ADDRESS;
 8000e0e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d101      	bne.n	8000e1a <_ZN4LSM64initE19__I2C_HandleTypeDefNS_10deviceTypeENS_8sa0StateE+0x5a>
 8000e16:	226b      	movs	r2, #107	; 0x6b
 8000e18:	e000      	b.n	8000e1c <_ZN4LSM64initE19__I2C_HandleTypeDefNS_10deviceTypeENS_8sa0StateE+0x5c>
 8000e1a:	226a      	movs	r2, #106	; 0x6a
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      address_shl=address<<1;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  }

  enableDefault();
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 f808 	bl	8000e48 <_ZN4LSM613enableDefaultEv>

  return true;
 8000e38:	2301      	movs	r3, #1
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e44:	b004      	add	sp, #16
 8000e46:	4770      	bx	lr

08000e48 <_ZN4LSM613enableDefaultEv>:

void LSM6::enableDefault(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if (_device == device_DS33)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10e      	bne.n	8000e78 <_ZN4LSM613enableDefaultEv+0x30>
  {
    // Accelerometer

    // 0x80 = 0b10000000
    // ODR = 1000 (1.66 kHz (high performance)); FS_XL = 00 (+/-2 g full scale)
    writeReg(CTRL1_XL, 0x80);
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	2110      	movs	r1, #16
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 f80e 	bl	8000e80 <_ZN4LSM68writeRegEhh>
    // Gyro

    // 0x80 = 0b010000000
    // ODR = 1000 (1.66 kHz (high performance)); FS_XL = 00 (245 dps)
    writeReg(CTRL2_G, 0x80);
 8000e64:	2280      	movs	r2, #128	; 0x80
 8000e66:	2111      	movs	r1, #17
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 f809 	bl	8000e80 <_ZN4LSM68writeRegEhh>
    // Common

    // 0x04 = 0b00000100
    // IF_INC = 1 (automatically increment register address)
    writeReg(CTRL3_C, 0x04);
 8000e6e:	2204      	movs	r2, #4
 8000e70:	2112      	movs	r1, #18
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f804 	bl	8000e80 <_ZN4LSM68writeRegEhh>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <_ZN4LSM68writeRegEhh>:

void LSM6::writeReg(uint8_t reg, uint8_t value)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af04      	add	r7, sp, #16
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	70bb      	strb	r3, [r7, #2]
	uint8_t command=value;
 8000e90:	78bb      	ldrb	r3, [r7, #2]
 8000e92:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&this->hi2c,address_shl, reg, 1, &command, sizeof(command), 100);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000ea0:	b299      	uxth	r1, r3
 8000ea2:	78fb      	ldrb	r3, [r7, #3]
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	2364      	movs	r3, #100	; 0x64
 8000ea8:	9302      	str	r3, [sp, #8]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	f107 030f 	add.w	r3, r7, #15
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	f001 fed3 	bl	8002c60 <HAL_I2C_Mem_Write>

}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <_ZN4LSM67readRegEh>:

uint8_t LSM6::readReg(uint8_t reg)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b088      	sub	sp, #32
 8000ec6:	af04      	add	r7, sp, #16
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status=HAL_I2C_Mem_Read(&this->hi2c, address_shl, reg, 1, &value, sizeof(value), 200);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000ede:	b299      	uxth	r1, r3
 8000ee0:	78fb      	ldrb	r3, [r7, #3]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	23c8      	movs	r3, #200	; 0xc8
 8000ee6:	9302      	str	r3, [sp, #8]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	9301      	str	r3, [sp, #4]
 8000eec:	f107 030e 	add.w	r3, r7, #14
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	f001 ffc8 	bl	8002e88 <HAL_I2C_Mem_Read>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	73fb      	strb	r3, [r7, #15]
	return (status==HAL_OK)?value:(-1);
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <_ZN4LSM67readRegEh+0x44>
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	e000      	b.n	8000f08 <_ZN4LSM67readRegEh+0x46>
 8000f06:	23ff      	movs	r3, #255	; 0xff
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_ZN4LSM67readAccEv>:


// Reads the 3 accelerometer channels and stores them in vector a
void LSM6::readAcc(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	uint8_t data[6];

	data[0]=readReg(OUTX_H_XL) ;
 8000f18:	2129      	movs	r1, #41	; 0x29
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffd1 	bl	8000ec2 <_ZN4LSM67readRegEh>
 8000f20:	4603      	mov	r3, r0
 8000f22:	723b      	strb	r3, [r7, #8]
	data[1]=readReg(OUTX_L_XL);
 8000f24:	2128      	movs	r1, #40	; 0x28
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffcb 	bl	8000ec2 <_ZN4LSM67readRegEh>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	727b      	strb	r3, [r7, #9]

	data[2]=readReg(OUTY_H_XL);
 8000f30:	212b      	movs	r1, #43	; 0x2b
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffc5 	bl	8000ec2 <_ZN4LSM67readRegEh>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	72bb      	strb	r3, [r7, #10]
	data[3]=readReg(OUTY_L_XL);
 8000f3c:	212a      	movs	r1, #42	; 0x2a
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ffbf 	bl	8000ec2 <_ZN4LSM67readRegEh>
 8000f44:	4603      	mov	r3, r0
 8000f46:	72fb      	strb	r3, [r7, #11]

	data[4]=readReg(OUTZ_H_XL);
 8000f48:	212d      	movs	r1, #45	; 0x2d
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ffb9 	bl	8000ec2 <_ZN4LSM67readRegEh>
 8000f50:	4603      	mov	r3, r0
 8000f52:	733b      	strb	r3, [r7, #12]
	data[5]=readReg(OUTZ_L_XL);
 8000f54:	212c      	movs	r1, #44	; 0x2c
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffb3 	bl	8000ec2 <_ZN4LSM67readRegEh>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	737b      	strb	r3, [r7, #13]

	a.x  = (int16_t)((data[0] << 8) | data[1]);
 8000f60:	7a3b      	ldrb	r3, [r7, #8]
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	7a7b      	ldrb	r3, [r7, #9]
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	801a      	strh	r2, [r3, #0]
	a.y = (int16_t)((data[2] << 8) | data[3]);
 8000f72:	7abb      	ldrb	r3, [r7, #10]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	7afb      	ldrb	r3, [r7, #11]
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	805a      	strh	r2, [r3, #2]
	a.z = (int16_t)((data[4] << 8) | data[5]);
 8000f84:	7b3b      	ldrb	r3, [r7, #12]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	7b7b      	ldrb	r3, [r7, #13]
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	809a      	strh	r2, [r3, #4]
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_ZN4LSM68readGyroEv>:

// Reads the 3 gyro channels and stores them in vector g
void LSM6::readGyro(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b084      	sub	sp, #16
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	uint8_t data[6];

	data[0]=readReg(OUTX_H_G);
 8000fa6:	2123      	movs	r1, #35	; 0x23
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ff8a 	bl	8000ec2 <_ZN4LSM67readRegEh>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	723b      	strb	r3, [r7, #8]
	data[1]=readReg(OUTX_L_G);
 8000fb2:	2122      	movs	r1, #34	; 0x22
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff84 	bl	8000ec2 <_ZN4LSM67readRegEh>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	727b      	strb	r3, [r7, #9]

	data[2]=readReg(OUTY_H_G);
 8000fbe:	2125      	movs	r1, #37	; 0x25
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff7e 	bl	8000ec2 <_ZN4LSM67readRegEh>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	72bb      	strb	r3, [r7, #10]
	data[3]=readReg(OUTY_L_G);
 8000fca:	2124      	movs	r1, #36	; 0x24
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff78 	bl	8000ec2 <_ZN4LSM67readRegEh>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	72fb      	strb	r3, [r7, #11]

	data[4]=readReg(OUTZ_H_G);
 8000fd6:	2127      	movs	r1, #39	; 0x27
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff72 	bl	8000ec2 <_ZN4LSM67readRegEh>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	733b      	strb	r3, [r7, #12]
	data[5]=readReg(OUTZ_L_G);
 8000fe2:	2126      	movs	r1, #38	; 0x26
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff6c 	bl	8000ec2 <_ZN4LSM67readRegEh>
 8000fea:	4603      	mov	r3, r0
 8000fec:	737b      	strb	r3, [r7, #13]

	g.x  = (int16_t)((data[0] << 8) | data[1]);
 8000fee:	7a3b      	ldrb	r3, [r7, #8]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	7a7b      	ldrb	r3, [r7, #9]
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	80da      	strh	r2, [r3, #6]
	g.y = (int16_t)((data[2] << 8) | data[3]);
 8001000:	7abb      	ldrb	r3, [r7, #10]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b21a      	sxth	r2, r3
 8001006:	7afb      	ldrb	r3, [r7, #11]
 8001008:	b21b      	sxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b21a      	sxth	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	811a      	strh	r2, [r3, #8]
	g.z = (int16_t)((data[4] << 8) | data[5]);
 8001012:	7b3b      	ldrb	r3, [r7, #12]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	b21a      	sxth	r2, r3
 8001018:	7b7b      	ldrb	r3, [r7, #13]
 800101a:	b21b      	sxth	r3, r3
 800101c:	4313      	orrs	r3, r2
 800101e:	b21a      	sxth	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	815a      	strh	r2, [r3, #10]

}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <_ZN4LSM64readEv>:

// Reads all 6 channels of the LSM6 and stores them in the object variables
void LSM6::read(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  readAcc();
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff6b 	bl	8000f10 <_ZN4LSM67readAccEv>
  readGyro();
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffaf 	bl	8000f9e <_ZN4LSM68readGyroEv>
  scaleVectors();
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f805 	bl	8001050 <_ZN4LSM612scaleVectorsEv>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <_ZN4LSM612scaleVectorsEv>:
  a->y /= mag;
  a->z /= mag;
}

void LSM6::scaleVectors()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	   float a_x = this->a.x*2.0f/32678.0f;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001066:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800106a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80011e8 <_ZN4LSM612scaleVectorsEv+0x198>
 800106e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001072:	edc7 7a07 	vstr	s15, [r7, #28]
	   float a_y = this->a.y*2.0f/32678.0f;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001084:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001088:	eddf 6a57 	vldr	s13, [pc, #348]	; 80011e8 <_ZN4LSM612scaleVectorsEv+0x198>
 800108c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001090:	edc7 7a06 	vstr	s15, [r7, #24]
	   float a_z = this->a.z*2.0f/32678.0f;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800109a:	ee07 3a90 	vmov	s15, r3
 800109e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80010a6:	eddf 6a50 	vldr	s13, [pc, #320]	; 80011e8 <_ZN4LSM612scaleVectorsEv+0x198>
 80010aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ae:	edc7 7a05 	vstr	s15, [r7, #20]
	   float alpha=atan2f(a_z,a_x)* 180.0f / 3.14 + 90.0f;
 80010b2:	edd7 0a07 	vldr	s1, [r7, #28]
 80010b6:	ed97 0a05 	vldr	s0, [r7, #20]
 80010ba:	f009 fb07 	bl	800a6cc <atan2f>
 80010be:	eef0 7a40 	vmov.f32	s15, s0
 80010c2:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80011ec <_ZN4LSM612scaleVectorsEv+0x19c>
 80010c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80010ce:	ed9f 5b42 	vldr	d5, [pc, #264]	; 80011d8 <_ZN4LSM612scaleVectorsEv+0x188>
 80010d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010d6:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80011e0 <_ZN4LSM612scaleVectorsEv+0x190>
 80010da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010e2:	edc7 7a04 	vstr	s15, [r7, #16]
	   float gamma=atan2f(a_z,a_y)* 180.0f / 3.14 + 90.0f;
 80010e6:	edd7 0a06 	vldr	s1, [r7, #24]
 80010ea:	ed97 0a05 	vldr	s0, [r7, #20]
 80010ee:	f009 faed 	bl	800a6cc <atan2f>
 80010f2:	eef0 7a40 	vmov.f32	s15, s0
 80010f6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80011ec <_ZN4LSM612scaleVectorsEv+0x19c>
 80010fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010fe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001102:	ed9f 5b35 	vldr	d5, [pc, #212]	; 80011d8 <_ZN4LSM612scaleVectorsEv+0x188>
 8001106:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800110a:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80011e0 <_ZN4LSM612scaleVectorsEv+0x190>
 800110e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001112:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001116:	edc7 7a03 	vstr	s15, [r7, #12]
	   float delta=atan2f(a_y,a_x)* 180.0f / 3.14 + 90.0f;
 800111a:	edd7 0a07 	vldr	s1, [r7, #28]
 800111e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001122:	f009 fad3 	bl	800a6cc <atan2f>
 8001126:	eef0 7a40 	vmov.f32	s15, s0
 800112a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80011ec <_ZN4LSM612scaleVectorsEv+0x19c>
 800112e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001132:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001136:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80011d8 <_ZN4LSM612scaleVectorsEv+0x188>
 800113a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800113e:	ed9f 6b28 	vldr	d6, [pc, #160]	; 80011e0 <_ZN4LSM612scaleVectorsEv+0x190>
 8001142:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001146:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800114a:	edc7 7a02 	vstr	s15, [r7, #8]

	   this->a_scaled.x=alpha;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	60da      	str	r2, [r3, #12]
	   this->a_scaled.y=gamma;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	611a      	str	r2, [r3, #16]
	   this->a_scaled.z=delta;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	615a      	str	r2, [r3, #20]

	   this->g_scaled.x = this->g.x*125.0f/32678.0f;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001166:	ee07 3a90 	vmov	s15, r3
 800116a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80011f0 <_ZN4LSM612scaleVectorsEv+0x1a0>
 8001172:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001176:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80011e8 <_ZN4LSM612scaleVectorsEv+0x198>
 800117a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	edc3 7a06 	vstr	s15, [r3, #24]
	   this->g_scaled.y = this->g.y*125.0f/32678.0f;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800118a:	ee07 3a90 	vmov	s15, r3
 800118e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001192:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80011f0 <_ZN4LSM612scaleVectorsEv+0x1a0>
 8001196:	ee27 7a87 	vmul.f32	s14, s15, s14
 800119a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80011e8 <_ZN4LSM612scaleVectorsEv+0x198>
 800119e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	edc3 7a07 	vstr	s15, [r3, #28]
	   this->g_scaled.z = this->g.z*125.0f/32678.0f;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80011f0 <_ZN4LSM612scaleVectorsEv+0x1a0>
 80011ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011be:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80011e8 <_ZN4LSM612scaleVectorsEv+0x198>
 80011c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	f3af 8000 	nop.w
 80011d8:	51eb851f 	.word	0x51eb851f
 80011dc:	40091eb8 	.word	0x40091eb8
 80011e0:	00000000 	.word	0x00000000
 80011e4:	40568000 	.word	0x40568000
 80011e8:	46ff4c00 	.word	0x46ff4c00
 80011ec:	43340000 	.word	0x43340000
 80011f0:	42fa0000 	.word	0x42fa0000

080011f4 <_ZN10Step_Motor7turn_onEi>:
#include <Step_Motor.h>
#include"main.h"


 void Step_Motor::turn_on(int direction)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(this->DIR_GPIO_Port, this->DIR_Pin, (GPIO_PinState)direction);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6898      	ldr	r0, [r3, #8]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	899b      	ldrh	r3, [r3, #12]
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f001 fc66 	bl	8002adc <HAL_GPIO_WritePin>
	this->direction=direction;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
	this->is_turned_on=true;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	771a      	strb	r2, [r3, #28]
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <_ZN10Step_Motor4stopEv>:
	}
}


void Step_Motor::stop()
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->STEP_GPIO_Port, this->STEP_Pin, GPIO_PIN_RESET);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	889b      	ldrh	r3, [r3, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	4619      	mov	r1, r3
 8001238:	f001 fc50 	bl	8002adc <HAL_GPIO_WritePin>
	this->is_turned_on=false;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	771a      	strb	r2, [r3, #28]
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4a07      	ldr	r2, [pc, #28]	; (8001278 <vApplicationGetIdleTaskMemory+0x2c>)
 800125c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	4a06      	ldr	r2, [pc, #24]	; (800127c <vApplicationGetIdleTaskMemory+0x30>)
 8001262:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000200 	.word	0x20000200
 800127c:	20000254 	.word	0x20000254

08001280 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4a07      	ldr	r2, [pc, #28]	; (80012ac <vApplicationGetTimerTaskMemory+0x2c>)
 8001290:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <vApplicationGetTimerTaskMemory+0x30>)
 8001296:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800129e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	20000454 	.word	0x20000454
 80012b0:	200004a8 	.word	0x200004a8

080012b4 <_ZN10Step_MotorC1Ev>:
#endif /* INC_STEP_MOTOR_H_ */

#define SM_RIGHT 1
#define SM_LEFT 0

class Step_Motor
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c2:	621a      	str	r2, [r3, #32]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* DHT22 sensor callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == DHT22_1.pin)
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x24>)
 80012e0:	891b      	ldrh	r3, [r3, #8]
 80012e2:	88fa      	ldrh	r2, [r7, #6]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d102      	bne.n	80012ee <HAL_GPIO_EXTI_Callback+0x1a>
			DHT22_1.pinChangeCallBack();
 80012e8:	4803      	ldr	r0, [pc, #12]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x24>)
 80012ea:	f7ff fb77 	bl	80009dc <_ZN5DHT2217pinChangeCallBackEv>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000e98 	.word	0x20000e98

080012fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if(rx_buffer==STOP_SM)
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <HAL_UART_RxCpltCallback+0x74>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b30      	cmp	r3, #48	; 0x30
 800130a:	d105      	bne.n	8001318 <HAL_UART_RxCpltCallback+0x1c>
			{
				SM_1.stop();
 800130c:	4819      	ldr	r0, [pc, #100]	; (8001374 <HAL_UART_RxCpltCallback+0x78>)
 800130e:	f7ff ff89 	bl	8001224 <_ZN10Step_Motor4stopEv>
				SM_2.stop();
 8001312:	4819      	ldr	r0, [pc, #100]	; (8001378 <HAL_UART_RxCpltCallback+0x7c>)
 8001314:	f7ff ff86 	bl	8001224 <_ZN10Step_Motor4stopEv>
			}
	if(rx_buffer==UP)
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_UART_RxCpltCallback+0x74>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b31      	cmp	r3, #49	; 0x31
 800131e:	d107      	bne.n	8001330 <HAL_UART_RxCpltCallback+0x34>
			{
				SM_1.turn_on(SM_RIGHT);
 8001320:	2101      	movs	r1, #1
 8001322:	4814      	ldr	r0, [pc, #80]	; (8001374 <HAL_UART_RxCpltCallback+0x78>)
 8001324:	f7ff ff66 	bl	80011f4 <_ZN10Step_Motor7turn_onEi>
				SM_2.turn_on(SM_RIGHT);
 8001328:	2101      	movs	r1, #1
 800132a:	4813      	ldr	r0, [pc, #76]	; (8001378 <HAL_UART_RxCpltCallback+0x7c>)
 800132c:	f7ff ff62 	bl	80011f4 <_ZN10Step_Motor7turn_onEi>
			}
	if(rx_buffer==DOWN)
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_UART_RxCpltCallback+0x74>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b32      	cmp	r3, #50	; 0x32
 8001336:	d108      	bne.n	800134a <HAL_UART_RxCpltCallback+0x4e>
			{
				SM_1.turn_on(SM_LEFT);
 8001338:	2100      	movs	r1, #0
 800133a:	480e      	ldr	r0, [pc, #56]	; (8001374 <HAL_UART_RxCpltCallback+0x78>)
 800133c:	f7ff ff5a 	bl	80011f4 <_ZN10Step_Motor7turn_onEi>
				SM_2.turn_on(SM_LEFT);
 8001340:	2100      	movs	r1, #0
 8001342:	480d      	ldr	r0, [pc, #52]	; (8001378 <HAL_UART_RxCpltCallback+0x7c>)
 8001344:	f7ff ff56 	bl	80011f4 <_ZN10Step_Motor7turn_onEi>
 8001348:	e009      	b.n	800135e <HAL_UART_RxCpltCallback+0x62>
			}
	else{
		a=rx_buffer- '0';
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_UART_RxCpltCallback+0x74>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	3b30      	subs	r3, #48	; 0x30
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_UART_RxCpltCallback+0x80>)
 800135a:	edc3 7a00 	vstr	s15, [r3]
	}
	HAL_UART_Receive_IT(&huart3, (uint8_t*) &rx_buffer, 1);
 800135e:	2201      	movs	r2, #1
 8001360:	4903      	ldr	r1, [pc, #12]	; (8001370 <HAL_UART_RxCpltCallback+0x74>)
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <HAL_UART_RxCpltCallback+0x84>)
 8001364:	f004 fe98 	bl	8006098 <HAL_UART_Receive_IT>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000fc0 	.word	0x20000fc0
 8001374:	20000f0c 	.word	0x20000f0c
 8001378:	20000f34 	.word	0x20000f34
 800137c:	20000fc8 	.word	0x20000fc8
 8001380:	2000098c 	.word	0x2000098c

08001384 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001384:	b5b0      	push	{r4, r5, r7, lr}
 8001386:	b090      	sub	sp, #64	; 0x40
 8001388:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800138a:	f000 ffd6 	bl	800233a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800138e:	f000 f85f 	bl	8001450 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001392:	f000 fa7f 	bl	8001894 <_ZL12MX_GPIO_Initv>
	MX_USART3_UART_Init();
 8001396:	f000 fa17 	bl	80017c8 <_ZL19MX_USART3_UART_Initv>
	MX_USB_OTG_FS_PCD_Init();
 800139a:	f000 fa49 	bl	8001830 <_ZL22MX_USB_OTG_FS_PCD_Initv>
	MX_I2C1_Init();
 800139e:	f000 f8d7 	bl	8001550 <_ZL12MX_I2C1_Initv>
	MX_TIM2_Init();
 80013a2:	f000 f923 	bl	80015ec <_ZL12MX_TIM2_Initv>
	MX_TIM3_Init();
 80013a6:	f000 f9b1 	bl	800170c <_ZL12MX_TIM3_Initv>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 80013aa:	4821      	ldr	r0, [pc, #132]	; (8001430 <main+0xac>)
 80013ac:	f003 fcc0 	bl	8004d30 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80013b0:	2100      	movs	r1, #0
 80013b2:	4820      	ldr	r0, [pc, #128]	; (8001434 <main+0xb0>)
 80013b4:	f003 fd8e 	bl	8004ed4 <HAL_TIM_PWM_Start>
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* USER CODE BEGIN RTOS_TIMERS */

	 osTimerDef(Send_data, Send_data_via_UART);
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <main+0xb4>)
 80013ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80013bc:	2300      	movs	r3, #0
 80013be:	63fb      	str	r3, [r7, #60]	; 0x3c
	 Send_dataHandle = osTimerCreate(osTimer(Send_data), osTimerPeriodic, NULL);
 80013c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013c4:	2200      	movs	r2, #0
 80013c6:	2101      	movs	r1, #1
 80013c8:	4618      	mov	r0, r3
 80013ca:	f006 fc1b 	bl	8007c04 <osTimerCreate>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a1a      	ldr	r2, [pc, #104]	; (800143c <main+0xb8>)
 80013d2:	6013      	str	r3, [r2, #0]
	 osTimerStart(Send_dataHandle, 1000);
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <main+0xb8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013dc:	4618      	mov	r0, r3
 80013de:	f006 fc45 	bl	8007c6c <osTimerStart>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Motors */
	  osThreadDef(Motors, Motors_control_method, osPriorityHigh, 0, 128);
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <main+0xbc>)
 80013e4:	f107 041c 	add.w	r4, r7, #28
 80013e8:	461d      	mov	r5, r3
 80013ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  MotorsHandle = osThreadCreate(osThread(Motors), NULL);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f006 fba0 	bl	8007b42 <osThreadCreate>
 8001402:	4603      	mov	r3, r0
 8001404:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <main+0xc0>)
 8001406:	6013      	str	r3, [r2, #0]

	  /* definition and creation of Sensors */
	  osThreadDef(Sensors, Sensor_reading_method, osPriorityNormal, 0, 128);
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <main+0xc4>)
 800140a:	463c      	mov	r4, r7
 800140c:	461d      	mov	r5, r3
 800140e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001412:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001416:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  SensorsHandle = osThreadCreate(osThread(Sensors), NULL);
 800141a:	463b      	mov	r3, r7
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f006 fb8f 	bl	8007b42 <osThreadCreate>
 8001424:	4603      	mov	r3, r0
 8001426:	4a09      	ldr	r2, [pc, #36]	; (800144c <main+0xc8>)
 8001428:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800142a:	f006 fb83 	bl	8007b34 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800142e:	e7fe      	b.n	800142e <main+0xaa>
 8001430:	20000940 	.word	0x20000940
 8001434:	200008f4 	.word	0x200008f4
 8001438:	08001bd9 	.word	0x08001bd9
 800143c:	20000e1c 	.word	0x20000e1c
 8001440:	0800f120 	.word	0x0800f120
 8001444:	20000e14 	.word	0x20000e14
 8001448:	0800f13c 	.word	0x0800f13c
 800144c:	20000e18 	.word	0x20000e18

08001450 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b094      	sub	sp, #80	; 0x50
 8001454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	2234      	movs	r2, #52	; 0x34
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f009 fae8 	bl	800aa34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001474:	f002 faa8 	bl	80039c8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001478:	4b33      	ldr	r3, [pc, #204]	; (8001548 <_Z18SystemClock_Configv+0xf8>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	4a32      	ldr	r2, [pc, #200]	; (8001548 <_Z18SystemClock_Configv+0xf8>)
 800147e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001482:	6413      	str	r3, [r2, #64]	; 0x40
 8001484:	4b30      	ldr	r3, [pc, #192]	; (8001548 <_Z18SystemClock_Configv+0xf8>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001490:	4b2e      	ldr	r3, [pc, #184]	; (800154c <_Z18SystemClock_Configv+0xfc>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001498:	4a2c      	ldr	r2, [pc, #176]	; (800154c <_Z18SystemClock_Configv+0xfc>)
 800149a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <_Z18SystemClock_Configv+0xfc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ac:	2301      	movs	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b6:	2302      	movs	r3, #2
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014c0:	2304      	movs	r3, #4
 80014c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80014c4:	2360      	movs	r3, #96	; 0x60
 80014c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014cc:	2304      	movs	r3, #4
 80014ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014d0:	2302      	movs	r3, #2
 80014d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 fad5 	bl	8003a88 <HAL_RCC_OscConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bf14      	ite	ne
 80014e4:	2301      	movne	r3, #1
 80014e6:	2300      	moveq	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80014ee:	f000 fbc5 	bl	8001c7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014f2:	f002 fa79 	bl	80039e8 <HAL_PWREx_EnableOverDrive>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	bf14      	ite	ne
 80014fc:	2301      	movne	r3, #1
 80014fe:	2300      	moveq	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8001506:	f000 fbb9 	bl	8001c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150a:	230f      	movs	r3, #15
 800150c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150e:	2302      	movs	r3, #2
 8001510:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	2103      	movs	r1, #3
 8001526:	4618      	mov	r0, r3
 8001528:	f002 fd5c 	bl	8003fe4 <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	bf14      	ite	ne
 8001532:	2301      	movne	r3, #1
 8001534:	2300      	moveq	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <_Z18SystemClock_Configv+0xf0>
  {
    Error_Handler();
 800153c:	f000 fb9e 	bl	8001c7c <Error_Handler>
  }
}
 8001540:	bf00      	nop
 8001542:	3750      	adds	r7, #80	; 0x50
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40023800 	.word	0x40023800
 800154c:	40007000 	.word	0x40007000

08001550 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001554:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <_ZL12MX_I2C1_Initv+0x90>)
 8001556:	4a23      	ldr	r2, [pc, #140]	; (80015e4 <_ZL12MX_I2C1_Initv+0x94>)
 8001558:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <_ZL12MX_I2C1_Initv+0x90>)
 800155c:	4a22      	ldr	r2, [pc, #136]	; (80015e8 <_ZL12MX_I2C1_Initv+0x98>)
 800155e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <_ZL12MX_I2C1_Initv+0x90>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001566:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <_ZL12MX_I2C1_Initv+0x90>)
 8001568:	2201      	movs	r2, #1
 800156a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800156c:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <_ZL12MX_I2C1_Initv+0x90>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <_ZL12MX_I2C1_Initv+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <_ZL12MX_I2C1_Initv+0x90>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <_ZL12MX_I2C1_Initv+0x90>)
 8001580:	2200      	movs	r2, #0
 8001582:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <_ZL12MX_I2C1_Initv+0x90>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800158a:	4815      	ldr	r0, [pc, #84]	; (80015e0 <_ZL12MX_I2C1_Initv+0x90>)
 800158c:	f001 fad8 	bl	8002b40 <HAL_I2C_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	bf14      	ite	ne
 8001596:	2301      	movne	r3, #1
 8001598:	2300      	moveq	r3, #0
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80015a0:	f000 fb6c 	bl	8001c7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015a4:	2100      	movs	r1, #0
 80015a6:	480e      	ldr	r0, [pc, #56]	; (80015e0 <_ZL12MX_I2C1_Initv+0x90>)
 80015a8:	f002 f82e 	bl	8003608 <HAL_I2CEx_ConfigAnalogFilter>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	bf14      	ite	ne
 80015b2:	2301      	movne	r3, #1
 80015b4:	2300      	moveq	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80015bc:	f000 fb5e 	bl	8001c7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015c0:	2100      	movs	r1, #0
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <_ZL12MX_I2C1_Initv+0x90>)
 80015c4:	f002 f86b 	bl	800369e <HAL_I2CEx_ConfigDigitalFilter>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bf14      	ite	ne
 80015ce:	2301      	movne	r3, #1
 80015d0:	2300      	moveq	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80015d8:	f000 fb50 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200008a8 	.word	0x200008a8
 80015e4:	40005400 	.word	0x40005400
 80015e8:	20303e5d 	.word	0x20303e5d

080015ec <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08e      	sub	sp, #56	; 0x38
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800160c:	463b      	mov	r3, r7
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
 800161a:	615a      	str	r2, [r3, #20]
 800161c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800161e:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <_ZL12MX_TIM2_Initv+0x11c>)
 8001620:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001624:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9600;
 8001626:	4b38      	ldr	r3, [pc, #224]	; (8001708 <_ZL12MX_TIM2_Initv+0x11c>)
 8001628:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800162c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b36      	ldr	r3, [pc, #216]	; (8001708 <_ZL12MX_TIM2_Initv+0x11c>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001634:	4b34      	ldr	r3, [pc, #208]	; (8001708 <_ZL12MX_TIM2_Initv+0x11c>)
 8001636:	f240 32e7 	movw	r2, #999	; 0x3e7
 800163a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163c:	4b32      	ldr	r3, [pc, #200]	; (8001708 <_ZL12MX_TIM2_Initv+0x11c>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001642:	4b31      	ldr	r3, [pc, #196]	; (8001708 <_ZL12MX_TIM2_Initv+0x11c>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001648:	482f      	ldr	r0, [pc, #188]	; (8001708 <_ZL12MX_TIM2_Initv+0x11c>)
 800164a:	f003 fb19 	bl	8004c80 <HAL_TIM_Base_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf14      	ite	ne
 8001654:	2301      	movne	r3, #1
 8001656:	2300      	moveq	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <_ZL12MX_TIM2_Initv+0x76>
  {
    Error_Handler();
 800165e:	f000 fb0d 	bl	8001c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001668:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166c:	4619      	mov	r1, r3
 800166e:	4826      	ldr	r0, [pc, #152]	; (8001708 <_ZL12MX_TIM2_Initv+0x11c>)
 8001670:	f003 ff5e 	bl	8005530 <HAL_TIM_ConfigClockSource>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	bf14      	ite	ne
 800167a:	2301      	movne	r3, #1
 800167c:	2300      	moveq	r3, #0
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <_ZL12MX_TIM2_Initv+0x9c>
  {
    Error_Handler();
 8001684:	f000 fafa 	bl	8001c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001688:	481f      	ldr	r0, [pc, #124]	; (8001708 <_ZL12MX_TIM2_Initv+0x11c>)
 800168a:	f003 fbc1 	bl	8004e10 <HAL_TIM_PWM_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	bf14      	ite	ne
 8001694:	2301      	movne	r3, #1
 8001696:	2300      	moveq	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <_ZL12MX_TIM2_Initv+0xb6>
  {
    Error_Handler();
 800169e:	f000 faed 	bl	8001c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	4815      	ldr	r0, [pc, #84]	; (8001708 <_ZL12MX_TIM2_Initv+0x11c>)
 80016b2:	f004 fbf7 	bl	8005ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf14      	ite	ne
 80016bc:	2301      	movne	r3, #1
 80016be:	2300      	moveq	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <_ZL12MX_TIM2_Initv+0xde>
  {
    Error_Handler();
 80016c6:	f000 fad9 	bl	8001c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ca:	2360      	movs	r3, #96	; 0x60
 80016cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016da:	463b      	mov	r3, r7
 80016dc:	2200      	movs	r2, #0
 80016de:	4619      	mov	r1, r3
 80016e0:	4809      	ldr	r0, [pc, #36]	; (8001708 <_ZL12MX_TIM2_Initv+0x11c>)
 80016e2:	f003 fe11 	bl	8005308 <HAL_TIM_PWM_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	bf14      	ite	ne
 80016ec:	2301      	movne	r3, #1
 80016ee:	2300      	moveq	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 80016f6:	f000 fac1 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016fa:	4803      	ldr	r0, [pc, #12]	; (8001708 <_ZL12MX_TIM2_Initv+0x11c>)
 80016fc:	f000 fbb4 	bl	8001e68 <HAL_TIM_MspPostInit>

}
 8001700:	bf00      	nop
 8001702:	3738      	adds	r7, #56	; 0x38
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200008f4 	.word	0x200008f4

0800170c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800172a:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <_ZL12MX_TIM3_Initv+0xb4>)
 800172c:	4a25      	ldr	r2, [pc, #148]	; (80017c4 <_ZL12MX_TIM3_Initv+0xb8>)
 800172e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001730:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <_ZL12MX_TIM3_Initv+0xb4>)
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <_ZL12MX_TIM3_Initv+0xb4>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <_ZL12MX_TIM3_Initv+0xb4>)
 800173e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001742:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <_ZL12MX_TIM3_Initv+0xb4>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <_ZL12MX_TIM3_Initv+0xb4>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001750:	481b      	ldr	r0, [pc, #108]	; (80017c0 <_ZL12MX_TIM3_Initv+0xb4>)
 8001752:	f003 fa95 	bl	8004c80 <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf14      	ite	ne
 800175c:	2301      	movne	r3, #1
 800175e:	2300      	moveq	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 8001766:	f000 fa89 	bl	8001c7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4619      	mov	r1, r3
 8001776:	4812      	ldr	r0, [pc, #72]	; (80017c0 <_ZL12MX_TIM3_Initv+0xb4>)
 8001778:	f003 feda 	bl	8005530 <HAL_TIM_ConfigClockSource>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf14      	ite	ne
 8001782:	2301      	movne	r3, #1
 8001784:	2300      	moveq	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 800178c:	f000 fa76 	bl	8001c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	4619      	mov	r1, r3
 800179c:	4808      	ldr	r0, [pc, #32]	; (80017c0 <_ZL12MX_TIM3_Initv+0xb4>)
 800179e:	f004 fb81 	bl	8005ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 80017b2:	f000 fa63 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000940 	.word	0x20000940
 80017c4:	40000400 	.word	0x40000400

080017c8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <_ZL19MX_USART3_UART_Initv+0x60>)
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <_ZL19MX_USART3_UART_Initv+0x64>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <_ZL19MX_USART3_UART_Initv+0x60>)
 80017d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <_ZL19MX_USART3_UART_Initv+0x60>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <_ZL19MX_USART3_UART_Initv+0x60>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <_ZL19MX_USART3_UART_Initv+0x60>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <_ZL19MX_USART3_UART_Initv+0x60>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <_ZL19MX_USART3_UART_Initv+0x60>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <_ZL19MX_USART3_UART_Initv+0x60>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800180a:	4807      	ldr	r0, [pc, #28]	; (8001828 <_ZL19MX_USART3_UART_Initv+0x60>)
 800180c:	f004 fbf6 	bl	8005ffc <HAL_UART_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	bf14      	ite	ne
 8001816:	2301      	movne	r3, #1
 8001818:	2300      	moveq	r3, #0
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 8001820:	f000 fa2c 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2000098c 	.word	0x2000098c
 800182c:	40004800 	.word	0x40004800

08001830 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001834:	4b16      	ldr	r3, [pc, #88]	; (8001890 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001836:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800183a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800183e:	2206      	movs	r2, #6
 8001840:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001844:	2202      	movs	r2, #2
 8001846:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001850:	2202      	movs	r2, #2
 8001852:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001856:	2201      	movs	r2, #1
 8001858:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001862:	2200      	movs	r2, #0
 8001864:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001868:	2201      	movs	r2, #1
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800186e:	2200      	movs	r2, #0
 8001870:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001872:	4807      	ldr	r0, [pc, #28]	; (8001890 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001874:	f001 ff5f 	bl	8003736 <HAL_PCD_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	bf14      	ite	ne
 800187e:	2301      	movne	r3, #1
 8001880:	2300      	moveq	r3, #0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 8001888:	f000 f9f8 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000a10 	.word	0x20000a10

08001894 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	; 0x30
 8001898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	4b96      	ldr	r3, [pc, #600]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a95      	ldr	r2, [pc, #596]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b93      	ldr	r3, [pc, #588]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018c2:	4b90      	ldr	r3, [pc, #576]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a8f      	ldr	r2, [pc, #572]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 80018c8:	f043 0320 	orr.w	r3, r3, #32
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b8d      	ldr	r3, [pc, #564]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0320 	and.w	r3, r3, #32
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018da:	4b8a      	ldr	r3, [pc, #552]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a89      	ldr	r2, [pc, #548]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 80018e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b87      	ldr	r3, [pc, #540]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	4b84      	ldr	r3, [pc, #528]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a83      	ldr	r2, [pc, #524]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b81      	ldr	r3, [pc, #516]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	4b7e      	ldr	r3, [pc, #504]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a7d      	ldr	r2, [pc, #500]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b7b      	ldr	r3, [pc, #492]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001922:	4b78      	ldr	r3, [pc, #480]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a77      	ldr	r2, [pc, #476]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 8001928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b75      	ldr	r3, [pc, #468]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800193a:	4b72      	ldr	r3, [pc, #456]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a71      	ldr	r2, [pc, #452]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b6f      	ldr	r3, [pc, #444]	; (8001b04 <_ZL12MX_GPIO_Initv+0x270>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SM2_INIT_SEQUENCE_Pin|SM2_DIR_Pin|SM2_STEP_Pin, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	f240 4105 	movw	r1, #1029	; 0x405
 8001958:	486b      	ldr	r0, [pc, #428]	; (8001b08 <_ZL12MX_GPIO_Initv+0x274>)
 800195a:	f001 f8bf 	bl	8002adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SM1_STEP_Pin|SM1_DIR_Pin, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2109      	movs	r1, #9
 8001962:	486a      	ldr	r0, [pc, #424]	; (8001b0c <_ZL12MX_GPIO_Initv+0x278>)
 8001964:	f001 f8ba 	bl	8002adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	f244 0181 	movw	r1, #16513	; 0x4081
 800196e:	4868      	ldr	r0, [pc, #416]	; (8001b10 <_ZL12MX_GPIO_Initv+0x27c>)
 8001970:	f001 f8b4 	bl	8002adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DC1_ENABLE_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	2141      	movs	r1, #65	; 0x41
 8001978:	4866      	ldr	r0, [pc, #408]	; (8001b14 <_ZL12MX_GPIO_Initv+0x280>)
 800197a:	f001 f8af 	bl	8002adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800197e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001984:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	485d      	ldr	r0, [pc, #372]	; (8001b0c <_ZL12MX_GPIO_Initv+0x278>)
 8001996:	f000 fef5 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : SM2_INIT_SEQUENCE_Pin SM2_DIR_Pin SM2_STEP_Pin */
  GPIO_InitStruct.Pin = SM2_INIT_SEQUENCE_Pin|SM2_DIR_Pin|SM2_STEP_Pin;
 800199a:	f240 4305 	movw	r3, #1029	; 0x405
 800199e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	4855      	ldr	r0, [pc, #340]	; (8001b08 <_ZL12MX_GPIO_Initv+0x274>)
 80019b4:	f000 fee6 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : SM1_INIT_SEQUENCE_Pin */
  GPIO_InitStruct.Pin = SM1_INIT_SEQUENCE_Pin;
 80019b8:	2308      	movs	r3, #8
 80019ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SM1_INIT_SEQUENCE_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	484f      	ldr	r0, [pc, #316]	; (8001b08 <_ZL12MX_GPIO_Initv+0x274>)
 80019cc:	f000 feda 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : SM1_STEP_Pin SM1_DIR_Pin */
  GPIO_InitStruct.Pin = SM1_STEP_Pin|SM1_DIR_Pin;
 80019d0:	2309      	movs	r3, #9
 80019d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	4619      	mov	r1, r3
 80019e6:	4849      	ldr	r0, [pc, #292]	; (8001b0c <_ZL12MX_GPIO_Initv+0x278>)
 80019e8:	f000 fecc 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80019ec:	2332      	movs	r3, #50	; 0x32
 80019ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019fc:	230b      	movs	r3, #11
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	4841      	ldr	r0, [pc, #260]	; (8001b0c <_ZL12MX_GPIO_Initv+0x278>)
 8001a08:	f000 febc 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001a0c:	2386      	movs	r3, #134	; 0x86
 8001a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a1c:	230b      	movs	r3, #11
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	4619      	mov	r1, r3
 8001a26:	483c      	ldr	r0, [pc, #240]	; (8001b18 <_ZL12MX_GPIO_Initv+0x284>)
 8001a28:	f000 feac 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4835      	ldr	r0, [pc, #212]	; (8001b18 <_ZL12MX_GPIO_Initv+0x284>)
 8001a42:	f000 fe9f 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001a46:	f244 0381 	movw	r3, #16513	; 0x4081
 8001a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	482c      	ldr	r0, [pc, #176]	; (8001b10 <_ZL12MX_GPIO_Initv+0x27c>)
 8001a60:	f000 fe90 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC1_ENABLE_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = DC1_ENABLE_Pin|USB_PowerSwitchOn_Pin;
 8001a64:	2341      	movs	r3, #65	; 0x41
 8001a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4826      	ldr	r0, [pc, #152]	; (8001b14 <_ZL12MX_GPIO_Initv+0x280>)
 8001a7c:	f000 fe82 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a92:	230b      	movs	r3, #11
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	481c      	ldr	r0, [pc, #112]	; (8001b10 <_ZL12MX_GPIO_Initv+0x27c>)
 8001a9e:	f000 fe71 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4817      	ldr	r0, [pc, #92]	; (8001b14 <_ZL12MX_GPIO_Initv+0x280>)
 8001ab6:	f000 fe65 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001aba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001acc:	230b      	movs	r3, #11
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	480f      	ldr	r0, [pc, #60]	; (8001b14 <_ZL12MX_GPIO_Initv+0x280>)
 8001ad8:	f000 fe54 	bl	8002784 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2105      	movs	r1, #5
 8001ae0:	2009      	movs	r0, #9
 8001ae2:	f000 fd86 	bl	80025f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001ae6:	2009      	movs	r0, #9
 8001ae8:	f000 fd9f 	bl	800262a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2105      	movs	r1, #5
 8001af0:	2028      	movs	r0, #40	; 0x28
 8001af2:	f000 fd7e 	bl	80025f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001af6:	2028      	movs	r0, #40	; 0x28
 8001af8:	f000 fd97 	bl	800262a <HAL_NVIC_EnableIRQ>

}
 8001afc:	bf00      	nop
 8001afe:	3730      	adds	r7, #48	; 0x30
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40021400 	.word	0x40021400
 8001b0c:	40020800 	.word	0x40020800
 8001b10:	40020400 	.word	0x40020400
 8001b14:	40021800 	.word	0x40021800
 8001b18:	40020000 	.word	0x40020000

08001b1c <_Z21Motors_control_methodPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Motors_control_method */
void Motors_control_method(void const * argument)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
		//		SM1_INIT_SEQUENCE_GPIO_Port, SM1_INIT_SEQUENCE_Pin);

	//SM_2.init(SM2_STEP_GPIO_Port, SM2_STEP_Pin, SM2_DIR_GPIO_Port, SM2_DIR_Pin,
		//			SM2_INIT_SEQUENCE_GPIO_Port, SM2_INIT_SEQUENCE_Pin);

HAL_UART_Receive_IT(&huart3, (uint8_t*) &rx_buffer, 1);
 8001b24:	2201      	movs	r2, #1
 8001b26:	490b      	ldr	r1, [pc, #44]	; (8001b54 <_Z21Motors_control_methodPKv+0x38>)
 8001b28:	480b      	ldr	r0, [pc, #44]	; (8001b58 <_Z21Motors_control_methodPKv+0x3c>)
 8001b2a:	f004 fab5 	bl	8006098 <HAL_UART_Receive_IT>
	  HAL_GPIO_WritePin(DC1_ENABLE_GPIO_Port, DC1_ENABLE_Pin,GPIO_PIN_SET);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	2101      	movs	r1, #1
 8001b32:	480a      	ldr	r0, [pc, #40]	; (8001b5c <_Z21Motors_control_methodPKv+0x40>)
 8001b34:	f000 ffd2 	bl	8002adc <HAL_GPIO_WritePin>
  for(;;)
  {
	  //SM_1.run();
	  //SM_2.run();

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,a);
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <_Z21Motors_control_methodPKv+0x44>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <_Z21Motors_control_methodPKv+0x48>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b46:	ee17 2a90 	vmov	r2, s15
 8001b4a:	635a      	str	r2, [r3, #52]	; 0x34

    osDelay(1);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f006 f844 	bl	8007bda <osDelay>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,a);
 8001b52:	e7f1      	b.n	8001b38 <_Z21Motors_control_methodPKv+0x1c>
 8001b54:	20000fc0 	.word	0x20000fc0
 8001b58:	2000098c 	.word	0x2000098c
 8001b5c:	40021800 	.word	0x40021800
 8001b60:	20000fc8 	.word	0x20000fc8
 8001b64:	200008f4 	.word	0x200008f4

08001b68 <_Z21Sensor_reading_methodPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensor_reading_method */
void Sensor_reading_method(void const * argument)
{
 8001b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b6a:	b095      	sub	sp, #84	; 0x54
 8001b6c:	af12      	add	r7, sp, #72	; 0x48
 8001b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensor_reading_method */
	IMU_1.init(hi2c1, IMU_1.device_DS33, IMU_1.sa0_high);
 8001b70:	4e14      	ldr	r6, [pc, #80]	; (8001bc4 <_Z21Sensor_reading_methodPKv+0x5c>)
 8001b72:	2301      	movs	r3, #1
 8001b74:	9311      	str	r3, [sp, #68]	; 0x44
 8001b76:	2300      	movs	r3, #0
 8001b78:	9310      	str	r3, [sp, #64]	; 0x40
 8001b7a:	466d      	mov	r5, sp
 8001b7c:	f106 040c 	add.w	r4, r6, #12
 8001b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b90:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001b94:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001b98:	480b      	ldr	r0, [pc, #44]	; (8001bc8 <_Z21Sensor_reading_methodPKv+0x60>)
 8001b9a:	f7ff f911 	bl	8000dc0 <_ZN4LSM64initE19__I2C_HandleTypeDefNS_10deviceTypeENS_8sa0StateE>
	DHT22_1.init(&htim3, 96, DHT22_GPIO_Port, DHT22_Pin);
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <_Z21Sensor_reading_methodPKv+0x64>)
 8001ba4:	2260      	movs	r2, #96	; 0x60
 8001ba6:	490a      	ldr	r1, [pc, #40]	; (8001bd0 <_Z21Sensor_reading_methodPKv+0x68>)
 8001ba8:	480a      	ldr	r0, [pc, #40]	; (8001bd4 <_Z21Sensor_reading_methodPKv+0x6c>)
 8001baa:	f7ff f824 	bl	8000bf6 <_ZN5DHT224initEP17TIM_HandleTypeDeftP12GPIO_TypeDeft>
  /* Infinite loop */
  for(;;)
  {
	  IMU_1.read();
 8001bae:	4806      	ldr	r0, [pc, #24]	; (8001bc8 <_Z21Sensor_reading_methodPKv+0x60>)
 8001bb0:	f7ff fa3c 	bl	800102c <_ZN4LSM64readEv>
	  	DHT22_1.read();
 8001bb4:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <_Z21Sensor_reading_methodPKv+0x6c>)
 8001bb6:	f7ff f863 	bl	8000c80 <_ZN5DHT224readEv>
    osDelay(1);
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f006 f80d 	bl	8007bda <osDelay>
	  IMU_1.read();
 8001bc0:	e7f5      	b.n	8001bae <_Z21Sensor_reading_methodPKv+0x46>
 8001bc2:	bf00      	nop
 8001bc4:	200008a8 	.word	0x200008a8
 8001bc8:	20000e20 	.word	0x20000e20
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	20000940 	.word	0x20000940
 8001bd4:	20000e98 	.word	0x20000e98

08001bd8 <_Z18Send_data_via_UARTPKv>:
  /* USER CODE END Sensor_reading_method */
}

/* Send_data_via_UART function */
void Send_data_via_UART(void const * argument)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b090      	sub	sp, #64	; 0x40
 8001bdc:	af0e      	add	r7, sp, #56	; 0x38
 8001bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Send_data_via_UART */
	n = sprintf(tx_buffer, "[[%1.f,%1.f],[%0.1f,%0.1f,%0.1f,%0.1f,%0.1f,%0.1f]]",
			DHT22_1.temperature, DHT22_1.humidity,
 8001be0:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <_Z18Send_data_via_UARTPKv+0x90>)
 8001be2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
	n = sprintf(tx_buffer, "[[%1.f,%1.f],[%0.1f,%0.1f,%0.1f,%0.1f,%0.1f,%0.1f]]",
 8001be6:	eeb7 0ae7 	vcvt.f64.f32	d0, s15
			DHT22_1.temperature, DHT22_1.humidity,
 8001bea:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <_Z18Send_data_via_UARTPKv+0x90>)
 8001bec:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
	n = sprintf(tx_buffer, "[[%1.f,%1.f],[%0.1f,%0.1f,%0.1f,%0.1f,%0.1f,%0.1f]]",
 8001bf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			IMU_1.g_scaled.x, IMU_1.g_scaled.y, IMU_1.g_scaled.z,
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <_Z18Send_data_via_UARTPKv+0x94>)
 8001bf6:	edd3 6a06 	vldr	s13, [r3, #24]
	n = sprintf(tx_buffer, "[[%1.f,%1.f],[%0.1f,%0.1f,%0.1f,%0.1f,%0.1f,%0.1f]]",
 8001bfa:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			IMU_1.g_scaled.x, IMU_1.g_scaled.y, IMU_1.g_scaled.z,
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <_Z18Send_data_via_UARTPKv+0x94>)
 8001c00:	edd3 5a07 	vldr	s11, [r3, #28]
	n = sprintf(tx_buffer, "[[%1.f,%1.f],[%0.1f,%0.1f,%0.1f,%0.1f,%0.1f,%0.1f]]",
 8001c04:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			IMU_1.g_scaled.x, IMU_1.g_scaled.y, IMU_1.g_scaled.z,
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <_Z18Send_data_via_UARTPKv+0x94>)
 8001c0a:	edd3 4a08 	vldr	s9, [r3, #32]
	n = sprintf(tx_buffer, "[[%1.f,%1.f],[%0.1f,%0.1f,%0.1f,%0.1f,%0.1f,%0.1f]]",
 8001c0e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			IMU_1.a_scaled.x, IMU_1.a_scaled.y, IMU_1.a_scaled.z);
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <_Z18Send_data_via_UARTPKv+0x94>)
 8001c14:	edd3 3a03 	vldr	s7, [r3, #12]
	n = sprintf(tx_buffer, "[[%1.f,%1.f],[%0.1f,%0.1f,%0.1f,%0.1f,%0.1f,%0.1f]]",
 8001c18:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
			IMU_1.a_scaled.x, IMU_1.a_scaled.y, IMU_1.a_scaled.z);
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <_Z18Send_data_via_UARTPKv+0x94>)
 8001c1e:	edd3 2a04 	vldr	s5, [r3, #16]
	n = sprintf(tx_buffer, "[[%1.f,%1.f],[%0.1f,%0.1f,%0.1f,%0.1f,%0.1f,%0.1f]]",
 8001c22:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
			IMU_1.a_scaled.x, IMU_1.a_scaled.y, IMU_1.a_scaled.z);
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <_Z18Send_data_via_UARTPKv+0x94>)
 8001c28:	edd3 1a05 	vldr	s3, [r3, #20]
	n = sprintf(tx_buffer, "[[%1.f,%1.f],[%0.1f,%0.1f,%0.1f,%0.1f,%0.1f,%0.1f]]",
 8001c2c:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8001c30:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 8001c34:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 8001c38:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001c3c:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001c40:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001c44:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001c48:	ed8d 7b00 	vstr	d7, [sp]
 8001c4c:	ec53 2b10 	vmov	r2, r3, d0
 8001c50:	4907      	ldr	r1, [pc, #28]	; (8001c70 <_Z18Send_data_via_UARTPKv+0x98>)
 8001c52:	4808      	ldr	r0, [pc, #32]	; (8001c74 <_Z18Send_data_via_UARTPKv+0x9c>)
 8001c54:	f009 fd46 	bl	800b6e4 <siprintf>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <_Z18Send_data_via_UARTPKv+0xa0>)
 8001c5c:	6013      	str	r3, [r2, #0]
	//HAL_UART_Transmit(&huart3, (uint8_t*) tx_buffer, n, 1000);
  /* USER CODE END Send_data_via_UART */
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000e98 	.word	0x20000e98
 8001c6c:	20000e20 	.word	0x20000e20
 8001c70:	0800f158 	.word	0x0800f158
 8001c74:	20000f5c 	.word	0x20000f5c
 8001c78:	20000fc4 	.word	0x20000fc4

08001c7c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c80:	b672      	cpsid	i
}
 8001c82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c84:	e7fe      	b.n	8001c84 <Error_Handler+0x8>
	...

08001c88 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d10d      	bne.n	8001cb4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d108      	bne.n	8001cb4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
LSM6 IMU_1;
 8001ca2:	4806      	ldr	r0, [pc, #24]	; (8001cbc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001ca4:	f7ff f876 	bl	8000d94 <_ZN4LSM6C1Ev>
Step_Motor SM_1;
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001caa:	f7ff fb03 	bl	80012b4 <_ZN10Step_MotorC1Ev>
Step_Motor SM_2;
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001cb0:	f7ff fb00 	bl	80012b4 <_ZN10Step_MotorC1Ev>
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000e20 	.word	0x20000e20
 8001cc0:	20000f0c 	.word	0x20000f0c
 8001cc4:	20000f34 	.word	0x20000f34

08001cc8 <_GLOBAL__sub_I_hi2c1>:
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f7ff ffd9 	bl	8001c88 <_Z41__static_initialization_and_destruction_0ii>
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_MspInit+0x4c>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <HAL_MspInit+0x4c>)
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <HAL_MspInit+0x4c>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <HAL_MspInit+0x4c>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <HAL_MspInit+0x4c>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	210f      	movs	r1, #15
 8001d12:	f06f 0001 	mvn.w	r0, #1
 8001d16:	f000 fc6c 	bl	80025f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800

08001d28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0ae      	sub	sp, #184	; 0xb8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	2290      	movs	r2, #144	; 0x90
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f008 fe73 	bl	800aa34 <memset>
  if(hi2c->Instance==I2C1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a22      	ldr	r2, [pc, #136]	; (8001ddc <HAL_I2C_MspInit+0xb4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d13c      	bne.n	8001dd2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d5c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 fb62 	bl	8004430 <HAL_RCCEx_PeriphCLKConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d72:	f7ff ff83 	bl	8001c7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_I2C_MspInit+0xb8>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_I2C_MspInit+0xb8>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <HAL_I2C_MspInit+0xb8>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d96:	2312      	movs	r3, #18
 8001d98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001da8:	2304      	movs	r3, #4
 8001daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001db2:	4619      	mov	r1, r3
 8001db4:	480b      	ldr	r0, [pc, #44]	; (8001de4 <HAL_I2C_MspInit+0xbc>)
 8001db6:	f000 fce5 	bl	8002784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_I2C_MspInit+0xb8>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a08      	ldr	r2, [pc, #32]	; (8001de0 <HAL_I2C_MspInit+0xb8>)
 8001dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_I2C_MspInit+0xb8>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dd2:	bf00      	nop
 8001dd4:	37b8      	adds	r7, #184	; 0xb8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40005400 	.word	0x40005400
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020400 	.word	0x40020400

08001de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df8:	d114      	bne.n	8001e24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_TIM_Base_MspInit+0x78>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <HAL_TIM_Base_MspInit+0x78>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_TIM_Base_MspInit+0x78>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2105      	movs	r1, #5
 8001e16:	201c      	movs	r0, #28
 8001e18:	f000 fbeb 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e1c:	201c      	movs	r0, #28
 8001e1e:	f000 fc04 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e22:	e018      	b.n	8001e56 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <HAL_TIM_Base_MspInit+0x7c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d113      	bne.n	8001e56 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_TIM_Base_MspInit+0x78>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <HAL_TIM_Base_MspInit+0x78>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_TIM_Base_MspInit+0x78>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2105      	movs	r1, #5
 8001e4a:	201d      	movs	r0, #29
 8001e4c:	f000 fbd1 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e50:	201d      	movs	r0, #29
 8001e52:	f000 fbea 	bl	800262a <HAL_NVIC_EnableIRQ>
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40000400 	.word	0x40000400

08001e68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 030c 	add.w	r3, r7, #12
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e88:	d11b      	bne.n	8001ec2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_TIM_MspPostInit+0x64>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <HAL_TIM_MspPostInit+0x64>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_TIM_MspPostInit+0x64>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <HAL_TIM_MspPostInit+0x68>)
 8001ebe:	f000 fc61 	bl	8002784 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ec2:	bf00      	nop
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b0ae      	sub	sp, #184	; 0xb8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2290      	movs	r2, #144	; 0x90
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f008 fd9d 	bl	800aa34 <memset>
  if(huart->Instance==USART3)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a26      	ldr	r2, [pc, #152]	; (8001f98 <HAL_UART_MspInit+0xc4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d144      	bne.n	8001f8e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f08:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 fa8c 	bl	8004430 <HAL_RCCEx_PeriphCLKConfig>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f1e:	f7ff fead 	bl	8001c7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f22:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_UART_MspInit+0xc8>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <HAL_UART_MspInit+0xc8>)
 8001f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_UART_MspInit+0xc8>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_UART_MspInit+0xc8>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <HAL_UART_MspInit+0xc8>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_UART_MspInit+0xc8>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f6c:	2307      	movs	r3, #7
 8001f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f76:	4619      	mov	r1, r3
 8001f78:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <HAL_UART_MspInit+0xcc>)
 8001f7a:	f000 fc03 	bl	8002784 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2105      	movs	r1, #5
 8001f82:	2027      	movs	r0, #39	; 0x27
 8001f84:	f000 fb35 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f88:	2027      	movs	r0, #39	; 0x27
 8001f8a:	f000 fb4e 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f8e:	bf00      	nop
 8001f90:	37b8      	adds	r7, #184	; 0xb8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40004800 	.word	0x40004800
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020c00 	.word	0x40020c00

08001fa4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b0ae      	sub	sp, #184	; 0xb8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	2290      	movs	r2, #144	; 0x90
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f008 fd35 	bl	800aa34 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fd2:	d159      	bne.n	8002088 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001fd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fd8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f002 fa23 	bl	8004430 <HAL_RCCEx_PeriphCLKConfig>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001ff0:	f7ff fe44 	bl	8001c7c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff4:	4b26      	ldr	r3, [pc, #152]	; (8002090 <HAL_PCD_MspInit+0xec>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	4a25      	ldr	r2, [pc, #148]	; (8002090 <HAL_PCD_MspInit+0xec>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8002000:	4b23      	ldr	r3, [pc, #140]	; (8002090 <HAL_PCD_MspInit+0xec>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800200c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002010:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002026:	230a      	movs	r3, #10
 8002028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002030:	4619      	mov	r1, r3
 8002032:	4818      	ldr	r0, [pc, #96]	; (8002094 <HAL_PCD_MspInit+0xf0>)
 8002034:	f000 fba6 	bl	8002784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800203c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002040:	2300      	movs	r3, #0
 8002042:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800204c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002050:	4619      	mov	r1, r3
 8002052:	4810      	ldr	r0, [pc, #64]	; (8002094 <HAL_PCD_MspInit+0xf0>)
 8002054:	f000 fb96 	bl	8002784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <HAL_PCD_MspInit+0xec>)
 800205a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205c:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <HAL_PCD_MspInit+0xec>)
 800205e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002062:	6353      	str	r3, [r2, #52]	; 0x34
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_PCD_MspInit+0xec>)
 8002066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4b07      	ldr	r3, [pc, #28]	; (8002090 <HAL_PCD_MspInit+0xec>)
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	4a06      	ldr	r2, [pc, #24]	; (8002090 <HAL_PCD_MspInit+0xec>)
 8002076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800207a:	6453      	str	r3, [r2, #68]	; 0x44
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <HAL_PCD_MspInit+0xec>)
 800207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002088:	bf00      	nop
 800208a:	37b8      	adds	r7, #184	; 0xb8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40023800 	.word	0x40023800
 8002094:	40020000 	.word	0x40020000

08002098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800209c:	e7fe      	b.n	800209c <NMI_Handler+0x4>

0800209e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <HardFault_Handler+0x4>

080020a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <MemManage_Handler+0x4>

080020aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <BusFault_Handler+0x4>

080020b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <UsageFault_Handler+0x4>

080020b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c8:	f000 f974 	bl	80023b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80020cc:	f007 f9f4 	bl	80094b8 <xTaskGetSchedulerState>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d001      	beq.n	80020da <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80020d6:	f008 f87f 	bl	800a1d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}

080020de <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DHT22_Pin);
 80020e2:	2008      	movs	r0, #8
 80020e4:	f000 fd14 	bl	8002b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <TIM2_IRQHandler+0x10>)
 80020f2:	f002 ffe9 	bl	80050c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200008f4 	.word	0x200008f4

08002100 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <TIM3_IRQHandler+0x10>)
 8002106:	f002 ffdf 	bl	80050c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000940 	.word	0x20000940

08002114 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <USART3_IRQHandler+0x10>)
 800211a:	f004 f80b 	bl	8006134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	2000098c 	.word	0x2000098c

08002128 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800212c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002130:	f000 fcee 	bl	8002b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
	return 1;
 800213c:	2301      	movs	r3, #1
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_kill>:

int _kill(int pid, int sig)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002152:	f008 fc37 	bl	800a9c4 <__errno>
 8002156:	4603      	mov	r3, r0
 8002158:	2216      	movs	r2, #22
 800215a:	601a      	str	r2, [r3, #0]
	return -1;
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <_exit>:

void _exit (int status)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ffe7 	bl	8002148 <_kill>
	while (1) {}		/* Make sure we hang here */
 800217a:	e7fe      	b.n	800217a <_exit+0x12>

0800217c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	e00a      	b.n	80021a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800218e:	f3af 8000 	nop.w
 8002192:	4601      	mov	r1, r0
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	60ba      	str	r2, [r7, #8]
 800219a:	b2ca      	uxtb	r2, r1
 800219c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3301      	adds	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	dbf0      	blt.n	800218e <_read+0x12>
	}

return len;
 80021ac:	687b      	ldr	r3, [r7, #4]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	e009      	b.n	80021dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	60ba      	str	r2, [r7, #8]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	3301      	adds	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	dbf1      	blt.n	80021c8 <_write+0x12>
	}
	return len;
 80021e4:	687b      	ldr	r3, [r7, #4]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <_close>:

int _close(int file)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
	return -1;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002216:	605a      	str	r2, [r3, #4]
	return 0;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <_isatty>:

int _isatty(int file)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
	return 1;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
	return 0;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002260:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <_sbrk+0x5c>)
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <_sbrk+0x60>)
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <_sbrk+0x64>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <_sbrk+0x64>)
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <_sbrk+0x68>)
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <_sbrk+0x64>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4413      	add	r3, r2
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	429a      	cmp	r2, r3
 8002286:	d207      	bcs.n	8002298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002288:	f008 fb9c 	bl	800a9c4 <__errno>
 800228c:	4603      	mov	r3, r0
 800228e:	220c      	movs	r2, #12
 8002290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	e009      	b.n	80022ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <_sbrk+0x64>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a05      	ldr	r2, [pc, #20]	; (80022bc <_sbrk+0x64>)
 80022a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022aa:	68fb      	ldr	r3, [r7, #12]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20080000 	.word	0x20080000
 80022b8:	00000400 	.word	0x00000400
 80022bc:	20000fcc 	.word	0x20000fcc
 80022c0:	20004e70 	.word	0x20004e70

080022c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <SystemInit+0x20>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <SystemInit+0x20>)
 80022d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002320 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022ee:	490e      	ldr	r1, [pc, #56]	; (8002328 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022f0:	4a0e      	ldr	r2, [pc, #56]	; (800232c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f4:	e002      	b.n	80022fc <LoopCopyDataInit>

080022f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fa:	3304      	adds	r3, #4

080022fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002300:	d3f9      	bcc.n	80022f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002302:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002304:	4c0b      	ldr	r4, [pc, #44]	; (8002334 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002308:	e001      	b.n	800230e <LoopFillZerobss>

0800230a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800230c:	3204      	adds	r2, #4

0800230e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002310:	d3fb      	bcc.n	800230a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002312:	f7ff ffd7 	bl	80022c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002316:	f008 fb5b 	bl	800a9d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800231a:	f7ff f833 	bl	8001384 <main>
  bx  lr    
 800231e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002320:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002328:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800232c:	0800f6b0 	.word	0x0800f6b0
  ldr r2, =_sbss
 8002330:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002334:	20004e6c 	.word	0x20004e6c

08002338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002338:	e7fe      	b.n	8002338 <ADC_IRQHandler>

0800233a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800233e:	2003      	movs	r0, #3
 8002340:	f000 f94c 	bl	80025dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002344:	200f      	movs	r0, #15
 8002346:	f000 f805 	bl	8002354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800234a:	f7ff fcc5 	bl	8001cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_InitTick+0x54>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_InitTick+0x58>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	4619      	mov	r1, r3
 8002366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800236a:	fbb3 f3f1 	udiv	r3, r3, r1
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f967 	bl	8002646 <HAL_SYSTICK_Config>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e00e      	b.n	80023a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b0f      	cmp	r3, #15
 8002386:	d80a      	bhi.n	800239e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002388:	2200      	movs	r2, #0
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	f000 f92f 	bl	80025f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002394:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <HAL_InitTick+0x5c>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	e000      	b.n	80023a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000000 	.word	0x20000000
 80023ac:	20000008 	.word	0x20000008
 80023b0:	20000004 	.word	0x20000004

080023b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_IncTick+0x20>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_IncTick+0x24>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <HAL_IncTick+0x24>)
 80023c6:	6013      	str	r3, [r2, #0]
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000008 	.word	0x20000008
 80023d8:	20000fd0 	.word	0x20000fd0

080023dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return uwTick;
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <HAL_GetTick+0x14>)
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000fd0 	.word	0x20000fd0

080023f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff ffee 	bl	80023dc <HAL_GetTick>
 8002400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240c:	d005      	beq.n	800241a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_Delay+0x44>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4413      	add	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800241a:	bf00      	nop
 800241c:	f7ff ffde 	bl	80023dc <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	429a      	cmp	r2, r3
 800242a:	d8f7      	bhi.n	800241c <HAL_Delay+0x28>
  {
  }
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000008 	.word	0x20000008

0800243c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <__NVIC_SetPriorityGrouping+0x40>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002458:	4013      	ands	r3, r2
 800245a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <__NVIC_SetPriorityGrouping+0x44>)
 8002466:	4313      	orrs	r3, r2
 8002468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246a:	4a04      	ldr	r2, [pc, #16]	; (800247c <__NVIC_SetPriorityGrouping+0x40>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	60d3      	str	r3, [r2, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00
 8002480:	05fa0000 	.word	0x05fa0000

08002484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <__NVIC_GetPriorityGrouping+0x18>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	f003 0307 	and.w	r3, r3, #7
}
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	db0b      	blt.n	80024ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	f003 021f 	and.w	r2, r3, #31
 80024b8:	4907      	ldr	r1, [pc, #28]	; (80024d8 <__NVIC_EnableIRQ+0x38>)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	2001      	movs	r0, #1
 80024c2:	fa00 f202 	lsl.w	r2, r0, r2
 80024c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	e000e100 	.word	0xe000e100

080024dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	6039      	str	r1, [r7, #0]
 80024e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	db0a      	blt.n	8002506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	490c      	ldr	r1, [pc, #48]	; (8002528 <__NVIC_SetPriority+0x4c>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	0112      	lsls	r2, r2, #4
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	440b      	add	r3, r1
 8002500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002504:	e00a      	b.n	800251c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4908      	ldr	r1, [pc, #32]	; (800252c <__NVIC_SetPriority+0x50>)
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	3b04      	subs	r3, #4
 8002514:	0112      	lsls	r2, r2, #4
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	440b      	add	r3, r1
 800251a:	761a      	strb	r2, [r3, #24]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000e100 	.word	0xe000e100
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002530:	b480      	push	{r7}
 8002532:	b089      	sub	sp, #36	; 0x24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f1c3 0307 	rsb	r3, r3, #7
 800254a:	2b04      	cmp	r3, #4
 800254c:	bf28      	it	cs
 800254e:	2304      	movcs	r3, #4
 8002550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3304      	adds	r3, #4
 8002556:	2b06      	cmp	r3, #6
 8002558:	d902      	bls.n	8002560 <NVIC_EncodePriority+0x30>
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3b03      	subs	r3, #3
 800255e:	e000      	b.n	8002562 <NVIC_EncodePriority+0x32>
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	f04f 32ff 	mov.w	r2, #4294967295
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43da      	mvns	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	401a      	ands	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002578:	f04f 31ff 	mov.w	r1, #4294967295
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	43d9      	mvns	r1, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002588:	4313      	orrs	r3, r2
         );
}
 800258a:	4618      	mov	r0, r3
 800258c:	3724      	adds	r7, #36	; 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a8:	d301      	bcc.n	80025ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00f      	b.n	80025ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ae:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <SysTick_Config+0x40>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025b6:	210f      	movs	r1, #15
 80025b8:	f04f 30ff 	mov.w	r0, #4294967295
 80025bc:	f7ff ff8e 	bl	80024dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <SysTick_Config+0x40>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025c6:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <SysTick_Config+0x40>)
 80025c8:	2207      	movs	r2, #7
 80025ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	e000e010 	.word	0xe000e010

080025dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff ff29 	bl	800243c <__NVIC_SetPriorityGrouping>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	4603      	mov	r3, r0
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
 80025fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002604:	f7ff ff3e 	bl	8002484 <__NVIC_GetPriorityGrouping>
 8002608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	6978      	ldr	r0, [r7, #20]
 8002610:	f7ff ff8e 	bl	8002530 <NVIC_EncodePriority>
 8002614:	4602      	mov	r2, r0
 8002616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff5d 	bl	80024dc <__NVIC_SetPriority>
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff31 	bl	80024a0 <__NVIC_EnableIRQ>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ffa2 	bl	8002598 <SysTick_Config>
 8002654:	4603      	mov	r3, r0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800266c:	f7ff feb6 	bl	80023dc <HAL_GetTick>
 8002670:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d008      	beq.n	8002690 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e052      	b.n	8002736 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0216 	bic.w	r2, r2, #22
 800269e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d103      	bne.n	80026c0 <HAL_DMA_Abort+0x62>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0208 	bic.w	r2, r2, #8
 80026ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026e0:	e013      	b.n	800270a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026e2:	f7ff fe7b 	bl	80023dc <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b05      	cmp	r3, #5
 80026ee:	d90c      	bls.n	800270a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2203      	movs	r2, #3
 80026fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e015      	b.n	8002736 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1e4      	bne.n	80026e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271c:	223f      	movs	r2, #63	; 0x3f
 800271e:	409a      	lsls	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d004      	beq.n	800275c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2280      	movs	r2, #128	; 0x80
 8002756:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e00c      	b.n	8002776 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2205      	movs	r2, #5
 8002760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	; 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	e175      	b.n	8002a90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027a4:	2201      	movs	r2, #1
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	f040 8164 	bne.w	8002a8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d005      	beq.n	80027da <HAL_GPIO_Init+0x56>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d130      	bne.n	800283c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	2203      	movs	r2, #3
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002810:	2201      	movs	r2, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 0201 	and.w	r2, r3, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	2b03      	cmp	r3, #3
 8002846:	d017      	beq.n	8002878 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	2203      	movs	r2, #3
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d123      	bne.n	80028cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	08da      	lsrs	r2, r3, #3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3208      	adds	r2, #8
 800288c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	220f      	movs	r2, #15
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	08da      	lsrs	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3208      	adds	r2, #8
 80028c6:	69b9      	ldr	r1, [r7, #24]
 80028c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2203      	movs	r2, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0203 	and.w	r2, r3, #3
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80be 	beq.w	8002a8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290e:	4b66      	ldr	r3, [pc, #408]	; (8002aa8 <HAL_GPIO_Init+0x324>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	4a65      	ldr	r2, [pc, #404]	; (8002aa8 <HAL_GPIO_Init+0x324>)
 8002914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002918:	6453      	str	r3, [r2, #68]	; 0x44
 800291a:	4b63      	ldr	r3, [pc, #396]	; (8002aa8 <HAL_GPIO_Init+0x324>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002926:	4a61      	ldr	r2, [pc, #388]	; (8002aac <HAL_GPIO_Init+0x328>)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	3302      	adds	r3, #2
 800292e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	220f      	movs	r2, #15
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a58      	ldr	r2, [pc, #352]	; (8002ab0 <HAL_GPIO_Init+0x32c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d037      	beq.n	80029c2 <HAL_GPIO_Init+0x23e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a57      	ldr	r2, [pc, #348]	; (8002ab4 <HAL_GPIO_Init+0x330>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d031      	beq.n	80029be <HAL_GPIO_Init+0x23a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a56      	ldr	r2, [pc, #344]	; (8002ab8 <HAL_GPIO_Init+0x334>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d02b      	beq.n	80029ba <HAL_GPIO_Init+0x236>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a55      	ldr	r2, [pc, #340]	; (8002abc <HAL_GPIO_Init+0x338>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d025      	beq.n	80029b6 <HAL_GPIO_Init+0x232>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a54      	ldr	r2, [pc, #336]	; (8002ac0 <HAL_GPIO_Init+0x33c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d01f      	beq.n	80029b2 <HAL_GPIO_Init+0x22e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a53      	ldr	r2, [pc, #332]	; (8002ac4 <HAL_GPIO_Init+0x340>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d019      	beq.n	80029ae <HAL_GPIO_Init+0x22a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a52      	ldr	r2, [pc, #328]	; (8002ac8 <HAL_GPIO_Init+0x344>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_GPIO_Init+0x226>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a51      	ldr	r2, [pc, #324]	; (8002acc <HAL_GPIO_Init+0x348>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00d      	beq.n	80029a6 <HAL_GPIO_Init+0x222>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a50      	ldr	r2, [pc, #320]	; (8002ad0 <HAL_GPIO_Init+0x34c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d007      	beq.n	80029a2 <HAL_GPIO_Init+0x21e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4f      	ldr	r2, [pc, #316]	; (8002ad4 <HAL_GPIO_Init+0x350>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d101      	bne.n	800299e <HAL_GPIO_Init+0x21a>
 800299a:	2309      	movs	r3, #9
 800299c:	e012      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 800299e:	230a      	movs	r3, #10
 80029a0:	e010      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029a2:	2308      	movs	r3, #8
 80029a4:	e00e      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029a6:	2307      	movs	r3, #7
 80029a8:	e00c      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029aa:	2306      	movs	r3, #6
 80029ac:	e00a      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029ae:	2305      	movs	r3, #5
 80029b0:	e008      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029b2:	2304      	movs	r3, #4
 80029b4:	e006      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029b6:	2303      	movs	r3, #3
 80029b8:	e004      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e002      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_GPIO_Init+0x240>
 80029c2:	2300      	movs	r3, #0
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	f002 0203 	and.w	r2, r2, #3
 80029ca:	0092      	lsls	r2, r2, #2
 80029cc:	4093      	lsls	r3, r2
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029d4:	4935      	ldr	r1, [pc, #212]	; (8002aac <HAL_GPIO_Init+0x328>)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	089b      	lsrs	r3, r3, #2
 80029da:	3302      	adds	r3, #2
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029e2:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <HAL_GPIO_Init+0x354>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a06:	4a34      	ldr	r2, [pc, #208]	; (8002ad8 <HAL_GPIO_Init+0x354>)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a0c:	4b32      	ldr	r3, [pc, #200]	; (8002ad8 <HAL_GPIO_Init+0x354>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a30:	4a29      	ldr	r2, [pc, #164]	; (8002ad8 <HAL_GPIO_Init+0x354>)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a36:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <HAL_GPIO_Init+0x354>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a5a:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <HAL_GPIO_Init+0x354>)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a60:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_GPIO_Init+0x354>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a84:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <HAL_GPIO_Init+0x354>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	61fb      	str	r3, [r7, #28]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b0f      	cmp	r3, #15
 8002a94:	f67f ae86 	bls.w	80027a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	3724      	adds	r7, #36	; 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40013800 	.word	0x40013800
 8002ab0:	40020000 	.word	0x40020000
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	40020800 	.word	0x40020800
 8002abc:	40020c00 	.word	0x40020c00
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40021400 	.word	0x40021400
 8002ac8:	40021800 	.word	0x40021800
 8002acc:	40021c00 	.word	0x40021c00
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40022400 	.word	0x40022400
 8002ad8:	40013c00 	.word	0x40013c00

08002adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	807b      	strh	r3, [r7, #2]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aec:	787b      	ldrb	r3, [r7, #1]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002af2:	887a      	ldrh	r2, [r7, #2]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002af8:	e003      	b.n	8002b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002afa:	887b      	ldrh	r3, [r7, #2]
 8002afc:	041a      	lsls	r2, r3, #16
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	619a      	str	r2, [r3, #24]
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b26:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fbd0 	bl	80012d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40013c00 	.word	0x40013c00

08002b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e07f      	b.n	8002c52 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff f8de 	bl	8001d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2224      	movs	r2, #36	; 0x24
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ba0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	e006      	b.n	8002bc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d104      	bne.n	8002bda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <HAL_I2C_Init+0x11c>)
 8002be6:	430b      	orrs	r3, r1
 8002be8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69d9      	ldr	r1, [r3, #28]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1a      	ldr	r2, [r3, #32]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	02008000 	.word	0x02008000

08002c60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	4608      	mov	r0, r1
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	817b      	strh	r3, [r7, #10]
 8002c72:	460b      	mov	r3, r1
 8002c74:	813b      	strh	r3, [r7, #8]
 8002c76:	4613      	mov	r3, r2
 8002c78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	f040 80f9 	bne.w	8002e7a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_I2C_Mem_Write+0x34>
 8002c8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0ed      	b.n	8002e7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_I2C_Mem_Write+0x4e>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e0e6      	b.n	8002e7c <HAL_I2C_Mem_Write+0x21c>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cb6:	f7ff fb91 	bl	80023dc <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2319      	movs	r3, #25
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 fac3 	bl	8003254 <I2C_WaitOnFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0d1      	b.n	8002e7c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2221      	movs	r2, #33	; 0x21
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2240      	movs	r2, #64	; 0x40
 8002ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a3a      	ldr	r2, [r7, #32]
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d00:	88f8      	ldrh	r0, [r7, #6]
 8002d02:	893a      	ldrh	r2, [r7, #8]
 8002d04:	8979      	ldrh	r1, [r7, #10]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	4603      	mov	r3, r0
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f9d3 	bl	80030bc <I2C_RequestMemoryWrite>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0a9      	b.n	8002e7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2bff      	cmp	r3, #255	; 0xff
 8002d30:	d90e      	bls.n	8002d50 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	22ff      	movs	r2, #255	; 0xff
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	8979      	ldrh	r1, [r7, #10]
 8002d40:	2300      	movs	r3, #0
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fc2b 	bl	80035a4 <I2C_TransferConfig>
 8002d4e:	e00f      	b.n	8002d70 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	8979      	ldrh	r1, [r7, #10]
 8002d62:	2300      	movs	r3, #0
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fc1a 	bl	80035a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 faad 	bl	80032d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e07b      	b.n	8002e7c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d034      	beq.n	8002e28 <HAL_I2C_Mem_Write+0x1c8>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d130      	bne.n	8002e28 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2180      	movs	r1, #128	; 0x80
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 fa3f 	bl	8003254 <I2C_WaitOnFlagUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e04d      	b.n	8002e7c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2bff      	cmp	r3, #255	; 0xff
 8002de8:	d90e      	bls.n	8002e08 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	22ff      	movs	r2, #255	; 0xff
 8002dee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	8979      	ldrh	r1, [r7, #10]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fbcf 	bl	80035a4 <I2C_TransferConfig>
 8002e06:	e00f      	b.n	8002e28 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	8979      	ldrh	r1, [r7, #10]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fbbe 	bl	80035a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d19e      	bne.n	8002d70 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 fa8c 	bl	8003354 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e01a      	b.n	8002e7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <HAL_I2C_Mem_Write+0x224>)
 8002e5a:	400b      	ands	r3, r1
 8002e5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	e000      	b.n	8002e7c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e7a:	2302      	movs	r3, #2
  }
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	fe00e800 	.word	0xfe00e800

08002e88 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	4608      	mov	r0, r1
 8002e92:	4611      	mov	r1, r2
 8002e94:	461a      	mov	r2, r3
 8002e96:	4603      	mov	r3, r0
 8002e98:	817b      	strh	r3, [r7, #10]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	813b      	strh	r3, [r7, #8]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	f040 80fd 	bne.w	80030aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HAL_I2C_Mem_Read+0x34>
 8002eb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d105      	bne.n	8002ec8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0f1      	b.n	80030ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_I2C_Mem_Read+0x4e>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e0ea      	b.n	80030ac <HAL_I2C_Mem_Read+0x224>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ede:	f7ff fa7d 	bl	80023dc <HAL_GetTick>
 8002ee2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2319      	movs	r3, #25
 8002eea:	2201      	movs	r2, #1
 8002eec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f9af 	bl	8003254 <I2C_WaitOnFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0d5      	b.n	80030ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2222      	movs	r2, #34	; 0x22
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2240      	movs	r2, #64	; 0x40
 8002f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a3a      	ldr	r2, [r7, #32]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f28:	88f8      	ldrh	r0, [r7, #6]
 8002f2a:	893a      	ldrh	r2, [r7, #8]
 8002f2c:	8979      	ldrh	r1, [r7, #10]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	9301      	str	r3, [sp, #4]
 8002f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	4603      	mov	r3, r0
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f913 	bl	8003164 <I2C_RequestMemoryRead>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0ad      	b.n	80030ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2bff      	cmp	r3, #255	; 0xff
 8002f58:	d90e      	bls.n	8002f78 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	22ff      	movs	r2, #255	; 0xff
 8002f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	8979      	ldrh	r1, [r7, #10]
 8002f68:	4b52      	ldr	r3, [pc, #328]	; (80030b4 <HAL_I2C_Mem_Read+0x22c>)
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 fb17 	bl	80035a4 <I2C_TransferConfig>
 8002f76:	e00f      	b.n	8002f98 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	8979      	ldrh	r1, [r7, #10]
 8002f8a:	4b4a      	ldr	r3, [pc, #296]	; (80030b4 <HAL_I2C_Mem_Read+0x22c>)
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fb06 	bl	80035a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2104      	movs	r1, #4
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f956 	bl	8003254 <I2C_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e07c      	b.n	80030ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d034      	beq.n	8003058 <HAL_I2C_Mem_Read+0x1d0>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d130      	bne.n	8003058 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2180      	movs	r1, #128	; 0x80
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f927 	bl	8003254 <I2C_WaitOnFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e04d      	b.n	80030ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	2bff      	cmp	r3, #255	; 0xff
 8003018:	d90e      	bls.n	8003038 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	22ff      	movs	r2, #255	; 0xff
 800301e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003024:	b2da      	uxtb	r2, r3
 8003026:	8979      	ldrh	r1, [r7, #10]
 8003028:	2300      	movs	r3, #0
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 fab7 	bl	80035a4 <I2C_TransferConfig>
 8003036:	e00f      	b.n	8003058 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003046:	b2da      	uxtb	r2, r3
 8003048:	8979      	ldrh	r1, [r7, #10]
 800304a:	2300      	movs	r3, #0
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 faa6 	bl	80035a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d19a      	bne.n	8002f98 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f974 	bl	8003354 <I2C_WaitOnSTOPFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e01a      	b.n	80030ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2220      	movs	r2, #32
 800307c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6859      	ldr	r1, [r3, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_I2C_Mem_Read+0x230>)
 800308a:	400b      	ands	r3, r1
 800308c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	e000      	b.n	80030ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80030aa:	2302      	movs	r3, #2
  }
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	80002400 	.word	0x80002400
 80030b8:	fe00e800 	.word	0xfe00e800

080030bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	4608      	mov	r0, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	461a      	mov	r2, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	817b      	strh	r3, [r7, #10]
 80030ce:	460b      	mov	r3, r1
 80030d0:	813b      	strh	r3, [r7, #8]
 80030d2:	4613      	mov	r3, r2
 80030d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	8979      	ldrh	r1, [r7, #10]
 80030dc:	4b20      	ldr	r3, [pc, #128]	; (8003160 <I2C_RequestMemoryWrite+0xa4>)
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fa5d 	bl	80035a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	69b9      	ldr	r1, [r7, #24]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f8f0 	bl	80032d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e02c      	b.n	8003158 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d105      	bne.n	8003110 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003104:	893b      	ldrh	r3, [r7, #8]
 8003106:	b2da      	uxtb	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	629a      	str	r2, [r3, #40]	; 0x28
 800310e:	e015      	b.n	800313c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003110:	893b      	ldrh	r3, [r7, #8]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	b29b      	uxth	r3, r3
 8003116:	b2da      	uxtb	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	69b9      	ldr	r1, [r7, #24]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f8d6 	bl	80032d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e012      	b.n	8003158 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003132:	893b      	ldrh	r3, [r7, #8]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2200      	movs	r2, #0
 8003144:	2180      	movs	r1, #128	; 0x80
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f884 	bl	8003254 <I2C_WaitOnFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	80002000 	.word	0x80002000

08003164 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af02      	add	r7, sp, #8
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	4608      	mov	r0, r1
 800316e:	4611      	mov	r1, r2
 8003170:	461a      	mov	r2, r3
 8003172:	4603      	mov	r3, r0
 8003174:	817b      	strh	r3, [r7, #10]
 8003176:	460b      	mov	r3, r1
 8003178:	813b      	strh	r3, [r7, #8]
 800317a:	4613      	mov	r3, r2
 800317c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	b2da      	uxtb	r2, r3
 8003182:	8979      	ldrh	r1, [r7, #10]
 8003184:	4b20      	ldr	r3, [pc, #128]	; (8003208 <I2C_RequestMemoryRead+0xa4>)
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	2300      	movs	r3, #0
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fa0a 	bl	80035a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	69b9      	ldr	r1, [r7, #24]
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f89d 	bl	80032d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e02c      	b.n	80031fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d105      	bne.n	80031b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031aa:	893b      	ldrh	r3, [r7, #8]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28
 80031b4:	e015      	b.n	80031e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031b6:	893b      	ldrh	r3, [r7, #8]
 80031b8:	0a1b      	lsrs	r3, r3, #8
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031c4:	69fa      	ldr	r2, [r7, #28]
 80031c6:	69b9      	ldr	r1, [r7, #24]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f883 	bl	80032d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e012      	b.n	80031fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031d8:	893b      	ldrh	r3, [r7, #8]
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	2200      	movs	r2, #0
 80031ea:	2140      	movs	r1, #64	; 0x40
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 f831 	bl	8003254 <I2C_WaitOnFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	80002000 	.word	0x80002000

0800320c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b02      	cmp	r3, #2
 8003220:	d103      	bne.n	800322a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2200      	movs	r2, #0
 8003228:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b01      	cmp	r3, #1
 8003236:	d007      	beq.n	8003248 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	619a      	str	r2, [r3, #24]
  }
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	4613      	mov	r3, r2
 8003262:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003264:	e022      	b.n	80032ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d01e      	beq.n	80032ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326e:	f7ff f8b5 	bl	80023dc <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d302      	bcc.n	8003284 <I2C_WaitOnFlagUntilTimeout+0x30>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d113      	bne.n	80032ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e00f      	b.n	80032cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	4013      	ands	r3, r2
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	bf0c      	ite	eq
 80032bc:	2301      	moveq	r3, #1
 80032be:	2300      	movne	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	461a      	mov	r2, r3
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d0cd      	beq.n	8003266 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032e0:	e02c      	b.n	800333c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f870 	bl	80033cc <I2C_IsErrorOccurred>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e02a      	b.n	800334c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fc:	d01e      	beq.n	800333c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fe:	f7ff f86d 	bl	80023dc <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	429a      	cmp	r2, r3
 800330c:	d302      	bcc.n	8003314 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d113      	bne.n	800333c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003318:	f043 0220 	orr.w	r2, r3, #32
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e007      	b.n	800334c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b02      	cmp	r3, #2
 8003348:	d1cb      	bne.n	80032e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003360:	e028      	b.n	80033b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f830 	bl	80033cc <I2C_IsErrorOccurred>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e026      	b.n	80033c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003376:	f7ff f831 	bl	80023dc <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	429a      	cmp	r2, r3
 8003384:	d302      	bcc.n	800338c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d113      	bne.n	80033b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	f043 0220 	orr.w	r2, r3, #32
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e007      	b.n	80033c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d1cf      	bne.n	8003362 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	; 0x28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d075      	beq.n	80034e4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2210      	movs	r2, #16
 80033fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003400:	e056      	b.n	80034b0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d052      	beq.n	80034b0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7fe ffe7 	bl	80023dc <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <I2C_IsErrorOccurred+0x54>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d147      	bne.n	80034b0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003432:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800343e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003442:	d12e      	bne.n	80034a2 <I2C_IsErrorOccurred+0xd6>
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800344a:	d02a      	beq.n	80034a2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	2b20      	cmp	r3, #32
 8003450:	d027      	beq.n	80034a2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003460:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003462:	f7fe ffbb 	bl	80023dc <HAL_GetTick>
 8003466:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003468:	e01b      	b.n	80034a2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800346a:	f7fe ffb7 	bl	80023dc <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b19      	cmp	r3, #25
 8003476:	d914      	bls.n	80034a2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	f043 0220 	orr.w	r2, r3, #32
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d1dc      	bne.n	800346a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d003      	beq.n	80034c6 <I2C_IsErrorOccurred+0xfa>
 80034be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d09d      	beq.n	8003402 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2220      	movs	r2, #32
 80034d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	f043 0304 	orr.w	r3, r3, #4
 80034dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00b      	beq.n	800350e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003506:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00b      	beq.n	8003530 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	f043 0308 	orr.w	r3, r3, #8
 800351e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003528:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00b      	beq.n	8003552 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800354a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01c      	beq.n	8003594 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f7ff fe56 	bl	800320c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6859      	ldr	r1, [r3, #4]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <I2C_IsErrorOccurred+0x1d4>)
 800356c:	400b      	ands	r3, r1
 800356e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	431a      	orrs	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003598:	4618      	mov	r0, r3
 800359a:	3728      	adds	r7, #40	; 0x28
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	fe00e800 	.word	0xfe00e800

080035a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	817b      	strh	r3, [r7, #10]
 80035b2:	4613      	mov	r3, r2
 80035b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035b6:	897b      	ldrh	r3, [r7, #10]
 80035b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035bc:	7a7b      	ldrb	r3, [r7, #9]
 80035be:	041b      	lsls	r3, r3, #16
 80035c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035c4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035d2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	0d5b      	lsrs	r3, r3, #21
 80035de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035e2:	4b08      	ldr	r3, [pc, #32]	; (8003604 <I2C_TransferConfig+0x60>)
 80035e4:	430b      	orrs	r3, r1
 80035e6:	43db      	mvns	r3, r3
 80035e8:	ea02 0103 	and.w	r1, r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	03ff63ff 	.word	0x03ff63ff

08003608 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b20      	cmp	r3, #32
 800361c:	d138      	bne.n	8003690 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003628:	2302      	movs	r3, #2
 800362a:	e032      	b.n	8003692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2224      	movs	r2, #36	; 0x24
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0201 	bic.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800365a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6819      	ldr	r1, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	e000      	b.n	8003692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003690:	2302      	movs	r3, #2
  }
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800369e:	b480      	push	{r7}
 80036a0:	b085      	sub	sp, #20
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d139      	bne.n	8003728 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036be:	2302      	movs	r3, #2
 80036c0:	e033      	b.n	800372a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2224      	movs	r2, #36	; 0x24
 80036ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0201 	bic.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	e000      	b.n	800372a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003728:	2302      	movs	r3, #2
  }
}
 800372a:	4618      	mov	r0, r3
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003736:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003738:	b08f      	sub	sp, #60	; 0x3c
 800373a:	af0a      	add	r7, sp, #40	; 0x28
 800373c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e116      	b.n	8003976 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fe fc1e 	bl	8001fa4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2203      	movs	r2, #3
 800376c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f003 ff14 	bl	80075b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	687e      	ldr	r6, [r7, #4]
 8003794:	466d      	mov	r5, sp
 8003796:	f106 0410 	add.w	r4, r6, #16
 800379a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800379c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800379e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80037aa:	1d33      	adds	r3, r6, #4
 80037ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037ae:	6838      	ldr	r0, [r7, #0]
 80037b0:	f003 fea8 	bl	8007504 <USB_CoreInit>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2202      	movs	r2, #2
 80037be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0d7      	b.n	8003976 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f003 ff02 	bl	80075d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
 80037d6:	e04a      	b.n	800386e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037d8:	7bfa      	ldrb	r2, [r7, #15]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	333d      	adds	r3, #61	; 0x3d
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	333c      	adds	r3, #60	; 0x3c
 80037fc:	7bfa      	ldrb	r2, [r7, #15]
 80037fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003800:	7bfa      	ldrb	r2, [r7, #15]
 8003802:	7bfb      	ldrb	r3, [r7, #15]
 8003804:	b298      	uxth	r0, r3
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	3342      	adds	r3, #66	; 0x42
 8003814:	4602      	mov	r2, r0
 8003816:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003818:	7bfa      	ldrb	r2, [r7, #15]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	333f      	adds	r3, #63	; 0x3f
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800382c:	7bfa      	ldrb	r2, [r7, #15]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	3344      	adds	r3, #68	; 0x44
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003840:	7bfa      	ldrb	r2, [r7, #15]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	3348      	adds	r3, #72	; 0x48
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003854:	7bfa      	ldrb	r2, [r7, #15]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	3350      	adds	r3, #80	; 0x50
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	3301      	adds	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
 800386e:	7bfa      	ldrb	r2, [r7, #15]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	429a      	cmp	r2, r3
 8003876:	d3af      	bcc.n	80037d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003878:	2300      	movs	r3, #0
 800387a:	73fb      	strb	r3, [r7, #15]
 800387c:	e044      	b.n	8003908 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800387e:	7bfa      	ldrb	r2, [r7, #15]
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003894:	7bfa      	ldrb	r2, [r7, #15]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80038a6:	7bfa      	ldrb	r2, [r7, #15]
 80038a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038aa:	7bfa      	ldrb	r2, [r7, #15]
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	1a9b      	subs	r3, r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038c0:	7bfa      	ldrb	r2, [r7, #15]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038d6:	7bfa      	ldrb	r2, [r7, #15]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	3301      	adds	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
 8003908:	7bfa      	ldrb	r2, [r7, #15]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	429a      	cmp	r2, r3
 8003910:	d3b5      	bcc.n	800387e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	687e      	ldr	r6, [r7, #4]
 800391a:	466d      	mov	r5, sp
 800391c:	f106 0410 	add.w	r4, r6, #16
 8003920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003928:	e894 0003 	ldmia.w	r4, {r0, r1}
 800392c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003930:	1d33      	adds	r3, r6, #4
 8003932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003934:	6838      	ldr	r0, [r7, #0]
 8003936:	f003 fe9b 	bl	8007670 <USB_DevInit>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e014      	b.n	8003976 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	2b01      	cmp	r3, #1
 8003962:	d102      	bne.n	800396a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f80b 	bl	8003980 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f004 f855 	bl	8007a1e <USB_DevDisconnect>

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003980 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	10000003 	.word	0x10000003

080039c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d6:	6013      	str	r3, [r2, #0]
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40007000 	.word	0x40007000

080039e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039f2:	4b23      	ldr	r3, [pc, #140]	; (8003a80 <HAL_PWREx_EnableOverDrive+0x98>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	4a22      	ldr	r2, [pc, #136]	; (8003a80 <HAL_PWREx_EnableOverDrive+0x98>)
 80039f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fc:	6413      	str	r3, [r2, #64]	; 0x40
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a0a:	4b1e      	ldr	r3, [pc, #120]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a1d      	ldr	r2, [pc, #116]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a16:	f7fe fce1 	bl	80023dc <HAL_GetTick>
 8003a1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a1c:	e009      	b.n	8003a32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a1e:	f7fe fcdd 	bl	80023dc <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a2c:	d901      	bls.n	8003a32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e022      	b.n	8003a78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a32:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3e:	d1ee      	bne.n	8003a1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a40:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a0f      	ldr	r2, [pc, #60]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a4c:	f7fe fcc6 	bl	80023dc <HAL_GetTick>
 8003a50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a52:	e009      	b.n	8003a68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a54:	f7fe fcc2 	bl	80023dc <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a62:	d901      	bls.n	8003a68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e007      	b.n	8003a78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a74:	d1ee      	bne.n	8003a54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40007000 	.word	0x40007000

08003a88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a90:	2300      	movs	r3, #0
 8003a92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e29b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 8087 	beq.w	8003bba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aac:	4b96      	ldr	r3, [pc, #600]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab8:	4b93      	ldr	r3, [pc, #588]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d112      	bne.n	8003aea <HAL_RCC_OscConfig+0x62>
 8003ac4:	4b90      	ldr	r3, [pc, #576]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad0:	d10b      	bne.n	8003aea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad2:	4b8d      	ldr	r3, [pc, #564]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d06c      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x130>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d168      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e275      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af2:	d106      	bne.n	8003b02 <HAL_RCC_OscConfig+0x7a>
 8003af4:	4b84      	ldr	r3, [pc, #528]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a83      	ldr	r2, [pc, #524]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	e02e      	b.n	8003b60 <HAL_RCC_OscConfig+0xd8>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x9c>
 8003b0a:	4b7f      	ldr	r3, [pc, #508]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7e      	ldr	r2, [pc, #504]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4b7c      	ldr	r3, [pc, #496]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a7b      	ldr	r2, [pc, #492]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e01d      	b.n	8003b60 <HAL_RCC_OscConfig+0xd8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCC_OscConfig+0xc0>
 8003b2e:	4b76      	ldr	r3, [pc, #472]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a75      	ldr	r2, [pc, #468]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	4b73      	ldr	r3, [pc, #460]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a72      	ldr	r2, [pc, #456]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e00b      	b.n	8003b60 <HAL_RCC_OscConfig+0xd8>
 8003b48:	4b6f      	ldr	r3, [pc, #444]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6e      	ldr	r2, [pc, #440]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	4b6c      	ldr	r3, [pc, #432]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a6b      	ldr	r2, [pc, #428]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d013      	beq.n	8003b90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7fe fc38 	bl	80023dc <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fe fc34 	bl	80023dc <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e229      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	4b61      	ldr	r3, [pc, #388]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0xe8>
 8003b8e:	e014      	b.n	8003bba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fe fc24 	bl	80023dc <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b98:	f7fe fc20 	bl	80023dc <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e215      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	4b57      	ldr	r3, [pc, #348]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x110>
 8003bb6:	e000      	b.n	8003bba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d069      	beq.n	8003c9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bc6:	4b50      	ldr	r3, [pc, #320]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd2:	4b4d      	ldr	r3, [pc, #308]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d11c      	bne.n	8003c18 <HAL_RCC_OscConfig+0x190>
 8003bde:	4b4a      	ldr	r3, [pc, #296]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d116      	bne.n	8003c18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bea:	4b47      	ldr	r3, [pc, #284]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_RCC_OscConfig+0x17a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d001      	beq.n	8003c02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e1e9      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c02:	4b41      	ldr	r3, [pc, #260]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	493d      	ldr	r1, [pc, #244]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c16:	e040      	b.n	8003c9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d023      	beq.n	8003c68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c20:	4b39      	ldr	r3, [pc, #228]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a38      	ldr	r2, [pc, #224]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fe fbd6 	bl	80023dc <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c34:	f7fe fbd2 	bl	80023dc <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e1c7      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c46:	4b30      	ldr	r3, [pc, #192]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c52:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	4929      	ldr	r1, [pc, #164]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]
 8003c66:	e018      	b.n	8003c9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c68:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a26      	ldr	r2, [pc, #152]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
 8003c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fe fbb2 	bl	80023dc <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7c:	f7fe fbae 	bl	80023dc <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e1a3      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d038      	beq.n	8003d18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d019      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cae:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb2:	4a15      	ldr	r2, [pc, #84]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cba:	f7fe fb8f 	bl	80023dc <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7fe fb8b 	bl	80023dc <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e180      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x23a>
 8003ce0:	e01a      	b.n	8003d18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce2:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce6:	4a08      	ldr	r2, [pc, #32]	; (8003d08 <HAL_RCC_OscConfig+0x280>)
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7fe fb75 	bl	80023dc <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf6:	f7fe fb71 	bl	80023dc <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d903      	bls.n	8003d0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e166      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
 8003d08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d0c:	4b92      	ldr	r3, [pc, #584]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1ee      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80a4 	beq.w	8003e6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d26:	4b8c      	ldr	r3, [pc, #560]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10d      	bne.n	8003d4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	4b89      	ldr	r3, [pc, #548]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	4a88      	ldr	r2, [pc, #544]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d3e:	4b86      	ldr	r3, [pc, #536]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4e:	4b83      	ldr	r3, [pc, #524]	; (8003f5c <HAL_RCC_OscConfig+0x4d4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d118      	bne.n	8003d8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d5a:	4b80      	ldr	r3, [pc, #512]	; (8003f5c <HAL_RCC_OscConfig+0x4d4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a7f      	ldr	r2, [pc, #508]	; (8003f5c <HAL_RCC_OscConfig+0x4d4>)
 8003d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d66:	f7fe fb39 	bl	80023dc <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6e:	f7fe fb35 	bl	80023dc <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b64      	cmp	r3, #100	; 0x64
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e12a      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d80:	4b76      	ldr	r3, [pc, #472]	; (8003f5c <HAL_RCC_OscConfig+0x4d4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d106      	bne.n	8003da2 <HAL_RCC_OscConfig+0x31a>
 8003d94:	4b70      	ldr	r3, [pc, #448]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	4a6f      	ldr	r2, [pc, #444]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003da0:	e02d      	b.n	8003dfe <HAL_RCC_OscConfig+0x376>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x33c>
 8003daa:	4b6b      	ldr	r3, [pc, #428]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	4a6a      	ldr	r2, [pc, #424]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	6713      	str	r3, [r2, #112]	; 0x70
 8003db6:	4b68      	ldr	r3, [pc, #416]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	4a67      	ldr	r2, [pc, #412]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dbc:	f023 0304 	bic.w	r3, r3, #4
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc2:	e01c      	b.n	8003dfe <HAL_RCC_OscConfig+0x376>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	d10c      	bne.n	8003de6 <HAL_RCC_OscConfig+0x35e>
 8003dcc:	4b62      	ldr	r3, [pc, #392]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	4a61      	ldr	r2, [pc, #388]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dd2:	f043 0304 	orr.w	r3, r3, #4
 8003dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd8:	4b5f      	ldr	r3, [pc, #380]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	4a5e      	ldr	r2, [pc, #376]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	6713      	str	r3, [r2, #112]	; 0x70
 8003de4:	e00b      	b.n	8003dfe <HAL_RCC_OscConfig+0x376>
 8003de6:	4b5c      	ldr	r3, [pc, #368]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	4a5b      	ldr	r2, [pc, #364]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	6713      	str	r3, [r2, #112]	; 0x70
 8003df2:	4b59      	ldr	r3, [pc, #356]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	4a58      	ldr	r2, [pc, #352]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003df8:	f023 0304 	bic.w	r3, r3, #4
 8003dfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d015      	beq.n	8003e32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e06:	f7fe fae9 	bl	80023dc <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0c:	e00a      	b.n	8003e24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0e:	f7fe fae5 	bl	80023dc <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e0d8      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e24:	4b4c      	ldr	r3, [pc, #304]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0ee      	beq.n	8003e0e <HAL_RCC_OscConfig+0x386>
 8003e30:	e014      	b.n	8003e5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e32:	f7fe fad3 	bl	80023dc <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3a:	f7fe facf 	bl	80023dc <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e0c2      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e50:	4b41      	ldr	r3, [pc, #260]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1ee      	bne.n	8003e3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d105      	bne.n	8003e6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e62:	4b3d      	ldr	r3, [pc, #244]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4a3c      	ldr	r2, [pc, #240]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80ae 	beq.w	8003fd4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e78:	4b37      	ldr	r3, [pc, #220]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 030c 	and.w	r3, r3, #12
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d06d      	beq.n	8003f60 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d14b      	bne.n	8003f24 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8c:	4b32      	ldr	r3, [pc, #200]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a31      	ldr	r2, [pc, #196]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7fe faa0 	bl	80023dc <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fe fa9c 	bl	80023dc <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e091      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb2:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69da      	ldr	r2, [r3, #28]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	019b      	lsls	r3, r3, #6
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	085b      	lsrs	r3, r3, #1
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	041b      	lsls	r3, r3, #16
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	071b      	lsls	r3, r3, #28
 8003eea:	491b      	ldr	r1, [pc, #108]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef0:	4b19      	ldr	r3, [pc, #100]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a18      	ldr	r2, [pc, #96]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fe fa6e 	bl	80023dc <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f04:	f7fe fa6a 	bl	80023dc <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e05f      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x47c>
 8003f22:	e057      	b.n	8003fd4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f24:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a0b      	ldr	r2, [pc, #44]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fe fa54 	bl	80023dc <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f38:	f7fe fa50 	bl	80023dc <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e045      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4a:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_RCC_OscConfig+0x4d0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x4b0>
 8003f56:	e03d      	b.n	8003fd4 <HAL_RCC_OscConfig+0x54c>
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f60:	4b1f      	ldr	r3, [pc, #124]	; (8003fe0 <HAL_RCC_OscConfig+0x558>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d030      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d129      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d122      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f90:	4013      	ands	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d119      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d10f      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d107      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40023800 	.word	0x40023800

08003fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0d0      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b6a      	ldr	r3, [pc, #424]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d910      	bls.n	800402c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b67      	ldr	r3, [pc, #412]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 020f 	bic.w	r2, r3, #15
 8004012:	4965      	ldr	r1, [pc, #404]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	4313      	orrs	r3, r2
 8004018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800401a:	4b63      	ldr	r3, [pc, #396]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d001      	beq.n	800402c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0b8      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d020      	beq.n	800407a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004044:	4b59      	ldr	r3, [pc, #356]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4a58      	ldr	r2, [pc, #352]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 800404a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800404e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800405c:	4b53      	ldr	r3, [pc, #332]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	4a52      	ldr	r2, [pc, #328]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004066:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004068:	4b50      	ldr	r3, [pc, #320]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	494d      	ldr	r1, [pc, #308]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004076:	4313      	orrs	r3, r2
 8004078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d040      	beq.n	8004108 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d107      	bne.n	800409e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	4b47      	ldr	r3, [pc, #284]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d115      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e07f      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d107      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a6:	4b41      	ldr	r3, [pc, #260]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e073      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b6:	4b3d      	ldr	r3, [pc, #244]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e06b      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040c6:	4b39      	ldr	r3, [pc, #228]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f023 0203 	bic.w	r2, r3, #3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4936      	ldr	r1, [pc, #216]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d8:	f7fe f980 	bl	80023dc <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040de:	e00a      	b.n	80040f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e0:	f7fe f97c 	bl	80023dc <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e053      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f6:	4b2d      	ldr	r3, [pc, #180]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 020c 	and.w	r2, r3, #12
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	429a      	cmp	r2, r3
 8004106:	d1eb      	bne.n	80040e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004108:	4b27      	ldr	r3, [pc, #156]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d210      	bcs.n	8004138 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 020f 	bic.w	r2, r3, #15
 800411e:	4922      	ldr	r1, [pc, #136]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	4313      	orrs	r3, r2
 8004124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d001      	beq.n	8004138 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e032      	b.n	800419e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004144:	4b19      	ldr	r3, [pc, #100]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4916      	ldr	r1, [pc, #88]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d009      	beq.n	8004176 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004162:	4b12      	ldr	r3, [pc, #72]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	490e      	ldr	r1, [pc, #56]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004176:	f000 f821 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 800417a:	4602      	mov	r2, r0
 800417c:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	091b      	lsrs	r3, r3, #4
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	490a      	ldr	r1, [pc, #40]	; (80041b0 <HAL_RCC_ClockConfig+0x1cc>)
 8004188:	5ccb      	ldrb	r3, [r1, r3]
 800418a:	fa22 f303 	lsr.w	r3, r2, r3
 800418e:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_RCC_ClockConfig+0x1d4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe f8dc 	bl	8002354 <HAL_InitTick>

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40023c00 	.word	0x40023c00
 80041ac:	40023800 	.word	0x40023800
 80041b0:	0800f1a8 	.word	0x0800f1a8
 80041b4:	20000000 	.word	0x20000000
 80041b8:	20000004 	.word	0x20000004

080041bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c0:	b094      	sub	sp, #80	; 0x50
 80041c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	647b      	str	r3, [r7, #68]	; 0x44
 80041c8:	2300      	movs	r3, #0
 80041ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041cc:	2300      	movs	r3, #0
 80041ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041d4:	4b79      	ldr	r3, [pc, #484]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 030c 	and.w	r3, r3, #12
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d00d      	beq.n	80041fc <HAL_RCC_GetSysClockFreq+0x40>
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	f200 80e1 	bhi.w	80043a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x34>
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d003      	beq.n	80041f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80041ee:	e0db      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041f0:	4b73      	ldr	r3, [pc, #460]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041f4:	e0db      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041f6:	4b73      	ldr	r3, [pc, #460]	; (80043c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80041f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041fa:	e0d8      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041fc:	4b6f      	ldr	r3, [pc, #444]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004204:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004206:	4b6d      	ldr	r3, [pc, #436]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d063      	beq.n	80042da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004212:	4b6a      	ldr	r3, [pc, #424]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	099b      	lsrs	r3, r3, #6
 8004218:	2200      	movs	r2, #0
 800421a:	63bb      	str	r3, [r7, #56]	; 0x38
 800421c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004224:	633b      	str	r3, [r7, #48]	; 0x30
 8004226:	2300      	movs	r3, #0
 8004228:	637b      	str	r3, [r7, #52]	; 0x34
 800422a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800422e:	4622      	mov	r2, r4
 8004230:	462b      	mov	r3, r5
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f04f 0100 	mov.w	r1, #0
 800423a:	0159      	lsls	r1, r3, #5
 800423c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004240:	0150      	lsls	r0, r2, #5
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4621      	mov	r1, r4
 8004248:	1a51      	subs	r1, r2, r1
 800424a:	6139      	str	r1, [r7, #16]
 800424c:	4629      	mov	r1, r5
 800424e:	eb63 0301 	sbc.w	r3, r3, r1
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004260:	4659      	mov	r1, fp
 8004262:	018b      	lsls	r3, r1, #6
 8004264:	4651      	mov	r1, sl
 8004266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800426a:	4651      	mov	r1, sl
 800426c:	018a      	lsls	r2, r1, #6
 800426e:	4651      	mov	r1, sl
 8004270:	ebb2 0801 	subs.w	r8, r2, r1
 8004274:	4659      	mov	r1, fp
 8004276:	eb63 0901 	sbc.w	r9, r3, r1
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800428a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800428e:	4690      	mov	r8, r2
 8004290:	4699      	mov	r9, r3
 8004292:	4623      	mov	r3, r4
 8004294:	eb18 0303 	adds.w	r3, r8, r3
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	462b      	mov	r3, r5
 800429c:	eb49 0303 	adc.w	r3, r9, r3
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042ae:	4629      	mov	r1, r5
 80042b0:	024b      	lsls	r3, r1, #9
 80042b2:	4621      	mov	r1, r4
 80042b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042b8:	4621      	mov	r1, r4
 80042ba:	024a      	lsls	r2, r1, #9
 80042bc:	4610      	mov	r0, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c2:	2200      	movs	r2, #0
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042cc:	f7fc f9cc 	bl	8000668 <__aeabi_uldivmod>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4613      	mov	r3, r2
 80042d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042d8:	e058      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042da:	4b38      	ldr	r3, [pc, #224]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	099b      	lsrs	r3, r3, #6
 80042e0:	2200      	movs	r2, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	4611      	mov	r1, r2
 80042e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042ea:	623b      	str	r3, [r7, #32]
 80042ec:	2300      	movs	r3, #0
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
 80042f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042f4:	4642      	mov	r2, r8
 80042f6:	464b      	mov	r3, r9
 80042f8:	f04f 0000 	mov.w	r0, #0
 80042fc:	f04f 0100 	mov.w	r1, #0
 8004300:	0159      	lsls	r1, r3, #5
 8004302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004306:	0150      	lsls	r0, r2, #5
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4641      	mov	r1, r8
 800430e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004312:	4649      	mov	r1, r9
 8004314:	eb63 0b01 	sbc.w	fp, r3, r1
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004324:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004328:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800432c:	ebb2 040a 	subs.w	r4, r2, sl
 8004330:	eb63 050b 	sbc.w	r5, r3, fp
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	00eb      	lsls	r3, r5, #3
 800433e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004342:	00e2      	lsls	r2, r4, #3
 8004344:	4614      	mov	r4, r2
 8004346:	461d      	mov	r5, r3
 8004348:	4643      	mov	r3, r8
 800434a:	18e3      	adds	r3, r4, r3
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	464b      	mov	r3, r9
 8004350:	eb45 0303 	adc.w	r3, r5, r3
 8004354:	607b      	str	r3, [r7, #4]
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004362:	4629      	mov	r1, r5
 8004364:	028b      	lsls	r3, r1, #10
 8004366:	4621      	mov	r1, r4
 8004368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800436c:	4621      	mov	r1, r4
 800436e:	028a      	lsls	r2, r1, #10
 8004370:	4610      	mov	r0, r2
 8004372:	4619      	mov	r1, r3
 8004374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004376:	2200      	movs	r2, #0
 8004378:	61bb      	str	r3, [r7, #24]
 800437a:	61fa      	str	r2, [r7, #28]
 800437c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004380:	f7fc f972 	bl	8000668 <__aeabi_uldivmod>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4613      	mov	r3, r2
 800438a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <HAL_RCC_GetSysClockFreq+0x200>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	0c1b      	lsrs	r3, r3, #16
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	3301      	adds	r3, #1
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800439c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800439e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043a6:	e002      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80043aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3750      	adds	r7, #80	; 0x50
 80043b4:	46bd      	mov	sp, r7
 80043b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800
 80043c0:	00f42400 	.word	0x00f42400
 80043c4:	007a1200 	.word	0x007a1200

080043c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ce:	681b      	ldr	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000000 	.word	0x20000000

080043e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043e4:	f7ff fff0 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 80043e8:	4602      	mov	r2, r0
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	0a9b      	lsrs	r3, r3, #10
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	4903      	ldr	r1, [pc, #12]	; (8004404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f6:	5ccb      	ldrb	r3, [r1, r3]
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40023800 	.word	0x40023800
 8004404:	0800f1b8 	.word	0x0800f1b8

08004408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800440c:	f7ff ffdc 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 8004410:	4602      	mov	r2, r0
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	0b5b      	lsrs	r3, r3, #13
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	4903      	ldr	r1, [pc, #12]	; (800442c <HAL_RCC_GetPCLK2Freq+0x24>)
 800441e:	5ccb      	ldrb	r3, [r1, r3]
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40023800 	.word	0x40023800
 800442c:	0800f1b8 	.word	0x0800f1b8

08004430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d012      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004458:	4b69      	ldr	r3, [pc, #420]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	4a68      	ldr	r2, [pc, #416]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004462:	6093      	str	r3, [r2, #8]
 8004464:	4b66      	ldr	r3, [pc, #408]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446c:	4964      	ldr	r1, [pc, #400]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446e:	4313      	orrs	r3, r2
 8004470:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800447a:	2301      	movs	r3, #1
 800447c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d017      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800448a:	4b5d      	ldr	r3, [pc, #372]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004498:	4959      	ldr	r1, [pc, #356]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044a8:	d101      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80044aa:	2301      	movs	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044b6:	2301      	movs	r3, #1
 80044b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d017      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044c6:	4b4e      	ldr	r3, [pc, #312]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	494a      	ldr	r1, [pc, #296]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e4:	d101      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044f2:	2301      	movs	r3, #1
 80044f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004502:	2301      	movs	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 808b 	beq.w	800462a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004514:	4b3a      	ldr	r3, [pc, #232]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	4a39      	ldr	r2, [pc, #228]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451e:	6413      	str	r3, [r2, #64]	; 0x40
 8004520:	4b37      	ldr	r3, [pc, #220]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800452c:	4b35      	ldr	r3, [pc, #212]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a34      	ldr	r2, [pc, #208]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004538:	f7fd ff50 	bl	80023dc <HAL_GetTick>
 800453c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004540:	f7fd ff4c 	bl	80023dc <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b64      	cmp	r3, #100	; 0x64
 800454c:	d901      	bls.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e38f      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004552:	4b2c      	ldr	r3, [pc, #176]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800455e:	4b28      	ldr	r3, [pc, #160]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004566:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d035      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	429a      	cmp	r2, r3
 800457a:	d02e      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800457c:	4b20      	ldr	r3, [pc, #128]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004584:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004586:	4b1e      	ldr	r3, [pc, #120]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458a:	4a1d      	ldr	r2, [pc, #116]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004590:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004592:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a1a      	ldr	r2, [pc, #104]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800459e:	4a18      	ldr	r2, [pc, #96]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045a4:	4b16      	ldr	r3, [pc, #88]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d114      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fd ff14 	bl	80023dc <HAL_GetTick>
 80045b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b6:	e00a      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b8:	f7fd ff10 	bl	80023dc <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d901      	bls.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e351      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ce:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0ee      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e6:	d111      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045f4:	4b04      	ldr	r3, [pc, #16]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045f6:	400b      	ands	r3, r1
 80045f8:	4901      	ldr	r1, [pc, #4]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	608b      	str	r3, [r1, #8]
 80045fe:	e00b      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004600:	40023800 	.word	0x40023800
 8004604:	40007000 	.word	0x40007000
 8004608:	0ffffcff 	.word	0x0ffffcff
 800460c:	4bac      	ldr	r3, [pc, #688]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	4aab      	ldr	r2, [pc, #684]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004612:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004616:	6093      	str	r3, [r2, #8]
 8004618:	4ba9      	ldr	r3, [pc, #676]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800461a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004624:	49a6      	ldr	r1, [pc, #664]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004626:	4313      	orrs	r3, r2
 8004628:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b00      	cmp	r3, #0
 8004634:	d010      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004636:	4ba2      	ldr	r3, [pc, #648]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800463c:	4aa0      	ldr	r2, [pc, #640]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004642:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004646:	4b9e      	ldr	r3, [pc, #632]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004648:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	499b      	ldr	r1, [pc, #620]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004664:	4b96      	ldr	r3, [pc, #600]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004672:	4993      	ldr	r1, [pc, #588]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004686:	4b8e      	ldr	r3, [pc, #568]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004694:	498a      	ldr	r1, [pc, #552]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046a8:	4b85      	ldr	r3, [pc, #532]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b6:	4982      	ldr	r1, [pc, #520]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046ca:	4b7d      	ldr	r3, [pc, #500]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	4979      	ldr	r1, [pc, #484]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046ec:	4b74      	ldr	r3, [pc, #464]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f2:	f023 0203 	bic.w	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fa:	4971      	ldr	r1, [pc, #452]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800470e:	4b6c      	ldr	r3, [pc, #432]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004714:	f023 020c 	bic.w	r2, r3, #12
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471c:	4968      	ldr	r1, [pc, #416]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004730:	4b63      	ldr	r3, [pc, #396]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004736:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473e:	4960      	ldr	r1, [pc, #384]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004752:	4b5b      	ldr	r3, [pc, #364]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004758:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004760:	4957      	ldr	r1, [pc, #348]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004774:	4b52      	ldr	r3, [pc, #328]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	494f      	ldr	r1, [pc, #316]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004796:	4b4a      	ldr	r3, [pc, #296]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a4:	4946      	ldr	r1, [pc, #280]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047b8:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c6:	493e      	ldr	r1, [pc, #248]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047da:	4b39      	ldr	r3, [pc, #228]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e8:	4935      	ldr	r1, [pc, #212]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047fc:	4b30      	ldr	r3, [pc, #192]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004802:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800480a:	492d      	ldr	r1, [pc, #180]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d011      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800481e:	4b28      	ldr	r3, [pc, #160]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004824:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800482c:	4924      	ldr	r1, [pc, #144]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004838:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800483c:	d101      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800483e:	2301      	movs	r3, #1
 8004840:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800484e:	2301      	movs	r3, #1
 8004850:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800485e:	4b18      	ldr	r3, [pc, #96]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004864:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486c:	4914      	ldr	r1, [pc, #80]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00b      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004880:	4b0f      	ldr	r3, [pc, #60]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004886:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004890:	490b      	ldr	r1, [pc, #44]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00f      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80048a4:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b4:	4902      	ldr	r1, [pc, #8]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048bc:	e002      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80048be:	bf00      	nop
 80048c0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048d0:	4b8a      	ldr	r3, [pc, #552]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	4986      	ldr	r1, [pc, #536]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00b      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80048f4:	4b81      	ldr	r3, [pc, #516]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004904:	497d      	ldr	r1, [pc, #500]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d006      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 80d6 	beq.w	8004acc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004920:	4b76      	ldr	r3, [pc, #472]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a75      	ldr	r2, [pc, #468]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004926:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800492a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800492c:	f7fd fd56 	bl	80023dc <HAL_GetTick>
 8004930:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004934:	f7fd fd52 	bl	80023dc <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b64      	cmp	r3, #100	; 0x64
 8004940:	d901      	bls.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e195      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004946:	4b6d      	ldr	r3, [pc, #436]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d021      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004962:	2b00      	cmp	r3, #0
 8004964:	d11d      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004966:	4b65      	ldr	r3, [pc, #404]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800496c:	0c1b      	lsrs	r3, r3, #16
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004974:	4b61      	ldr	r3, [pc, #388]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800497a:	0e1b      	lsrs	r3, r3, #24
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	019a      	lsls	r2, r3, #6
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	041b      	lsls	r3, r3, #16
 800498c:	431a      	orrs	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	061b      	lsls	r3, r3, #24
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	071b      	lsls	r3, r3, #28
 800499a:	4958      	ldr	r1, [pc, #352]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d004      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b6:	d00a      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d02e      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049cc:	d129      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049ce:	4b4b      	ldr	r3, [pc, #300]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d4:	0c1b      	lsrs	r3, r3, #16
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049dc:	4b47      	ldr	r3, [pc, #284]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e2:	0f1b      	lsrs	r3, r3, #28
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	019a      	lsls	r2, r3, #6
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	041b      	lsls	r3, r3, #16
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	061b      	lsls	r3, r3, #24
 80049fc:	431a      	orrs	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	071b      	lsls	r3, r3, #28
 8004a02:	493e      	ldr	r1, [pc, #248]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a0a:	4b3c      	ldr	r3, [pc, #240]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a10:	f023 021f 	bic.w	r2, r3, #31
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	4938      	ldr	r1, [pc, #224]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d01d      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a2e:	4b33      	ldr	r3, [pc, #204]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a34:	0e1b      	lsrs	r3, r3, #24
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a3c:	4b2f      	ldr	r3, [pc, #188]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a42:	0f1b      	lsrs	r3, r3, #28
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	019a      	lsls	r2, r3, #6
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	041b      	lsls	r3, r3, #16
 8004a56:	431a      	orrs	r2, r3
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	061b      	lsls	r3, r3, #24
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	071b      	lsls	r3, r3, #28
 8004a62:	4926      	ldr	r1, [pc, #152]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d011      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	019a      	lsls	r2, r3, #6
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	041b      	lsls	r3, r3, #16
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	061b      	lsls	r3, r3, #24
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	071b      	lsls	r3, r3, #28
 8004a92:	491a      	ldr	r1, [pc, #104]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a9a:	4b18      	ldr	r3, [pc, #96]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a17      	ldr	r2, [pc, #92]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa6:	f7fd fc99 	bl	80023dc <HAL_GetTick>
 8004aaa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004aae:	f7fd fc95 	bl	80023dc <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b64      	cmp	r3, #100	; 0x64
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e0d8      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ac0:	4b0e      	ldr	r3, [pc, #56]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0f0      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	f040 80ce 	bne.w	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ad4:	4b09      	ldr	r3, [pc, #36]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a08      	ldr	r2, [pc, #32]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae0:	f7fd fc7c 	bl	80023dc <HAL_GetTick>
 8004ae4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ae6:	e00b      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ae8:	f7fd fc78 	bl	80023dc <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b64      	cmp	r3, #100	; 0x64
 8004af4:	d904      	bls.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e0bb      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b00:	4b5e      	ldr	r3, [pc, #376]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b0c:	d0ec      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d02e      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d12a      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b36:	4b51      	ldr	r3, [pc, #324]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3c:	0c1b      	lsrs	r3, r3, #16
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b44:	4b4d      	ldr	r3, [pc, #308]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	0f1b      	lsrs	r3, r3, #28
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	019a      	lsls	r2, r3, #6
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	041b      	lsls	r3, r3, #16
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	061b      	lsls	r3, r3, #24
 8004b64:	431a      	orrs	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	071b      	lsls	r3, r3, #28
 8004b6a:	4944      	ldr	r1, [pc, #272]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b72:	4b42      	ldr	r3, [pc, #264]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	3b01      	subs	r3, #1
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	493d      	ldr	r1, [pc, #244]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d022      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba0:	d11d      	bne.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ba2:	4b36      	ldr	r3, [pc, #216]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba8:	0e1b      	lsrs	r3, r3, #24
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bb0:	4b32      	ldr	r3, [pc, #200]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb6:	0f1b      	lsrs	r3, r3, #28
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	019a      	lsls	r2, r3, #6
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	041b      	lsls	r3, r3, #16
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	061b      	lsls	r3, r3, #24
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	071b      	lsls	r3, r3, #28
 8004bd6:	4929      	ldr	r1, [pc, #164]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d028      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bea:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf0:	0e1b      	lsrs	r3, r3, #24
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bf8:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfe:	0c1b      	lsrs	r3, r3, #16
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	019a      	lsls	r2, r3, #6
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	041b      	lsls	r3, r3, #16
 8004c10:	431a      	orrs	r2, r3
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	061b      	lsls	r3, r3, #24
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	071b      	lsls	r3, r3, #28
 8004c1e:	4917      	ldr	r1, [pc, #92]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c26:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	4911      	ldr	r1, [pc, #68]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a0e      	ldr	r2, [pc, #56]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c48:	f7fd fbc8 	bl	80023dc <HAL_GetTick>
 8004c4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c50:	f7fd fbc4 	bl	80023dc <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b64      	cmp	r3, #100	; 0x64
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e007      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c62:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c6e:	d1ef      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3720      	adds	r7, #32
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40023800 	.word	0x40023800

08004c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e049      	b.n	8004d26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fd f89e 	bl	8001de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f000 fd32 	bl	8005728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d001      	beq.n	8004d48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e04c      	b.n	8004de2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a26      	ldr	r2, [pc, #152]	; (8004df0 <HAL_TIM_Base_Start+0xc0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d022      	beq.n	8004da0 <HAL_TIM_Base_Start+0x70>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d62:	d01d      	beq.n	8004da0 <HAL_TIM_Base_Start+0x70>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a22      	ldr	r2, [pc, #136]	; (8004df4 <HAL_TIM_Base_Start+0xc4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d018      	beq.n	8004da0 <HAL_TIM_Base_Start+0x70>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a21      	ldr	r2, [pc, #132]	; (8004df8 <HAL_TIM_Base_Start+0xc8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d013      	beq.n	8004da0 <HAL_TIM_Base_Start+0x70>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1f      	ldr	r2, [pc, #124]	; (8004dfc <HAL_TIM_Base_Start+0xcc>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00e      	beq.n	8004da0 <HAL_TIM_Base_Start+0x70>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a1e      	ldr	r2, [pc, #120]	; (8004e00 <HAL_TIM_Base_Start+0xd0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d009      	beq.n	8004da0 <HAL_TIM_Base_Start+0x70>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a1c      	ldr	r2, [pc, #112]	; (8004e04 <HAL_TIM_Base_Start+0xd4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d004      	beq.n	8004da0 <HAL_TIM_Base_Start+0x70>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a1b      	ldr	r2, [pc, #108]	; (8004e08 <HAL_TIM_Base_Start+0xd8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d115      	bne.n	8004dcc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <HAL_TIM_Base_Start+0xdc>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b06      	cmp	r3, #6
 8004db0:	d015      	beq.n	8004dde <HAL_TIM_Base_Start+0xae>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db8:	d011      	beq.n	8004dde <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0201 	orr.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dca:	e008      	b.n	8004dde <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	e000      	b.n	8004de0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40010000 	.word	0x40010000
 8004df4:	40000400 	.word	0x40000400
 8004df8:	40000800 	.word	0x40000800
 8004dfc:	40000c00 	.word	0x40000c00
 8004e00:	40010400 	.word	0x40010400
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40001800 	.word	0x40001800
 8004e0c:	00010007 	.word	0x00010007

08004e10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e049      	b.n	8004eb6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f841 	bl	8004ebe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	f000 fc6a 	bl	8005728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
	...

08004ed4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d109      	bne.n	8004ef8 <HAL_TIM_PWM_Start+0x24>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	bf14      	ite	ne
 8004ef0:	2301      	movne	r3, #1
 8004ef2:	2300      	moveq	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	e03c      	b.n	8004f72 <HAL_TIM_PWM_Start+0x9e>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d109      	bne.n	8004f12 <HAL_TIM_PWM_Start+0x3e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	bf14      	ite	ne
 8004f0a:	2301      	movne	r3, #1
 8004f0c:	2300      	moveq	r3, #0
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	e02f      	b.n	8004f72 <HAL_TIM_PWM_Start+0x9e>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d109      	bne.n	8004f2c <HAL_TIM_PWM_Start+0x58>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	bf14      	ite	ne
 8004f24:	2301      	movne	r3, #1
 8004f26:	2300      	moveq	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	e022      	b.n	8004f72 <HAL_TIM_PWM_Start+0x9e>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b0c      	cmp	r3, #12
 8004f30:	d109      	bne.n	8004f46 <HAL_TIM_PWM_Start+0x72>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	bf14      	ite	ne
 8004f3e:	2301      	movne	r3, #1
 8004f40:	2300      	moveq	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	e015      	b.n	8004f72 <HAL_TIM_PWM_Start+0x9e>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d109      	bne.n	8004f60 <HAL_TIM_PWM_Start+0x8c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	bf14      	ite	ne
 8004f58:	2301      	movne	r3, #1
 8004f5a:	2300      	moveq	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	e008      	b.n	8004f72 <HAL_TIM_PWM_Start+0x9e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	bf14      	ite	ne
 8004f6c:	2301      	movne	r3, #1
 8004f6e:	2300      	moveq	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e092      	b.n	80050a0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_PWM_Start+0xb6>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f88:	e023      	b.n	8004fd2 <HAL_TIM_PWM_Start+0xfe>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d104      	bne.n	8004f9a <HAL_TIM_PWM_Start+0xc6>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f98:	e01b      	b.n	8004fd2 <HAL_TIM_PWM_Start+0xfe>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d104      	bne.n	8004faa <HAL_TIM_PWM_Start+0xd6>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa8:	e013      	b.n	8004fd2 <HAL_TIM_PWM_Start+0xfe>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b0c      	cmp	r3, #12
 8004fae:	d104      	bne.n	8004fba <HAL_TIM_PWM_Start+0xe6>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fb8:	e00b      	b.n	8004fd2 <HAL_TIM_PWM_Start+0xfe>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d104      	bne.n	8004fca <HAL_TIM_PWM_Start+0xf6>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc8:	e003      	b.n	8004fd2 <HAL_TIM_PWM_Start+0xfe>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	6839      	ldr	r1, [r7, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 ff3c 	bl	8005e58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a30      	ldr	r2, [pc, #192]	; (80050a8 <HAL_TIM_PWM_Start+0x1d4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_TIM_PWM_Start+0x120>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a2f      	ldr	r2, [pc, #188]	; (80050ac <HAL_TIM_PWM_Start+0x1d8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d101      	bne.n	8004ff8 <HAL_TIM_PWM_Start+0x124>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <HAL_TIM_PWM_Start+0x126>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800500c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a25      	ldr	r2, [pc, #148]	; (80050a8 <HAL_TIM_PWM_Start+0x1d4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d022      	beq.n	800505e <HAL_TIM_PWM_Start+0x18a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005020:	d01d      	beq.n	800505e <HAL_TIM_PWM_Start+0x18a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a22      	ldr	r2, [pc, #136]	; (80050b0 <HAL_TIM_PWM_Start+0x1dc>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d018      	beq.n	800505e <HAL_TIM_PWM_Start+0x18a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a20      	ldr	r2, [pc, #128]	; (80050b4 <HAL_TIM_PWM_Start+0x1e0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d013      	beq.n	800505e <HAL_TIM_PWM_Start+0x18a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1f      	ldr	r2, [pc, #124]	; (80050b8 <HAL_TIM_PWM_Start+0x1e4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00e      	beq.n	800505e <HAL_TIM_PWM_Start+0x18a>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a19      	ldr	r2, [pc, #100]	; (80050ac <HAL_TIM_PWM_Start+0x1d8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d009      	beq.n	800505e <HAL_TIM_PWM_Start+0x18a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1b      	ldr	r2, [pc, #108]	; (80050bc <HAL_TIM_PWM_Start+0x1e8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d004      	beq.n	800505e <HAL_TIM_PWM_Start+0x18a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a19      	ldr	r2, [pc, #100]	; (80050c0 <HAL_TIM_PWM_Start+0x1ec>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d115      	bne.n	800508a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	4b17      	ldr	r3, [pc, #92]	; (80050c4 <HAL_TIM_PWM_Start+0x1f0>)
 8005066:	4013      	ands	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b06      	cmp	r3, #6
 800506e:	d015      	beq.n	800509c <HAL_TIM_PWM_Start+0x1c8>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005076:	d011      	beq.n	800509c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005088:	e008      	b.n	800509c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f042 0201 	orr.w	r2, r2, #1
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	e000      	b.n	800509e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40010000 	.word	0x40010000
 80050ac:	40010400 	.word	0x40010400
 80050b0:	40000400 	.word	0x40000400
 80050b4:	40000800 	.word	0x40000800
 80050b8:	40000c00 	.word	0x40000c00
 80050bc:	40014000 	.word	0x40014000
 80050c0:	40001800 	.word	0x40001800
 80050c4:	00010007 	.word	0x00010007

080050c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d122      	bne.n	8005124 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d11b      	bne.n	8005124 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0202 	mvn.w	r2, #2
 80050f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 faee 	bl	80056ec <HAL_TIM_IC_CaptureCallback>
 8005110:	e005      	b.n	800511e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fae0 	bl	80056d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 faf1 	bl	8005700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b04      	cmp	r3, #4
 8005130:	d122      	bne.n	8005178 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b04      	cmp	r3, #4
 800513e:	d11b      	bne.n	8005178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0204 	mvn.w	r2, #4
 8005148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2202      	movs	r2, #2
 800514e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fac4 	bl	80056ec <HAL_TIM_IC_CaptureCallback>
 8005164:	e005      	b.n	8005172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fab6 	bl	80056d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fac7 	bl	8005700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b08      	cmp	r3, #8
 8005184:	d122      	bne.n	80051cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b08      	cmp	r3, #8
 8005192:	d11b      	bne.n	80051cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0208 	mvn.w	r2, #8
 800519c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2204      	movs	r2, #4
 80051a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fa9a 	bl	80056ec <HAL_TIM_IC_CaptureCallback>
 80051b8:	e005      	b.n	80051c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fa8c 	bl	80056d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fa9d 	bl	8005700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b10      	cmp	r3, #16
 80051d8:	d122      	bne.n	8005220 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b10      	cmp	r3, #16
 80051e6:	d11b      	bne.n	8005220 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0210 	mvn.w	r2, #16
 80051f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2208      	movs	r2, #8
 80051f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa70 	bl	80056ec <HAL_TIM_IC_CaptureCallback>
 800520c:	e005      	b.n	800521a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fa62 	bl	80056d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fa73 	bl	8005700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b01      	cmp	r3, #1
 800522c:	d10e      	bne.n	800524c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b01      	cmp	r3, #1
 800523a:	d107      	bne.n	800524c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0201 	mvn.w	r2, #1
 8005244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa3c 	bl	80056c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005256:	2b80      	cmp	r3, #128	; 0x80
 8005258:	d10e      	bne.n	8005278 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005264:	2b80      	cmp	r3, #128	; 0x80
 8005266:	d107      	bne.n	8005278 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 feae 	bl	8005fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005286:	d10e      	bne.n	80052a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005292:	2b80      	cmp	r3, #128	; 0x80
 8005294:	d107      	bne.n	80052a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800529e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fea1 	bl	8005fe8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d10e      	bne.n	80052d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052be:	2b40      	cmp	r3, #64	; 0x40
 80052c0:	d107      	bne.n	80052d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fa21 	bl	8005714 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d10e      	bne.n	80052fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b20      	cmp	r3, #32
 80052ec:	d107      	bne.n	80052fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f06f 0220 	mvn.w	r2, #32
 80052f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fe61 	bl	8005fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005322:	2302      	movs	r3, #2
 8005324:	e0ff      	b.n	8005526 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b14      	cmp	r3, #20
 8005332:	f200 80f0 	bhi.w	8005516 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005336:	a201      	add	r2, pc, #4	; (adr r2, 800533c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	08005391 	.word	0x08005391
 8005340:	08005517 	.word	0x08005517
 8005344:	08005517 	.word	0x08005517
 8005348:	08005517 	.word	0x08005517
 800534c:	080053d1 	.word	0x080053d1
 8005350:	08005517 	.word	0x08005517
 8005354:	08005517 	.word	0x08005517
 8005358:	08005517 	.word	0x08005517
 800535c:	08005413 	.word	0x08005413
 8005360:	08005517 	.word	0x08005517
 8005364:	08005517 	.word	0x08005517
 8005368:	08005517 	.word	0x08005517
 800536c:	08005453 	.word	0x08005453
 8005370:	08005517 	.word	0x08005517
 8005374:	08005517 	.word	0x08005517
 8005378:	08005517 	.word	0x08005517
 800537c:	08005495 	.word	0x08005495
 8005380:	08005517 	.word	0x08005517
 8005384:	08005517 	.word	0x08005517
 8005388:	08005517 	.word	0x08005517
 800538c:	080054d5 	.word	0x080054d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fa66 	bl	8005868 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0208 	orr.w	r2, r2, #8
 80053aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0204 	bic.w	r2, r2, #4
 80053ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6999      	ldr	r1, [r3, #24]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	619a      	str	r2, [r3, #24]
      break;
 80053ce:	e0a5      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fab8 	bl	800594c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6999      	ldr	r1, [r3, #24]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	021a      	lsls	r2, r3, #8
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	619a      	str	r2, [r3, #24]
      break;
 8005410:	e084      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fb0f 	bl	8005a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69da      	ldr	r2, [r3, #28]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0208 	orr.w	r2, r2, #8
 800542c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0204 	bic.w	r2, r2, #4
 800543c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69d9      	ldr	r1, [r3, #28]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	61da      	str	r2, [r3, #28]
      break;
 8005450:	e064      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fb65 	bl	8005b28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800546c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800547c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69d9      	ldr	r1, [r3, #28]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	021a      	lsls	r2, r3, #8
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	61da      	str	r2, [r3, #28]
      break;
 8005492:	e043      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fb9c 	bl	8005bd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0208 	orr.w	r2, r2, #8
 80054ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0204 	bic.w	r2, r2, #4
 80054be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054d2:	e023      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fbce 	bl	8005c7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	021a      	lsls	r2, r3, #8
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005514:	e002      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	75fb      	strb	r3, [r7, #23]
      break;
 800551a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005524:	7dfb      	ldrb	r3, [r7, #23]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop

08005530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_TIM_ConfigClockSource+0x1c>
 8005548:	2302      	movs	r3, #2
 800554a:	e0b4      	b.n	80056b6 <HAL_TIM_ConfigClockSource+0x186>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	4b56      	ldr	r3, [pc, #344]	; (80056c0 <HAL_TIM_ConfigClockSource+0x190>)
 8005568:	4013      	ands	r3, r2
 800556a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005572:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005584:	d03e      	beq.n	8005604 <HAL_TIM_ConfigClockSource+0xd4>
 8005586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800558a:	f200 8087 	bhi.w	800569c <HAL_TIM_ConfigClockSource+0x16c>
 800558e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005592:	f000 8086 	beq.w	80056a2 <HAL_TIM_ConfigClockSource+0x172>
 8005596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559a:	d87f      	bhi.n	800569c <HAL_TIM_ConfigClockSource+0x16c>
 800559c:	2b70      	cmp	r3, #112	; 0x70
 800559e:	d01a      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0xa6>
 80055a0:	2b70      	cmp	r3, #112	; 0x70
 80055a2:	d87b      	bhi.n	800569c <HAL_TIM_ConfigClockSource+0x16c>
 80055a4:	2b60      	cmp	r3, #96	; 0x60
 80055a6:	d050      	beq.n	800564a <HAL_TIM_ConfigClockSource+0x11a>
 80055a8:	2b60      	cmp	r3, #96	; 0x60
 80055aa:	d877      	bhi.n	800569c <HAL_TIM_ConfigClockSource+0x16c>
 80055ac:	2b50      	cmp	r3, #80	; 0x50
 80055ae:	d03c      	beq.n	800562a <HAL_TIM_ConfigClockSource+0xfa>
 80055b0:	2b50      	cmp	r3, #80	; 0x50
 80055b2:	d873      	bhi.n	800569c <HAL_TIM_ConfigClockSource+0x16c>
 80055b4:	2b40      	cmp	r3, #64	; 0x40
 80055b6:	d058      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x13a>
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d86f      	bhi.n	800569c <HAL_TIM_ConfigClockSource+0x16c>
 80055bc:	2b30      	cmp	r3, #48	; 0x30
 80055be:	d064      	beq.n	800568a <HAL_TIM_ConfigClockSource+0x15a>
 80055c0:	2b30      	cmp	r3, #48	; 0x30
 80055c2:	d86b      	bhi.n	800569c <HAL_TIM_ConfigClockSource+0x16c>
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	d060      	beq.n	800568a <HAL_TIM_ConfigClockSource+0x15a>
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	d867      	bhi.n	800569c <HAL_TIM_ConfigClockSource+0x16c>
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d05c      	beq.n	800568a <HAL_TIM_ConfigClockSource+0x15a>
 80055d0:	2b10      	cmp	r3, #16
 80055d2:	d05a      	beq.n	800568a <HAL_TIM_ConfigClockSource+0x15a>
 80055d4:	e062      	b.n	800569c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	6899      	ldr	r1, [r3, #8]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f000 fc17 	bl	8005e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	609a      	str	r2, [r3, #8]
      break;
 8005602:	e04f      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6818      	ldr	r0, [r3, #0]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	6899      	ldr	r1, [r3, #8]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f000 fc00 	bl	8005e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005626:	609a      	str	r2, [r3, #8]
      break;
 8005628:	e03c      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	6859      	ldr	r1, [r3, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	461a      	mov	r2, r3
 8005638:	f000 fb74 	bl	8005d24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2150      	movs	r1, #80	; 0x50
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fbcd 	bl	8005de2 <TIM_ITRx_SetConfig>
      break;
 8005648:	e02c      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6818      	ldr	r0, [r3, #0]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	6859      	ldr	r1, [r3, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	461a      	mov	r2, r3
 8005658:	f000 fb93 	bl	8005d82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2160      	movs	r1, #96	; 0x60
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fbbd 	bl	8005de2 <TIM_ITRx_SetConfig>
      break;
 8005668:	e01c      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	6859      	ldr	r1, [r3, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	461a      	mov	r2, r3
 8005678:	f000 fb54 	bl	8005d24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2140      	movs	r1, #64	; 0x40
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fbad 	bl	8005de2 <TIM_ITRx_SetConfig>
      break;
 8005688:	e00c      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4619      	mov	r1, r3
 8005694:	4610      	mov	r0, r2
 8005696:	f000 fba4 	bl	8005de2 <TIM_ITRx_SetConfig>
      break;
 800569a:	e003      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	73fb      	strb	r3, [r7, #15]
      break;
 80056a0:	e000      	b.n	80056a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	fffeff88 	.word	0xfffeff88

080056c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a40      	ldr	r2, [pc, #256]	; (800583c <TIM_Base_SetConfig+0x114>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d013      	beq.n	8005768 <TIM_Base_SetConfig+0x40>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005746:	d00f      	beq.n	8005768 <TIM_Base_SetConfig+0x40>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a3d      	ldr	r2, [pc, #244]	; (8005840 <TIM_Base_SetConfig+0x118>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d00b      	beq.n	8005768 <TIM_Base_SetConfig+0x40>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a3c      	ldr	r2, [pc, #240]	; (8005844 <TIM_Base_SetConfig+0x11c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d007      	beq.n	8005768 <TIM_Base_SetConfig+0x40>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a3b      	ldr	r2, [pc, #236]	; (8005848 <TIM_Base_SetConfig+0x120>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d003      	beq.n	8005768 <TIM_Base_SetConfig+0x40>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a3a      	ldr	r2, [pc, #232]	; (800584c <TIM_Base_SetConfig+0x124>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d108      	bne.n	800577a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a2f      	ldr	r2, [pc, #188]	; (800583c <TIM_Base_SetConfig+0x114>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d02b      	beq.n	80057da <TIM_Base_SetConfig+0xb2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005788:	d027      	beq.n	80057da <TIM_Base_SetConfig+0xb2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a2c      	ldr	r2, [pc, #176]	; (8005840 <TIM_Base_SetConfig+0x118>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d023      	beq.n	80057da <TIM_Base_SetConfig+0xb2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a2b      	ldr	r2, [pc, #172]	; (8005844 <TIM_Base_SetConfig+0x11c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d01f      	beq.n	80057da <TIM_Base_SetConfig+0xb2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a2a      	ldr	r2, [pc, #168]	; (8005848 <TIM_Base_SetConfig+0x120>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d01b      	beq.n	80057da <TIM_Base_SetConfig+0xb2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a29      	ldr	r2, [pc, #164]	; (800584c <TIM_Base_SetConfig+0x124>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d017      	beq.n	80057da <TIM_Base_SetConfig+0xb2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a28      	ldr	r2, [pc, #160]	; (8005850 <TIM_Base_SetConfig+0x128>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <TIM_Base_SetConfig+0xb2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a27      	ldr	r2, [pc, #156]	; (8005854 <TIM_Base_SetConfig+0x12c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00f      	beq.n	80057da <TIM_Base_SetConfig+0xb2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a26      	ldr	r2, [pc, #152]	; (8005858 <TIM_Base_SetConfig+0x130>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00b      	beq.n	80057da <TIM_Base_SetConfig+0xb2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a25      	ldr	r2, [pc, #148]	; (800585c <TIM_Base_SetConfig+0x134>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d007      	beq.n	80057da <TIM_Base_SetConfig+0xb2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a24      	ldr	r2, [pc, #144]	; (8005860 <TIM_Base_SetConfig+0x138>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d003      	beq.n	80057da <TIM_Base_SetConfig+0xb2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a23      	ldr	r2, [pc, #140]	; (8005864 <TIM_Base_SetConfig+0x13c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d108      	bne.n	80057ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a0a      	ldr	r2, [pc, #40]	; (800583c <TIM_Base_SetConfig+0x114>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d003      	beq.n	8005820 <TIM_Base_SetConfig+0xf8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a0c      	ldr	r2, [pc, #48]	; (800584c <TIM_Base_SetConfig+0x124>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d103      	bne.n	8005828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	615a      	str	r2, [r3, #20]
}
 800582e:	bf00      	nop
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40010000 	.word	0x40010000
 8005840:	40000400 	.word	0x40000400
 8005844:	40000800 	.word	0x40000800
 8005848:	40000c00 	.word	0x40000c00
 800584c:	40010400 	.word	0x40010400
 8005850:	40014000 	.word	0x40014000
 8005854:	40014400 	.word	0x40014400
 8005858:	40014800 	.word	0x40014800
 800585c:	40001800 	.word	0x40001800
 8005860:	40001c00 	.word	0x40001c00
 8005864:	40002000 	.word	0x40002000

08005868 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f023 0201 	bic.w	r2, r3, #1
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4b2b      	ldr	r3, [pc, #172]	; (8005940 <TIM_OC1_SetConfig+0xd8>)
 8005894:	4013      	ands	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0303 	bic.w	r3, r3, #3
 800589e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f023 0302 	bic.w	r3, r3, #2
 80058b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a21      	ldr	r2, [pc, #132]	; (8005944 <TIM_OC1_SetConfig+0xdc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_OC1_SetConfig+0x64>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a20      	ldr	r2, [pc, #128]	; (8005948 <TIM_OC1_SetConfig+0xe0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d10c      	bne.n	80058e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f023 0308 	bic.w	r3, r3, #8
 80058d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f023 0304 	bic.w	r3, r3, #4
 80058e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a16      	ldr	r2, [pc, #88]	; (8005944 <TIM_OC1_SetConfig+0xdc>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d003      	beq.n	80058f6 <TIM_OC1_SetConfig+0x8e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a15      	ldr	r2, [pc, #84]	; (8005948 <TIM_OC1_SetConfig+0xe0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d111      	bne.n	800591a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	621a      	str	r2, [r3, #32]
}
 8005934:	bf00      	nop
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	fffeff8f 	.word	0xfffeff8f
 8005944:	40010000 	.word	0x40010000
 8005948:	40010400 	.word	0x40010400

0800594c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f023 0210 	bic.w	r2, r3, #16
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4b2e      	ldr	r3, [pc, #184]	; (8005a30 <TIM_OC2_SetConfig+0xe4>)
 8005978:	4013      	ands	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	021b      	lsls	r3, r3, #8
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f023 0320 	bic.w	r3, r3, #32
 8005996:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a23      	ldr	r2, [pc, #140]	; (8005a34 <TIM_OC2_SetConfig+0xe8>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d003      	beq.n	80059b4 <TIM_OC2_SetConfig+0x68>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a22      	ldr	r2, [pc, #136]	; (8005a38 <TIM_OC2_SetConfig+0xec>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d10d      	bne.n	80059d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a18      	ldr	r2, [pc, #96]	; (8005a34 <TIM_OC2_SetConfig+0xe8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_OC2_SetConfig+0x94>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a17      	ldr	r2, [pc, #92]	; (8005a38 <TIM_OC2_SetConfig+0xec>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d113      	bne.n	8005a08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	621a      	str	r2, [r3, #32]
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	feff8fff 	.word	0xfeff8fff
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40010400 	.word	0x40010400

08005a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4b2d      	ldr	r3, [pc, #180]	; (8005b1c <TIM_OC3_SetConfig+0xe0>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0303 	bic.w	r3, r3, #3
 8005a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	021b      	lsls	r3, r3, #8
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a22      	ldr	r2, [pc, #136]	; (8005b20 <TIM_OC3_SetConfig+0xe4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_OC3_SetConfig+0x66>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a21      	ldr	r2, [pc, #132]	; (8005b24 <TIM_OC3_SetConfig+0xe8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d10d      	bne.n	8005abe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a17      	ldr	r2, [pc, #92]	; (8005b20 <TIM_OC3_SetConfig+0xe4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <TIM_OC3_SetConfig+0x92>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a16      	ldr	r2, [pc, #88]	; (8005b24 <TIM_OC3_SetConfig+0xe8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d113      	bne.n	8005af6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	621a      	str	r2, [r3, #32]
}
 8005b10:	bf00      	nop
 8005b12:	371c      	adds	r7, #28
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	fffeff8f 	.word	0xfffeff8f
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40010400 	.word	0x40010400

08005b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4b1e      	ldr	r3, [pc, #120]	; (8005bcc <TIM_OC4_SetConfig+0xa4>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	031b      	lsls	r3, r3, #12
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a13      	ldr	r2, [pc, #76]	; (8005bd0 <TIM_OC4_SetConfig+0xa8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_OC4_SetConfig+0x68>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a12      	ldr	r2, [pc, #72]	; (8005bd4 <TIM_OC4_SetConfig+0xac>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d109      	bne.n	8005ba4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	019b      	lsls	r3, r3, #6
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	feff8fff 	.word	0xfeff8fff
 8005bd0:	40010000 	.word	0x40010000
 8005bd4:	40010400 	.word	0x40010400

08005bd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4b1b      	ldr	r3, [pc, #108]	; (8005c70 <TIM_OC5_SetConfig+0x98>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	041b      	lsls	r3, r3, #16
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <TIM_OC5_SetConfig+0x9c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d003      	beq.n	8005c36 <TIM_OC5_SetConfig+0x5e>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a11      	ldr	r2, [pc, #68]	; (8005c78 <TIM_OC5_SetConfig+0xa0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d109      	bne.n	8005c4a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	621a      	str	r2, [r3, #32]
}
 8005c64:	bf00      	nop
 8005c66:	371c      	adds	r7, #28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	fffeff8f 	.word	0xfffeff8f
 8005c74:	40010000 	.word	0x40010000
 8005c78:	40010400 	.word	0x40010400

08005c7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4b1c      	ldr	r3, [pc, #112]	; (8005d18 <TIM_OC6_SetConfig+0x9c>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	021b      	lsls	r3, r3, #8
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	051b      	lsls	r3, r3, #20
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a13      	ldr	r2, [pc, #76]	; (8005d1c <TIM_OC6_SetConfig+0xa0>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_OC6_SetConfig+0x60>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a12      	ldr	r2, [pc, #72]	; (8005d20 <TIM_OC6_SetConfig+0xa4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d109      	bne.n	8005cf0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	029b      	lsls	r3, r3, #10
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	feff8fff 	.word	0xfeff8fff
 8005d1c:	40010000 	.word	0x40010000
 8005d20:	40010400 	.word	0x40010400

08005d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f023 0201 	bic.w	r2, r3, #1
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f023 030a 	bic.w	r3, r3, #10
 8005d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	621a      	str	r2, [r3, #32]
}
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b087      	sub	sp, #28
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	f023 0210 	bic.w	r2, r3, #16
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	031b      	lsls	r3, r3, #12
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	621a      	str	r2, [r3, #32]
}
 8005dd6:	bf00      	nop
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b085      	sub	sp, #20
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f043 0307 	orr.w	r3, r3, #7
 8005e04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	609a      	str	r2, [r3, #8]
}
 8005e0c:	bf00      	nop
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	021a      	lsls	r2, r3, #8
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	609a      	str	r2, [r3, #8]
}
 8005e4c:	bf00      	nop
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f003 031f 	and.w	r3, r3, #31
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1a      	ldr	r2, [r3, #32]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	401a      	ands	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1a      	ldr	r2, [r3, #32]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 031f 	and.w	r3, r3, #31
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e90:	431a      	orrs	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	621a      	str	r2, [r3, #32]
}
 8005e96:	bf00      	nop
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
	...

08005ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e06d      	b.n	8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a30      	ldr	r2, [pc, #192]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a2f      	ldr	r2, [pc, #188]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d108      	bne.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ef6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a20      	ldr	r2, [pc, #128]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d022      	beq.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f2e:	d01d      	beq.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1d      	ldr	r2, [pc, #116]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d018      	beq.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a1c      	ldr	r2, [pc, #112]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d013      	beq.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a1a      	ldr	r2, [pc, #104]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00e      	beq.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a15      	ldr	r2, [pc, #84]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d009      	beq.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a16      	ldr	r2, [pc, #88]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d004      	beq.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a15      	ldr	r2, [pc, #84]	; (8005fbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d10c      	bne.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	40010000 	.word	0x40010000
 8005fa8:	40010400 	.word	0x40010400
 8005fac:	40000400 	.word	0x40000400
 8005fb0:	40000800 	.word	0x40000800
 8005fb4:	40000c00 	.word	0x40000c00
 8005fb8:	40014000 	.word	0x40014000
 8005fbc:	40001800 	.word	0x40001800

08005fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e040      	b.n	8006090 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fb ff58 	bl	8001ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2224      	movs	r2, #36	; 0x24
 8006028:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0201 	bic.w	r2, r2, #1
 8006038:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fb84 	bl	8006748 <UART_SetConfig>
 8006040:	4603      	mov	r3, r0
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e022      	b.n	8006090 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fddc 	bl	8006c10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006066:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006076:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fe63 	bl	8006d54 <UART_CheckIdleState>
 800608e:	4603      	mov	r3, r0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08a      	sub	sp, #40	; 0x28
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	4613      	mov	r3, r2
 80060a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	d13d      	bne.n	800612a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <HAL_UART_Receive_IT+0x22>
 80060b4:	88fb      	ldrh	r3, [r7, #6]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e036      	b.n	800612c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <HAL_UART_Receive_IT+0x34>
 80060c8:	2302      	movs	r3, #2
 80060ca:	e02f      	b.n	800612c <HAL_UART_Receive_IT+0x94>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d018      	beq.n	800611a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	613b      	str	r3, [r7, #16]
   return(result);
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	623b      	str	r3, [r7, #32]
 8006108:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610a:	69f9      	ldr	r1, [r7, #28]
 800610c:	6a3a      	ldr	r2, [r7, #32]
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	61bb      	str	r3, [r7, #24]
   return(result);
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e6      	bne.n	80060e8 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800611a:	88fb      	ldrh	r3, [r7, #6]
 800611c:	461a      	mov	r2, r3
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 ff25 	bl	8006f70 <UART_Start_Receive_IT>
 8006126:	4603      	mov	r3, r0
 8006128:	e000      	b.n	800612c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800612a:	2302      	movs	r3, #2
  }
}
 800612c:	4618      	mov	r0, r3
 800612e:	3728      	adds	r7, #40	; 0x28
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b0ba      	sub	sp, #232	; 0xe8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800615a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800615e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006162:	4013      	ands	r3, r2
 8006164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006168:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800616c:	2b00      	cmp	r3, #0
 800616e:	d115      	bne.n	800619c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006174:	f003 0320 	and.w	r3, r3, #32
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00f      	beq.n	800619c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800617c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006180:	f003 0320 	and.w	r3, r3, #32
 8006184:	2b00      	cmp	r3, #0
 8006186:	d009      	beq.n	800619c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 82a4 	beq.w	80066da <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	4798      	blx	r3
      }
      return;
 800619a:	e29e      	b.n	80066da <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800619c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 8117 	beq.w	80063d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80061a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d106      	bne.n	80061c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80061b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80061b6:	4b85      	ldr	r3, [pc, #532]	; (80063cc <HAL_UART_IRQHandler+0x298>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 810a 	beq.w	80063d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d011      	beq.n	80061f0 <HAL_UART_IRQHandler+0xbc>
 80061cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00b      	beq.n	80061f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2201      	movs	r2, #1
 80061de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061e6:	f043 0201 	orr.w	r2, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d011      	beq.n	8006220 <HAL_UART_IRQHandler+0xec>
 80061fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00b      	beq.n	8006220 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2202      	movs	r2, #2
 800620e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006216:	f043 0204 	orr.w	r2, r3, #4
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b00      	cmp	r3, #0
 800622a:	d011      	beq.n	8006250 <HAL_UART_IRQHandler+0x11c>
 800622c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00b      	beq.n	8006250 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2204      	movs	r2, #4
 800623e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006246:	f043 0202 	orr.w	r2, r3, #2
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d017      	beq.n	800628c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800625c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b00      	cmp	r3, #0
 8006266:	d105      	bne.n	8006274 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800626c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00b      	beq.n	800628c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2208      	movs	r2, #8
 800627a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006282:	f043 0208 	orr.w	r2, r3, #8
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800628c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006294:	2b00      	cmp	r3, #0
 8006296:	d012      	beq.n	80062be <HAL_UART_IRQHandler+0x18a>
 8006298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800629c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00c      	beq.n	80062be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062b4:	f043 0220 	orr.w	r2, r3, #32
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 820a 	beq.w	80066de <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80062ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00d      	beq.n	80062f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d007      	beq.n	80062f2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006306:	2b40      	cmp	r3, #64	; 0x40
 8006308:	d005      	beq.n	8006316 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800630a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800630e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006312:	2b00      	cmp	r3, #0
 8006314:	d04f      	beq.n	80063b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fef4 	bl	8007104 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006326:	2b40      	cmp	r3, #64	; 0x40
 8006328:	d141      	bne.n	80063ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3308      	adds	r3, #8
 8006330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3308      	adds	r3, #8
 8006352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006356:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800635a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800636e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1d9      	bne.n	800632a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637a:	2b00      	cmp	r3, #0
 800637c:	d013      	beq.n	80063a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006382:	4a13      	ldr	r2, [pc, #76]	; (80063d0 <HAL_UART_IRQHandler+0x29c>)
 8006384:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638a:	4618      	mov	r0, r3
 800638c:	f7fc f9d7 	bl	800273e <HAL_DMA_Abort_IT>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d017      	beq.n	80063c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80063a0:	4610      	mov	r0, r2
 80063a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a4:	e00f      	b.n	80063c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f9ae 	bl	8006708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ac:	e00b      	b.n	80063c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f9aa 	bl	8006708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b4:	e007      	b.n	80063c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f9a6 	bl	8006708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80063c4:	e18b      	b.n	80066de <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c6:	bf00      	nop
    return;
 80063c8:	e189      	b.n	80066de <HAL_UART_IRQHandler+0x5aa>
 80063ca:	bf00      	nop
 80063cc:	04000120 	.word	0x04000120
 80063d0:	080071cb 	.word	0x080071cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d8:	2b01      	cmp	r3, #1
 80063da:	f040 8144 	bne.w	8006666 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e2:	f003 0310 	and.w	r3, r3, #16
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 813d 	beq.w	8006666 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 8136 	beq.w	8006666 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2210      	movs	r2, #16
 8006400:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640c:	2b40      	cmp	r3, #64	; 0x40
 800640e:	f040 80b2 	bne.w	8006576 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800641e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 815d 	beq.w	80066e2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800642e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006432:	429a      	cmp	r2, r3
 8006434:	f080 8155 	bcs.w	80066e2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800643e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800644c:	f000 8085 	beq.w	800655a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800646c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	461a      	mov	r2, r3
 8006476:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800647a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800647e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006486:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1da      	bne.n	8006450 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3308      	adds	r3, #8
 80064a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064ca:	e841 2300 	strex	r3, r2, [r1]
 80064ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1e1      	bne.n	800649a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	3308      	adds	r3, #8
 80064dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3308      	adds	r3, #8
 80064f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006500:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e3      	bne.n	80064d6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006522:	e853 3f00 	ldrex	r3, [r3]
 8006526:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800652a:	f023 0310 	bic.w	r3, r3, #16
 800652e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800653c:	65bb      	str	r3, [r7, #88]	; 0x58
 800653e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006542:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800654a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e4      	bne.n	800651a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006554:	4618      	mov	r0, r3
 8006556:	f7fc f882 	bl	800265e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006566:	b29b      	uxth	r3, r3
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	b29b      	uxth	r3, r3
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f8d4 	bl	800671c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006574:	e0b5      	b.n	80066e2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006582:	b29b      	uxth	r3, r3
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 80a7 	beq.w	80066e6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 80a2 	beq.w	80066e6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065c4:	647b      	str	r3, [r7, #68]	; 0x44
 80065c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065cc:	e841 2300 	strex	r3, r2, [r1]
 80065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e4      	bne.n	80065a2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3308      	adds	r3, #8
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	623b      	str	r3, [r7, #32]
   return(result);
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	f023 0301 	bic.w	r3, r3, #1
 80065ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3308      	adds	r3, #8
 80065f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065fc:	633a      	str	r2, [r7, #48]	; 0x30
 80065fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006604:	e841 2300 	strex	r3, r2, [r1]
 8006608:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e3      	bne.n	80065d8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2220      	movs	r2, #32
 8006614:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0310 	bic.w	r3, r3, #16
 8006636:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	69b9      	ldr	r1, [r7, #24]
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	617b      	str	r3, [r7, #20]
   return(result);
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e4      	bne.n	8006622 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f85c 	bl	800671c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006664:	e03f      	b.n	80066e6 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800666a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00e      	beq.n	8006690 <HAL_UART_IRQHandler+0x55c>
 8006672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d008      	beq.n	8006690 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006686:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f853 	bl	8006734 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800668e:	e02d      	b.n	80066ec <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00e      	beq.n	80066ba <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800669c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d008      	beq.n	80066ba <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d01c      	beq.n	80066ea <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	4798      	blx	r3
    }
    return;
 80066b8:	e017      	b.n	80066ea <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d012      	beq.n	80066ec <HAL_UART_IRQHandler+0x5b8>
 80066c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00c      	beq.n	80066ec <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fd8f 	bl	80071f6 <UART_EndTransmit_IT>
    return;
 80066d8:	e008      	b.n	80066ec <HAL_UART_IRQHandler+0x5b8>
      return;
 80066da:	bf00      	nop
 80066dc:	e006      	b.n	80066ec <HAL_UART_IRQHandler+0x5b8>
    return;
 80066de:	bf00      	nop
 80066e0:	e004      	b.n	80066ec <HAL_UART_IRQHandler+0x5b8>
      return;
 80066e2:	bf00      	nop
 80066e4:	e002      	b.n	80066ec <HAL_UART_IRQHandler+0x5b8>
      return;
 80066e6:	bf00      	nop
 80066e8:	e000      	b.n	80066ec <HAL_UART_IRQHandler+0x5b8>
    return;
 80066ea:	bf00      	nop
  }

}
 80066ec:	37e8      	adds	r7, #232	; 0xe8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop

080066f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	69db      	ldr	r3, [r3, #28]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	4ba6      	ldr	r3, [pc, #664]	; (8006a0c <UART_SetConfig+0x2c4>)
 8006774:	4013      	ands	r3, r2
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6812      	ldr	r2, [r2, #0]
 800677a:	6979      	ldr	r1, [r7, #20]
 800677c:	430b      	orrs	r3, r1
 800677e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a94      	ldr	r2, [pc, #592]	; (8006a10 <UART_SetConfig+0x2c8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d120      	bne.n	8006806 <UART_SetConfig+0xbe>
 80067c4:	4b93      	ldr	r3, [pc, #588]	; (8006a14 <UART_SetConfig+0x2cc>)
 80067c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d816      	bhi.n	8006800 <UART_SetConfig+0xb8>
 80067d2:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <UART_SetConfig+0x90>)
 80067d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d8:	080067e9 	.word	0x080067e9
 80067dc:	080067f5 	.word	0x080067f5
 80067e0:	080067ef 	.word	0x080067ef
 80067e4:	080067fb 	.word	0x080067fb
 80067e8:	2301      	movs	r3, #1
 80067ea:	77fb      	strb	r3, [r7, #31]
 80067ec:	e150      	b.n	8006a90 <UART_SetConfig+0x348>
 80067ee:	2302      	movs	r3, #2
 80067f0:	77fb      	strb	r3, [r7, #31]
 80067f2:	e14d      	b.n	8006a90 <UART_SetConfig+0x348>
 80067f4:	2304      	movs	r3, #4
 80067f6:	77fb      	strb	r3, [r7, #31]
 80067f8:	e14a      	b.n	8006a90 <UART_SetConfig+0x348>
 80067fa:	2308      	movs	r3, #8
 80067fc:	77fb      	strb	r3, [r7, #31]
 80067fe:	e147      	b.n	8006a90 <UART_SetConfig+0x348>
 8006800:	2310      	movs	r3, #16
 8006802:	77fb      	strb	r3, [r7, #31]
 8006804:	e144      	b.n	8006a90 <UART_SetConfig+0x348>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a83      	ldr	r2, [pc, #524]	; (8006a18 <UART_SetConfig+0x2d0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d132      	bne.n	8006876 <UART_SetConfig+0x12e>
 8006810:	4b80      	ldr	r3, [pc, #512]	; (8006a14 <UART_SetConfig+0x2cc>)
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006816:	f003 030c 	and.w	r3, r3, #12
 800681a:	2b0c      	cmp	r3, #12
 800681c:	d828      	bhi.n	8006870 <UART_SetConfig+0x128>
 800681e:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <UART_SetConfig+0xdc>)
 8006820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006824:	08006859 	.word	0x08006859
 8006828:	08006871 	.word	0x08006871
 800682c:	08006871 	.word	0x08006871
 8006830:	08006871 	.word	0x08006871
 8006834:	08006865 	.word	0x08006865
 8006838:	08006871 	.word	0x08006871
 800683c:	08006871 	.word	0x08006871
 8006840:	08006871 	.word	0x08006871
 8006844:	0800685f 	.word	0x0800685f
 8006848:	08006871 	.word	0x08006871
 800684c:	08006871 	.word	0x08006871
 8006850:	08006871 	.word	0x08006871
 8006854:	0800686b 	.word	0x0800686b
 8006858:	2300      	movs	r3, #0
 800685a:	77fb      	strb	r3, [r7, #31]
 800685c:	e118      	b.n	8006a90 <UART_SetConfig+0x348>
 800685e:	2302      	movs	r3, #2
 8006860:	77fb      	strb	r3, [r7, #31]
 8006862:	e115      	b.n	8006a90 <UART_SetConfig+0x348>
 8006864:	2304      	movs	r3, #4
 8006866:	77fb      	strb	r3, [r7, #31]
 8006868:	e112      	b.n	8006a90 <UART_SetConfig+0x348>
 800686a:	2308      	movs	r3, #8
 800686c:	77fb      	strb	r3, [r7, #31]
 800686e:	e10f      	b.n	8006a90 <UART_SetConfig+0x348>
 8006870:	2310      	movs	r3, #16
 8006872:	77fb      	strb	r3, [r7, #31]
 8006874:	e10c      	b.n	8006a90 <UART_SetConfig+0x348>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a68      	ldr	r2, [pc, #416]	; (8006a1c <UART_SetConfig+0x2d4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d120      	bne.n	80068c2 <UART_SetConfig+0x17a>
 8006880:	4b64      	ldr	r3, [pc, #400]	; (8006a14 <UART_SetConfig+0x2cc>)
 8006882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006886:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800688a:	2b30      	cmp	r3, #48	; 0x30
 800688c:	d013      	beq.n	80068b6 <UART_SetConfig+0x16e>
 800688e:	2b30      	cmp	r3, #48	; 0x30
 8006890:	d814      	bhi.n	80068bc <UART_SetConfig+0x174>
 8006892:	2b20      	cmp	r3, #32
 8006894:	d009      	beq.n	80068aa <UART_SetConfig+0x162>
 8006896:	2b20      	cmp	r3, #32
 8006898:	d810      	bhi.n	80068bc <UART_SetConfig+0x174>
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <UART_SetConfig+0x15c>
 800689e:	2b10      	cmp	r3, #16
 80068a0:	d006      	beq.n	80068b0 <UART_SetConfig+0x168>
 80068a2:	e00b      	b.n	80068bc <UART_SetConfig+0x174>
 80068a4:	2300      	movs	r3, #0
 80068a6:	77fb      	strb	r3, [r7, #31]
 80068a8:	e0f2      	b.n	8006a90 <UART_SetConfig+0x348>
 80068aa:	2302      	movs	r3, #2
 80068ac:	77fb      	strb	r3, [r7, #31]
 80068ae:	e0ef      	b.n	8006a90 <UART_SetConfig+0x348>
 80068b0:	2304      	movs	r3, #4
 80068b2:	77fb      	strb	r3, [r7, #31]
 80068b4:	e0ec      	b.n	8006a90 <UART_SetConfig+0x348>
 80068b6:	2308      	movs	r3, #8
 80068b8:	77fb      	strb	r3, [r7, #31]
 80068ba:	e0e9      	b.n	8006a90 <UART_SetConfig+0x348>
 80068bc:	2310      	movs	r3, #16
 80068be:	77fb      	strb	r3, [r7, #31]
 80068c0:	e0e6      	b.n	8006a90 <UART_SetConfig+0x348>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a56      	ldr	r2, [pc, #344]	; (8006a20 <UART_SetConfig+0x2d8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d120      	bne.n	800690e <UART_SetConfig+0x1c6>
 80068cc:	4b51      	ldr	r3, [pc, #324]	; (8006a14 <UART_SetConfig+0x2cc>)
 80068ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068d6:	2bc0      	cmp	r3, #192	; 0xc0
 80068d8:	d013      	beq.n	8006902 <UART_SetConfig+0x1ba>
 80068da:	2bc0      	cmp	r3, #192	; 0xc0
 80068dc:	d814      	bhi.n	8006908 <UART_SetConfig+0x1c0>
 80068de:	2b80      	cmp	r3, #128	; 0x80
 80068e0:	d009      	beq.n	80068f6 <UART_SetConfig+0x1ae>
 80068e2:	2b80      	cmp	r3, #128	; 0x80
 80068e4:	d810      	bhi.n	8006908 <UART_SetConfig+0x1c0>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <UART_SetConfig+0x1a8>
 80068ea:	2b40      	cmp	r3, #64	; 0x40
 80068ec:	d006      	beq.n	80068fc <UART_SetConfig+0x1b4>
 80068ee:	e00b      	b.n	8006908 <UART_SetConfig+0x1c0>
 80068f0:	2300      	movs	r3, #0
 80068f2:	77fb      	strb	r3, [r7, #31]
 80068f4:	e0cc      	b.n	8006a90 <UART_SetConfig+0x348>
 80068f6:	2302      	movs	r3, #2
 80068f8:	77fb      	strb	r3, [r7, #31]
 80068fa:	e0c9      	b.n	8006a90 <UART_SetConfig+0x348>
 80068fc:	2304      	movs	r3, #4
 80068fe:	77fb      	strb	r3, [r7, #31]
 8006900:	e0c6      	b.n	8006a90 <UART_SetConfig+0x348>
 8006902:	2308      	movs	r3, #8
 8006904:	77fb      	strb	r3, [r7, #31]
 8006906:	e0c3      	b.n	8006a90 <UART_SetConfig+0x348>
 8006908:	2310      	movs	r3, #16
 800690a:	77fb      	strb	r3, [r7, #31]
 800690c:	e0c0      	b.n	8006a90 <UART_SetConfig+0x348>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a44      	ldr	r2, [pc, #272]	; (8006a24 <UART_SetConfig+0x2dc>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d125      	bne.n	8006964 <UART_SetConfig+0x21c>
 8006918:	4b3e      	ldr	r3, [pc, #248]	; (8006a14 <UART_SetConfig+0x2cc>)
 800691a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006926:	d017      	beq.n	8006958 <UART_SetConfig+0x210>
 8006928:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800692c:	d817      	bhi.n	800695e <UART_SetConfig+0x216>
 800692e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006932:	d00b      	beq.n	800694c <UART_SetConfig+0x204>
 8006934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006938:	d811      	bhi.n	800695e <UART_SetConfig+0x216>
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <UART_SetConfig+0x1fe>
 800693e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006942:	d006      	beq.n	8006952 <UART_SetConfig+0x20a>
 8006944:	e00b      	b.n	800695e <UART_SetConfig+0x216>
 8006946:	2300      	movs	r3, #0
 8006948:	77fb      	strb	r3, [r7, #31]
 800694a:	e0a1      	b.n	8006a90 <UART_SetConfig+0x348>
 800694c:	2302      	movs	r3, #2
 800694e:	77fb      	strb	r3, [r7, #31]
 8006950:	e09e      	b.n	8006a90 <UART_SetConfig+0x348>
 8006952:	2304      	movs	r3, #4
 8006954:	77fb      	strb	r3, [r7, #31]
 8006956:	e09b      	b.n	8006a90 <UART_SetConfig+0x348>
 8006958:	2308      	movs	r3, #8
 800695a:	77fb      	strb	r3, [r7, #31]
 800695c:	e098      	b.n	8006a90 <UART_SetConfig+0x348>
 800695e:	2310      	movs	r3, #16
 8006960:	77fb      	strb	r3, [r7, #31]
 8006962:	e095      	b.n	8006a90 <UART_SetConfig+0x348>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a2f      	ldr	r2, [pc, #188]	; (8006a28 <UART_SetConfig+0x2e0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d125      	bne.n	80069ba <UART_SetConfig+0x272>
 800696e:	4b29      	ldr	r3, [pc, #164]	; (8006a14 <UART_SetConfig+0x2cc>)
 8006970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006974:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006978:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800697c:	d017      	beq.n	80069ae <UART_SetConfig+0x266>
 800697e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006982:	d817      	bhi.n	80069b4 <UART_SetConfig+0x26c>
 8006984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006988:	d00b      	beq.n	80069a2 <UART_SetConfig+0x25a>
 800698a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800698e:	d811      	bhi.n	80069b4 <UART_SetConfig+0x26c>
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <UART_SetConfig+0x254>
 8006994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006998:	d006      	beq.n	80069a8 <UART_SetConfig+0x260>
 800699a:	e00b      	b.n	80069b4 <UART_SetConfig+0x26c>
 800699c:	2301      	movs	r3, #1
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e076      	b.n	8006a90 <UART_SetConfig+0x348>
 80069a2:	2302      	movs	r3, #2
 80069a4:	77fb      	strb	r3, [r7, #31]
 80069a6:	e073      	b.n	8006a90 <UART_SetConfig+0x348>
 80069a8:	2304      	movs	r3, #4
 80069aa:	77fb      	strb	r3, [r7, #31]
 80069ac:	e070      	b.n	8006a90 <UART_SetConfig+0x348>
 80069ae:	2308      	movs	r3, #8
 80069b0:	77fb      	strb	r3, [r7, #31]
 80069b2:	e06d      	b.n	8006a90 <UART_SetConfig+0x348>
 80069b4:	2310      	movs	r3, #16
 80069b6:	77fb      	strb	r3, [r7, #31]
 80069b8:	e06a      	b.n	8006a90 <UART_SetConfig+0x348>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a1b      	ldr	r2, [pc, #108]	; (8006a2c <UART_SetConfig+0x2e4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d138      	bne.n	8006a36 <UART_SetConfig+0x2ee>
 80069c4:	4b13      	ldr	r3, [pc, #76]	; (8006a14 <UART_SetConfig+0x2cc>)
 80069c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80069ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069d2:	d017      	beq.n	8006a04 <UART_SetConfig+0x2bc>
 80069d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069d8:	d82a      	bhi.n	8006a30 <UART_SetConfig+0x2e8>
 80069da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069de:	d00b      	beq.n	80069f8 <UART_SetConfig+0x2b0>
 80069e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069e4:	d824      	bhi.n	8006a30 <UART_SetConfig+0x2e8>
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <UART_SetConfig+0x2aa>
 80069ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ee:	d006      	beq.n	80069fe <UART_SetConfig+0x2b6>
 80069f0:	e01e      	b.n	8006a30 <UART_SetConfig+0x2e8>
 80069f2:	2300      	movs	r3, #0
 80069f4:	77fb      	strb	r3, [r7, #31]
 80069f6:	e04b      	b.n	8006a90 <UART_SetConfig+0x348>
 80069f8:	2302      	movs	r3, #2
 80069fa:	77fb      	strb	r3, [r7, #31]
 80069fc:	e048      	b.n	8006a90 <UART_SetConfig+0x348>
 80069fe:	2304      	movs	r3, #4
 8006a00:	77fb      	strb	r3, [r7, #31]
 8006a02:	e045      	b.n	8006a90 <UART_SetConfig+0x348>
 8006a04:	2308      	movs	r3, #8
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	e042      	b.n	8006a90 <UART_SetConfig+0x348>
 8006a0a:	bf00      	nop
 8006a0c:	efff69f3 	.word	0xefff69f3
 8006a10:	40011000 	.word	0x40011000
 8006a14:	40023800 	.word	0x40023800
 8006a18:	40004400 	.word	0x40004400
 8006a1c:	40004800 	.word	0x40004800
 8006a20:	40004c00 	.word	0x40004c00
 8006a24:	40005000 	.word	0x40005000
 8006a28:	40011400 	.word	0x40011400
 8006a2c:	40007800 	.word	0x40007800
 8006a30:	2310      	movs	r3, #16
 8006a32:	77fb      	strb	r3, [r7, #31]
 8006a34:	e02c      	b.n	8006a90 <UART_SetConfig+0x348>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a72      	ldr	r2, [pc, #456]	; (8006c04 <UART_SetConfig+0x4bc>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d125      	bne.n	8006a8c <UART_SetConfig+0x344>
 8006a40:	4b71      	ldr	r3, [pc, #452]	; (8006c08 <UART_SetConfig+0x4c0>)
 8006a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a4e:	d017      	beq.n	8006a80 <UART_SetConfig+0x338>
 8006a50:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a54:	d817      	bhi.n	8006a86 <UART_SetConfig+0x33e>
 8006a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a5a:	d00b      	beq.n	8006a74 <UART_SetConfig+0x32c>
 8006a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a60:	d811      	bhi.n	8006a86 <UART_SetConfig+0x33e>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <UART_SetConfig+0x326>
 8006a66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a6a:	d006      	beq.n	8006a7a <UART_SetConfig+0x332>
 8006a6c:	e00b      	b.n	8006a86 <UART_SetConfig+0x33e>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	77fb      	strb	r3, [r7, #31]
 8006a72:	e00d      	b.n	8006a90 <UART_SetConfig+0x348>
 8006a74:	2302      	movs	r3, #2
 8006a76:	77fb      	strb	r3, [r7, #31]
 8006a78:	e00a      	b.n	8006a90 <UART_SetConfig+0x348>
 8006a7a:	2304      	movs	r3, #4
 8006a7c:	77fb      	strb	r3, [r7, #31]
 8006a7e:	e007      	b.n	8006a90 <UART_SetConfig+0x348>
 8006a80:	2308      	movs	r3, #8
 8006a82:	77fb      	strb	r3, [r7, #31]
 8006a84:	e004      	b.n	8006a90 <UART_SetConfig+0x348>
 8006a86:	2310      	movs	r3, #16
 8006a88:	77fb      	strb	r3, [r7, #31]
 8006a8a:	e001      	b.n	8006a90 <UART_SetConfig+0x348>
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a98:	d15b      	bne.n	8006b52 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006a9a:	7ffb      	ldrb	r3, [r7, #31]
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d828      	bhi.n	8006af2 <UART_SetConfig+0x3aa>
 8006aa0:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <UART_SetConfig+0x360>)
 8006aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa6:	bf00      	nop
 8006aa8:	08006acd 	.word	0x08006acd
 8006aac:	08006ad5 	.word	0x08006ad5
 8006ab0:	08006add 	.word	0x08006add
 8006ab4:	08006af3 	.word	0x08006af3
 8006ab8:	08006ae3 	.word	0x08006ae3
 8006abc:	08006af3 	.word	0x08006af3
 8006ac0:	08006af3 	.word	0x08006af3
 8006ac4:	08006af3 	.word	0x08006af3
 8006ac8:	08006aeb 	.word	0x08006aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006acc:	f7fd fc88 	bl	80043e0 <HAL_RCC_GetPCLK1Freq>
 8006ad0:	61b8      	str	r0, [r7, #24]
        break;
 8006ad2:	e013      	b.n	8006afc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ad4:	f7fd fc98 	bl	8004408 <HAL_RCC_GetPCLK2Freq>
 8006ad8:	61b8      	str	r0, [r7, #24]
        break;
 8006ada:	e00f      	b.n	8006afc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006adc:	4b4b      	ldr	r3, [pc, #300]	; (8006c0c <UART_SetConfig+0x4c4>)
 8006ade:	61bb      	str	r3, [r7, #24]
        break;
 8006ae0:	e00c      	b.n	8006afc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ae2:	f7fd fb6b 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 8006ae6:	61b8      	str	r0, [r7, #24]
        break;
 8006ae8:	e008      	b.n	8006afc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aee:	61bb      	str	r3, [r7, #24]
        break;
 8006af0:	e004      	b.n	8006afc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	77bb      	strb	r3, [r7, #30]
        break;
 8006afa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d074      	beq.n	8006bec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	005a      	lsls	r2, r3, #1
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	085b      	lsrs	r3, r3, #1
 8006b0c:	441a      	add	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	2b0f      	cmp	r3, #15
 8006b1c:	d916      	bls.n	8006b4c <UART_SetConfig+0x404>
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b24:	d212      	bcs.n	8006b4c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	f023 030f 	bic.w	r3, r3, #15
 8006b2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	085b      	lsrs	r3, r3, #1
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	89fb      	ldrh	r3, [r7, #14]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	89fa      	ldrh	r2, [r7, #14]
 8006b48:	60da      	str	r2, [r3, #12]
 8006b4a:	e04f      	b.n	8006bec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	77bb      	strb	r3, [r7, #30]
 8006b50:	e04c      	b.n	8006bec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b52:	7ffb      	ldrb	r3, [r7, #31]
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d828      	bhi.n	8006baa <UART_SetConfig+0x462>
 8006b58:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <UART_SetConfig+0x418>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006b85 	.word	0x08006b85
 8006b64:	08006b8d 	.word	0x08006b8d
 8006b68:	08006b95 	.word	0x08006b95
 8006b6c:	08006bab 	.word	0x08006bab
 8006b70:	08006b9b 	.word	0x08006b9b
 8006b74:	08006bab 	.word	0x08006bab
 8006b78:	08006bab 	.word	0x08006bab
 8006b7c:	08006bab 	.word	0x08006bab
 8006b80:	08006ba3 	.word	0x08006ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b84:	f7fd fc2c 	bl	80043e0 <HAL_RCC_GetPCLK1Freq>
 8006b88:	61b8      	str	r0, [r7, #24]
        break;
 8006b8a:	e013      	b.n	8006bb4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b8c:	f7fd fc3c 	bl	8004408 <HAL_RCC_GetPCLK2Freq>
 8006b90:	61b8      	str	r0, [r7, #24]
        break;
 8006b92:	e00f      	b.n	8006bb4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b94:	4b1d      	ldr	r3, [pc, #116]	; (8006c0c <UART_SetConfig+0x4c4>)
 8006b96:	61bb      	str	r3, [r7, #24]
        break;
 8006b98:	e00c      	b.n	8006bb4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b9a:	f7fd fb0f 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 8006b9e:	61b8      	str	r0, [r7, #24]
        break;
 8006ba0:	e008      	b.n	8006bb4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ba6:	61bb      	str	r3, [r7, #24]
        break;
 8006ba8:	e004      	b.n	8006bb4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	77bb      	strb	r3, [r7, #30]
        break;
 8006bb2:	bf00      	nop
    }

    if (pclk != 0U)
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d018      	beq.n	8006bec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	085a      	lsrs	r2, r3, #1
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	441a      	add	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b0f      	cmp	r3, #15
 8006bd2:	d909      	bls.n	8006be8 <UART_SetConfig+0x4a0>
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bda:	d205      	bcs.n	8006be8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	60da      	str	r2, [r3, #12]
 8006be6:	e001      	b.n	8006bec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006bf8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3720      	adds	r7, #32
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	40007c00 	.word	0x40007c00
 8006c08:	40023800 	.word	0x40023800
 8006c0c:	00f42400 	.word	0x00f42400

08006c10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00a      	beq.n	8006c3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	f003 0308 	and.w	r3, r3, #8
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	f003 0310 	and.w	r3, r3, #16
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00a      	beq.n	8006cc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01a      	beq.n	8006d26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d0e:	d10a      	bne.n	8006d26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00a      	beq.n	8006d48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	605a      	str	r2, [r3, #4]
  }
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d64:	f7fb fb3a 	bl	80023dc <HAL_GetTick>
 8006d68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0308 	and.w	r3, r3, #8
 8006d74:	2b08      	cmp	r3, #8
 8006d76:	d10e      	bne.n	8006d96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f82d 	bl	8006de6 <UART_WaitOnFlagUntilTimeout>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e023      	b.n	8006dde <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d10e      	bne.n	8006dc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f817 	bl	8006de6 <UART_WaitOnFlagUntilTimeout>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e00d      	b.n	8006dde <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b09c      	sub	sp, #112	; 0x70
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	603b      	str	r3, [r7, #0]
 8006df2:	4613      	mov	r3, r2
 8006df4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df6:	e0a5      	b.n	8006f44 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfe:	f000 80a1 	beq.w	8006f44 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e02:	f7fb faeb 	bl	80023dc <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d302      	bcc.n	8006e18 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d13e      	bne.n	8006e96 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e2c:	667b      	str	r3, [r7, #100]	; 0x64
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e38:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e3e:	e841 2300 	strex	r3, r2, [r1]
 8006e42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e6      	bne.n	8006e18 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3308      	adds	r3, #8
 8006e50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e54:	e853 3f00 	ldrex	r3, [r3]
 8006e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	f023 0301 	bic.w	r3, r3, #1
 8006e60:	663b      	str	r3, [r7, #96]	; 0x60
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3308      	adds	r3, #8
 8006e68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e5      	bne.n	8006e4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2220      	movs	r2, #32
 8006e82:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2220      	movs	r2, #32
 8006e88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e067      	b.n	8006f66 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d04f      	beq.n	8006f44 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb2:	d147      	bne.n	8006f44 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ebc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006edc:	637b      	str	r3, [r7, #52]	; 0x34
 8006ede:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e6      	bne.n	8006ebe <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	e853 3f00 	ldrex	r3, [r3]
 8006efe:	613b      	str	r3, [r7, #16]
   return(result);
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f023 0301 	bic.w	r3, r3, #1
 8006f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3308      	adds	r3, #8
 8006f0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f10:	623a      	str	r2, [r7, #32]
 8006f12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	69f9      	ldr	r1, [r7, #28]
 8006f16:	6a3a      	ldr	r2, [r7, #32]
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e5      	bne.n	8006ef0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2220      	movs	r2, #32
 8006f28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e010      	b.n	8006f66 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69da      	ldr	r2, [r3, #28]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	bf0c      	ite	eq
 8006f54:	2301      	moveq	r3, #1
 8006f56:	2300      	movne	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	79fb      	ldrb	r3, [r7, #7]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	f43f af4a 	beq.w	8006df8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3770      	adds	r7, #112	; 0x70
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b097      	sub	sp, #92	; 0x5c
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	88fa      	ldrh	r2, [r7, #6]
 8006f88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	88fa      	ldrh	r2, [r7, #6]
 8006f90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa2:	d10e      	bne.n	8006fc2 <UART_Start_Receive_IT+0x52>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d105      	bne.n	8006fb8 <UART_Start_Receive_IT+0x48>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006fb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fb6:	e02d      	b.n	8007014 <UART_Start_Receive_IT+0xa4>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	22ff      	movs	r2, #255	; 0xff
 8006fbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fc0:	e028      	b.n	8007014 <UART_Start_Receive_IT+0xa4>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10d      	bne.n	8006fe6 <UART_Start_Receive_IT+0x76>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d104      	bne.n	8006fdc <UART_Start_Receive_IT+0x6c>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	22ff      	movs	r2, #255	; 0xff
 8006fd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fda:	e01b      	b.n	8007014 <UART_Start_Receive_IT+0xa4>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	227f      	movs	r2, #127	; 0x7f
 8006fe0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fe4:	e016      	b.n	8007014 <UART_Start_Receive_IT+0xa4>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fee:	d10d      	bne.n	800700c <UART_Start_Receive_IT+0x9c>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d104      	bne.n	8007002 <UART_Start_Receive_IT+0x92>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	227f      	movs	r2, #127	; 0x7f
 8006ffc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007000:	e008      	b.n	8007014 <UART_Start_Receive_IT+0xa4>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	223f      	movs	r2, #63	; 0x3f
 8007006:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800700a:	e003      	b.n	8007014 <UART_Start_Receive_IT+0xa4>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2222      	movs	r2, #34	; 0x22
 8007020:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3308      	adds	r3, #8
 8007028:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	f043 0301 	orr.w	r3, r3, #1
 8007038:	657b      	str	r3, [r7, #84]	; 0x54
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3308      	adds	r3, #8
 8007040:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007042:	64ba      	str	r2, [r7, #72]	; 0x48
 8007044:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e5      	bne.n	8007022 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800705e:	d107      	bne.n	8007070 <UART_Start_Receive_IT+0x100>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d103      	bne.n	8007070 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4a24      	ldr	r2, [pc, #144]	; (80070fc <UART_Start_Receive_IT+0x18c>)
 800706c:	665a      	str	r2, [r3, #100]	; 0x64
 800706e:	e002      	b.n	8007076 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4a23      	ldr	r2, [pc, #140]	; (8007100 <UART_Start_Receive_IT+0x190>)
 8007074:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d019      	beq.n	80070ba <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800709a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a4:	637b      	str	r3, [r7, #52]	; 0x34
 80070a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e6      	bne.n	8007086 <UART_Start_Receive_IT+0x116>
 80070b8:	e018      	b.n	80070ec <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	613b      	str	r3, [r7, #16]
   return(result);
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f043 0320 	orr.w	r3, r3, #32
 80070ce:	653b      	str	r3, [r7, #80]	; 0x50
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	461a      	mov	r2, r3
 80070d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070d8:	623b      	str	r3, [r7, #32]
 80070da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	69f9      	ldr	r1, [r7, #28]
 80070de:	6a3a      	ldr	r2, [r7, #32]
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e6      	bne.n	80070ba <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	375c      	adds	r7, #92	; 0x5c
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	080073a7 	.word	0x080073a7
 8007100:	0800724b 	.word	0x0800724b

08007104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007104:	b480      	push	{r7}
 8007106:	b095      	sub	sp, #84	; 0x54
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007114:	e853 3f00 	ldrex	r3, [r3]
 8007118:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007120:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712a:	643b      	str	r3, [r7, #64]	; 0x40
 800712c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007130:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007132:	e841 2300 	strex	r3, r2, [r1]
 8007136:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1e6      	bne.n	800710c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3308      	adds	r3, #8
 8007144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	e853 3f00 	ldrex	r3, [r3]
 800714c:	61fb      	str	r3, [r7, #28]
   return(result);
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	f023 0301 	bic.w	r3, r3, #1
 8007154:	64bb      	str	r3, [r7, #72]	; 0x48
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3308      	adds	r3, #8
 800715c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800715e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007160:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007166:	e841 2300 	strex	r3, r2, [r1]
 800716a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1e5      	bne.n	800713e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007176:	2b01      	cmp	r3, #1
 8007178:	d118      	bne.n	80071ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	60bb      	str	r3, [r7, #8]
   return(result);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f023 0310 	bic.w	r3, r3, #16
 800718e:	647b      	str	r3, [r7, #68]	; 0x44
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	461a      	mov	r2, r3
 8007196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007198:	61bb      	str	r3, [r7, #24]
 800719a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	6979      	ldr	r1, [r7, #20]
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	613b      	str	r3, [r7, #16]
   return(result);
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e6      	bne.n	800717a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2220      	movs	r2, #32
 80071b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80071be:	bf00      	nop
 80071c0:	3754      	adds	r7, #84	; 0x54
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b084      	sub	sp, #16
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f7ff fa8d 	bl	8006708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ee:	bf00      	nop
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b088      	sub	sp, #32
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	60bb      	str	r3, [r7, #8]
   return(result);
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007212:	61fb      	str	r3, [r7, #28]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	461a      	mov	r2, r3
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	61bb      	str	r3, [r7, #24]
 800721e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	6979      	ldr	r1, [r7, #20]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	613b      	str	r3, [r7, #16]
   return(result);
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e6      	bne.n	80071fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff fa59 	bl	80066f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007242:	bf00      	nop
 8007244:	3720      	adds	r7, #32
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b096      	sub	sp, #88	; 0x58
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007258:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007260:	2b22      	cmp	r3, #34	; 0x22
 8007262:	f040 8094 	bne.w	800738e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007270:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007274:	b2d9      	uxtb	r1, r3
 8007276:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800727a:	b2da      	uxtb	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007280:	400a      	ands	r2, r1
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007296:	b29b      	uxth	r3, r3
 8007298:	3b01      	subs	r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d177      	bne.n	800739e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072c2:	653b      	str	r3, [r7, #80]	; 0x50
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	461a      	mov	r2, r3
 80072ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072cc:	647b      	str	r3, [r7, #68]	; 0x44
 80072ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e6      	bne.n	80072ae <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3308      	adds	r3, #8
 80072e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	623b      	str	r3, [r7, #32]
   return(result);
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	f023 0301 	bic.w	r3, r3, #1
 80072f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3308      	adds	r3, #8
 80072fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007300:	633a      	str	r2, [r7, #48]	; 0x30
 8007302:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e5      	bne.n	80072e0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007324:	2b01      	cmp	r3, #1
 8007326:	d12e      	bne.n	8007386 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	60fb      	str	r3, [r7, #12]
   return(result);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 0310 	bic.w	r3, r3, #16
 8007342:	64bb      	str	r3, [r7, #72]	; 0x48
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800734c:	61fb      	str	r3, [r7, #28]
 800734e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	69b9      	ldr	r1, [r7, #24]
 8007352:	69fa      	ldr	r2, [r7, #28]
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	617b      	str	r3, [r7, #20]
   return(result);
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e6      	bne.n	800732e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	f003 0310 	and.w	r3, r3, #16
 800736a:	2b10      	cmp	r3, #16
 800736c:	d103      	bne.n	8007376 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2210      	movs	r2, #16
 8007374:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff f9cc 	bl	800671c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007384:	e00b      	b.n	800739e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7f9 ffb8 	bl	80012fc <HAL_UART_RxCpltCallback>
}
 800738c:	e007      	b.n	800739e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	699a      	ldr	r2, [r3, #24]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f042 0208 	orr.w	r2, r2, #8
 800739c:	619a      	str	r2, [r3, #24]
}
 800739e:	bf00      	nop
 80073a0:	3758      	adds	r7, #88	; 0x58
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b096      	sub	sp, #88	; 0x58
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073bc:	2b22      	cmp	r3, #34	; 0x22
 80073be:	f040 8094 	bne.w	80074ea <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80073d2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80073d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073da:	4013      	ands	r3, r2
 80073dc:	b29a      	uxth	r2, r3
 80073de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e6:	1c9a      	adds	r2, r3, #2
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	3b01      	subs	r3, #1
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d177      	bne.n	80074fa <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800741e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007428:	643b      	str	r3, [r7, #64]	; 0x40
 800742a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800742e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e6      	bne.n	800740a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3308      	adds	r3, #8
 8007442:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	e853 3f00 	ldrex	r3, [r3]
 800744a:	61fb      	str	r3, [r7, #28]
   return(result);
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	f023 0301 	bic.w	r3, r3, #1
 8007452:	64bb      	str	r3, [r7, #72]	; 0x48
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3308      	adds	r3, #8
 800745a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800745c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800745e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007464:	e841 2300 	strex	r3, r2, [r1]
 8007468:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e5      	bne.n	800743c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2220      	movs	r2, #32
 8007474:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007480:	2b01      	cmp	r3, #1
 8007482:	d12e      	bne.n	80074e2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	60bb      	str	r3, [r7, #8]
   return(result);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f023 0310 	bic.w	r3, r3, #16
 800749e:	647b      	str	r3, [r7, #68]	; 0x44
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	461a      	mov	r2, r3
 80074a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a8:	61bb      	str	r3, [r7, #24]
 80074aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6979      	ldr	r1, [r7, #20]
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	613b      	str	r3, [r7, #16]
   return(result);
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e6      	bne.n	800748a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	f003 0310 	and.w	r3, r3, #16
 80074c6:	2b10      	cmp	r3, #16
 80074c8:	d103      	bne.n	80074d2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2210      	movs	r2, #16
 80074d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff f91e 	bl	800671c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074e0:	e00b      	b.n	80074fa <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7f9 ff0a 	bl	80012fc <HAL_UART_RxCpltCallback>
}
 80074e8:	e007      	b.n	80074fa <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	699a      	ldr	r2, [r3, #24]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f042 0208 	orr.w	r2, r2, #8
 80074f8:	619a      	str	r2, [r3, #24]
}
 80074fa:	bf00      	nop
 80074fc:	3758      	adds	r7, #88	; 0x58
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007504:	b084      	sub	sp, #16
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	f107 001c 	add.w	r0, r7, #28
 8007512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007518:	2b01      	cmp	r3, #1
 800751a:	d120      	bne.n	800755e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007520:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	4b20      	ldr	r3, [pc, #128]	; (80075b0 <USB_CoreInit+0xac>)
 800752e:	4013      	ands	r3, r2
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007542:	2b01      	cmp	r3, #1
 8007544:	d105      	bne.n	8007552 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fa92 	bl	8007a7c <USB_CoreReset>
 8007558:	4603      	mov	r3, r0
 800755a:	73fb      	strb	r3, [r7, #15]
 800755c:	e010      	b.n	8007580 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fa86 	bl	8007a7c <USB_CoreReset>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	2b01      	cmp	r3, #1
 8007584:	d10b      	bne.n	800759e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f043 0206 	orr.w	r2, r3, #6
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f043 0220 	orr.w	r2, r3, #32
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800759e:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075aa:	b004      	add	sp, #16
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	ffbdffbf 	.word	0xffbdffbf

080075b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f023 0201 	bic.w	r2, r3, #1
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80075f2:	78fb      	ldrb	r3, [r7, #3]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d115      	bne.n	8007624 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007604:	2001      	movs	r0, #1
 8007606:	f7fa fef5 	bl	80023f4 <HAL_Delay>
      ms++;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	3301      	adds	r3, #1
 800760e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fa25 	bl	8007a60 <USB_GetMode>
 8007616:	4603      	mov	r3, r0
 8007618:	2b01      	cmp	r3, #1
 800761a:	d01e      	beq.n	800765a <USB_SetCurrentMode+0x84>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b31      	cmp	r3, #49	; 0x31
 8007620:	d9f0      	bls.n	8007604 <USB_SetCurrentMode+0x2e>
 8007622:	e01a      	b.n	800765a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007624:	78fb      	ldrb	r3, [r7, #3]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d115      	bne.n	8007656 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007636:	2001      	movs	r0, #1
 8007638:	f7fa fedc 	bl	80023f4 <HAL_Delay>
      ms++;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3301      	adds	r3, #1
 8007640:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fa0c 	bl	8007a60 <USB_GetMode>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <USB_SetCurrentMode+0x84>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2b31      	cmp	r3, #49	; 0x31
 8007652:	d9f0      	bls.n	8007636 <USB_SetCurrentMode+0x60>
 8007654:	e001      	b.n	800765a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e005      	b.n	8007666 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b32      	cmp	r3, #50	; 0x32
 800765e:	d101      	bne.n	8007664 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e000      	b.n	8007666 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007670:	b084      	sub	sp, #16
 8007672:	b580      	push	{r7, lr}
 8007674:	b086      	sub	sp, #24
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800767e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800768a:	2300      	movs	r3, #0
 800768c:	613b      	str	r3, [r7, #16]
 800768e:	e009      	b.n	80076a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	3340      	adds	r3, #64	; 0x40
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	2200      	movs	r2, #0
 800769c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	3301      	adds	r3, #1
 80076a2:	613b      	str	r3, [r7, #16]
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	2b0e      	cmp	r3, #14
 80076a8:	d9f2      	bls.n	8007690 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80076aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d11c      	bne.n	80076ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076be:	f043 0302 	orr.w	r3, r3, #2
 80076c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	e005      	b.n	80076f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076fc:	461a      	mov	r2, r3
 80076fe:	2300      	movs	r3, #0
 8007700:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007708:	4619      	mov	r1, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007710:	461a      	mov	r2, r3
 8007712:	680b      	ldr	r3, [r1, #0]
 8007714:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007718:	2b01      	cmp	r3, #1
 800771a:	d10c      	bne.n	8007736 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800771c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771e:	2b00      	cmp	r3, #0
 8007720:	d104      	bne.n	800772c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007722:	2100      	movs	r1, #0
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f961 	bl	80079ec <USB_SetDevSpeed>
 800772a:	e008      	b.n	800773e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800772c:	2101      	movs	r1, #1
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f95c 	bl	80079ec <USB_SetDevSpeed>
 8007734:	e003      	b.n	800773e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007736:	2103      	movs	r1, #3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f957 	bl	80079ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800773e:	2110      	movs	r1, #16
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f8f3 	bl	800792c <USB_FlushTxFifo>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f91d 	bl	8007990 <USB_FlushRxFifo>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007766:	461a      	mov	r2, r3
 8007768:	2300      	movs	r3, #0
 800776a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007772:	461a      	mov	r2, r3
 8007774:	2300      	movs	r3, #0
 8007776:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800777e:	461a      	mov	r2, r3
 8007780:	2300      	movs	r3, #0
 8007782:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007784:	2300      	movs	r3, #0
 8007786:	613b      	str	r3, [r7, #16]
 8007788:	e043      	b.n	8007812 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	4413      	add	r3, r2
 8007792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800779c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077a0:	d118      	bne.n	80077d4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10a      	bne.n	80077be <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b4:	461a      	mov	r2, r3
 80077b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	e013      	b.n	80077e6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ca:	461a      	mov	r2, r3
 80077cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	e008      	b.n	80077e6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e0:	461a      	mov	r2, r3
 80077e2:	2300      	movs	r3, #0
 80077e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f2:	461a      	mov	r2, r3
 80077f4:	2300      	movs	r3, #0
 80077f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007804:	461a      	mov	r2, r3
 8007806:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800780a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	3301      	adds	r3, #1
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	429a      	cmp	r2, r3
 8007818:	d3b7      	bcc.n	800778a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800781a:	2300      	movs	r3, #0
 800781c:	613b      	str	r3, [r7, #16]
 800781e:	e043      	b.n	80078a8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007832:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007836:	d118      	bne.n	800786a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10a      	bne.n	8007854 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784a:	461a      	mov	r2, r3
 800784c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007850:	6013      	str	r3, [r2, #0]
 8007852:	e013      	b.n	800787c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007860:	461a      	mov	r2, r3
 8007862:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007866:	6013      	str	r3, [r2, #0]
 8007868:	e008      	b.n	800787c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4413      	add	r3, r2
 8007872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007876:	461a      	mov	r2, r3
 8007878:	2300      	movs	r3, #0
 800787a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007888:	461a      	mov	r2, r3
 800788a:	2300      	movs	r3, #0
 800788c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	4413      	add	r3, r2
 8007896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789a:	461a      	mov	r2, r3
 800789c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	3301      	adds	r3, #1
 80078a6:	613b      	str	r3, [r7, #16]
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d3b7      	bcc.n	8007820 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80078d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d105      	bne.n	80078e4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	f043 0210 	orr.w	r2, r3, #16
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	699a      	ldr	r2, [r3, #24]
 80078e8:	4b0e      	ldr	r3, [pc, #56]	; (8007924 <USB_DevInit+0x2b4>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80078f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d005      	beq.n	8007902 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	f043 0208 	orr.w	r2, r3, #8
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007904:	2b01      	cmp	r3, #1
 8007906:	d105      	bne.n	8007914 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699a      	ldr	r2, [r3, #24]
 800790c:	4b06      	ldr	r3, [pc, #24]	; (8007928 <USB_DevInit+0x2b8>)
 800790e:	4313      	orrs	r3, r2
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007914:	7dfb      	ldrb	r3, [r7, #23]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007920:	b004      	add	sp, #16
 8007922:	4770      	bx	lr
 8007924:	803c3800 	.word	0x803c3800
 8007928:	40000004 	.word	0x40000004

0800792c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3301      	adds	r3, #1
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	4a12      	ldr	r2, [pc, #72]	; (800798c <USB_FlushTxFifo+0x60>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d901      	bls.n	800794a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e01a      	b.n	8007980 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	daf3      	bge.n	800793a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	019b      	lsls	r3, r3, #6
 800795a:	f043 0220 	orr.w	r2, r3, #32
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3301      	adds	r3, #1
 8007966:	60fb      	str	r3, [r7, #12]
 8007968:	4a08      	ldr	r2, [pc, #32]	; (800798c <USB_FlushTxFifo+0x60>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d901      	bls.n	8007972 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e006      	b.n	8007980 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	f003 0320 	and.w	r3, r3, #32
 800797a:	2b20      	cmp	r3, #32
 800797c:	d0f1      	beq.n	8007962 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	00030d40 	.word	0x00030d40

08007990 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3301      	adds	r3, #1
 80079a0:	60fb      	str	r3, [r7, #12]
 80079a2:	4a11      	ldr	r2, [pc, #68]	; (80079e8 <USB_FlushRxFifo+0x58>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d901      	bls.n	80079ac <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e017      	b.n	80079dc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	daf3      	bge.n	800799c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2210      	movs	r2, #16
 80079bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3301      	adds	r3, #1
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	4a08      	ldr	r2, [pc, #32]	; (80079e8 <USB_FlushRxFifo+0x58>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d901      	bls.n	80079ce <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e006      	b.n	80079dc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	f003 0310 	and.w	r3, r3, #16
 80079d6:	2b10      	cmp	r3, #16
 80079d8:	d0f1      	beq.n	80079be <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	00030d40 	.word	0x00030d40

080079ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	78fb      	ldrb	r3, [r7, #3]
 8007a06:	68f9      	ldr	r1, [r7, #12]
 8007a08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b085      	sub	sp, #20
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a38:	f023 0303 	bic.w	r3, r3, #3
 8007a3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a4c:	f043 0302 	orr.w	r3, r3, #2
 8007a50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	f003 0301 	and.w	r3, r3, #1
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a84:	2300      	movs	r3, #0
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	4a13      	ldr	r2, [pc, #76]	; (8007adc <USB_CoreReset+0x60>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d901      	bls.n	8007a98 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e01a      	b.n	8007ace <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	daf3      	bge.n	8007a88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	f043 0201 	orr.w	r2, r3, #1
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	4a09      	ldr	r2, [pc, #36]	; (8007adc <USB_CoreReset+0x60>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d901      	bls.n	8007ac0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e006      	b.n	8007ace <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d0f1      	beq.n	8007ab0 <USB_CoreReset+0x34>

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	00030d40 	.word	0x00030d40

08007ae0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007aea:	2300      	movs	r3, #0
 8007aec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007af2:	2b84      	cmp	r3, #132	; 0x84
 8007af4:	d005      	beq.n	8007b02 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007af6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	4413      	add	r3, r2
 8007afe:	3303      	adds	r3, #3
 8007b00:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007b02:	68fb      	ldr	r3, [r7, #12]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b16:	f3ef 8305 	mrs	r3, IPSR
 8007b1a:	607b      	str	r3, [r7, #4]
  return(result);
 8007b1c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	bf14      	ite	ne
 8007b22:	2301      	movne	r3, #1
 8007b24:	2300      	moveq	r3, #0
 8007b26:	b2db      	uxtb	r3, r3
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007b38:	f001 f868 	bl	8008c0c <vTaskStartScheduler>
  
  return osOK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007b42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b44:	b089      	sub	sp, #36	; 0x24
 8007b46:	af04      	add	r7, sp, #16
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d020      	beq.n	8007b96 <osThreadCreate+0x54>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d01c      	beq.n	8007b96 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685c      	ldr	r4, [r3, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681d      	ldr	r5, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	691e      	ldr	r6, [r3, #16]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7ff ffb6 	bl	8007ae0 <makeFreeRtosPriority>
 8007b74:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b7e:	9202      	str	r2, [sp, #8]
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	9100      	str	r1, [sp, #0]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	4632      	mov	r2, r6
 8007b88:	4629      	mov	r1, r5
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f000 fe6c 	bl	8008868 <xTaskCreateStatic>
 8007b90:	4603      	mov	r3, r0
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	e01c      	b.n	8007bd0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685c      	ldr	r4, [r3, #4]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ba2:	b29e      	uxth	r6, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7ff ff98 	bl	8007ae0 <makeFreeRtosPriority>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	f107 030c 	add.w	r3, r7, #12
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	9200      	str	r2, [sp, #0]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	4632      	mov	r2, r6
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f000 feb4 	bl	800892e <xTaskCreate>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d001      	beq.n	8007bd0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	e000      	b.n	8007bd2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bda <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <osDelay+0x16>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	e000      	b.n	8007bf2 <osDelay+0x18>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 ffd4 	bl	8008ba0 <vTaskDelay>
  
  return osOK;
 8007bf8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d013      	beq.n	8007c42 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8007c1a:	7afb      	ldrb	r3, [r7, #11]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d101      	bne.n	8007c24 <osTimerCreate+0x20>
 8007c20:	2101      	movs	r1, #1
 8007c22:	e000      	b.n	8007c26 <osTimerCreate+0x22>
 8007c24:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8007c2e:	9201      	str	r2, [sp, #4]
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	460a      	mov	r2, r1
 8007c36:	2101      	movs	r1, #1
 8007c38:	480b      	ldr	r0, [pc, #44]	; (8007c68 <osTimerCreate+0x64>)
 8007c3a:	f001 fdb6 	bl	80097aa <xTimerCreateStatic>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	e00e      	b.n	8007c60 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8007c42:	7afb      	ldrb	r3, [r7, #11]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d101      	bne.n	8007c4c <osTimerCreate+0x48>
 8007c48:	2201      	movs	r2, #1
 8007c4a:	e000      	b.n	8007c4e <osTimerCreate+0x4a>
 8007c4c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2101      	movs	r1, #1
 8007c58:	4803      	ldr	r0, [pc, #12]	; (8007c68 <osTimerCreate+0x64>)
 8007c5a:	f001 fd85 	bl	8009768 <xTimerCreate>
 8007c5e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	0800f18c 	.word	0x0800f18c

08007c6c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b088      	sub	sp, #32
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <osTimerStart+0x20>
    ticks = 1;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8007c8c:	f7ff ff40 	bl	8007b10 <inHandlerMode>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d01a      	beq.n	8007ccc <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8007c96:	f107 030c 	add.w	r3, r7, #12
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	9200      	str	r2, [sp, #0]
 8007c9e:	693a      	ldr	r2, [r7, #16]
 8007ca0:	2109      	movs	r1, #9
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f001 fe00 	bl	80098a8 <xTimerGenericCommand>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d002      	beq.n	8007cb4 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8007cae:	23ff      	movs	r3, #255	; 0xff
 8007cb0:	617b      	str	r3, [r7, #20]
 8007cb2:	e018      	b.n	8007ce6 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d015      	beq.n	8007ce6 <osTimerStart+0x7a>
 8007cba:	4b0d      	ldr	r3, [pc, #52]	; (8007cf0 <osTimerStart+0x84>)
 8007cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	e00c      	b.n	8007ce6 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	2104      	movs	r1, #4
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f001 fde6 	bl	80098a8 <xTimerGenericCommand>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d001      	beq.n	8007ce6 <osTimerStart+0x7a>
      result = osErrorOS;
 8007ce2:	23ff      	movs	r3, #255	; 0xff
 8007ce4:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8007ce6:	697b      	ldr	r3, [r7, #20]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	e000ed04 	.word	0xe000ed04

08007cf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f103 0208 	add.w	r2, r3, #8
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f04f 32ff 	mov.w	r2, #4294967295
 8007d0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f103 0208 	add.w	r2, r3, #8
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f103 0208 	add.w	r2, r3, #8
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d42:	bf00      	nop
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b085      	sub	sp, #20
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	1c5a      	adds	r2, r3, #1
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	601a      	str	r2, [r3, #0]
}
 8007d8a:	bf00      	nop
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d96:	b480      	push	{r7}
 8007d98:	b085      	sub	sp, #20
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dac:	d103      	bne.n	8007db6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	e00c      	b.n	8007dd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	3308      	adds	r3, #8
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	e002      	b.n	8007dc4 <vListInsert+0x2e>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	60fb      	str	r3, [r7, #12]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d2f6      	bcs.n	8007dbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	601a      	str	r2, [r3, #0]
}
 8007dfc:	bf00      	nop
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	6892      	ldr	r2, [r2, #8]
 8007e1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	6852      	ldr	r2, [r2, #4]
 8007e28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d103      	bne.n	8007e3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	689a      	ldr	r2, [r3, #8]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	1e5a      	subs	r2, r3, #1
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10c      	bne.n	8007e8a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	b672      	cpsid	i
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	b662      	cpsie	i
 8007e84:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007e86:	bf00      	nop
 8007e88:	e7fe      	b.n	8007e88 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007e8a:	f002 f90f 	bl	800a0ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e96:	68f9      	ldr	r1, [r7, #12]
 8007e98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e9a:	fb01 f303 	mul.w	r3, r1, r3
 8007e9e:	441a      	add	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	68f9      	ldr	r1, [r7, #12]
 8007ebe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ec0:	fb01 f303 	mul.w	r3, r1, r3
 8007ec4:	441a      	add	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	22ff      	movs	r2, #255	; 0xff
 8007ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	22ff      	movs	r2, #255	; 0xff
 8007ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d114      	bne.n	8007f0a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d01a      	beq.n	8007f1e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3310      	adds	r3, #16
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 f91f 	bl	8009130 <xTaskRemoveFromEventList>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d012      	beq.n	8007f1e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ef8:	4b0c      	ldr	r3, [pc, #48]	; (8007f2c <xQueueGenericReset+0xd0>)
 8007efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	e009      	b.n	8007f1e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3310      	adds	r3, #16
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7ff fef0 	bl	8007cf4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	3324      	adds	r3, #36	; 0x24
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7ff feeb 	bl	8007cf4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f1e:	f002 f8f9 	bl	800a114 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f22:	2301      	movs	r3, #1
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	e000ed04 	.word	0xe000ed04

08007f30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08e      	sub	sp, #56	; 0x38
 8007f34:	af02      	add	r7, sp, #8
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10c      	bne.n	8007f5e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	b672      	cpsid	i
 8007f4a:	f383 8811 	msr	BASEPRI, r3
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f3bf 8f4f 	dsb	sy
 8007f56:	b662      	cpsie	i
 8007f58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f5a:	bf00      	nop
 8007f5c:	e7fe      	b.n	8007f5c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10c      	bne.n	8007f7e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	b672      	cpsid	i
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	b662      	cpsie	i
 8007f78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f7a:	bf00      	nop
 8007f7c:	e7fe      	b.n	8007f7c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d002      	beq.n	8007f8a <xQueueGenericCreateStatic+0x5a>
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <xQueueGenericCreateStatic+0x5e>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e000      	b.n	8007f90 <xQueueGenericCreateStatic+0x60>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10c      	bne.n	8007fae <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f98:	b672      	cpsid	i
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	b662      	cpsie	i
 8007fa8:	623b      	str	r3, [r7, #32]
}
 8007faa:	bf00      	nop
 8007fac:	e7fe      	b.n	8007fac <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d102      	bne.n	8007fba <xQueueGenericCreateStatic+0x8a>
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <xQueueGenericCreateStatic+0x8e>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e000      	b.n	8007fc0 <xQueueGenericCreateStatic+0x90>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10c      	bne.n	8007fde <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc8:	b672      	cpsid	i
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	b662      	cpsie	i
 8007fd8:	61fb      	str	r3, [r7, #28]
}
 8007fda:	bf00      	nop
 8007fdc:	e7fe      	b.n	8007fdc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007fde:	2348      	movs	r3, #72	; 0x48
 8007fe0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2b48      	cmp	r3, #72	; 0x48
 8007fe6:	d00c      	beq.n	8008002 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fec:	b672      	cpsid	i
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	b662      	cpsie	i
 8007ffc:	61bb      	str	r3, [r7, #24]
}
 8007ffe:	bf00      	nop
 8008000:	e7fe      	b.n	8008000 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008002:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00d      	beq.n	800802a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800800e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008010:	2201      	movs	r2, #1
 8008012:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008016:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800801a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	4613      	mov	r3, r2
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	68b9      	ldr	r1, [r7, #8]
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 f805 	bl	8008034 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800802c:	4618      	mov	r0, r3
 800802e:	3730      	adds	r7, #48	; 0x30
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d103      	bne.n	8008050 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	e002      	b.n	8008056 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008062:	2101      	movs	r1, #1
 8008064:	69b8      	ldr	r0, [r7, #24]
 8008066:	f7ff fef9 	bl	8007e5c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800806a:	bf00      	nop
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
	...

08008074 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b08e      	sub	sp, #56	; 0x38
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
 8008080:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008082:	2300      	movs	r3, #0
 8008084:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10c      	bne.n	80080aa <xQueueGenericSend+0x36>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008094:	b672      	cpsid	i
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	b662      	cpsie	i
 80080a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080a6:	bf00      	nop
 80080a8:	e7fe      	b.n	80080a8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d103      	bne.n	80080b8 <xQueueGenericSend+0x44>
 80080b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <xQueueGenericSend+0x48>
 80080b8:	2301      	movs	r3, #1
 80080ba:	e000      	b.n	80080be <xQueueGenericSend+0x4a>
 80080bc:	2300      	movs	r3, #0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10c      	bne.n	80080dc <xQueueGenericSend+0x68>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	b672      	cpsid	i
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	b662      	cpsie	i
 80080d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080d8:	bf00      	nop
 80080da:	e7fe      	b.n	80080da <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d103      	bne.n	80080ea <xQueueGenericSend+0x76>
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d101      	bne.n	80080ee <xQueueGenericSend+0x7a>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e000      	b.n	80080f0 <xQueueGenericSend+0x7c>
 80080ee:	2300      	movs	r3, #0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10c      	bne.n	800810e <xQueueGenericSend+0x9a>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f8:	b672      	cpsid	i
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	b662      	cpsie	i
 8008108:	623b      	str	r3, [r7, #32]
}
 800810a:	bf00      	nop
 800810c:	e7fe      	b.n	800810c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800810e:	f001 f9d3 	bl	80094b8 <xTaskGetSchedulerState>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d102      	bne.n	800811e <xQueueGenericSend+0xaa>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d101      	bne.n	8008122 <xQueueGenericSend+0xae>
 800811e:	2301      	movs	r3, #1
 8008120:	e000      	b.n	8008124 <xQueueGenericSend+0xb0>
 8008122:	2300      	movs	r3, #0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10c      	bne.n	8008142 <xQueueGenericSend+0xce>
	__asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812c:	b672      	cpsid	i
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	b662      	cpsie	i
 800813c:	61fb      	str	r3, [r7, #28]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008142:	f001 ffb3 	bl	800a0ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814e:	429a      	cmp	r2, r3
 8008150:	d302      	bcc.n	8008158 <xQueueGenericSend+0xe4>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2b02      	cmp	r3, #2
 8008156:	d129      	bne.n	80081ac <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	68b9      	ldr	r1, [r7, #8]
 800815c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800815e:	f000 fa15 	bl	800858c <prvCopyDataToQueue>
 8008162:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008168:	2b00      	cmp	r3, #0
 800816a:	d010      	beq.n	800818e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800816c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816e:	3324      	adds	r3, #36	; 0x24
 8008170:	4618      	mov	r0, r3
 8008172:	f000 ffdd 	bl	8009130 <xTaskRemoveFromEventList>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d013      	beq.n	80081a4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800817c:	4b3f      	ldr	r3, [pc, #252]	; (800827c <xQueueGenericSend+0x208>)
 800817e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	e00a      	b.n	80081a4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800818e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008190:	2b00      	cmp	r3, #0
 8008192:	d007      	beq.n	80081a4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008194:	4b39      	ldr	r3, [pc, #228]	; (800827c <xQueueGenericSend+0x208>)
 8008196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80081a4:	f001 ffb6 	bl	800a114 <vPortExitCritical>
				return pdPASS;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e063      	b.n	8008274 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d103      	bne.n	80081ba <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081b2:	f001 ffaf 	bl	800a114 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80081b6:	2300      	movs	r3, #0
 80081b8:	e05c      	b.n	8008274 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d106      	bne.n	80081ce <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081c0:	f107 0314 	add.w	r3, r7, #20
 80081c4:	4618      	mov	r0, r3
 80081c6:	f001 f817 	bl	80091f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081ca:	2301      	movs	r3, #1
 80081cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081ce:	f001 ffa1 	bl	800a114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081d2:	f000 fd85 	bl	8008ce0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081d6:	f001 ff69 	bl	800a0ac <vPortEnterCritical>
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081e0:	b25b      	sxtb	r3, r3
 80081e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e6:	d103      	bne.n	80081f0 <xQueueGenericSend+0x17c>
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081f6:	b25b      	sxtb	r3, r3
 80081f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fc:	d103      	bne.n	8008206 <xQueueGenericSend+0x192>
 80081fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008206:	f001 ff85 	bl	800a114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800820a:	1d3a      	adds	r2, r7, #4
 800820c:	f107 0314 	add.w	r3, r7, #20
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f001 f806 	bl	8009224 <xTaskCheckForTimeOut>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d124      	bne.n	8008268 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800821e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008220:	f000 faac 	bl	800877c <prvIsQueueFull>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d018      	beq.n	800825c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	3310      	adds	r3, #16
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	4611      	mov	r1, r2
 8008232:	4618      	mov	r0, r3
 8008234:	f000 ff28 	bl	8009088 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800823a:	f000 fa37 	bl	80086ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800823e:	f000 fd5d 	bl	8008cfc <xTaskResumeAll>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	f47f af7c 	bne.w	8008142 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800824a:	4b0c      	ldr	r3, [pc, #48]	; (800827c <xQueueGenericSend+0x208>)
 800824c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	e772      	b.n	8008142 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800825c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800825e:	f000 fa25 	bl	80086ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008262:	f000 fd4b 	bl	8008cfc <xTaskResumeAll>
 8008266:	e76c      	b.n	8008142 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800826a:	f000 fa1f 	bl	80086ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800826e:	f000 fd45 	bl	8008cfc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008272:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008274:	4618      	mov	r0, r3
 8008276:	3738      	adds	r7, #56	; 0x38
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	e000ed04 	.word	0xe000ed04

08008280 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b08e      	sub	sp, #56	; 0x38
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10c      	bne.n	80082b2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829c:	b672      	cpsid	i
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	b662      	cpsie	i
 80082ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082ae:	bf00      	nop
 80082b0:	e7fe      	b.n	80082b0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d103      	bne.n	80082c0 <xQueueGenericSendFromISR+0x40>
 80082b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d101      	bne.n	80082c4 <xQueueGenericSendFromISR+0x44>
 80082c0:	2301      	movs	r3, #1
 80082c2:	e000      	b.n	80082c6 <xQueueGenericSendFromISR+0x46>
 80082c4:	2300      	movs	r3, #0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10c      	bne.n	80082e4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	b672      	cpsid	i
 80082d0:	f383 8811 	msr	BASEPRI, r3
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	b662      	cpsie	i
 80082de:	623b      	str	r3, [r7, #32]
}
 80082e0:	bf00      	nop
 80082e2:	e7fe      	b.n	80082e2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d103      	bne.n	80082f2 <xQueueGenericSendFromISR+0x72>
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d101      	bne.n	80082f6 <xQueueGenericSendFromISR+0x76>
 80082f2:	2301      	movs	r3, #1
 80082f4:	e000      	b.n	80082f8 <xQueueGenericSendFromISR+0x78>
 80082f6:	2300      	movs	r3, #0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10c      	bne.n	8008316 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80082fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008300:	b672      	cpsid	i
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	b662      	cpsie	i
 8008310:	61fb      	str	r3, [r7, #28]
}
 8008312:	bf00      	nop
 8008314:	e7fe      	b.n	8008314 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008316:	f001 ffb1 	bl	800a27c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800831a:	f3ef 8211 	mrs	r2, BASEPRI
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	b672      	cpsid	i
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	b662      	cpsie	i
 8008332:	61ba      	str	r2, [r7, #24]
 8008334:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008336:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008338:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008342:	429a      	cmp	r2, r3
 8008344:	d302      	bcc.n	800834c <xQueueGenericSendFromISR+0xcc>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b02      	cmp	r3, #2
 800834a:	d12c      	bne.n	80083a6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	68b9      	ldr	r1, [r7, #8]
 800835a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800835c:	f000 f916 	bl	800858c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008360:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008368:	d112      	bne.n	8008390 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836e:	2b00      	cmp	r3, #0
 8008370:	d016      	beq.n	80083a0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008374:	3324      	adds	r3, #36	; 0x24
 8008376:	4618      	mov	r0, r3
 8008378:	f000 feda 	bl	8009130 <xTaskRemoveFromEventList>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00e      	beq.n	80083a0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	e007      	b.n	80083a0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008390:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008394:	3301      	adds	r3, #1
 8008396:	b2db      	uxtb	r3, r3
 8008398:	b25a      	sxtb	r2, r3
 800839a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80083a0:	2301      	movs	r3, #1
 80083a2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80083a4:	e001      	b.n	80083aa <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80083a6:	2300      	movs	r3, #0
 80083a8:	637b      	str	r3, [r7, #52]	; 0x34
 80083aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3738      	adds	r7, #56	; 0x38
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b08c      	sub	sp, #48	; 0x30
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80083cc:	2300      	movs	r3, #0
 80083ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10c      	bne.n	80083f4 <xQueueReceive+0x34>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	b672      	cpsid	i
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	b662      	cpsie	i
 80083ee:	623b      	str	r3, [r7, #32]
}
 80083f0:	bf00      	nop
 80083f2:	e7fe      	b.n	80083f2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d103      	bne.n	8008402 <xQueueReceive+0x42>
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <xQueueReceive+0x46>
 8008402:	2301      	movs	r3, #1
 8008404:	e000      	b.n	8008408 <xQueueReceive+0x48>
 8008406:	2300      	movs	r3, #0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10c      	bne.n	8008426 <xQueueReceive+0x66>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	b672      	cpsid	i
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	b662      	cpsie	i
 8008420:	61fb      	str	r3, [r7, #28]
}
 8008422:	bf00      	nop
 8008424:	e7fe      	b.n	8008424 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008426:	f001 f847 	bl	80094b8 <xTaskGetSchedulerState>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d102      	bne.n	8008436 <xQueueReceive+0x76>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <xQueueReceive+0x7a>
 8008436:	2301      	movs	r3, #1
 8008438:	e000      	b.n	800843c <xQueueReceive+0x7c>
 800843a:	2300      	movs	r3, #0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10c      	bne.n	800845a <xQueueReceive+0x9a>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	b672      	cpsid	i
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	b662      	cpsie	i
 8008454:	61bb      	str	r3, [r7, #24]
}
 8008456:	bf00      	nop
 8008458:	e7fe      	b.n	8008458 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800845a:	f001 fe27 	bl	800a0ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008462:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	2b00      	cmp	r3, #0
 8008468:	d01f      	beq.n	80084aa <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800846a:	68b9      	ldr	r1, [r7, #8]
 800846c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800846e:	f000 f8f7 	bl	8008660 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	1e5a      	subs	r2, r3, #1
 8008476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008478:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00f      	beq.n	80084a2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	3310      	adds	r3, #16
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fe52 	bl	8009130 <xTaskRemoveFromEventList>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008492:	4b3d      	ldr	r3, [pc, #244]	; (8008588 <xQueueReceive+0x1c8>)
 8008494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084a2:	f001 fe37 	bl	800a114 <vPortExitCritical>
				return pdPASS;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e069      	b.n	800857e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d103      	bne.n	80084b8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084b0:	f001 fe30 	bl	800a114 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084b4:	2300      	movs	r3, #0
 80084b6:	e062      	b.n	800857e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d106      	bne.n	80084cc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084be:	f107 0310 	add.w	r3, r7, #16
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 fe98 	bl	80091f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084c8:	2301      	movs	r3, #1
 80084ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084cc:	f001 fe22 	bl	800a114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084d0:	f000 fc06 	bl	8008ce0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084d4:	f001 fdea 	bl	800a0ac <vPortEnterCritical>
 80084d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084de:	b25b      	sxtb	r3, r3
 80084e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e4:	d103      	bne.n	80084ee <xQueueReceive+0x12e>
 80084e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084f4:	b25b      	sxtb	r3, r3
 80084f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fa:	d103      	bne.n	8008504 <xQueueReceive+0x144>
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008504:	f001 fe06 	bl	800a114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008508:	1d3a      	adds	r2, r7, #4
 800850a:	f107 0310 	add.w	r3, r7, #16
 800850e:	4611      	mov	r1, r2
 8008510:	4618      	mov	r0, r3
 8008512:	f000 fe87 	bl	8009224 <xTaskCheckForTimeOut>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d123      	bne.n	8008564 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800851c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800851e:	f000 f917 	bl	8008750 <prvIsQueueEmpty>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d017      	beq.n	8008558 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852a:	3324      	adds	r3, #36	; 0x24
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	4611      	mov	r1, r2
 8008530:	4618      	mov	r0, r3
 8008532:	f000 fda9 	bl	8009088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008538:	f000 f8b8 	bl	80086ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800853c:	f000 fbde 	bl	8008cfc <xTaskResumeAll>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d189      	bne.n	800845a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008546:	4b10      	ldr	r3, [pc, #64]	; (8008588 <xQueueReceive+0x1c8>)
 8008548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	e780      	b.n	800845a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800855a:	f000 f8a7 	bl	80086ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800855e:	f000 fbcd 	bl	8008cfc <xTaskResumeAll>
 8008562:	e77a      	b.n	800845a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008566:	f000 f8a1 	bl	80086ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800856a:	f000 fbc7 	bl	8008cfc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800856e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008570:	f000 f8ee 	bl	8008750 <prvIsQueueEmpty>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	f43f af6f 	beq.w	800845a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800857c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800857e:	4618      	mov	r0, r3
 8008580:	3730      	adds	r7, #48	; 0x30
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	e000ed04 	.word	0xe000ed04

0800858c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008598:	2300      	movs	r3, #0
 800859a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10d      	bne.n	80085c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d14d      	bne.n	800864e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 ff9c 	bl	80094f4 <xTaskPriorityDisinherit>
 80085bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	609a      	str	r2, [r3, #8]
 80085c4:	e043      	b.n	800864e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d119      	bne.n	8008600 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6858      	ldr	r0, [r3, #4]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d4:	461a      	mov	r2, r3
 80085d6:	68b9      	ldr	r1, [r7, #8]
 80085d8:	f002 fa1e 	bl	800aa18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e4:	441a      	add	r2, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d32b      	bcc.n	800864e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	605a      	str	r2, [r3, #4]
 80085fe:	e026      	b.n	800864e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	68d8      	ldr	r0, [r3, #12]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008608:	461a      	mov	r2, r3
 800860a:	68b9      	ldr	r1, [r7, #8]
 800860c:	f002 fa04 	bl	800aa18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	68da      	ldr	r2, [r3, #12]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008618:	425b      	negs	r3, r3
 800861a:	441a      	add	r2, r3
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	d207      	bcs.n	800863c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008634:	425b      	negs	r3, r3
 8008636:	441a      	add	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b02      	cmp	r3, #2
 8008640:	d105      	bne.n	800864e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	3b01      	subs	r3, #1
 800864c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	1c5a      	adds	r2, r3, #1
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008656:	697b      	ldr	r3, [r7, #20]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3718      	adds	r7, #24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	d018      	beq.n	80086a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867a:	441a      	add	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	68da      	ldr	r2, [r3, #12]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	429a      	cmp	r2, r3
 800868a:	d303      	bcc.n	8008694 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68d9      	ldr	r1, [r3, #12]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869c:	461a      	mov	r2, r3
 800869e:	6838      	ldr	r0, [r7, #0]
 80086a0:	f002 f9ba 	bl	800aa18 <memcpy>
	}
}
 80086a4:	bf00      	nop
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80086b4:	f001 fcfa 	bl	800a0ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086c0:	e011      	b.n	80086e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d012      	beq.n	80086f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3324      	adds	r3, #36	; 0x24
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 fd2e 	bl	8009130 <xTaskRemoveFromEventList>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80086da:	f000 fe09 	bl	80092f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	3b01      	subs	r3, #1
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	dce9      	bgt.n	80086c2 <prvUnlockQueue+0x16>
 80086ee:	e000      	b.n	80086f2 <prvUnlockQueue+0x46>
					break;
 80086f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	22ff      	movs	r2, #255	; 0xff
 80086f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80086fa:	f001 fd0b 	bl	800a114 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80086fe:	f001 fcd5 	bl	800a0ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008708:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800870a:	e011      	b.n	8008730 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d012      	beq.n	800873a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3310      	adds	r3, #16
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fd09 	bl	8009130 <xTaskRemoveFromEventList>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008724:	f000 fde4 	bl	80092f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	3b01      	subs	r3, #1
 800872c:	b2db      	uxtb	r3, r3
 800872e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008734:	2b00      	cmp	r3, #0
 8008736:	dce9      	bgt.n	800870c <prvUnlockQueue+0x60>
 8008738:	e000      	b.n	800873c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800873a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	22ff      	movs	r2, #255	; 0xff
 8008740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008744:	f001 fce6 	bl	800a114 <vPortExitCritical>
}
 8008748:	bf00      	nop
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008758:	f001 fca8 	bl	800a0ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008760:	2b00      	cmp	r3, #0
 8008762:	d102      	bne.n	800876a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008764:	2301      	movs	r3, #1
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	e001      	b.n	800876e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800876a:	2300      	movs	r3, #0
 800876c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800876e:	f001 fcd1 	bl	800a114 <vPortExitCritical>

	return xReturn;
 8008772:	68fb      	ldr	r3, [r7, #12]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008784:	f001 fc92 	bl	800a0ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008790:	429a      	cmp	r2, r3
 8008792:	d102      	bne.n	800879a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008794:	2301      	movs	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	e001      	b.n	800879e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800879a:	2300      	movs	r3, #0
 800879c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800879e:	f001 fcb9 	bl	800a114 <vPortExitCritical>

	return xReturn;
 80087a2:	68fb      	ldr	r3, [r7, #12]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087b6:	2300      	movs	r3, #0
 80087b8:	60fb      	str	r3, [r7, #12]
 80087ba:	e014      	b.n	80087e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80087bc:	4a0f      	ldr	r2, [pc, #60]	; (80087fc <vQueueAddToRegistry+0x50>)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10b      	bne.n	80087e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80087c8:	490c      	ldr	r1, [pc, #48]	; (80087fc <vQueueAddToRegistry+0x50>)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	683a      	ldr	r2, [r7, #0]
 80087ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80087d2:	4a0a      	ldr	r2, [pc, #40]	; (80087fc <vQueueAddToRegistry+0x50>)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	4413      	add	r3, r2
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80087de:	e006      	b.n	80087ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	3301      	adds	r3, #1
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b07      	cmp	r3, #7
 80087ea:	d9e7      	bls.n	80087bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80087ec:	bf00      	nop
 80087ee:	bf00      	nop
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	20000fd4 	.word	0x20000fd4

08008800 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008810:	f001 fc4c 	bl	800a0ac <vPortEnterCritical>
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800881a:	b25b      	sxtb	r3, r3
 800881c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008820:	d103      	bne.n	800882a <vQueueWaitForMessageRestricted+0x2a>
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008830:	b25b      	sxtb	r3, r3
 8008832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008836:	d103      	bne.n	8008840 <vQueueWaitForMessageRestricted+0x40>
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008840:	f001 fc68 	bl	800a114 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008848:	2b00      	cmp	r3, #0
 800884a:	d106      	bne.n	800885a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	3324      	adds	r3, #36	; 0x24
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	68b9      	ldr	r1, [r7, #8]
 8008854:	4618      	mov	r0, r3
 8008856:	f000 fc3d 	bl	80090d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800885a:	6978      	ldr	r0, [r7, #20]
 800885c:	f7ff ff26 	bl	80086ac <prvUnlockQueue>
	}
 8008860:	bf00      	nop
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008868:	b580      	push	{r7, lr}
 800886a:	b08e      	sub	sp, #56	; 0x38
 800886c:	af04      	add	r7, sp, #16
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10c      	bne.n	8008896 <xTaskCreateStatic+0x2e>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	b672      	cpsid	i
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	b662      	cpsie	i
 8008890:	623b      	str	r3, [r7, #32]
}
 8008892:	bf00      	nop
 8008894:	e7fe      	b.n	8008894 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10c      	bne.n	80088b6 <xTaskCreateStatic+0x4e>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a0:	b672      	cpsid	i
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	b662      	cpsie	i
 80088b0:	61fb      	str	r3, [r7, #28]
}
 80088b2:	bf00      	nop
 80088b4:	e7fe      	b.n	80088b4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80088b6:	2354      	movs	r3, #84	; 0x54
 80088b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	2b54      	cmp	r3, #84	; 0x54
 80088be:	d00c      	beq.n	80088da <xTaskCreateStatic+0x72>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c4:	b672      	cpsid	i
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	b662      	cpsie	i
 80088d4:	61bb      	str	r3, [r7, #24]
}
 80088d6:	bf00      	nop
 80088d8:	e7fe      	b.n	80088d8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80088da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d01e      	beq.n	8008920 <xTaskCreateStatic+0xb8>
 80088e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d01b      	beq.n	8008920 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	2202      	movs	r2, #2
 80088f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80088fa:	2300      	movs	r3, #0
 80088fc:	9303      	str	r3, [sp, #12]
 80088fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008900:	9302      	str	r3, [sp, #8]
 8008902:	f107 0314 	add.w	r3, r7, #20
 8008906:	9301      	str	r3, [sp, #4]
 8008908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	68b9      	ldr	r1, [r7, #8]
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f000 f850 	bl	80089b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800891a:	f000 f8d7 	bl	8008acc <prvAddNewTaskToReadyList>
 800891e:	e001      	b.n	8008924 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008920:	2300      	movs	r3, #0
 8008922:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008924:	697b      	ldr	r3, [r7, #20]
	}
 8008926:	4618      	mov	r0, r3
 8008928:	3728      	adds	r7, #40	; 0x28
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800892e:	b580      	push	{r7, lr}
 8008930:	b08c      	sub	sp, #48	; 0x30
 8008932:	af04      	add	r7, sp, #16
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	603b      	str	r3, [r7, #0]
 800893a:	4613      	mov	r3, r2
 800893c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800893e:	88fb      	ldrh	r3, [r7, #6]
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4618      	mov	r0, r3
 8008944:	f001 fcde 	bl	800a304 <pvPortMalloc>
 8008948:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00e      	beq.n	800896e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008950:	2054      	movs	r0, #84	; 0x54
 8008952:	f001 fcd7 	bl	800a304 <pvPortMalloc>
 8008956:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	631a      	str	r2, [r3, #48]	; 0x30
 8008964:	e005      	b.n	8008972 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008966:	6978      	ldr	r0, [r7, #20]
 8008968:	f001 fd96 	bl	800a498 <vPortFree>
 800896c:	e001      	b.n	8008972 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800896e:	2300      	movs	r3, #0
 8008970:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d017      	beq.n	80089a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008980:	88fa      	ldrh	r2, [r7, #6]
 8008982:	2300      	movs	r3, #0
 8008984:	9303      	str	r3, [sp, #12]
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	9302      	str	r3, [sp, #8]
 800898a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898c:	9301      	str	r3, [sp, #4]
 800898e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	68b9      	ldr	r1, [r7, #8]
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 f80e 	bl	80089b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800899c:	69f8      	ldr	r0, [r7, #28]
 800899e:	f000 f895 	bl	8008acc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80089a2:	2301      	movs	r3, #1
 80089a4:	61bb      	str	r3, [r7, #24]
 80089a6:	e002      	b.n	80089ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80089a8:	f04f 33ff 	mov.w	r3, #4294967295
 80089ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80089ae:	69bb      	ldr	r3, [r7, #24]
	}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3720      	adds	r7, #32
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b088      	sub	sp, #32
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80089c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80089d0:	440b      	add	r3, r1
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	f023 0307 	bic.w	r3, r3, #7
 80089de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	f003 0307 	and.w	r3, r3, #7
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00c      	beq.n	8008a04 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	b672      	cpsid	i
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	b662      	cpsie	i
 80089fe:	617b      	str	r3, [r7, #20]
}
 8008a00:	bf00      	nop
 8008a02:	e7fe      	b.n	8008a02 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d01f      	beq.n	8008a4a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	61fb      	str	r3, [r7, #28]
 8008a0e:	e012      	b.n	8008a36 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	4413      	add	r3, r2
 8008a16:	7819      	ldrb	r1, [r3, #0]
 8008a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	3334      	adds	r3, #52	; 0x34
 8008a20:	460a      	mov	r2, r1
 8008a22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	4413      	add	r3, r2
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d006      	beq.n	8008a3e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	3301      	adds	r3, #1
 8008a34:	61fb      	str	r3, [r7, #28]
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	2b0f      	cmp	r3, #15
 8008a3a:	d9e9      	bls.n	8008a10 <prvInitialiseNewTask+0x58>
 8008a3c:	e000      	b.n	8008a40 <prvInitialiseNewTask+0x88>
			{
				break;
 8008a3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a48:	e003      	b.n	8008a52 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a54:	2b06      	cmp	r3, #6
 8008a56:	d901      	bls.n	8008a5c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a58:	2306      	movs	r3, #6
 8008a5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a66:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a70:	3304      	adds	r3, #4
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7ff f95e 	bl	8007d34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7a:	3318      	adds	r3, #24
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7ff f959 	bl	8007d34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8a:	f1c3 0207 	rsb	r2, r3, #7
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	68f9      	ldr	r1, [r7, #12]
 8008aaa:	69b8      	ldr	r0, [r7, #24]
 8008aac:	f001 f9f0 	bl	8009e90 <pxPortInitialiseStack>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ac0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ac2:	bf00      	nop
 8008ac4:	3720      	adds	r7, #32
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ad4:	f001 faea 	bl	800a0ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ad8:	4b2a      	ldr	r3, [pc, #168]	; (8008b84 <prvAddNewTaskToReadyList+0xb8>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3301      	adds	r3, #1
 8008ade:	4a29      	ldr	r2, [pc, #164]	; (8008b84 <prvAddNewTaskToReadyList+0xb8>)
 8008ae0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ae2:	4b29      	ldr	r3, [pc, #164]	; (8008b88 <prvAddNewTaskToReadyList+0xbc>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d109      	bne.n	8008afe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008aea:	4a27      	ldr	r2, [pc, #156]	; (8008b88 <prvAddNewTaskToReadyList+0xbc>)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008af0:	4b24      	ldr	r3, [pc, #144]	; (8008b84 <prvAddNewTaskToReadyList+0xb8>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d110      	bne.n	8008b1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008af8:	f000 fc1e 	bl	8009338 <prvInitialiseTaskLists>
 8008afc:	e00d      	b.n	8008b1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008afe:	4b23      	ldr	r3, [pc, #140]	; (8008b8c <prvAddNewTaskToReadyList+0xc0>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d109      	bne.n	8008b1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b06:	4b20      	ldr	r3, [pc, #128]	; (8008b88 <prvAddNewTaskToReadyList+0xbc>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d802      	bhi.n	8008b1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b14:	4a1c      	ldr	r2, [pc, #112]	; (8008b88 <prvAddNewTaskToReadyList+0xbc>)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b1a:	4b1d      	ldr	r3, [pc, #116]	; (8008b90 <prvAddNewTaskToReadyList+0xc4>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	4a1b      	ldr	r2, [pc, #108]	; (8008b90 <prvAddNewTaskToReadyList+0xc4>)
 8008b22:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	2201      	movs	r2, #1
 8008b2a:	409a      	lsls	r2, r3
 8008b2c:	4b19      	ldr	r3, [pc, #100]	; (8008b94 <prvAddNewTaskToReadyList+0xc8>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	4a18      	ldr	r2, [pc, #96]	; (8008b94 <prvAddNewTaskToReadyList+0xc8>)
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4413      	add	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4a15      	ldr	r2, [pc, #84]	; (8008b98 <prvAddNewTaskToReadyList+0xcc>)
 8008b44:	441a      	add	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	f7ff f8fe 	bl	8007d4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b52:	f001 fadf 	bl	800a114 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b56:	4b0d      	ldr	r3, [pc, #52]	; (8008b8c <prvAddNewTaskToReadyList+0xc0>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00e      	beq.n	8008b7c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b5e:	4b0a      	ldr	r3, [pc, #40]	; (8008b88 <prvAddNewTaskToReadyList+0xbc>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d207      	bcs.n	8008b7c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b6c:	4b0b      	ldr	r3, [pc, #44]	; (8008b9c <prvAddNewTaskToReadyList+0xd0>)
 8008b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b7c:	bf00      	nop
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	20001114 	.word	0x20001114
 8008b88:	20001014 	.word	0x20001014
 8008b8c:	20001120 	.word	0x20001120
 8008b90:	20001130 	.word	0x20001130
 8008b94:	2000111c 	.word	0x2000111c
 8008b98:	20001018 	.word	0x20001018
 8008b9c:	e000ed04 	.word	0xe000ed04

08008ba0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d019      	beq.n	8008be6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008bb2:	4b14      	ldr	r3, [pc, #80]	; (8008c04 <vTaskDelay+0x64>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00c      	beq.n	8008bd4 <vTaskDelay+0x34>
	__asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbe:	b672      	cpsid	i
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	b662      	cpsie	i
 8008bce:	60bb      	str	r3, [r7, #8]
}
 8008bd0:	bf00      	nop
 8008bd2:	e7fe      	b.n	8008bd2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008bd4:	f000 f884 	bl	8008ce0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008bd8:	2100      	movs	r1, #0
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fd14 	bl	8009608 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008be0:	f000 f88c 	bl	8008cfc <xTaskResumeAll>
 8008be4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d107      	bne.n	8008bfc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008bec:	4b06      	ldr	r3, [pc, #24]	; (8008c08 <vTaskDelay+0x68>)
 8008bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bfc:	bf00      	nop
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	2000113c 	.word	0x2000113c
 8008c08:	e000ed04 	.word	0xe000ed04

08008c0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08a      	sub	sp, #40	; 0x28
 8008c10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c12:	2300      	movs	r3, #0
 8008c14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c16:	2300      	movs	r3, #0
 8008c18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c1a:	463a      	mov	r2, r7
 8008c1c:	1d39      	adds	r1, r7, #4
 8008c1e:	f107 0308 	add.w	r3, r7, #8
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7f8 fb12 	bl	800124c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	9202      	str	r2, [sp, #8]
 8008c30:	9301      	str	r3, [sp, #4]
 8008c32:	2300      	movs	r3, #0
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	2300      	movs	r3, #0
 8008c38:	460a      	mov	r2, r1
 8008c3a:	4923      	ldr	r1, [pc, #140]	; (8008cc8 <vTaskStartScheduler+0xbc>)
 8008c3c:	4823      	ldr	r0, [pc, #140]	; (8008ccc <vTaskStartScheduler+0xc0>)
 8008c3e:	f7ff fe13 	bl	8008868 <xTaskCreateStatic>
 8008c42:	4603      	mov	r3, r0
 8008c44:	4a22      	ldr	r2, [pc, #136]	; (8008cd0 <vTaskStartScheduler+0xc4>)
 8008c46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c48:	4b21      	ldr	r3, [pc, #132]	; (8008cd0 <vTaskStartScheduler+0xc4>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c50:	2301      	movs	r3, #1
 8008c52:	617b      	str	r3, [r7, #20]
 8008c54:	e001      	b.n	8008c5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c56:	2300      	movs	r3, #0
 8008c58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d102      	bne.n	8008c66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c60:	f000 fd38 	bl	80096d4 <xTimerCreateTimerTask>
 8008c64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d118      	bne.n	8008c9e <vTaskStartScheduler+0x92>
	__asm volatile
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	b672      	cpsid	i
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	b662      	cpsie	i
 8008c80:	613b      	str	r3, [r7, #16]
}
 8008c82:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c84:	4b13      	ldr	r3, [pc, #76]	; (8008cd4 <vTaskStartScheduler+0xc8>)
 8008c86:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c8c:	4b12      	ldr	r3, [pc, #72]	; (8008cd8 <vTaskStartScheduler+0xcc>)
 8008c8e:	2201      	movs	r2, #1
 8008c90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c92:	4b12      	ldr	r3, [pc, #72]	; (8008cdc <vTaskStartScheduler+0xd0>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c98:	f001 f98a 	bl	8009fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c9c:	e010      	b.n	8008cc0 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca4:	d10c      	bne.n	8008cc0 <vTaskStartScheduler+0xb4>
	__asm volatile
 8008ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008caa:	b672      	cpsid	i
 8008cac:	f383 8811 	msr	BASEPRI, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	b662      	cpsie	i
 8008cba:	60fb      	str	r3, [r7, #12]
}
 8008cbc:	bf00      	nop
 8008cbe:	e7fe      	b.n	8008cbe <vTaskStartScheduler+0xb2>
}
 8008cc0:	bf00      	nop
 8008cc2:	3718      	adds	r7, #24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	0800f190 	.word	0x0800f190
 8008ccc:	08009309 	.word	0x08009309
 8008cd0:	20001138 	.word	0x20001138
 8008cd4:	20001134 	.word	0x20001134
 8008cd8:	20001120 	.word	0x20001120
 8008cdc:	20001118 	.word	0x20001118

08008ce0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008ce4:	4b04      	ldr	r3, [pc, #16]	; (8008cf8 <vTaskSuspendAll+0x18>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	4a03      	ldr	r2, [pc, #12]	; (8008cf8 <vTaskSuspendAll+0x18>)
 8008cec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008cee:	bf00      	nop
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	2000113c 	.word	0x2000113c

08008cfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d02:	2300      	movs	r3, #0
 8008d04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d06:	2300      	movs	r3, #0
 8008d08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d0a:	4b42      	ldr	r3, [pc, #264]	; (8008e14 <xTaskResumeAll+0x118>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10c      	bne.n	8008d2c <xTaskResumeAll+0x30>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	b672      	cpsid	i
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	b662      	cpsie	i
 8008d26:	603b      	str	r3, [r7, #0]
}
 8008d28:	bf00      	nop
 8008d2a:	e7fe      	b.n	8008d2a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d2c:	f001 f9be 	bl	800a0ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d30:	4b38      	ldr	r3, [pc, #224]	; (8008e14 <xTaskResumeAll+0x118>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3b01      	subs	r3, #1
 8008d36:	4a37      	ldr	r2, [pc, #220]	; (8008e14 <xTaskResumeAll+0x118>)
 8008d38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d3a:	4b36      	ldr	r3, [pc, #216]	; (8008e14 <xTaskResumeAll+0x118>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d161      	bne.n	8008e06 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d42:	4b35      	ldr	r3, [pc, #212]	; (8008e18 <xTaskResumeAll+0x11c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d05d      	beq.n	8008e06 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d4a:	e02e      	b.n	8008daa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d4c:	4b33      	ldr	r3, [pc, #204]	; (8008e1c <xTaskResumeAll+0x120>)
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	3318      	adds	r3, #24
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7ff f855 	bl	8007e08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3304      	adds	r3, #4
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7ff f850 	bl	8007e08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	409a      	lsls	r2, r3
 8008d70:	4b2b      	ldr	r3, [pc, #172]	; (8008e20 <xTaskResumeAll+0x124>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	4a2a      	ldr	r2, [pc, #168]	; (8008e20 <xTaskResumeAll+0x124>)
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7e:	4613      	mov	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4a27      	ldr	r2, [pc, #156]	; (8008e24 <xTaskResumeAll+0x128>)
 8008d88:	441a      	add	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	4619      	mov	r1, r3
 8008d90:	4610      	mov	r0, r2
 8008d92:	f7fe ffdc 	bl	8007d4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9a:	4b23      	ldr	r3, [pc, #140]	; (8008e28 <xTaskResumeAll+0x12c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d302      	bcc.n	8008daa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008da4:	4b21      	ldr	r3, [pc, #132]	; (8008e2c <xTaskResumeAll+0x130>)
 8008da6:	2201      	movs	r2, #1
 8008da8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008daa:	4b1c      	ldr	r3, [pc, #112]	; (8008e1c <xTaskResumeAll+0x120>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1cc      	bne.n	8008d4c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008db8:	f000 fb5e 	bl	8009478 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008dbc:	4b1c      	ldr	r3, [pc, #112]	; (8008e30 <xTaskResumeAll+0x134>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d010      	beq.n	8008dea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008dc8:	f000 f846 	bl	8008e58 <xTaskIncrementTick>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008dd2:	4b16      	ldr	r3, [pc, #88]	; (8008e2c <xTaskResumeAll+0x130>)
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1f1      	bne.n	8008dc8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8008de4:	4b12      	ldr	r3, [pc, #72]	; (8008e30 <xTaskResumeAll+0x134>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008dea:	4b10      	ldr	r3, [pc, #64]	; (8008e2c <xTaskResumeAll+0x130>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d009      	beq.n	8008e06 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008df2:	2301      	movs	r3, #1
 8008df4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008df6:	4b0f      	ldr	r3, [pc, #60]	; (8008e34 <xTaskResumeAll+0x138>)
 8008df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e06:	f001 f985 	bl	800a114 <vPortExitCritical>

	return xAlreadyYielded;
 8008e0a:	68bb      	ldr	r3, [r7, #8]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	2000113c 	.word	0x2000113c
 8008e18:	20001114 	.word	0x20001114
 8008e1c:	200010d4 	.word	0x200010d4
 8008e20:	2000111c 	.word	0x2000111c
 8008e24:	20001018 	.word	0x20001018
 8008e28:	20001014 	.word	0x20001014
 8008e2c:	20001128 	.word	0x20001128
 8008e30:	20001124 	.word	0x20001124
 8008e34:	e000ed04 	.word	0xe000ed04

08008e38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e3e:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <xTaskGetTickCount+0x1c>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e44:	687b      	ldr	r3, [r7, #4]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	20001118 	.word	0x20001118

08008e58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e62:	4b4f      	ldr	r3, [pc, #316]	; (8008fa0 <xTaskIncrementTick+0x148>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f040 808a 	bne.w	8008f80 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e6c:	4b4d      	ldr	r3, [pc, #308]	; (8008fa4 <xTaskIncrementTick+0x14c>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	3301      	adds	r3, #1
 8008e72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e74:	4a4b      	ldr	r2, [pc, #300]	; (8008fa4 <xTaskIncrementTick+0x14c>)
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d122      	bne.n	8008ec6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e80:	4b49      	ldr	r3, [pc, #292]	; (8008fa8 <xTaskIncrementTick+0x150>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00c      	beq.n	8008ea4 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8e:	b672      	cpsid	i
 8008e90:	f383 8811 	msr	BASEPRI, r3
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	b662      	cpsie	i
 8008e9e:	603b      	str	r3, [r7, #0]
}
 8008ea0:	bf00      	nop
 8008ea2:	e7fe      	b.n	8008ea2 <xTaskIncrementTick+0x4a>
 8008ea4:	4b40      	ldr	r3, [pc, #256]	; (8008fa8 <xTaskIncrementTick+0x150>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	60fb      	str	r3, [r7, #12]
 8008eaa:	4b40      	ldr	r3, [pc, #256]	; (8008fac <xTaskIncrementTick+0x154>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a3e      	ldr	r2, [pc, #248]	; (8008fa8 <xTaskIncrementTick+0x150>)
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	4a3e      	ldr	r2, [pc, #248]	; (8008fac <xTaskIncrementTick+0x154>)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6013      	str	r3, [r2, #0]
 8008eb8:	4b3d      	ldr	r3, [pc, #244]	; (8008fb0 <xTaskIncrementTick+0x158>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	4a3c      	ldr	r2, [pc, #240]	; (8008fb0 <xTaskIncrementTick+0x158>)
 8008ec0:	6013      	str	r3, [r2, #0]
 8008ec2:	f000 fad9 	bl	8009478 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ec6:	4b3b      	ldr	r3, [pc, #236]	; (8008fb4 <xTaskIncrementTick+0x15c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d348      	bcc.n	8008f62 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ed0:	4b35      	ldr	r3, [pc, #212]	; (8008fa8 <xTaskIncrementTick+0x150>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d104      	bne.n	8008ee4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eda:	4b36      	ldr	r3, [pc, #216]	; (8008fb4 <xTaskIncrementTick+0x15c>)
 8008edc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee0:	601a      	str	r2, [r3, #0]
					break;
 8008ee2:	e03e      	b.n	8008f62 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ee4:	4b30      	ldr	r3, [pc, #192]	; (8008fa8 <xTaskIncrementTick+0x150>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d203      	bcs.n	8008f04 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008efc:	4a2d      	ldr	r2, [pc, #180]	; (8008fb4 <xTaskIncrementTick+0x15c>)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f02:	e02e      	b.n	8008f62 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	3304      	adds	r3, #4
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fe ff7d 	bl	8007e08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d004      	beq.n	8008f20 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	3318      	adds	r3, #24
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fe ff74 	bl	8007e08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f24:	2201      	movs	r2, #1
 8008f26:	409a      	lsls	r2, r3
 8008f28:	4b23      	ldr	r3, [pc, #140]	; (8008fb8 <xTaskIncrementTick+0x160>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	4a22      	ldr	r2, [pc, #136]	; (8008fb8 <xTaskIncrementTick+0x160>)
 8008f30:	6013      	str	r3, [r2, #0]
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f36:	4613      	mov	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4413      	add	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4a1f      	ldr	r2, [pc, #124]	; (8008fbc <xTaskIncrementTick+0x164>)
 8008f40:	441a      	add	r2, r3
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	3304      	adds	r3, #4
 8008f46:	4619      	mov	r1, r3
 8008f48:	4610      	mov	r0, r2
 8008f4a:	f7fe ff00 	bl	8007d4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f52:	4b1b      	ldr	r3, [pc, #108]	; (8008fc0 <xTaskIncrementTick+0x168>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d3b9      	bcc.n	8008ed0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f60:	e7b6      	b.n	8008ed0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f62:	4b17      	ldr	r3, [pc, #92]	; (8008fc0 <xTaskIncrementTick+0x168>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f68:	4914      	ldr	r1, [pc, #80]	; (8008fbc <xTaskIncrementTick+0x164>)
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	440b      	add	r3, r1
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d907      	bls.n	8008f8a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	617b      	str	r3, [r7, #20]
 8008f7e:	e004      	b.n	8008f8a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008f80:	4b10      	ldr	r3, [pc, #64]	; (8008fc4 <xTaskIncrementTick+0x16c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	3301      	adds	r3, #1
 8008f86:	4a0f      	ldr	r2, [pc, #60]	; (8008fc4 <xTaskIncrementTick+0x16c>)
 8008f88:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008f8a:	4b0f      	ldr	r3, [pc, #60]	; (8008fc8 <xTaskIncrementTick+0x170>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8008f92:	2301      	movs	r3, #1
 8008f94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008f96:	697b      	ldr	r3, [r7, #20]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3718      	adds	r7, #24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	2000113c 	.word	0x2000113c
 8008fa4:	20001118 	.word	0x20001118
 8008fa8:	200010cc 	.word	0x200010cc
 8008fac:	200010d0 	.word	0x200010d0
 8008fb0:	2000112c 	.word	0x2000112c
 8008fb4:	20001134 	.word	0x20001134
 8008fb8:	2000111c 	.word	0x2000111c
 8008fbc:	20001018 	.word	0x20001018
 8008fc0:	20001014 	.word	0x20001014
 8008fc4:	20001124 	.word	0x20001124
 8008fc8:	20001128 	.word	0x20001128

08008fcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008fd2:	4b28      	ldr	r3, [pc, #160]	; (8009074 <vTaskSwitchContext+0xa8>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008fda:	4b27      	ldr	r3, [pc, #156]	; (8009078 <vTaskSwitchContext+0xac>)
 8008fdc:	2201      	movs	r2, #1
 8008fde:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008fe0:	e041      	b.n	8009066 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008fe2:	4b25      	ldr	r3, [pc, #148]	; (8009078 <vTaskSwitchContext+0xac>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fe8:	4b24      	ldr	r3, [pc, #144]	; (800907c <vTaskSwitchContext+0xb0>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	fab3 f383 	clz	r3, r3
 8008ff4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008ff6:	7afb      	ldrb	r3, [r7, #11]
 8008ff8:	f1c3 031f 	rsb	r3, r3, #31
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	4920      	ldr	r1, [pc, #128]	; (8009080 <vTaskSwitchContext+0xb4>)
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	4613      	mov	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4413      	add	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	440b      	add	r3, r1
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10c      	bne.n	800902c <vTaskSwitchContext+0x60>
	__asm volatile
 8009012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009016:	b672      	cpsid	i
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	b662      	cpsie	i
 8009026:	607b      	str	r3, [r7, #4]
}
 8009028:	bf00      	nop
 800902a:	e7fe      	b.n	800902a <vTaskSwitchContext+0x5e>
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	4613      	mov	r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4413      	add	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	4a12      	ldr	r2, [pc, #72]	; (8009080 <vTaskSwitchContext+0xb4>)
 8009038:	4413      	add	r3, r2
 800903a:	613b      	str	r3, [r7, #16]
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	685a      	ldr	r2, [r3, #4]
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	605a      	str	r2, [r3, #4]
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	3308      	adds	r3, #8
 800904e:	429a      	cmp	r2, r3
 8009050:	d104      	bne.n	800905c <vTaskSwitchContext+0x90>
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	605a      	str	r2, [r3, #4]
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	4a08      	ldr	r2, [pc, #32]	; (8009084 <vTaskSwitchContext+0xb8>)
 8009064:	6013      	str	r3, [r2, #0]
}
 8009066:	bf00      	nop
 8009068:	371c      	adds	r7, #28
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	2000113c 	.word	0x2000113c
 8009078:	20001128 	.word	0x20001128
 800907c:	2000111c 	.word	0x2000111c
 8009080:	20001018 	.word	0x20001018
 8009084:	20001014 	.word	0x20001014

08009088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10c      	bne.n	80090b2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909c:	b672      	cpsid	i
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	b662      	cpsie	i
 80090ac:	60fb      	str	r3, [r7, #12]
}
 80090ae:	bf00      	nop
 80090b0:	e7fe      	b.n	80090b0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090b2:	4b07      	ldr	r3, [pc, #28]	; (80090d0 <vTaskPlaceOnEventList+0x48>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3318      	adds	r3, #24
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7fe fe6b 	bl	8007d96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090c0:	2101      	movs	r1, #1
 80090c2:	6838      	ldr	r0, [r7, #0]
 80090c4:	f000 faa0 	bl	8009608 <prvAddCurrentTaskToDelayedList>
}
 80090c8:	bf00      	nop
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	20001014 	.word	0x20001014

080090d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10c      	bne.n	8009100 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80090e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ea:	b672      	cpsid	i
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	b662      	cpsie	i
 80090fa:	617b      	str	r3, [r7, #20]
}
 80090fc:	bf00      	nop
 80090fe:	e7fe      	b.n	80090fe <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009100:	4b0a      	ldr	r3, [pc, #40]	; (800912c <vTaskPlaceOnEventListRestricted+0x58>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3318      	adds	r3, #24
 8009106:	4619      	mov	r1, r3
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f7fe fe20 	bl	8007d4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8009114:	f04f 33ff 	mov.w	r3, #4294967295
 8009118:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800911a:	6879      	ldr	r1, [r7, #4]
 800911c:	68b8      	ldr	r0, [r7, #8]
 800911e:	f000 fa73 	bl	8009608 <prvAddCurrentTaskToDelayedList>
	}
 8009122:	bf00      	nop
 8009124:	3718      	adds	r7, #24
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	20001014 	.word	0x20001014

08009130 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10c      	bne.n	8009160 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914a:	b672      	cpsid	i
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	b662      	cpsie	i
 800915a:	60fb      	str	r3, [r7, #12]
}
 800915c:	bf00      	nop
 800915e:	e7fe      	b.n	800915e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	3318      	adds	r3, #24
 8009164:	4618      	mov	r0, r3
 8009166:	f7fe fe4f 	bl	8007e08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800916a:	4b1d      	ldr	r3, [pc, #116]	; (80091e0 <xTaskRemoveFromEventList+0xb0>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d11c      	bne.n	80091ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	3304      	adds	r3, #4
 8009176:	4618      	mov	r0, r3
 8009178:	f7fe fe46 	bl	8007e08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009180:	2201      	movs	r2, #1
 8009182:	409a      	lsls	r2, r3
 8009184:	4b17      	ldr	r3, [pc, #92]	; (80091e4 <xTaskRemoveFromEventList+0xb4>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4313      	orrs	r3, r2
 800918a:	4a16      	ldr	r2, [pc, #88]	; (80091e4 <xTaskRemoveFromEventList+0xb4>)
 800918c:	6013      	str	r3, [r2, #0]
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009192:	4613      	mov	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4a13      	ldr	r2, [pc, #76]	; (80091e8 <xTaskRemoveFromEventList+0xb8>)
 800919c:	441a      	add	r2, r3
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	3304      	adds	r3, #4
 80091a2:	4619      	mov	r1, r3
 80091a4:	4610      	mov	r0, r2
 80091a6:	f7fe fdd2 	bl	8007d4e <vListInsertEnd>
 80091aa:	e005      	b.n	80091b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	3318      	adds	r3, #24
 80091b0:	4619      	mov	r1, r3
 80091b2:	480e      	ldr	r0, [pc, #56]	; (80091ec <xTaskRemoveFromEventList+0xbc>)
 80091b4:	f7fe fdcb 	bl	8007d4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091bc:	4b0c      	ldr	r3, [pc, #48]	; (80091f0 <xTaskRemoveFromEventList+0xc0>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d905      	bls.n	80091d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80091c6:	2301      	movs	r3, #1
 80091c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80091ca:	4b0a      	ldr	r3, [pc, #40]	; (80091f4 <xTaskRemoveFromEventList+0xc4>)
 80091cc:	2201      	movs	r2, #1
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	e001      	b.n	80091d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80091d2:	2300      	movs	r3, #0
 80091d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80091d6:	697b      	ldr	r3, [r7, #20]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3718      	adds	r7, #24
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	2000113c 	.word	0x2000113c
 80091e4:	2000111c 	.word	0x2000111c
 80091e8:	20001018 	.word	0x20001018
 80091ec:	200010d4 	.word	0x200010d4
 80091f0:	20001014 	.word	0x20001014
 80091f4:	20001128 	.word	0x20001128

080091f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009200:	4b06      	ldr	r3, [pc, #24]	; (800921c <vTaskInternalSetTimeOutState+0x24>)
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009208:	4b05      	ldr	r3, [pc, #20]	; (8009220 <vTaskInternalSetTimeOutState+0x28>)
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	605a      	str	r2, [r3, #4]
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr
 800921c:	2000112c 	.word	0x2000112c
 8009220:	20001118 	.word	0x20001118

08009224 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10c      	bne.n	800924e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	b672      	cpsid	i
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	b662      	cpsie	i
 8009248:	613b      	str	r3, [r7, #16]
}
 800924a:	bf00      	nop
 800924c:	e7fe      	b.n	800924c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10c      	bne.n	800926e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	b672      	cpsid	i
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	b662      	cpsie	i
 8009268:	60fb      	str	r3, [r7, #12]
}
 800926a:	bf00      	nop
 800926c:	e7fe      	b.n	800926c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800926e:	f000 ff1d 	bl	800a0ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009272:	4b1d      	ldr	r3, [pc, #116]	; (80092e8 <xTaskCheckForTimeOut+0xc4>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	69ba      	ldr	r2, [r7, #24]
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800928a:	d102      	bne.n	8009292 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800928c:	2300      	movs	r3, #0
 800928e:	61fb      	str	r3, [r7, #28]
 8009290:	e023      	b.n	80092da <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	4b15      	ldr	r3, [pc, #84]	; (80092ec <xTaskCheckForTimeOut+0xc8>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	429a      	cmp	r2, r3
 800929c:	d007      	beq.n	80092ae <xTaskCheckForTimeOut+0x8a>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d302      	bcc.n	80092ae <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80092a8:	2301      	movs	r3, #1
 80092aa:	61fb      	str	r3, [r7, #28]
 80092ac:	e015      	b.n	80092da <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d20b      	bcs.n	80092d0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	1ad2      	subs	r2, r2, r3
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f7ff ff97 	bl	80091f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80092ca:	2300      	movs	r3, #0
 80092cc:	61fb      	str	r3, [r7, #28]
 80092ce:	e004      	b.n	80092da <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	2200      	movs	r2, #0
 80092d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80092d6:	2301      	movs	r3, #1
 80092d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80092da:	f000 ff1b 	bl	800a114 <vPortExitCritical>

	return xReturn;
 80092de:	69fb      	ldr	r3, [r7, #28]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3720      	adds	r7, #32
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	20001118 	.word	0x20001118
 80092ec:	2000112c 	.word	0x2000112c

080092f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80092f0:	b480      	push	{r7}
 80092f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80092f4:	4b03      	ldr	r3, [pc, #12]	; (8009304 <vTaskMissedYield+0x14>)
 80092f6:	2201      	movs	r2, #1
 80092f8:	601a      	str	r2, [r3, #0]
}
 80092fa:	bf00      	nop
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	20001128 	.word	0x20001128

08009308 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009310:	f000 f852 	bl	80093b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009314:	4b06      	ldr	r3, [pc, #24]	; (8009330 <prvIdleTask+0x28>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d9f9      	bls.n	8009310 <prvIdleTask+0x8>
			{
				taskYIELD();
 800931c:	4b05      	ldr	r3, [pc, #20]	; (8009334 <prvIdleTask+0x2c>)
 800931e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009322:	601a      	str	r2, [r3, #0]
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800932c:	e7f0      	b.n	8009310 <prvIdleTask+0x8>
 800932e:	bf00      	nop
 8009330:	20001018 	.word	0x20001018
 8009334:	e000ed04 	.word	0xe000ed04

08009338 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800933e:	2300      	movs	r3, #0
 8009340:	607b      	str	r3, [r7, #4]
 8009342:	e00c      	b.n	800935e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	4613      	mov	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	4a12      	ldr	r2, [pc, #72]	; (8009398 <prvInitialiseTaskLists+0x60>)
 8009350:	4413      	add	r3, r2
 8009352:	4618      	mov	r0, r3
 8009354:	f7fe fcce 	bl	8007cf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	3301      	adds	r3, #1
 800935c:	607b      	str	r3, [r7, #4]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b06      	cmp	r3, #6
 8009362:	d9ef      	bls.n	8009344 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009364:	480d      	ldr	r0, [pc, #52]	; (800939c <prvInitialiseTaskLists+0x64>)
 8009366:	f7fe fcc5 	bl	8007cf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800936a:	480d      	ldr	r0, [pc, #52]	; (80093a0 <prvInitialiseTaskLists+0x68>)
 800936c:	f7fe fcc2 	bl	8007cf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009370:	480c      	ldr	r0, [pc, #48]	; (80093a4 <prvInitialiseTaskLists+0x6c>)
 8009372:	f7fe fcbf 	bl	8007cf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009376:	480c      	ldr	r0, [pc, #48]	; (80093a8 <prvInitialiseTaskLists+0x70>)
 8009378:	f7fe fcbc 	bl	8007cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800937c:	480b      	ldr	r0, [pc, #44]	; (80093ac <prvInitialiseTaskLists+0x74>)
 800937e:	f7fe fcb9 	bl	8007cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009382:	4b0b      	ldr	r3, [pc, #44]	; (80093b0 <prvInitialiseTaskLists+0x78>)
 8009384:	4a05      	ldr	r2, [pc, #20]	; (800939c <prvInitialiseTaskLists+0x64>)
 8009386:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009388:	4b0a      	ldr	r3, [pc, #40]	; (80093b4 <prvInitialiseTaskLists+0x7c>)
 800938a:	4a05      	ldr	r2, [pc, #20]	; (80093a0 <prvInitialiseTaskLists+0x68>)
 800938c:	601a      	str	r2, [r3, #0]
}
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	20001018 	.word	0x20001018
 800939c:	200010a4 	.word	0x200010a4
 80093a0:	200010b8 	.word	0x200010b8
 80093a4:	200010d4 	.word	0x200010d4
 80093a8:	200010e8 	.word	0x200010e8
 80093ac:	20001100 	.word	0x20001100
 80093b0:	200010cc 	.word	0x200010cc
 80093b4:	200010d0 	.word	0x200010d0

080093b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093be:	e019      	b.n	80093f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80093c0:	f000 fe74 	bl	800a0ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c4:	4b10      	ldr	r3, [pc, #64]	; (8009408 <prvCheckTasksWaitingTermination+0x50>)
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	3304      	adds	r3, #4
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7fe fd19 	bl	8007e08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80093d6:	4b0d      	ldr	r3, [pc, #52]	; (800940c <prvCheckTasksWaitingTermination+0x54>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3b01      	subs	r3, #1
 80093dc:	4a0b      	ldr	r2, [pc, #44]	; (800940c <prvCheckTasksWaitingTermination+0x54>)
 80093de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80093e0:	4b0b      	ldr	r3, [pc, #44]	; (8009410 <prvCheckTasksWaitingTermination+0x58>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3b01      	subs	r3, #1
 80093e6:	4a0a      	ldr	r2, [pc, #40]	; (8009410 <prvCheckTasksWaitingTermination+0x58>)
 80093e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80093ea:	f000 fe93 	bl	800a114 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f810 	bl	8009414 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093f4:	4b06      	ldr	r3, [pc, #24]	; (8009410 <prvCheckTasksWaitingTermination+0x58>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1e1      	bne.n	80093c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093fc:	bf00      	nop
 80093fe:	bf00      	nop
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	200010e8 	.word	0x200010e8
 800940c:	20001114 	.word	0x20001114
 8009410:	200010fc 	.word	0x200010fc

08009414 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009422:	2b00      	cmp	r3, #0
 8009424:	d108      	bne.n	8009438 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800942a:	4618      	mov	r0, r3
 800942c:	f001 f834 	bl	800a498 <vPortFree>
				vPortFree( pxTCB );
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f001 f831 	bl	800a498 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009436:	e01a      	b.n	800946e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800943e:	2b01      	cmp	r3, #1
 8009440:	d103      	bne.n	800944a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f001 f828 	bl	800a498 <vPortFree>
	}
 8009448:	e011      	b.n	800946e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009450:	2b02      	cmp	r3, #2
 8009452:	d00c      	beq.n	800946e <prvDeleteTCB+0x5a>
	__asm volatile
 8009454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009458:	b672      	cpsid	i
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	b662      	cpsie	i
 8009468:	60fb      	str	r3, [r7, #12]
}
 800946a:	bf00      	nop
 800946c:	e7fe      	b.n	800946c <prvDeleteTCB+0x58>
	}
 800946e:	bf00      	nop
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
	...

08009478 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800947e:	4b0c      	ldr	r3, [pc, #48]	; (80094b0 <prvResetNextTaskUnblockTime+0x38>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d104      	bne.n	8009492 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009488:	4b0a      	ldr	r3, [pc, #40]	; (80094b4 <prvResetNextTaskUnblockTime+0x3c>)
 800948a:	f04f 32ff 	mov.w	r2, #4294967295
 800948e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009490:	e008      	b.n	80094a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009492:	4b07      	ldr	r3, [pc, #28]	; (80094b0 <prvResetNextTaskUnblockTime+0x38>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	4a04      	ldr	r2, [pc, #16]	; (80094b4 <prvResetNextTaskUnblockTime+0x3c>)
 80094a2:	6013      	str	r3, [r2, #0]
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	200010cc 	.word	0x200010cc
 80094b4:	20001134 	.word	0x20001134

080094b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80094be:	4b0b      	ldr	r3, [pc, #44]	; (80094ec <xTaskGetSchedulerState+0x34>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d102      	bne.n	80094cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094c6:	2301      	movs	r3, #1
 80094c8:	607b      	str	r3, [r7, #4]
 80094ca:	e008      	b.n	80094de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094cc:	4b08      	ldr	r3, [pc, #32]	; (80094f0 <xTaskGetSchedulerState+0x38>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d102      	bne.n	80094da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80094d4:	2302      	movs	r3, #2
 80094d6:	607b      	str	r3, [r7, #4]
 80094d8:	e001      	b.n	80094de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80094da:	2300      	movs	r3, #0
 80094dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80094de:	687b      	ldr	r3, [r7, #4]
	}
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	20001120 	.word	0x20001120
 80094f0:	2000113c 	.word	0x2000113c

080094f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b086      	sub	sp, #24
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009500:	2300      	movs	r3, #0
 8009502:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d072      	beq.n	80095f0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800950a:	4b3c      	ldr	r3, [pc, #240]	; (80095fc <xTaskPriorityDisinherit+0x108>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	429a      	cmp	r2, r3
 8009512:	d00c      	beq.n	800952e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009518:	b672      	cpsid	i
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	b662      	cpsie	i
 8009528:	60fb      	str	r3, [r7, #12]
}
 800952a:	bf00      	nop
 800952c:	e7fe      	b.n	800952c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10c      	bne.n	8009550 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953a:	b672      	cpsid	i
 800953c:	f383 8811 	msr	BASEPRI, r3
 8009540:	f3bf 8f6f 	isb	sy
 8009544:	f3bf 8f4f 	dsb	sy
 8009548:	b662      	cpsie	i
 800954a:	60bb      	str	r3, [r7, #8]
}
 800954c:	bf00      	nop
 800954e:	e7fe      	b.n	800954e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009554:	1e5a      	subs	r2, r3, #1
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009562:	429a      	cmp	r2, r3
 8009564:	d044      	beq.n	80095f0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800956a:	2b00      	cmp	r3, #0
 800956c:	d140      	bne.n	80095f0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	3304      	adds	r3, #4
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe fc48 	bl	8007e08 <uxListRemove>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d115      	bne.n	80095aa <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009582:	491f      	ldr	r1, [pc, #124]	; (8009600 <xTaskPriorityDisinherit+0x10c>)
 8009584:	4613      	mov	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4413      	add	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	440b      	add	r3, r1
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10a      	bne.n	80095aa <xTaskPriorityDisinherit+0xb6>
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009598:	2201      	movs	r2, #1
 800959a:	fa02 f303 	lsl.w	r3, r2, r3
 800959e:	43da      	mvns	r2, r3
 80095a0:	4b18      	ldr	r3, [pc, #96]	; (8009604 <xTaskPriorityDisinherit+0x110>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4013      	ands	r3, r2
 80095a6:	4a17      	ldr	r2, [pc, #92]	; (8009604 <xTaskPriorityDisinherit+0x110>)
 80095a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b6:	f1c3 0207 	rsb	r2, r3, #7
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c2:	2201      	movs	r2, #1
 80095c4:	409a      	lsls	r2, r3
 80095c6:	4b0f      	ldr	r3, [pc, #60]	; (8009604 <xTaskPriorityDisinherit+0x110>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	4a0d      	ldr	r2, [pc, #52]	; (8009604 <xTaskPriorityDisinherit+0x110>)
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d4:	4613      	mov	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4a08      	ldr	r2, [pc, #32]	; (8009600 <xTaskPriorityDisinherit+0x10c>)
 80095de:	441a      	add	r2, r3
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	3304      	adds	r3, #4
 80095e4:	4619      	mov	r1, r3
 80095e6:	4610      	mov	r0, r2
 80095e8:	f7fe fbb1 	bl	8007d4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80095ec:	2301      	movs	r3, #1
 80095ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095f0:	697b      	ldr	r3, [r7, #20]
	}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3718      	adds	r7, #24
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	20001014 	.word	0x20001014
 8009600:	20001018 	.word	0x20001018
 8009604:	2000111c 	.word	0x2000111c

08009608 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009612:	4b29      	ldr	r3, [pc, #164]	; (80096b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009618:	4b28      	ldr	r3, [pc, #160]	; (80096bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3304      	adds	r3, #4
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe fbf2 	bl	8007e08 <uxListRemove>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10b      	bne.n	8009642 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800962a:	4b24      	ldr	r3, [pc, #144]	; (80096bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009630:	2201      	movs	r2, #1
 8009632:	fa02 f303 	lsl.w	r3, r2, r3
 8009636:	43da      	mvns	r2, r3
 8009638:	4b21      	ldr	r3, [pc, #132]	; (80096c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4013      	ands	r3, r2
 800963e:	4a20      	ldr	r2, [pc, #128]	; (80096c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009640:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009648:	d10a      	bne.n	8009660 <prvAddCurrentTaskToDelayedList+0x58>
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d007      	beq.n	8009660 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009650:	4b1a      	ldr	r3, [pc, #104]	; (80096bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	3304      	adds	r3, #4
 8009656:	4619      	mov	r1, r3
 8009658:	481a      	ldr	r0, [pc, #104]	; (80096c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800965a:	f7fe fb78 	bl	8007d4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800965e:	e026      	b.n	80096ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4413      	add	r3, r2
 8009666:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009668:	4b14      	ldr	r3, [pc, #80]	; (80096bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	429a      	cmp	r2, r3
 8009676:	d209      	bcs.n	800968c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009678:	4b13      	ldr	r3, [pc, #76]	; (80096c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	4b0f      	ldr	r3, [pc, #60]	; (80096bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3304      	adds	r3, #4
 8009682:	4619      	mov	r1, r3
 8009684:	4610      	mov	r0, r2
 8009686:	f7fe fb86 	bl	8007d96 <vListInsert>
}
 800968a:	e010      	b.n	80096ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800968c:	4b0f      	ldr	r3, [pc, #60]	; (80096cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	4b0a      	ldr	r3, [pc, #40]	; (80096bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3304      	adds	r3, #4
 8009696:	4619      	mov	r1, r3
 8009698:	4610      	mov	r0, r2
 800969a:	f7fe fb7c 	bl	8007d96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800969e:	4b0c      	ldr	r3, [pc, #48]	; (80096d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d202      	bcs.n	80096ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80096a8:	4a09      	ldr	r2, [pc, #36]	; (80096d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	6013      	str	r3, [r2, #0]
}
 80096ae:	bf00      	nop
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	20001118 	.word	0x20001118
 80096bc:	20001014 	.word	0x20001014
 80096c0:	2000111c 	.word	0x2000111c
 80096c4:	20001100 	.word	0x20001100
 80096c8:	200010d0 	.word	0x200010d0
 80096cc:	200010cc 	.word	0x200010cc
 80096d0:	20001134 	.word	0x20001134

080096d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08a      	sub	sp, #40	; 0x28
 80096d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80096da:	2300      	movs	r3, #0
 80096dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80096de:	f000 fb97 	bl	8009e10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80096e2:	4b1d      	ldr	r3, [pc, #116]	; (8009758 <xTimerCreateTimerTask+0x84>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d021      	beq.n	800972e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80096ea:	2300      	movs	r3, #0
 80096ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80096ee:	2300      	movs	r3, #0
 80096f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80096f2:	1d3a      	adds	r2, r7, #4
 80096f4:	f107 0108 	add.w	r1, r7, #8
 80096f8:	f107 030c 	add.w	r3, r7, #12
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7f7 fdbf 	bl	8001280 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009702:	6879      	ldr	r1, [r7, #4]
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	9202      	str	r2, [sp, #8]
 800970a:	9301      	str	r3, [sp, #4]
 800970c:	2302      	movs	r3, #2
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	2300      	movs	r3, #0
 8009712:	460a      	mov	r2, r1
 8009714:	4911      	ldr	r1, [pc, #68]	; (800975c <xTimerCreateTimerTask+0x88>)
 8009716:	4812      	ldr	r0, [pc, #72]	; (8009760 <xTimerCreateTimerTask+0x8c>)
 8009718:	f7ff f8a6 	bl	8008868 <xTaskCreateStatic>
 800971c:	4603      	mov	r3, r0
 800971e:	4a11      	ldr	r2, [pc, #68]	; (8009764 <xTimerCreateTimerTask+0x90>)
 8009720:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009722:	4b10      	ldr	r3, [pc, #64]	; (8009764 <xTimerCreateTimerTask+0x90>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800972a:	2301      	movs	r3, #1
 800972c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10c      	bne.n	800974e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009738:	b672      	cpsid	i
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	b662      	cpsie	i
 8009748:	613b      	str	r3, [r7, #16]
}
 800974a:	bf00      	nop
 800974c:	e7fe      	b.n	800974c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800974e:	697b      	ldr	r3, [r7, #20]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	20001170 	.word	0x20001170
 800975c:	0800f198 	.word	0x0800f198
 8009760:	080099e5 	.word	0x080099e5
 8009764:	20001174 	.word	0x20001174

08009768 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009768:	b580      	push	{r7, lr}
 800976a:	b088      	sub	sp, #32
 800976c:	af02      	add	r7, sp, #8
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
 8009774:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009776:	2028      	movs	r0, #40	; 0x28
 8009778:	f000 fdc4 	bl	800a304 <pvPortMalloc>
 800977c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00d      	beq.n	80097a0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	9301      	str	r3, [sp, #4]
 8009790:	6a3b      	ldr	r3, [r7, #32]
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	68b9      	ldr	r1, [r7, #8]
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 f847 	bl	800982e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80097a0:	697b      	ldr	r3, [r7, #20]
	}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3718      	adds	r7, #24
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b08a      	sub	sp, #40	; 0x28
 80097ae:	af02      	add	r7, sp, #8
 80097b0:	60f8      	str	r0, [r7, #12]
 80097b2:	60b9      	str	r1, [r7, #8]
 80097b4:	607a      	str	r2, [r7, #4]
 80097b6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80097b8:	2328      	movs	r3, #40	; 0x28
 80097ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	2b28      	cmp	r3, #40	; 0x28
 80097c0:	d00c      	beq.n	80097dc <xTimerCreateStatic+0x32>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	b672      	cpsid	i
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	b662      	cpsie	i
 80097d6:	61bb      	str	r3, [r7, #24]
}
 80097d8:	bf00      	nop
 80097da:	e7fe      	b.n	80097da <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80097dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80097de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10c      	bne.n	80097fe <xTimerCreateStatic+0x54>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e8:	b672      	cpsid	i
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	b662      	cpsie	i
 80097f8:	617b      	str	r3, [r7, #20]
}
 80097fa:	bf00      	nop
 80097fc:	e7fe      	b.n	80097fc <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80097fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009800:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00d      	beq.n	8009824 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	2202      	movs	r2, #2
 800980c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	9301      	str	r3, [sp, #4]
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	68b9      	ldr	r1, [r7, #8]
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 f805 	bl	800982e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009824:	69fb      	ldr	r3, [r7, #28]
	}
 8009826:	4618      	mov	r0, r3
 8009828:	3720      	adds	r7, #32
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b086      	sub	sp, #24
 8009832:	af00      	add	r7, sp, #0
 8009834:	60f8      	str	r0, [r7, #12]
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	607a      	str	r2, [r7, #4]
 800983a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10c      	bne.n	800985c <prvInitialiseNewTimer+0x2e>
	__asm volatile
 8009842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009846:	b672      	cpsid	i
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	b662      	cpsie	i
 8009856:	617b      	str	r3, [r7, #20]
}
 8009858:	bf00      	nop
 800985a:	e7fe      	b.n	800985a <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	2b00      	cmp	r3, #0
 8009860:	d01e      	beq.n	80098a0 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009862:	f000 fad5 	bl	8009e10 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800986c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	683a      	ldr	r2, [r7, #0]
 8009876:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987a:	6a3a      	ldr	r2, [r7, #32]
 800987c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009880:	3304      	adds	r3, #4
 8009882:	4618      	mov	r0, r3
 8009884:	f7fe fa56 	bl	8007d34 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d008      	beq.n	80098a0 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800988e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009890:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009894:	f043 0304 	orr.w	r3, r3, #4
 8009898:	b2da      	uxtb	r2, r3
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80098a0:	bf00      	nop
 80098a2:	3718      	adds	r7, #24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08a      	sub	sp, #40	; 0x28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
 80098b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80098b6:	2300      	movs	r3, #0
 80098b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10c      	bne.n	80098da <xTimerGenericCommand+0x32>
	__asm volatile
 80098c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c4:	b672      	cpsid	i
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	b662      	cpsie	i
 80098d4:	623b      	str	r3, [r7, #32]
}
 80098d6:	bf00      	nop
 80098d8:	e7fe      	b.n	80098d8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80098da:	4b1a      	ldr	r3, [pc, #104]	; (8009944 <xTimerGenericCommand+0x9c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d02a      	beq.n	8009938 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2b05      	cmp	r3, #5
 80098f2:	dc18      	bgt.n	8009926 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80098f4:	f7ff fde0 	bl	80094b8 <xTaskGetSchedulerState>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d109      	bne.n	8009912 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80098fe:	4b11      	ldr	r3, [pc, #68]	; (8009944 <xTimerGenericCommand+0x9c>)
 8009900:	6818      	ldr	r0, [r3, #0]
 8009902:	f107 0114 	add.w	r1, r7, #20
 8009906:	2300      	movs	r3, #0
 8009908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800990a:	f7fe fbb3 	bl	8008074 <xQueueGenericSend>
 800990e:	6278      	str	r0, [r7, #36]	; 0x24
 8009910:	e012      	b.n	8009938 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009912:	4b0c      	ldr	r3, [pc, #48]	; (8009944 <xTimerGenericCommand+0x9c>)
 8009914:	6818      	ldr	r0, [r3, #0]
 8009916:	f107 0114 	add.w	r1, r7, #20
 800991a:	2300      	movs	r3, #0
 800991c:	2200      	movs	r2, #0
 800991e:	f7fe fba9 	bl	8008074 <xQueueGenericSend>
 8009922:	6278      	str	r0, [r7, #36]	; 0x24
 8009924:	e008      	b.n	8009938 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009926:	4b07      	ldr	r3, [pc, #28]	; (8009944 <xTimerGenericCommand+0x9c>)
 8009928:	6818      	ldr	r0, [r3, #0]
 800992a:	f107 0114 	add.w	r1, r7, #20
 800992e:	2300      	movs	r3, #0
 8009930:	683a      	ldr	r2, [r7, #0]
 8009932:	f7fe fca5 	bl	8008280 <xQueueGenericSendFromISR>
 8009936:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800993a:	4618      	mov	r0, r3
 800993c:	3728      	adds	r7, #40	; 0x28
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	20001170 	.word	0x20001170

08009948 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b088      	sub	sp, #32
 800994c:	af02      	add	r7, sp, #8
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009952:	4b23      	ldr	r3, [pc, #140]	; (80099e0 <prvProcessExpiredTimer+0x98>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	3304      	adds	r3, #4
 8009960:	4618      	mov	r0, r3
 8009962:	f7fe fa51 	bl	8007e08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800996c:	f003 0304 	and.w	r3, r3, #4
 8009970:	2b00      	cmp	r3, #0
 8009972:	d024      	beq.n	80099be <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	699a      	ldr	r2, [r3, #24]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	18d1      	adds	r1, r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	6978      	ldr	r0, [r7, #20]
 8009982:	f000 f8d3 	bl	8009b2c <prvInsertTimerInActiveList>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d021      	beq.n	80099d0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800998c:	2300      	movs	r3, #0
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	2300      	movs	r3, #0
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	2100      	movs	r1, #0
 8009996:	6978      	ldr	r0, [r7, #20]
 8009998:	f7ff ff86 	bl	80098a8 <xTimerGenericCommand>
 800999c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d115      	bne.n	80099d0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80099a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a8:	b672      	cpsid	i
 80099aa:	f383 8811 	msr	BASEPRI, r3
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	f3bf 8f4f 	dsb	sy
 80099b6:	b662      	cpsie	i
 80099b8:	60fb      	str	r3, [r7, #12]
}
 80099ba:	bf00      	nop
 80099bc:	e7fe      	b.n	80099bc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80099c4:	f023 0301 	bic.w	r3, r3, #1
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	6a1b      	ldr	r3, [r3, #32]
 80099d4:	6978      	ldr	r0, [r7, #20]
 80099d6:	4798      	blx	r3
}
 80099d8:	bf00      	nop
 80099da:	3718      	adds	r7, #24
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	20001168 	.word	0x20001168

080099e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099ec:	f107 0308 	add.w	r3, r7, #8
 80099f0:	4618      	mov	r0, r3
 80099f2:	f000 f857 	bl	8009aa4 <prvGetNextExpireTime>
 80099f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	4619      	mov	r1, r3
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f000 f803 	bl	8009a08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a02:	f000 f8d5 	bl	8009bb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a06:	e7f1      	b.n	80099ec <prvTimerTask+0x8>

08009a08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a12:	f7ff f965 	bl	8008ce0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a16:	f107 0308 	add.w	r3, r7, #8
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 f866 	bl	8009aec <prvSampleTimeNow>
 8009a20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d130      	bne.n	8009a8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10a      	bne.n	8009a44 <prvProcessTimerOrBlockTask+0x3c>
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d806      	bhi.n	8009a44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a36:	f7ff f961 	bl	8008cfc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a3a:	68f9      	ldr	r1, [r7, #12]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f7ff ff83 	bl	8009948 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a42:	e024      	b.n	8009a8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d008      	beq.n	8009a5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a4a:	4b13      	ldr	r3, [pc, #76]	; (8009a98 <prvProcessTimerOrBlockTask+0x90>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <prvProcessTimerOrBlockTask+0x50>
 8009a54:	2301      	movs	r3, #1
 8009a56:	e000      	b.n	8009a5a <prvProcessTimerOrBlockTask+0x52>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a5c:	4b0f      	ldr	r3, [pc, #60]	; (8009a9c <prvProcessTimerOrBlockTask+0x94>)
 8009a5e:	6818      	ldr	r0, [r3, #0]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	f7fe fec9 	bl	8008800 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a6e:	f7ff f945 	bl	8008cfc <xTaskResumeAll>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10a      	bne.n	8009a8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009a78:	4b09      	ldr	r3, [pc, #36]	; (8009aa0 <prvProcessTimerOrBlockTask+0x98>)
 8009a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a7e:	601a      	str	r2, [r3, #0]
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	f3bf 8f6f 	isb	sy
}
 8009a88:	e001      	b.n	8009a8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009a8a:	f7ff f937 	bl	8008cfc <xTaskResumeAll>
}
 8009a8e:	bf00      	nop
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	2000116c 	.word	0x2000116c
 8009a9c:	20001170 	.word	0x20001170
 8009aa0:	e000ed04 	.word	0xe000ed04

08009aa4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009aac:	4b0e      	ldr	r3, [pc, #56]	; (8009ae8 <prvGetNextExpireTime+0x44>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d101      	bne.n	8009aba <prvGetNextExpireTime+0x16>
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	e000      	b.n	8009abc <prvGetNextExpireTime+0x18>
 8009aba:	2200      	movs	r2, #0
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d105      	bne.n	8009ad4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ac8:	4b07      	ldr	r3, [pc, #28]	; (8009ae8 <prvGetNextExpireTime+0x44>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	60fb      	str	r3, [r7, #12]
 8009ad2:	e001      	b.n	8009ad8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	20001168 	.word	0x20001168

08009aec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009af4:	f7ff f9a0 	bl	8008e38 <xTaskGetTickCount>
 8009af8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009afa:	4b0b      	ldr	r3, [pc, #44]	; (8009b28 <prvSampleTimeNow+0x3c>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d205      	bcs.n	8009b10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b04:	f000 f91e 	bl	8009d44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	e002      	b.n	8009b16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b16:	4a04      	ldr	r2, [pc, #16]	; (8009b28 <prvSampleTimeNow+0x3c>)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	20001178 	.word	0x20001178

08009b2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b086      	sub	sp, #24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d812      	bhi.n	8009b78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	1ad2      	subs	r2, r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d302      	bcc.n	8009b66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b60:	2301      	movs	r3, #1
 8009b62:	617b      	str	r3, [r7, #20]
 8009b64:	e01b      	b.n	8009b9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b66:	4b10      	ldr	r3, [pc, #64]	; (8009ba8 <prvInsertTimerInActiveList+0x7c>)
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	3304      	adds	r3, #4
 8009b6e:	4619      	mov	r1, r3
 8009b70:	4610      	mov	r0, r2
 8009b72:	f7fe f910 	bl	8007d96 <vListInsert>
 8009b76:	e012      	b.n	8009b9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d206      	bcs.n	8009b8e <prvInsertTimerInActiveList+0x62>
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d302      	bcc.n	8009b8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	617b      	str	r3, [r7, #20]
 8009b8c:	e007      	b.n	8009b9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b8e:	4b07      	ldr	r3, [pc, #28]	; (8009bac <prvInsertTimerInActiveList+0x80>)
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	3304      	adds	r3, #4
 8009b96:	4619      	mov	r1, r3
 8009b98:	4610      	mov	r0, r2
 8009b9a:	f7fe f8fc 	bl	8007d96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009b9e:	697b      	ldr	r3, [r7, #20]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3718      	adds	r7, #24
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	2000116c 	.word	0x2000116c
 8009bac:	20001168 	.word	0x20001168

08009bb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b08c      	sub	sp, #48	; 0x30
 8009bb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bb6:	e0b2      	b.n	8009d1e <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f2c0 80ae 	blt.w	8009d1c <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	695b      	ldr	r3, [r3, #20]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d004      	beq.n	8009bd6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	3304      	adds	r3, #4
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fe f919 	bl	8007e08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bd6:	1d3b      	adds	r3, r7, #4
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7ff ff87 	bl	8009aec <prvSampleTimeNow>
 8009bde:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b09      	cmp	r3, #9
 8009be4:	f200 809b 	bhi.w	8009d1e <prvProcessReceivedCommands+0x16e>
 8009be8:	a201      	add	r2, pc, #4	; (adr r2, 8009bf0 <prvProcessReceivedCommands+0x40>)
 8009bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bee:	bf00      	nop
 8009bf0:	08009c19 	.word	0x08009c19
 8009bf4:	08009c19 	.word	0x08009c19
 8009bf8:	08009c19 	.word	0x08009c19
 8009bfc:	08009c91 	.word	0x08009c91
 8009c00:	08009ca5 	.word	0x08009ca5
 8009c04:	08009cf3 	.word	0x08009cf3
 8009c08:	08009c19 	.word	0x08009c19
 8009c0c:	08009c19 	.word	0x08009c19
 8009c10:	08009c91 	.word	0x08009c91
 8009c14:	08009ca5 	.word	0x08009ca5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c1e:	f043 0301 	orr.w	r3, r3, #1
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	18d1      	adds	r1, r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6a3a      	ldr	r2, [r7, #32]
 8009c36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c38:	f7ff ff78 	bl	8009b2c <prvInsertTimerInActiveList>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d06d      	beq.n	8009d1e <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c50:	f003 0304 	and.w	r3, r3, #4
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d062      	beq.n	8009d1e <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5c:	699b      	ldr	r3, [r3, #24]
 8009c5e:	441a      	add	r2, r3
 8009c60:	2300      	movs	r3, #0
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	2300      	movs	r3, #0
 8009c66:	2100      	movs	r1, #0
 8009c68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c6a:	f7ff fe1d 	bl	80098a8 <xTimerGenericCommand>
 8009c6e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d153      	bne.n	8009d1e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8009c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7a:	b672      	cpsid	i
 8009c7c:	f383 8811 	msr	BASEPRI, r3
 8009c80:	f3bf 8f6f 	isb	sy
 8009c84:	f3bf 8f4f 	dsb	sy
 8009c88:	b662      	cpsie	i
 8009c8a:	61bb      	str	r3, [r7, #24]
}
 8009c8c:	bf00      	nop
 8009c8e:	e7fe      	b.n	8009c8e <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c96:	f023 0301 	bic.w	r3, r3, #1
 8009c9a:	b2da      	uxtb	r2, r3
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8009ca2:	e03c      	b.n	8009d1e <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009caa:	f043 0301 	orr.w	r3, r3, #1
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10c      	bne.n	8009cde <prvProcessReceivedCommands+0x12e>
	__asm volatile
 8009cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc8:	b672      	cpsid	i
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	b662      	cpsie	i
 8009cd8:	617b      	str	r3, [r7, #20]
}
 8009cda:	bf00      	nop
 8009cdc:	e7fe      	b.n	8009cdc <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	699a      	ldr	r2, [r3, #24]
 8009ce2:	6a3b      	ldr	r3, [r7, #32]
 8009ce4:	18d1      	adds	r1, r2, r3
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	6a3a      	ldr	r2, [r7, #32]
 8009cea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009cec:	f7ff ff1e 	bl	8009b2c <prvInsertTimerInActiveList>
					break;
 8009cf0:	e015      	b.n	8009d1e <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009cf8:	f003 0302 	and.w	r3, r3, #2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d103      	bne.n	8009d08 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8009d00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d02:	f000 fbc9 	bl	800a498 <vPortFree>
 8009d06:	e00a      	b.n	8009d1e <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d0e:	f023 0301 	bic.w	r3, r3, #1
 8009d12:	b2da      	uxtb	r2, r3
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d1a:	e000      	b.n	8009d1e <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009d1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d1e:	4b08      	ldr	r3, [pc, #32]	; (8009d40 <prvProcessReceivedCommands+0x190>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f107 0108 	add.w	r1, r7, #8
 8009d26:	2200      	movs	r2, #0
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fe fb49 	bl	80083c0 <xQueueReceive>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f47f af41 	bne.w	8009bb8 <prvProcessReceivedCommands+0x8>
	}
}
 8009d36:	bf00      	nop
 8009d38:	bf00      	nop
 8009d3a:	3728      	adds	r7, #40	; 0x28
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	20001170 	.word	0x20001170

08009d44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b088      	sub	sp, #32
 8009d48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d4a:	e04a      	b.n	8009de2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d4c:	4b2e      	ldr	r3, [pc, #184]	; (8009e08 <prvSwitchTimerLists+0xc4>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d56:	4b2c      	ldr	r3, [pc, #176]	; (8009e08 <prvSwitchTimerLists+0xc4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	3304      	adds	r3, #4
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7fe f84f 	bl	8007e08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6a1b      	ldr	r3, [r3, #32]
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d78:	f003 0304 	and.w	r3, r3, #4
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d030      	beq.n	8009de2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	4413      	add	r3, r2
 8009d88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d90e      	bls.n	8009db0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d9e:	4b1a      	ldr	r3, [pc, #104]	; (8009e08 <prvSwitchTimerLists+0xc4>)
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	3304      	adds	r3, #4
 8009da6:	4619      	mov	r1, r3
 8009da8:	4610      	mov	r0, r2
 8009daa:	f7fd fff4 	bl	8007d96 <vListInsert>
 8009dae:	e018      	b.n	8009de2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009db0:	2300      	movs	r3, #0
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	2300      	movs	r3, #0
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	2100      	movs	r1, #0
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f7ff fd74 	bl	80098a8 <xTimerGenericCommand>
 8009dc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10c      	bne.n	8009de2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	b672      	cpsid	i
 8009dce:	f383 8811 	msr	BASEPRI, r3
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	b662      	cpsie	i
 8009ddc:	603b      	str	r3, [r7, #0]
}
 8009dde:	bf00      	nop
 8009de0:	e7fe      	b.n	8009de0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009de2:	4b09      	ldr	r3, [pc, #36]	; (8009e08 <prvSwitchTimerLists+0xc4>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1af      	bne.n	8009d4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009dec:	4b06      	ldr	r3, [pc, #24]	; (8009e08 <prvSwitchTimerLists+0xc4>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009df2:	4b06      	ldr	r3, [pc, #24]	; (8009e0c <prvSwitchTimerLists+0xc8>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a04      	ldr	r2, [pc, #16]	; (8009e08 <prvSwitchTimerLists+0xc4>)
 8009df8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009dfa:	4a04      	ldr	r2, [pc, #16]	; (8009e0c <prvSwitchTimerLists+0xc8>)
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	6013      	str	r3, [r2, #0]
}
 8009e00:	bf00      	nop
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	20001168 	.word	0x20001168
 8009e0c:	2000116c 	.word	0x2000116c

08009e10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e16:	f000 f949 	bl	800a0ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e1a:	4b15      	ldr	r3, [pc, #84]	; (8009e70 <prvCheckForValidListAndQueue+0x60>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d120      	bne.n	8009e64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e22:	4814      	ldr	r0, [pc, #80]	; (8009e74 <prvCheckForValidListAndQueue+0x64>)
 8009e24:	f7fd ff66 	bl	8007cf4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e28:	4813      	ldr	r0, [pc, #76]	; (8009e78 <prvCheckForValidListAndQueue+0x68>)
 8009e2a:	f7fd ff63 	bl	8007cf4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e2e:	4b13      	ldr	r3, [pc, #76]	; (8009e7c <prvCheckForValidListAndQueue+0x6c>)
 8009e30:	4a10      	ldr	r2, [pc, #64]	; (8009e74 <prvCheckForValidListAndQueue+0x64>)
 8009e32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e34:	4b12      	ldr	r3, [pc, #72]	; (8009e80 <prvCheckForValidListAndQueue+0x70>)
 8009e36:	4a10      	ldr	r2, [pc, #64]	; (8009e78 <prvCheckForValidListAndQueue+0x68>)
 8009e38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	4b11      	ldr	r3, [pc, #68]	; (8009e84 <prvCheckForValidListAndQueue+0x74>)
 8009e40:	4a11      	ldr	r2, [pc, #68]	; (8009e88 <prvCheckForValidListAndQueue+0x78>)
 8009e42:	210c      	movs	r1, #12
 8009e44:	200a      	movs	r0, #10
 8009e46:	f7fe f873 	bl	8007f30 <xQueueGenericCreateStatic>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	4a08      	ldr	r2, [pc, #32]	; (8009e70 <prvCheckForValidListAndQueue+0x60>)
 8009e4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e50:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <prvCheckForValidListAndQueue+0x60>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d005      	beq.n	8009e64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <prvCheckForValidListAndQueue+0x60>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	490b      	ldr	r1, [pc, #44]	; (8009e8c <prvCheckForValidListAndQueue+0x7c>)
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fe fca4 	bl	80087ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e64:	f000 f956 	bl	800a114 <vPortExitCritical>
}
 8009e68:	bf00      	nop
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	20001170 	.word	0x20001170
 8009e74:	20001140 	.word	0x20001140
 8009e78:	20001154 	.word	0x20001154
 8009e7c:	20001168 	.word	0x20001168
 8009e80:	2000116c 	.word	0x2000116c
 8009e84:	200011f4 	.word	0x200011f4
 8009e88:	2000117c 	.word	0x2000117c
 8009e8c:	0800f1a0 	.word	0x0800f1a0

08009e90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	3b04      	subs	r3, #4
 8009ea0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3b04      	subs	r3, #4
 8009eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	f023 0201 	bic.w	r2, r3, #1
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	3b04      	subs	r3, #4
 8009ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ec0:	4a0c      	ldr	r2, [pc, #48]	; (8009ef4 <pxPortInitialiseStack+0x64>)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	3b14      	subs	r3, #20
 8009eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	3b04      	subs	r3, #4
 8009ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f06f 0202 	mvn.w	r2, #2
 8009ede:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	3b20      	subs	r3, #32
 8009ee4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	08009ef9 	.word	0x08009ef9

08009ef8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009efe:	2300      	movs	r3, #0
 8009f00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f02:	4b14      	ldr	r3, [pc, #80]	; (8009f54 <prvTaskExitError+0x5c>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0a:	d00c      	beq.n	8009f26 <prvTaskExitError+0x2e>
	__asm volatile
 8009f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f10:	b672      	cpsid	i
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	b662      	cpsie	i
 8009f20:	60fb      	str	r3, [r7, #12]
}
 8009f22:	bf00      	nop
 8009f24:	e7fe      	b.n	8009f24 <prvTaskExitError+0x2c>
	__asm volatile
 8009f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2a:	b672      	cpsid	i
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	b662      	cpsie	i
 8009f3a:	60bb      	str	r3, [r7, #8]
}
 8009f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f3e:	bf00      	nop
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d0fc      	beq.n	8009f40 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f46:	bf00      	nop
 8009f48:	bf00      	nop
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr
 8009f54:	2000000c 	.word	0x2000000c
	...

08009f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f60:	4b07      	ldr	r3, [pc, #28]	; (8009f80 <pxCurrentTCBConst2>)
 8009f62:	6819      	ldr	r1, [r3, #0]
 8009f64:	6808      	ldr	r0, [r1, #0]
 8009f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6a:	f380 8809 	msr	PSP, r0
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f04f 0000 	mov.w	r0, #0
 8009f76:	f380 8811 	msr	BASEPRI, r0
 8009f7a:	4770      	bx	lr
 8009f7c:	f3af 8000 	nop.w

08009f80 <pxCurrentTCBConst2>:
 8009f80:	20001014 	.word	0x20001014
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop

08009f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f88:	4808      	ldr	r0, [pc, #32]	; (8009fac <prvPortStartFirstTask+0x24>)
 8009f8a:	6800      	ldr	r0, [r0, #0]
 8009f8c:	6800      	ldr	r0, [r0, #0]
 8009f8e:	f380 8808 	msr	MSP, r0
 8009f92:	f04f 0000 	mov.w	r0, #0
 8009f96:	f380 8814 	msr	CONTROL, r0
 8009f9a:	b662      	cpsie	i
 8009f9c:	b661      	cpsie	f
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	df00      	svc	0
 8009fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009faa:	bf00      	nop
 8009fac:	e000ed08 	.word	0xe000ed08

08009fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009fb6:	4b37      	ldr	r3, [pc, #220]	; (800a094 <xPortStartScheduler+0xe4>)
 8009fb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	22ff      	movs	r2, #255	; 0xff
 8009fc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009fd0:	78fb      	ldrb	r3, [r7, #3]
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	4b2f      	ldr	r3, [pc, #188]	; (800a098 <xPortStartScheduler+0xe8>)
 8009fdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009fde:	4b2f      	ldr	r3, [pc, #188]	; (800a09c <xPortStartScheduler+0xec>)
 8009fe0:	2207      	movs	r2, #7
 8009fe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fe4:	e009      	b.n	8009ffa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009fe6:	4b2d      	ldr	r3, [pc, #180]	; (800a09c <xPortStartScheduler+0xec>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	3b01      	subs	r3, #1
 8009fec:	4a2b      	ldr	r2, [pc, #172]	; (800a09c <xPortStartScheduler+0xec>)
 8009fee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ff0:	78fb      	ldrb	r3, [r7, #3]
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ffa:	78fb      	ldrb	r3, [r7, #3]
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a002:	2b80      	cmp	r3, #128	; 0x80
 800a004:	d0ef      	beq.n	8009fe6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a006:	4b25      	ldr	r3, [pc, #148]	; (800a09c <xPortStartScheduler+0xec>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f1c3 0307 	rsb	r3, r3, #7
 800a00e:	2b04      	cmp	r3, #4
 800a010:	d00c      	beq.n	800a02c <xPortStartScheduler+0x7c>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a016:	b672      	cpsid	i
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	b662      	cpsie	i
 800a026:	60bb      	str	r3, [r7, #8]
}
 800a028:	bf00      	nop
 800a02a:	e7fe      	b.n	800a02a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a02c:	4b1b      	ldr	r3, [pc, #108]	; (800a09c <xPortStartScheduler+0xec>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	021b      	lsls	r3, r3, #8
 800a032:	4a1a      	ldr	r2, [pc, #104]	; (800a09c <xPortStartScheduler+0xec>)
 800a034:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a036:	4b19      	ldr	r3, [pc, #100]	; (800a09c <xPortStartScheduler+0xec>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a03e:	4a17      	ldr	r2, [pc, #92]	; (800a09c <xPortStartScheduler+0xec>)
 800a040:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	b2da      	uxtb	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a04a:	4b15      	ldr	r3, [pc, #84]	; (800a0a0 <xPortStartScheduler+0xf0>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a14      	ldr	r2, [pc, #80]	; (800a0a0 <xPortStartScheduler+0xf0>)
 800a050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a054:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a056:	4b12      	ldr	r3, [pc, #72]	; (800a0a0 <xPortStartScheduler+0xf0>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a11      	ldr	r2, [pc, #68]	; (800a0a0 <xPortStartScheduler+0xf0>)
 800a05c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a060:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a062:	f000 f8dd 	bl	800a220 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a066:	4b0f      	ldr	r3, [pc, #60]	; (800a0a4 <xPortStartScheduler+0xf4>)
 800a068:	2200      	movs	r2, #0
 800a06a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a06c:	f000 f8fc 	bl	800a268 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a070:	4b0d      	ldr	r3, [pc, #52]	; (800a0a8 <xPortStartScheduler+0xf8>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a0c      	ldr	r2, [pc, #48]	; (800a0a8 <xPortStartScheduler+0xf8>)
 800a076:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a07a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a07c:	f7ff ff84 	bl	8009f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a080:	f7fe ffa4 	bl	8008fcc <vTaskSwitchContext>
	prvTaskExitError();
 800a084:	f7ff ff38 	bl	8009ef8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	e000e400 	.word	0xe000e400
 800a098:	2000123c 	.word	0x2000123c
 800a09c:	20001240 	.word	0x20001240
 800a0a0:	e000ed20 	.word	0xe000ed20
 800a0a4:	2000000c 	.word	0x2000000c
 800a0a8:	e000ef34 	.word	0xe000ef34

0800a0ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b6:	b672      	cpsid	i
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	b662      	cpsie	i
 800a0c6:	607b      	str	r3, [r7, #4]
}
 800a0c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a0ca:	4b10      	ldr	r3, [pc, #64]	; (800a10c <vPortEnterCritical+0x60>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	4a0e      	ldr	r2, [pc, #56]	; (800a10c <vPortEnterCritical+0x60>)
 800a0d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a0d4:	4b0d      	ldr	r3, [pc, #52]	; (800a10c <vPortEnterCritical+0x60>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d111      	bne.n	800a100 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0dc:	4b0c      	ldr	r3, [pc, #48]	; (800a110 <vPortEnterCritical+0x64>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00c      	beq.n	800a100 <vPortEnterCritical+0x54>
	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ea:	b672      	cpsid	i
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	b662      	cpsie	i
 800a0fa:	603b      	str	r3, [r7, #0]
}
 800a0fc:	bf00      	nop
 800a0fe:	e7fe      	b.n	800a0fe <vPortEnterCritical+0x52>
	}
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	2000000c 	.word	0x2000000c
 800a110:	e000ed04 	.word	0xe000ed04

0800a114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a11a:	4b13      	ldr	r3, [pc, #76]	; (800a168 <vPortExitCritical+0x54>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10c      	bne.n	800a13c <vPortExitCritical+0x28>
	__asm volatile
 800a122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a126:	b672      	cpsid	i
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	b662      	cpsie	i
 800a136:	607b      	str	r3, [r7, #4]
}
 800a138:	bf00      	nop
 800a13a:	e7fe      	b.n	800a13a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a13c:	4b0a      	ldr	r3, [pc, #40]	; (800a168 <vPortExitCritical+0x54>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	3b01      	subs	r3, #1
 800a142:	4a09      	ldr	r2, [pc, #36]	; (800a168 <vPortExitCritical+0x54>)
 800a144:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a146:	4b08      	ldr	r3, [pc, #32]	; (800a168 <vPortExitCritical+0x54>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d105      	bne.n	800a15a <vPortExitCritical+0x46>
 800a14e:	2300      	movs	r3, #0
 800a150:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	f383 8811 	msr	BASEPRI, r3
}
 800a158:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a15a:	bf00      	nop
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	2000000c 	.word	0x2000000c
 800a16c:	00000000 	.word	0x00000000

0800a170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a170:	f3ef 8009 	mrs	r0, PSP
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	4b15      	ldr	r3, [pc, #84]	; (800a1d0 <pxCurrentTCBConst>)
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	f01e 0f10 	tst.w	lr, #16
 800a180:	bf08      	it	eq
 800a182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18a:	6010      	str	r0, [r2, #0]
 800a18c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a190:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a194:	b672      	cpsid	i
 800a196:	f380 8811 	msr	BASEPRI, r0
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	b662      	cpsie	i
 800a1a4:	f7fe ff12 	bl	8008fcc <vTaskSwitchContext>
 800a1a8:	f04f 0000 	mov.w	r0, #0
 800a1ac:	f380 8811 	msr	BASEPRI, r0
 800a1b0:	bc09      	pop	{r0, r3}
 800a1b2:	6819      	ldr	r1, [r3, #0]
 800a1b4:	6808      	ldr	r0, [r1, #0]
 800a1b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ba:	f01e 0f10 	tst.w	lr, #16
 800a1be:	bf08      	it	eq
 800a1c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a1c4:	f380 8809 	msr	PSP, r0
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop

0800a1d0 <pxCurrentTCBConst>:
 800a1d0:	20001014 	.word	0x20001014
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a1d4:	bf00      	nop
 800a1d6:	bf00      	nop

0800a1d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e2:	b672      	cpsid	i
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	b662      	cpsie	i
 800a1f2:	607b      	str	r3, [r7, #4]
}
 800a1f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1f6:	f7fe fe2f 	bl	8008e58 <xTaskIncrementTick>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d003      	beq.n	800a208 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a200:	4b06      	ldr	r3, [pc, #24]	; (800a21c <xPortSysTickHandler+0x44>)
 800a202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a206:	601a      	str	r2, [r3, #0]
 800a208:	2300      	movs	r3, #0
 800a20a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	f383 8811 	msr	BASEPRI, r3
}
 800a212:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a214:	bf00      	nop
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	e000ed04 	.word	0xe000ed04

0800a220 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a220:	b480      	push	{r7}
 800a222:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a224:	4b0b      	ldr	r3, [pc, #44]	; (800a254 <vPortSetupTimerInterrupt+0x34>)
 800a226:	2200      	movs	r2, #0
 800a228:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a22a:	4b0b      	ldr	r3, [pc, #44]	; (800a258 <vPortSetupTimerInterrupt+0x38>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a230:	4b0a      	ldr	r3, [pc, #40]	; (800a25c <vPortSetupTimerInterrupt+0x3c>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a0a      	ldr	r2, [pc, #40]	; (800a260 <vPortSetupTimerInterrupt+0x40>)
 800a236:	fba2 2303 	umull	r2, r3, r2, r3
 800a23a:	099b      	lsrs	r3, r3, #6
 800a23c:	4a09      	ldr	r2, [pc, #36]	; (800a264 <vPortSetupTimerInterrupt+0x44>)
 800a23e:	3b01      	subs	r3, #1
 800a240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a242:	4b04      	ldr	r3, [pc, #16]	; (800a254 <vPortSetupTimerInterrupt+0x34>)
 800a244:	2207      	movs	r2, #7
 800a246:	601a      	str	r2, [r3, #0]
}
 800a248:	bf00      	nop
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	e000e010 	.word	0xe000e010
 800a258:	e000e018 	.word	0xe000e018
 800a25c:	20000000 	.word	0x20000000
 800a260:	10624dd3 	.word	0x10624dd3
 800a264:	e000e014 	.word	0xe000e014

0800a268 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a268:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a278 <vPortEnableVFP+0x10>
 800a26c:	6801      	ldr	r1, [r0, #0]
 800a26e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a272:	6001      	str	r1, [r0, #0]
 800a274:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a276:	bf00      	nop
 800a278:	e000ed88 	.word	0xe000ed88

0800a27c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a282:	f3ef 8305 	mrs	r3, IPSR
 800a286:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2b0f      	cmp	r3, #15
 800a28c:	d916      	bls.n	800a2bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a28e:	4a19      	ldr	r2, [pc, #100]	; (800a2f4 <vPortValidateInterruptPriority+0x78>)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	4413      	add	r3, r2
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a298:	4b17      	ldr	r3, [pc, #92]	; (800a2f8 <vPortValidateInterruptPriority+0x7c>)
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	7afa      	ldrb	r2, [r7, #11]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d20c      	bcs.n	800a2bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a6:	b672      	cpsid	i
 800a2a8:	f383 8811 	msr	BASEPRI, r3
 800a2ac:	f3bf 8f6f 	isb	sy
 800a2b0:	f3bf 8f4f 	dsb	sy
 800a2b4:	b662      	cpsie	i
 800a2b6:	607b      	str	r3, [r7, #4]
}
 800a2b8:	bf00      	nop
 800a2ba:	e7fe      	b.n	800a2ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a2bc:	4b0f      	ldr	r3, [pc, #60]	; (800a2fc <vPortValidateInterruptPriority+0x80>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a2c4:	4b0e      	ldr	r3, [pc, #56]	; (800a300 <vPortValidateInterruptPriority+0x84>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d90c      	bls.n	800a2e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d0:	b672      	cpsid	i
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	b662      	cpsie	i
 800a2e0:	603b      	str	r3, [r7, #0]
}
 800a2e2:	bf00      	nop
 800a2e4:	e7fe      	b.n	800a2e4 <vPortValidateInterruptPriority+0x68>
	}
 800a2e6:	bf00      	nop
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	e000e3f0 	.word	0xe000e3f0
 800a2f8:	2000123c 	.word	0x2000123c
 800a2fc:	e000ed0c 	.word	0xe000ed0c
 800a300:	20001240 	.word	0x20001240

0800a304 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b08a      	sub	sp, #40	; 0x28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a30c:	2300      	movs	r3, #0
 800a30e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a310:	f7fe fce6 	bl	8008ce0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a314:	4b5b      	ldr	r3, [pc, #364]	; (800a484 <pvPortMalloc+0x180>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d101      	bne.n	800a320 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a31c:	f000 f91a 	bl	800a554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a320:	4b59      	ldr	r3, [pc, #356]	; (800a488 <pvPortMalloc+0x184>)
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4013      	ands	r3, r2
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f040 8092 	bne.w	800a452 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d01f      	beq.n	800a374 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a334:	2208      	movs	r2, #8
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4413      	add	r3, r2
 800a33a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f003 0307 	and.w	r3, r3, #7
 800a342:	2b00      	cmp	r3, #0
 800a344:	d016      	beq.n	800a374 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f023 0307 	bic.w	r3, r3, #7
 800a34c:	3308      	adds	r3, #8
 800a34e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f003 0307 	and.w	r3, r3, #7
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00c      	beq.n	800a374 <pvPortMalloc+0x70>
	__asm volatile
 800a35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35e:	b672      	cpsid	i
 800a360:	f383 8811 	msr	BASEPRI, r3
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	b662      	cpsie	i
 800a36e:	617b      	str	r3, [r7, #20]
}
 800a370:	bf00      	nop
 800a372:	e7fe      	b.n	800a372 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d06b      	beq.n	800a452 <pvPortMalloc+0x14e>
 800a37a:	4b44      	ldr	r3, [pc, #272]	; (800a48c <pvPortMalloc+0x188>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	429a      	cmp	r2, r3
 800a382:	d866      	bhi.n	800a452 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a384:	4b42      	ldr	r3, [pc, #264]	; (800a490 <pvPortMalloc+0x18c>)
 800a386:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a388:	4b41      	ldr	r3, [pc, #260]	; (800a490 <pvPortMalloc+0x18c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a38e:	e004      	b.n	800a39a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a392:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d903      	bls.n	800a3ac <pvPortMalloc+0xa8>
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1f1      	bne.n	800a390 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a3ac:	4b35      	ldr	r3, [pc, #212]	; (800a484 <pvPortMalloc+0x180>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d04d      	beq.n	800a452 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a3b6:	6a3b      	ldr	r3, [r7, #32]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2208      	movs	r2, #8
 800a3bc:	4413      	add	r3, r2
 800a3be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	6a3b      	ldr	r3, [r7, #32]
 800a3c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	1ad2      	subs	r2, r2, r3
 800a3d0:	2308      	movs	r3, #8
 800a3d2:	005b      	lsls	r3, r3, #1
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d921      	bls.n	800a41c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a3d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4413      	add	r3, r2
 800a3de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	f003 0307 	and.w	r3, r3, #7
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00c      	beq.n	800a404 <pvPortMalloc+0x100>
	__asm volatile
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	b672      	cpsid	i
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	b662      	cpsie	i
 800a3fe:	613b      	str	r3, [r7, #16]
}
 800a400:	bf00      	nop
 800a402:	e7fe      	b.n	800a402 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a406:	685a      	ldr	r2, [r3, #4]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	1ad2      	subs	r2, r2, r3
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a416:	69b8      	ldr	r0, [r7, #24]
 800a418:	f000 f8fe 	bl	800a618 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a41c:	4b1b      	ldr	r3, [pc, #108]	; (800a48c <pvPortMalloc+0x188>)
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	4a19      	ldr	r2, [pc, #100]	; (800a48c <pvPortMalloc+0x188>)
 800a428:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a42a:	4b18      	ldr	r3, [pc, #96]	; (800a48c <pvPortMalloc+0x188>)
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	4b19      	ldr	r3, [pc, #100]	; (800a494 <pvPortMalloc+0x190>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	429a      	cmp	r2, r3
 800a434:	d203      	bcs.n	800a43e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a436:	4b15      	ldr	r3, [pc, #84]	; (800a48c <pvPortMalloc+0x188>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a16      	ldr	r2, [pc, #88]	; (800a494 <pvPortMalloc+0x190>)
 800a43c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	4b11      	ldr	r3, [pc, #68]	; (800a488 <pvPortMalloc+0x184>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	431a      	orrs	r2, r3
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	2200      	movs	r2, #0
 800a450:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a452:	f7fe fc53 	bl	8008cfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	f003 0307 	and.w	r3, r3, #7
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00c      	beq.n	800a47a <pvPortMalloc+0x176>
	__asm volatile
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	b672      	cpsid	i
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	b662      	cpsie	i
 800a474:	60fb      	str	r3, [r7, #12]
}
 800a476:	bf00      	nop
 800a478:	e7fe      	b.n	800a478 <pvPortMalloc+0x174>
	return pvReturn;
 800a47a:	69fb      	ldr	r3, [r7, #28]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3728      	adds	r7, #40	; 0x28
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	20004e4c 	.word	0x20004e4c
 800a488:	20004e58 	.word	0x20004e58
 800a48c:	20004e50 	.word	0x20004e50
 800a490:	20004e44 	.word	0x20004e44
 800a494:	20004e54 	.word	0x20004e54

0800a498 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d04c      	beq.n	800a544 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a4aa:	2308      	movs	r3, #8
 800a4ac:	425b      	negs	r3, r3
 800a4ae:	697a      	ldr	r2, [r7, #20]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	685a      	ldr	r2, [r3, #4]
 800a4bc:	4b23      	ldr	r3, [pc, #140]	; (800a54c <vPortFree+0xb4>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10c      	bne.n	800a4e0 <vPortFree+0x48>
	__asm volatile
 800a4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ca:	b672      	cpsid	i
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	b662      	cpsie	i
 800a4da:	60fb      	str	r3, [r7, #12]
}
 800a4dc:	bf00      	nop
 800a4de:	e7fe      	b.n	800a4de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00c      	beq.n	800a502 <vPortFree+0x6a>
	__asm volatile
 800a4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ec:	b672      	cpsid	i
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	b662      	cpsie	i
 800a4fc:	60bb      	str	r3, [r7, #8]
}
 800a4fe:	bf00      	nop
 800a500:	e7fe      	b.n	800a500 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	685a      	ldr	r2, [r3, #4]
 800a506:	4b11      	ldr	r3, [pc, #68]	; (800a54c <vPortFree+0xb4>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4013      	ands	r3, r2
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d019      	beq.n	800a544 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d115      	bne.n	800a544 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	4b0b      	ldr	r3, [pc, #44]	; (800a54c <vPortFree+0xb4>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	43db      	mvns	r3, r3
 800a522:	401a      	ands	r2, r3
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a528:	f7fe fbda 	bl	8008ce0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	685a      	ldr	r2, [r3, #4]
 800a530:	4b07      	ldr	r3, [pc, #28]	; (800a550 <vPortFree+0xb8>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4413      	add	r3, r2
 800a536:	4a06      	ldr	r2, [pc, #24]	; (800a550 <vPortFree+0xb8>)
 800a538:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a53a:	6938      	ldr	r0, [r7, #16]
 800a53c:	f000 f86c 	bl	800a618 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a540:	f7fe fbdc 	bl	8008cfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a544:	bf00      	nop
 800a546:	3718      	adds	r7, #24
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	20004e58 	.word	0x20004e58
 800a550:	20004e50 	.word	0x20004e50

0800a554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a55a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a55e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a560:	4b27      	ldr	r3, [pc, #156]	; (800a600 <prvHeapInit+0xac>)
 800a562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f003 0307 	and.w	r3, r3, #7
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00c      	beq.n	800a588 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	3307      	adds	r3, #7
 800a572:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f023 0307 	bic.w	r3, r3, #7
 800a57a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	4a1f      	ldr	r2, [pc, #124]	; (800a600 <prvHeapInit+0xac>)
 800a584:	4413      	add	r3, r2
 800a586:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a58c:	4a1d      	ldr	r2, [pc, #116]	; (800a604 <prvHeapInit+0xb0>)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a592:	4b1c      	ldr	r3, [pc, #112]	; (800a604 <prvHeapInit+0xb0>)
 800a594:	2200      	movs	r2, #0
 800a596:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	4413      	add	r3, r2
 800a59e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a5a0:	2208      	movs	r2, #8
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	1a9b      	subs	r3, r3, r2
 800a5a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f023 0307 	bic.w	r3, r3, #7
 800a5ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	4a15      	ldr	r2, [pc, #84]	; (800a608 <prvHeapInit+0xb4>)
 800a5b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a5b6:	4b14      	ldr	r3, [pc, #80]	; (800a608 <prvHeapInit+0xb4>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a5be:	4b12      	ldr	r3, [pc, #72]	; (800a608 <prvHeapInit+0xb4>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	1ad2      	subs	r2, r2, r3
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5d4:	4b0c      	ldr	r3, [pc, #48]	; (800a608 <prvHeapInit+0xb4>)
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	4a0a      	ldr	r2, [pc, #40]	; (800a60c <prvHeapInit+0xb8>)
 800a5e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	4a09      	ldr	r2, [pc, #36]	; (800a610 <prvHeapInit+0xbc>)
 800a5ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5ec:	4b09      	ldr	r3, [pc, #36]	; (800a614 <prvHeapInit+0xc0>)
 800a5ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a5f2:	601a      	str	r2, [r3, #0]
}
 800a5f4:	bf00      	nop
 800a5f6:	3714      	adds	r7, #20
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr
 800a600:	20001244 	.word	0x20001244
 800a604:	20004e44 	.word	0x20004e44
 800a608:	20004e4c 	.word	0x20004e4c
 800a60c:	20004e54 	.word	0x20004e54
 800a610:	20004e50 	.word	0x20004e50
 800a614:	20004e58 	.word	0x20004e58

0800a618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a620:	4b28      	ldr	r3, [pc, #160]	; (800a6c4 <prvInsertBlockIntoFreeList+0xac>)
 800a622:	60fb      	str	r3, [r7, #12]
 800a624:	e002      	b.n	800a62c <prvInsertBlockIntoFreeList+0x14>
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	60fb      	str	r3, [r7, #12]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	429a      	cmp	r2, r3
 800a634:	d8f7      	bhi.n	800a626 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	4413      	add	r3, r2
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	429a      	cmp	r2, r3
 800a646:	d108      	bne.n	800a65a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	685a      	ldr	r2, [r3, #4]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	441a      	add	r2, r3
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	441a      	add	r2, r3
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d118      	bne.n	800a6a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	4b15      	ldr	r3, [pc, #84]	; (800a6c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	429a      	cmp	r2, r3
 800a678:	d00d      	beq.n	800a696 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	441a      	add	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	e008      	b.n	800a6a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a696:	4b0c      	ldr	r3, [pc, #48]	; (800a6c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	e003      	b.n	800a6a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d002      	beq.n	800a6b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6b6:	bf00      	nop
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	20004e44 	.word	0x20004e44
 800a6c8:	20004e4c 	.word	0x20004e4c

0800a6cc <atan2f>:
 800a6cc:	f000 b800 	b.w	800a6d0 <__ieee754_atan2f>

0800a6d0 <__ieee754_atan2f>:
 800a6d0:	ee10 2a90 	vmov	r2, s1
 800a6d4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a6d8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a6dc:	b510      	push	{r4, lr}
 800a6de:	eef0 7a40 	vmov.f32	s15, s0
 800a6e2:	dc06      	bgt.n	800a6f2 <__ieee754_atan2f+0x22>
 800a6e4:	ee10 0a10 	vmov	r0, s0
 800a6e8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a6ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a6f0:	dd04      	ble.n	800a6fc <__ieee754_atan2f+0x2c>
 800a6f2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a6f6:	eeb0 0a67 	vmov.f32	s0, s15
 800a6fa:	bd10      	pop	{r4, pc}
 800a6fc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a700:	d103      	bne.n	800a70a <__ieee754_atan2f+0x3a>
 800a702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a706:	f000 b881 	b.w	800a80c <atanf>
 800a70a:	1794      	asrs	r4, r2, #30
 800a70c:	f004 0402 	and.w	r4, r4, #2
 800a710:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a714:	b93b      	cbnz	r3, 800a726 <__ieee754_atan2f+0x56>
 800a716:	2c02      	cmp	r4, #2
 800a718:	d05c      	beq.n	800a7d4 <__ieee754_atan2f+0x104>
 800a71a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800a7e8 <__ieee754_atan2f+0x118>
 800a71e:	2c03      	cmp	r4, #3
 800a720:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800a724:	e7e7      	b.n	800a6f6 <__ieee754_atan2f+0x26>
 800a726:	b939      	cbnz	r1, 800a738 <__ieee754_atan2f+0x68>
 800a728:	eddf 7a30 	vldr	s15, [pc, #192]	; 800a7ec <__ieee754_atan2f+0x11c>
 800a72c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800a7f0 <__ieee754_atan2f+0x120>
 800a730:	2800      	cmp	r0, #0
 800a732:	fe67 7a80 	vselge.f32	s15, s15, s0
 800a736:	e7de      	b.n	800a6f6 <__ieee754_atan2f+0x26>
 800a738:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a73c:	d110      	bne.n	800a760 <__ieee754_atan2f+0x90>
 800a73e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a742:	f104 34ff 	add.w	r4, r4, #4294967295
 800a746:	d107      	bne.n	800a758 <__ieee754_atan2f+0x88>
 800a748:	2c02      	cmp	r4, #2
 800a74a:	d846      	bhi.n	800a7da <__ieee754_atan2f+0x10a>
 800a74c:	4b29      	ldr	r3, [pc, #164]	; (800a7f4 <__ieee754_atan2f+0x124>)
 800a74e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a752:	edd4 7a00 	vldr	s15, [r4]
 800a756:	e7ce      	b.n	800a6f6 <__ieee754_atan2f+0x26>
 800a758:	2c02      	cmp	r4, #2
 800a75a:	d841      	bhi.n	800a7e0 <__ieee754_atan2f+0x110>
 800a75c:	4b26      	ldr	r3, [pc, #152]	; (800a7f8 <__ieee754_atan2f+0x128>)
 800a75e:	e7f6      	b.n	800a74e <__ieee754_atan2f+0x7e>
 800a760:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a764:	d0e0      	beq.n	800a728 <__ieee754_atan2f+0x58>
 800a766:	1a5b      	subs	r3, r3, r1
 800a768:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a76c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a770:	da1a      	bge.n	800a7a8 <__ieee754_atan2f+0xd8>
 800a772:	2a00      	cmp	r2, #0
 800a774:	da01      	bge.n	800a77a <__ieee754_atan2f+0xaa>
 800a776:	313c      	adds	r1, #60	; 0x3c
 800a778:	db19      	blt.n	800a7ae <__ieee754_atan2f+0xde>
 800a77a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a77e:	f000 f919 	bl	800a9b4 <fabsf>
 800a782:	f000 f843 	bl	800a80c <atanf>
 800a786:	eef0 7a40 	vmov.f32	s15, s0
 800a78a:	2c01      	cmp	r4, #1
 800a78c:	d012      	beq.n	800a7b4 <__ieee754_atan2f+0xe4>
 800a78e:	2c02      	cmp	r4, #2
 800a790:	d017      	beq.n	800a7c2 <__ieee754_atan2f+0xf2>
 800a792:	2c00      	cmp	r4, #0
 800a794:	d0af      	beq.n	800a6f6 <__ieee754_atan2f+0x26>
 800a796:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a7fc <__ieee754_atan2f+0x12c>
 800a79a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a79e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a800 <__ieee754_atan2f+0x130>
 800a7a2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a7a6:	e7a6      	b.n	800a6f6 <__ieee754_atan2f+0x26>
 800a7a8:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a7ec <__ieee754_atan2f+0x11c>
 800a7ac:	e7ed      	b.n	800a78a <__ieee754_atan2f+0xba>
 800a7ae:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a804 <__ieee754_atan2f+0x134>
 800a7b2:	e7ea      	b.n	800a78a <__ieee754_atan2f+0xba>
 800a7b4:	ee17 3a90 	vmov	r3, s15
 800a7b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a7bc:	ee07 3a90 	vmov	s15, r3
 800a7c0:	e799      	b.n	800a6f6 <__ieee754_atan2f+0x26>
 800a7c2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a7fc <__ieee754_atan2f+0x12c>
 800a7c6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a7ca:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a800 <__ieee754_atan2f+0x130>
 800a7ce:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a7d2:	e790      	b.n	800a6f6 <__ieee754_atan2f+0x26>
 800a7d4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a800 <__ieee754_atan2f+0x130>
 800a7d8:	e78d      	b.n	800a6f6 <__ieee754_atan2f+0x26>
 800a7da:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a808 <__ieee754_atan2f+0x138>
 800a7de:	e78a      	b.n	800a6f6 <__ieee754_atan2f+0x26>
 800a7e0:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a804 <__ieee754_atan2f+0x134>
 800a7e4:	e787      	b.n	800a6f6 <__ieee754_atan2f+0x26>
 800a7e6:	bf00      	nop
 800a7e8:	c0490fdb 	.word	0xc0490fdb
 800a7ec:	3fc90fdb 	.word	0x3fc90fdb
 800a7f0:	bfc90fdb 	.word	0xbfc90fdb
 800a7f4:	0800f1c0 	.word	0x0800f1c0
 800a7f8:	0800f1cc 	.word	0x0800f1cc
 800a7fc:	33bbbd2e 	.word	0x33bbbd2e
 800a800:	40490fdb 	.word	0x40490fdb
 800a804:	00000000 	.word	0x00000000
 800a808:	3f490fdb 	.word	0x3f490fdb

0800a80c <atanf>:
 800a80c:	b538      	push	{r3, r4, r5, lr}
 800a80e:	ee10 5a10 	vmov	r5, s0
 800a812:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a816:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800a81a:	eef0 7a40 	vmov.f32	s15, s0
 800a81e:	db0f      	blt.n	800a840 <atanf+0x34>
 800a820:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a824:	dd04      	ble.n	800a830 <atanf+0x24>
 800a826:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a82a:	eeb0 0a67 	vmov.f32	s0, s15
 800a82e:	bd38      	pop	{r3, r4, r5, pc}
 800a830:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a968 <atanf+0x15c>
 800a834:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800a96c <atanf+0x160>
 800a838:	2d00      	cmp	r5, #0
 800a83a:	fe77 7a80 	vselgt.f32	s15, s15, s0
 800a83e:	e7f4      	b.n	800a82a <atanf+0x1e>
 800a840:	4b4b      	ldr	r3, [pc, #300]	; (800a970 <atanf+0x164>)
 800a842:	429c      	cmp	r4, r3
 800a844:	dc10      	bgt.n	800a868 <atanf+0x5c>
 800a846:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800a84a:	da0a      	bge.n	800a862 <atanf+0x56>
 800a84c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a974 <atanf+0x168>
 800a850:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a854:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a858:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a860:	dce3      	bgt.n	800a82a <atanf+0x1e>
 800a862:	f04f 33ff 	mov.w	r3, #4294967295
 800a866:	e013      	b.n	800a890 <atanf+0x84>
 800a868:	f000 f8a4 	bl	800a9b4 <fabsf>
 800a86c:	4b42      	ldr	r3, [pc, #264]	; (800a978 <atanf+0x16c>)
 800a86e:	429c      	cmp	r4, r3
 800a870:	dc4f      	bgt.n	800a912 <atanf+0x106>
 800a872:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a876:	429c      	cmp	r4, r3
 800a878:	dc41      	bgt.n	800a8fe <atanf+0xf2>
 800a87a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a87e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a882:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a886:	2300      	movs	r3, #0
 800a888:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a88c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a890:	1c5a      	adds	r2, r3, #1
 800a892:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a896:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800a97c <atanf+0x170>
 800a89a:	eddf 5a39 	vldr	s11, [pc, #228]	; 800a980 <atanf+0x174>
 800a89e:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800a984 <atanf+0x178>
 800a8a2:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a8a6:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a8aa:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800a988 <atanf+0x17c>
 800a8ae:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a8b2:	eddf 5a36 	vldr	s11, [pc, #216]	; 800a98c <atanf+0x180>
 800a8b6:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a8ba:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800a990 <atanf+0x184>
 800a8be:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a8c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a994 <atanf+0x188>
 800a8c6:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a8ca:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800a998 <atanf+0x18c>
 800a8ce:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a8d2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a99c <atanf+0x190>
 800a8d6:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a8da:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800a9a0 <atanf+0x194>
 800a8de:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a8e2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800a9a4 <atanf+0x198>
 800a8e6:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a8ea:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a8ee:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a8f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a8f6:	d121      	bne.n	800a93c <atanf+0x130>
 800a8f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a8fc:	e795      	b.n	800a82a <atanf+0x1e>
 800a8fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a902:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a906:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a90a:	2301      	movs	r3, #1
 800a90c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a910:	e7be      	b.n	800a890 <atanf+0x84>
 800a912:	4b25      	ldr	r3, [pc, #148]	; (800a9a8 <atanf+0x19c>)
 800a914:	429c      	cmp	r4, r3
 800a916:	dc0b      	bgt.n	800a930 <atanf+0x124>
 800a918:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a91c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a920:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a924:	2302      	movs	r3, #2
 800a926:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a92a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a92e:	e7af      	b.n	800a890 <atanf+0x84>
 800a930:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a934:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a938:	2303      	movs	r3, #3
 800a93a:	e7a9      	b.n	800a890 <atanf+0x84>
 800a93c:	4a1b      	ldr	r2, [pc, #108]	; (800a9ac <atanf+0x1a0>)
 800a93e:	491c      	ldr	r1, [pc, #112]	; (800a9b0 <atanf+0x1a4>)
 800a940:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a944:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a948:	ed93 0a00 	vldr	s0, [r3]
 800a94c:	ee37 7a40 	vsub.f32	s14, s14, s0
 800a950:	ed92 0a00 	vldr	s0, [r2]
 800a954:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a958:	2d00      	cmp	r5, #0
 800a95a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a95e:	bfb8      	it	lt
 800a960:	eef1 7a67 	vneglt.f32	s15, s15
 800a964:	e761      	b.n	800a82a <atanf+0x1e>
 800a966:	bf00      	nop
 800a968:	3fc90fdb 	.word	0x3fc90fdb
 800a96c:	bfc90fdb 	.word	0xbfc90fdb
 800a970:	3edfffff 	.word	0x3edfffff
 800a974:	7149f2ca 	.word	0x7149f2ca
 800a978:	3f97ffff 	.word	0x3f97ffff
 800a97c:	3c8569d7 	.word	0x3c8569d7
 800a980:	3d4bda59 	.word	0x3d4bda59
 800a984:	bd6ef16b 	.word	0xbd6ef16b
 800a988:	3d886b35 	.word	0x3d886b35
 800a98c:	3dba2e6e 	.word	0x3dba2e6e
 800a990:	3e124925 	.word	0x3e124925
 800a994:	3eaaaaab 	.word	0x3eaaaaab
 800a998:	bd15a221 	.word	0xbd15a221
 800a99c:	bd9d8795 	.word	0xbd9d8795
 800a9a0:	bde38e38 	.word	0xbde38e38
 800a9a4:	be4ccccd 	.word	0xbe4ccccd
 800a9a8:	401bffff 	.word	0x401bffff
 800a9ac:	0800f1d8 	.word	0x0800f1d8
 800a9b0:	0800f1e8 	.word	0x0800f1e8

0800a9b4 <fabsf>:
 800a9b4:	ee10 3a10 	vmov	r3, s0
 800a9b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9bc:	ee00 3a10 	vmov	s0, r3
 800a9c0:	4770      	bx	lr
	...

0800a9c4 <__errno>:
 800a9c4:	4b01      	ldr	r3, [pc, #4]	; (800a9cc <__errno+0x8>)
 800a9c6:	6818      	ldr	r0, [r3, #0]
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	20000010 	.word	0x20000010

0800a9d0 <__libc_init_array>:
 800a9d0:	b570      	push	{r4, r5, r6, lr}
 800a9d2:	4d0d      	ldr	r5, [pc, #52]	; (800aa08 <__libc_init_array+0x38>)
 800a9d4:	4c0d      	ldr	r4, [pc, #52]	; (800aa0c <__libc_init_array+0x3c>)
 800a9d6:	1b64      	subs	r4, r4, r5
 800a9d8:	10a4      	asrs	r4, r4, #2
 800a9da:	2600      	movs	r6, #0
 800a9dc:	42a6      	cmp	r6, r4
 800a9de:	d109      	bne.n	800a9f4 <__libc_init_array+0x24>
 800a9e0:	4d0b      	ldr	r5, [pc, #44]	; (800aa10 <__libc_init_array+0x40>)
 800a9e2:	4c0c      	ldr	r4, [pc, #48]	; (800aa14 <__libc_init_array+0x44>)
 800a9e4:	f004 fb88 	bl	800f0f8 <_init>
 800a9e8:	1b64      	subs	r4, r4, r5
 800a9ea:	10a4      	asrs	r4, r4, #2
 800a9ec:	2600      	movs	r6, #0
 800a9ee:	42a6      	cmp	r6, r4
 800a9f0:	d105      	bne.n	800a9fe <__libc_init_array+0x2e>
 800a9f2:	bd70      	pop	{r4, r5, r6, pc}
 800a9f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9f8:	4798      	blx	r3
 800a9fa:	3601      	adds	r6, #1
 800a9fc:	e7ee      	b.n	800a9dc <__libc_init_array+0xc>
 800a9fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa02:	4798      	blx	r3
 800aa04:	3601      	adds	r6, #1
 800aa06:	e7f2      	b.n	800a9ee <__libc_init_array+0x1e>
 800aa08:	0800f6a4 	.word	0x0800f6a4
 800aa0c:	0800f6a4 	.word	0x0800f6a4
 800aa10:	0800f6a4 	.word	0x0800f6a4
 800aa14:	0800f6ac 	.word	0x0800f6ac

0800aa18 <memcpy>:
 800aa18:	440a      	add	r2, r1
 800aa1a:	4291      	cmp	r1, r2
 800aa1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa20:	d100      	bne.n	800aa24 <memcpy+0xc>
 800aa22:	4770      	bx	lr
 800aa24:	b510      	push	{r4, lr}
 800aa26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa2e:	4291      	cmp	r1, r2
 800aa30:	d1f9      	bne.n	800aa26 <memcpy+0xe>
 800aa32:	bd10      	pop	{r4, pc}

0800aa34 <memset>:
 800aa34:	4402      	add	r2, r0
 800aa36:	4603      	mov	r3, r0
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d100      	bne.n	800aa3e <memset+0xa>
 800aa3c:	4770      	bx	lr
 800aa3e:	f803 1b01 	strb.w	r1, [r3], #1
 800aa42:	e7f9      	b.n	800aa38 <memset+0x4>

0800aa44 <__cvt>:
 800aa44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa46:	ed2d 8b02 	vpush	{d8}
 800aa4a:	eeb0 8b40 	vmov.f64	d8, d0
 800aa4e:	b085      	sub	sp, #20
 800aa50:	4617      	mov	r7, r2
 800aa52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800aa54:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aa56:	ee18 2a90 	vmov	r2, s17
 800aa5a:	f025 0520 	bic.w	r5, r5, #32
 800aa5e:	2a00      	cmp	r2, #0
 800aa60:	bfb6      	itet	lt
 800aa62:	222d      	movlt	r2, #45	; 0x2d
 800aa64:	2200      	movge	r2, #0
 800aa66:	eeb1 8b40 	vneglt.f64	d8, d0
 800aa6a:	2d46      	cmp	r5, #70	; 0x46
 800aa6c:	460c      	mov	r4, r1
 800aa6e:	701a      	strb	r2, [r3, #0]
 800aa70:	d004      	beq.n	800aa7c <__cvt+0x38>
 800aa72:	2d45      	cmp	r5, #69	; 0x45
 800aa74:	d100      	bne.n	800aa78 <__cvt+0x34>
 800aa76:	3401      	adds	r4, #1
 800aa78:	2102      	movs	r1, #2
 800aa7a:	e000      	b.n	800aa7e <__cvt+0x3a>
 800aa7c:	2103      	movs	r1, #3
 800aa7e:	ab03      	add	r3, sp, #12
 800aa80:	9301      	str	r3, [sp, #4]
 800aa82:	ab02      	add	r3, sp, #8
 800aa84:	9300      	str	r3, [sp, #0]
 800aa86:	4622      	mov	r2, r4
 800aa88:	4633      	mov	r3, r6
 800aa8a:	eeb0 0b48 	vmov.f64	d0, d8
 800aa8e:	f001 fd2f 	bl	800c4f0 <_dtoa_r>
 800aa92:	2d47      	cmp	r5, #71	; 0x47
 800aa94:	d101      	bne.n	800aa9a <__cvt+0x56>
 800aa96:	07fb      	lsls	r3, r7, #31
 800aa98:	d51a      	bpl.n	800aad0 <__cvt+0x8c>
 800aa9a:	2d46      	cmp	r5, #70	; 0x46
 800aa9c:	eb00 0204 	add.w	r2, r0, r4
 800aaa0:	d10c      	bne.n	800aabc <__cvt+0x78>
 800aaa2:	7803      	ldrb	r3, [r0, #0]
 800aaa4:	2b30      	cmp	r3, #48	; 0x30
 800aaa6:	d107      	bne.n	800aab8 <__cvt+0x74>
 800aaa8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aaac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aab0:	bf1c      	itt	ne
 800aab2:	f1c4 0401 	rsbne	r4, r4, #1
 800aab6:	6034      	strne	r4, [r6, #0]
 800aab8:	6833      	ldr	r3, [r6, #0]
 800aaba:	441a      	add	r2, r3
 800aabc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aac4:	bf08      	it	eq
 800aac6:	9203      	streq	r2, [sp, #12]
 800aac8:	2130      	movs	r1, #48	; 0x30
 800aaca:	9b03      	ldr	r3, [sp, #12]
 800aacc:	4293      	cmp	r3, r2
 800aace:	d307      	bcc.n	800aae0 <__cvt+0x9c>
 800aad0:	9b03      	ldr	r3, [sp, #12]
 800aad2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aad4:	1a1b      	subs	r3, r3, r0
 800aad6:	6013      	str	r3, [r2, #0]
 800aad8:	b005      	add	sp, #20
 800aada:	ecbd 8b02 	vpop	{d8}
 800aade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aae0:	1c5c      	adds	r4, r3, #1
 800aae2:	9403      	str	r4, [sp, #12]
 800aae4:	7019      	strb	r1, [r3, #0]
 800aae6:	e7f0      	b.n	800aaca <__cvt+0x86>

0800aae8 <__exponent>:
 800aae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaea:	4603      	mov	r3, r0
 800aaec:	2900      	cmp	r1, #0
 800aaee:	bfb8      	it	lt
 800aaf0:	4249      	neglt	r1, r1
 800aaf2:	f803 2b02 	strb.w	r2, [r3], #2
 800aaf6:	bfb4      	ite	lt
 800aaf8:	222d      	movlt	r2, #45	; 0x2d
 800aafa:	222b      	movge	r2, #43	; 0x2b
 800aafc:	2909      	cmp	r1, #9
 800aafe:	7042      	strb	r2, [r0, #1]
 800ab00:	dd2a      	ble.n	800ab58 <__exponent+0x70>
 800ab02:	f10d 0407 	add.w	r4, sp, #7
 800ab06:	46a4      	mov	ip, r4
 800ab08:	270a      	movs	r7, #10
 800ab0a:	46a6      	mov	lr, r4
 800ab0c:	460a      	mov	r2, r1
 800ab0e:	fb91 f6f7 	sdiv	r6, r1, r7
 800ab12:	fb07 1516 	mls	r5, r7, r6, r1
 800ab16:	3530      	adds	r5, #48	; 0x30
 800ab18:	2a63      	cmp	r2, #99	; 0x63
 800ab1a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ab1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ab22:	4631      	mov	r1, r6
 800ab24:	dcf1      	bgt.n	800ab0a <__exponent+0x22>
 800ab26:	3130      	adds	r1, #48	; 0x30
 800ab28:	f1ae 0502 	sub.w	r5, lr, #2
 800ab2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ab30:	1c44      	adds	r4, r0, #1
 800ab32:	4629      	mov	r1, r5
 800ab34:	4561      	cmp	r1, ip
 800ab36:	d30a      	bcc.n	800ab4e <__exponent+0x66>
 800ab38:	f10d 0209 	add.w	r2, sp, #9
 800ab3c:	eba2 020e 	sub.w	r2, r2, lr
 800ab40:	4565      	cmp	r5, ip
 800ab42:	bf88      	it	hi
 800ab44:	2200      	movhi	r2, #0
 800ab46:	4413      	add	r3, r2
 800ab48:	1a18      	subs	r0, r3, r0
 800ab4a:	b003      	add	sp, #12
 800ab4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab52:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ab56:	e7ed      	b.n	800ab34 <__exponent+0x4c>
 800ab58:	2330      	movs	r3, #48	; 0x30
 800ab5a:	3130      	adds	r1, #48	; 0x30
 800ab5c:	7083      	strb	r3, [r0, #2]
 800ab5e:	70c1      	strb	r1, [r0, #3]
 800ab60:	1d03      	adds	r3, r0, #4
 800ab62:	e7f1      	b.n	800ab48 <__exponent+0x60>
 800ab64:	0000      	movs	r0, r0
	...

0800ab68 <_printf_float>:
 800ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	b08b      	sub	sp, #44	; 0x2c
 800ab6e:	460c      	mov	r4, r1
 800ab70:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ab74:	4616      	mov	r6, r2
 800ab76:	461f      	mov	r7, r3
 800ab78:	4605      	mov	r5, r0
 800ab7a:	f002 fd97 	bl	800d6ac <_localeconv_r>
 800ab7e:	f8d0 b000 	ldr.w	fp, [r0]
 800ab82:	4658      	mov	r0, fp
 800ab84:	f7f5 fb5c 	bl	8000240 <strlen>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	9308      	str	r3, [sp, #32]
 800ab8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab90:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ab94:	6822      	ldr	r2, [r4, #0]
 800ab96:	3307      	adds	r3, #7
 800ab98:	f023 0307 	bic.w	r3, r3, #7
 800ab9c:	f103 0108 	add.w	r1, r3, #8
 800aba0:	f8c8 1000 	str.w	r1, [r8]
 800aba4:	4682      	mov	sl, r0
 800aba6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800abaa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800abae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ae10 <_printf_float+0x2a8>
 800abb2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800abb6:	eeb0 6bc0 	vabs.f64	d6, d0
 800abba:	eeb4 6b47 	vcmp.f64	d6, d7
 800abbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc2:	dd24      	ble.n	800ac0e <_printf_float+0xa6>
 800abc4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800abc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abcc:	d502      	bpl.n	800abd4 <_printf_float+0x6c>
 800abce:	232d      	movs	r3, #45	; 0x2d
 800abd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abd4:	4b90      	ldr	r3, [pc, #576]	; (800ae18 <_printf_float+0x2b0>)
 800abd6:	4891      	ldr	r0, [pc, #580]	; (800ae1c <_printf_float+0x2b4>)
 800abd8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800abdc:	bf94      	ite	ls
 800abde:	4698      	movls	r8, r3
 800abe0:	4680      	movhi	r8, r0
 800abe2:	2303      	movs	r3, #3
 800abe4:	6123      	str	r3, [r4, #16]
 800abe6:	f022 0204 	bic.w	r2, r2, #4
 800abea:	2300      	movs	r3, #0
 800abec:	6022      	str	r2, [r4, #0]
 800abee:	9304      	str	r3, [sp, #16]
 800abf0:	9700      	str	r7, [sp, #0]
 800abf2:	4633      	mov	r3, r6
 800abf4:	aa09      	add	r2, sp, #36	; 0x24
 800abf6:	4621      	mov	r1, r4
 800abf8:	4628      	mov	r0, r5
 800abfa:	f000 f9d3 	bl	800afa4 <_printf_common>
 800abfe:	3001      	adds	r0, #1
 800ac00:	f040 808a 	bne.w	800ad18 <_printf_float+0x1b0>
 800ac04:	f04f 30ff 	mov.w	r0, #4294967295
 800ac08:	b00b      	add	sp, #44	; 0x2c
 800ac0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac0e:	eeb4 0b40 	vcmp.f64	d0, d0
 800ac12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac16:	d709      	bvc.n	800ac2c <_printf_float+0xc4>
 800ac18:	ee10 3a90 	vmov	r3, s1
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	bfbc      	itt	lt
 800ac20:	232d      	movlt	r3, #45	; 0x2d
 800ac22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ac26:	487e      	ldr	r0, [pc, #504]	; (800ae20 <_printf_float+0x2b8>)
 800ac28:	4b7e      	ldr	r3, [pc, #504]	; (800ae24 <_printf_float+0x2bc>)
 800ac2a:	e7d5      	b.n	800abd8 <_printf_float+0x70>
 800ac2c:	6863      	ldr	r3, [r4, #4]
 800ac2e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ac32:	9104      	str	r1, [sp, #16]
 800ac34:	1c59      	adds	r1, r3, #1
 800ac36:	d13c      	bne.n	800acb2 <_printf_float+0x14a>
 800ac38:	2306      	movs	r3, #6
 800ac3a:	6063      	str	r3, [r4, #4]
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	9303      	str	r3, [sp, #12]
 800ac40:	ab08      	add	r3, sp, #32
 800ac42:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ac46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ac4a:	ab07      	add	r3, sp, #28
 800ac4c:	6861      	ldr	r1, [r4, #4]
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	6022      	str	r2, [r4, #0]
 800ac52:	f10d 031b 	add.w	r3, sp, #27
 800ac56:	4628      	mov	r0, r5
 800ac58:	f7ff fef4 	bl	800aa44 <__cvt>
 800ac5c:	9b04      	ldr	r3, [sp, #16]
 800ac5e:	9907      	ldr	r1, [sp, #28]
 800ac60:	2b47      	cmp	r3, #71	; 0x47
 800ac62:	4680      	mov	r8, r0
 800ac64:	d108      	bne.n	800ac78 <_printf_float+0x110>
 800ac66:	1cc8      	adds	r0, r1, #3
 800ac68:	db02      	blt.n	800ac70 <_printf_float+0x108>
 800ac6a:	6863      	ldr	r3, [r4, #4]
 800ac6c:	4299      	cmp	r1, r3
 800ac6e:	dd41      	ble.n	800acf4 <_printf_float+0x18c>
 800ac70:	f1a9 0902 	sub.w	r9, r9, #2
 800ac74:	fa5f f989 	uxtb.w	r9, r9
 800ac78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ac7c:	d820      	bhi.n	800acc0 <_printf_float+0x158>
 800ac7e:	3901      	subs	r1, #1
 800ac80:	464a      	mov	r2, r9
 800ac82:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ac86:	9107      	str	r1, [sp, #28]
 800ac88:	f7ff ff2e 	bl	800aae8 <__exponent>
 800ac8c:	9a08      	ldr	r2, [sp, #32]
 800ac8e:	9004      	str	r0, [sp, #16]
 800ac90:	1813      	adds	r3, r2, r0
 800ac92:	2a01      	cmp	r2, #1
 800ac94:	6123      	str	r3, [r4, #16]
 800ac96:	dc02      	bgt.n	800ac9e <_printf_float+0x136>
 800ac98:	6822      	ldr	r2, [r4, #0]
 800ac9a:	07d2      	lsls	r2, r2, #31
 800ac9c:	d501      	bpl.n	800aca2 <_printf_float+0x13a>
 800ac9e:	3301      	adds	r3, #1
 800aca0:	6123      	str	r3, [r4, #16]
 800aca2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d0a2      	beq.n	800abf0 <_printf_float+0x88>
 800acaa:	232d      	movs	r3, #45	; 0x2d
 800acac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acb0:	e79e      	b.n	800abf0 <_printf_float+0x88>
 800acb2:	9904      	ldr	r1, [sp, #16]
 800acb4:	2947      	cmp	r1, #71	; 0x47
 800acb6:	d1c1      	bne.n	800ac3c <_printf_float+0xd4>
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1bf      	bne.n	800ac3c <_printf_float+0xd4>
 800acbc:	2301      	movs	r3, #1
 800acbe:	e7bc      	b.n	800ac3a <_printf_float+0xd2>
 800acc0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800acc4:	d118      	bne.n	800acf8 <_printf_float+0x190>
 800acc6:	2900      	cmp	r1, #0
 800acc8:	6863      	ldr	r3, [r4, #4]
 800acca:	dd0b      	ble.n	800ace4 <_printf_float+0x17c>
 800accc:	6121      	str	r1, [r4, #16]
 800acce:	b913      	cbnz	r3, 800acd6 <_printf_float+0x16e>
 800acd0:	6822      	ldr	r2, [r4, #0]
 800acd2:	07d0      	lsls	r0, r2, #31
 800acd4:	d502      	bpl.n	800acdc <_printf_float+0x174>
 800acd6:	3301      	adds	r3, #1
 800acd8:	440b      	add	r3, r1
 800acda:	6123      	str	r3, [r4, #16]
 800acdc:	2300      	movs	r3, #0
 800acde:	65a1      	str	r1, [r4, #88]	; 0x58
 800ace0:	9304      	str	r3, [sp, #16]
 800ace2:	e7de      	b.n	800aca2 <_printf_float+0x13a>
 800ace4:	b913      	cbnz	r3, 800acec <_printf_float+0x184>
 800ace6:	6822      	ldr	r2, [r4, #0]
 800ace8:	07d2      	lsls	r2, r2, #31
 800acea:	d501      	bpl.n	800acf0 <_printf_float+0x188>
 800acec:	3302      	adds	r3, #2
 800acee:	e7f4      	b.n	800acda <_printf_float+0x172>
 800acf0:	2301      	movs	r3, #1
 800acf2:	e7f2      	b.n	800acda <_printf_float+0x172>
 800acf4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800acf8:	9b08      	ldr	r3, [sp, #32]
 800acfa:	4299      	cmp	r1, r3
 800acfc:	db05      	blt.n	800ad0a <_printf_float+0x1a2>
 800acfe:	6823      	ldr	r3, [r4, #0]
 800ad00:	6121      	str	r1, [r4, #16]
 800ad02:	07d8      	lsls	r0, r3, #31
 800ad04:	d5ea      	bpl.n	800acdc <_printf_float+0x174>
 800ad06:	1c4b      	adds	r3, r1, #1
 800ad08:	e7e7      	b.n	800acda <_printf_float+0x172>
 800ad0a:	2900      	cmp	r1, #0
 800ad0c:	bfd4      	ite	le
 800ad0e:	f1c1 0202 	rsble	r2, r1, #2
 800ad12:	2201      	movgt	r2, #1
 800ad14:	4413      	add	r3, r2
 800ad16:	e7e0      	b.n	800acda <_printf_float+0x172>
 800ad18:	6823      	ldr	r3, [r4, #0]
 800ad1a:	055a      	lsls	r2, r3, #21
 800ad1c:	d407      	bmi.n	800ad2e <_printf_float+0x1c6>
 800ad1e:	6923      	ldr	r3, [r4, #16]
 800ad20:	4642      	mov	r2, r8
 800ad22:	4631      	mov	r1, r6
 800ad24:	4628      	mov	r0, r5
 800ad26:	47b8      	blx	r7
 800ad28:	3001      	adds	r0, #1
 800ad2a:	d12a      	bne.n	800ad82 <_printf_float+0x21a>
 800ad2c:	e76a      	b.n	800ac04 <_printf_float+0x9c>
 800ad2e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ad32:	f240 80e2 	bls.w	800aefa <_printf_float+0x392>
 800ad36:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ad3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ad3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad42:	d133      	bne.n	800adac <_printf_float+0x244>
 800ad44:	4a38      	ldr	r2, [pc, #224]	; (800ae28 <_printf_float+0x2c0>)
 800ad46:	2301      	movs	r3, #1
 800ad48:	4631      	mov	r1, r6
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	47b8      	blx	r7
 800ad4e:	3001      	adds	r0, #1
 800ad50:	f43f af58 	beq.w	800ac04 <_printf_float+0x9c>
 800ad54:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	db02      	blt.n	800ad62 <_printf_float+0x1fa>
 800ad5c:	6823      	ldr	r3, [r4, #0]
 800ad5e:	07d8      	lsls	r0, r3, #31
 800ad60:	d50f      	bpl.n	800ad82 <_printf_float+0x21a>
 800ad62:	4653      	mov	r3, sl
 800ad64:	465a      	mov	r2, fp
 800ad66:	4631      	mov	r1, r6
 800ad68:	4628      	mov	r0, r5
 800ad6a:	47b8      	blx	r7
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	f43f af49 	beq.w	800ac04 <_printf_float+0x9c>
 800ad72:	f04f 0800 	mov.w	r8, #0
 800ad76:	f104 091a 	add.w	r9, r4, #26
 800ad7a:	9b08      	ldr	r3, [sp, #32]
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	4543      	cmp	r3, r8
 800ad80:	dc09      	bgt.n	800ad96 <_printf_float+0x22e>
 800ad82:	6823      	ldr	r3, [r4, #0]
 800ad84:	079b      	lsls	r3, r3, #30
 800ad86:	f100 8108 	bmi.w	800af9a <_printf_float+0x432>
 800ad8a:	68e0      	ldr	r0, [r4, #12]
 800ad8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad8e:	4298      	cmp	r0, r3
 800ad90:	bfb8      	it	lt
 800ad92:	4618      	movlt	r0, r3
 800ad94:	e738      	b.n	800ac08 <_printf_float+0xa0>
 800ad96:	2301      	movs	r3, #1
 800ad98:	464a      	mov	r2, r9
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	47b8      	blx	r7
 800ada0:	3001      	adds	r0, #1
 800ada2:	f43f af2f 	beq.w	800ac04 <_printf_float+0x9c>
 800ada6:	f108 0801 	add.w	r8, r8, #1
 800adaa:	e7e6      	b.n	800ad7a <_printf_float+0x212>
 800adac:	9b07      	ldr	r3, [sp, #28]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	dc3c      	bgt.n	800ae2c <_printf_float+0x2c4>
 800adb2:	4a1d      	ldr	r2, [pc, #116]	; (800ae28 <_printf_float+0x2c0>)
 800adb4:	2301      	movs	r3, #1
 800adb6:	4631      	mov	r1, r6
 800adb8:	4628      	mov	r0, r5
 800adba:	47b8      	blx	r7
 800adbc:	3001      	adds	r0, #1
 800adbe:	f43f af21 	beq.w	800ac04 <_printf_float+0x9c>
 800adc2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800adc6:	4313      	orrs	r3, r2
 800adc8:	d102      	bne.n	800add0 <_printf_float+0x268>
 800adca:	6823      	ldr	r3, [r4, #0]
 800adcc:	07d9      	lsls	r1, r3, #31
 800adce:	d5d8      	bpl.n	800ad82 <_printf_float+0x21a>
 800add0:	4653      	mov	r3, sl
 800add2:	465a      	mov	r2, fp
 800add4:	4631      	mov	r1, r6
 800add6:	4628      	mov	r0, r5
 800add8:	47b8      	blx	r7
 800adda:	3001      	adds	r0, #1
 800addc:	f43f af12 	beq.w	800ac04 <_printf_float+0x9c>
 800ade0:	f04f 0900 	mov.w	r9, #0
 800ade4:	f104 0a1a 	add.w	sl, r4, #26
 800ade8:	9b07      	ldr	r3, [sp, #28]
 800adea:	425b      	negs	r3, r3
 800adec:	454b      	cmp	r3, r9
 800adee:	dc01      	bgt.n	800adf4 <_printf_float+0x28c>
 800adf0:	9b08      	ldr	r3, [sp, #32]
 800adf2:	e795      	b.n	800ad20 <_printf_float+0x1b8>
 800adf4:	2301      	movs	r3, #1
 800adf6:	4652      	mov	r2, sl
 800adf8:	4631      	mov	r1, r6
 800adfa:	4628      	mov	r0, r5
 800adfc:	47b8      	blx	r7
 800adfe:	3001      	adds	r0, #1
 800ae00:	f43f af00 	beq.w	800ac04 <_printf_float+0x9c>
 800ae04:	f109 0901 	add.w	r9, r9, #1
 800ae08:	e7ee      	b.n	800ade8 <_printf_float+0x280>
 800ae0a:	bf00      	nop
 800ae0c:	f3af 8000 	nop.w
 800ae10:	ffffffff 	.word	0xffffffff
 800ae14:	7fefffff 	.word	0x7fefffff
 800ae18:	0800f1fc 	.word	0x0800f1fc
 800ae1c:	0800f200 	.word	0x0800f200
 800ae20:	0800f208 	.word	0x0800f208
 800ae24:	0800f204 	.word	0x0800f204
 800ae28:	0800f20c 	.word	0x0800f20c
 800ae2c:	9a08      	ldr	r2, [sp, #32]
 800ae2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae30:	429a      	cmp	r2, r3
 800ae32:	bfa8      	it	ge
 800ae34:	461a      	movge	r2, r3
 800ae36:	2a00      	cmp	r2, #0
 800ae38:	4691      	mov	r9, r2
 800ae3a:	dc38      	bgt.n	800aeae <_printf_float+0x346>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	9305      	str	r3, [sp, #20]
 800ae40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae44:	f104 021a 	add.w	r2, r4, #26
 800ae48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ae4a:	9905      	ldr	r1, [sp, #20]
 800ae4c:	9304      	str	r3, [sp, #16]
 800ae4e:	eba3 0309 	sub.w	r3, r3, r9
 800ae52:	428b      	cmp	r3, r1
 800ae54:	dc33      	bgt.n	800aebe <_printf_float+0x356>
 800ae56:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	db3c      	blt.n	800aed8 <_printf_float+0x370>
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	07da      	lsls	r2, r3, #31
 800ae62:	d439      	bmi.n	800aed8 <_printf_float+0x370>
 800ae64:	9b08      	ldr	r3, [sp, #32]
 800ae66:	9a04      	ldr	r2, [sp, #16]
 800ae68:	9907      	ldr	r1, [sp, #28]
 800ae6a:	1a9a      	subs	r2, r3, r2
 800ae6c:	eba3 0901 	sub.w	r9, r3, r1
 800ae70:	4591      	cmp	r9, r2
 800ae72:	bfa8      	it	ge
 800ae74:	4691      	movge	r9, r2
 800ae76:	f1b9 0f00 	cmp.w	r9, #0
 800ae7a:	dc35      	bgt.n	800aee8 <_printf_float+0x380>
 800ae7c:	f04f 0800 	mov.w	r8, #0
 800ae80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae84:	f104 0a1a 	add.w	sl, r4, #26
 800ae88:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ae8c:	1a9b      	subs	r3, r3, r2
 800ae8e:	eba3 0309 	sub.w	r3, r3, r9
 800ae92:	4543      	cmp	r3, r8
 800ae94:	f77f af75 	ble.w	800ad82 <_printf_float+0x21a>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	4652      	mov	r2, sl
 800ae9c:	4631      	mov	r1, r6
 800ae9e:	4628      	mov	r0, r5
 800aea0:	47b8      	blx	r7
 800aea2:	3001      	adds	r0, #1
 800aea4:	f43f aeae 	beq.w	800ac04 <_printf_float+0x9c>
 800aea8:	f108 0801 	add.w	r8, r8, #1
 800aeac:	e7ec      	b.n	800ae88 <_printf_float+0x320>
 800aeae:	4613      	mov	r3, r2
 800aeb0:	4631      	mov	r1, r6
 800aeb2:	4642      	mov	r2, r8
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	47b8      	blx	r7
 800aeb8:	3001      	adds	r0, #1
 800aeba:	d1bf      	bne.n	800ae3c <_printf_float+0x2d4>
 800aebc:	e6a2      	b.n	800ac04 <_printf_float+0x9c>
 800aebe:	2301      	movs	r3, #1
 800aec0:	4631      	mov	r1, r6
 800aec2:	4628      	mov	r0, r5
 800aec4:	9204      	str	r2, [sp, #16]
 800aec6:	47b8      	blx	r7
 800aec8:	3001      	adds	r0, #1
 800aeca:	f43f ae9b 	beq.w	800ac04 <_printf_float+0x9c>
 800aece:	9b05      	ldr	r3, [sp, #20]
 800aed0:	9a04      	ldr	r2, [sp, #16]
 800aed2:	3301      	adds	r3, #1
 800aed4:	9305      	str	r3, [sp, #20]
 800aed6:	e7b7      	b.n	800ae48 <_printf_float+0x2e0>
 800aed8:	4653      	mov	r3, sl
 800aeda:	465a      	mov	r2, fp
 800aedc:	4631      	mov	r1, r6
 800aede:	4628      	mov	r0, r5
 800aee0:	47b8      	blx	r7
 800aee2:	3001      	adds	r0, #1
 800aee4:	d1be      	bne.n	800ae64 <_printf_float+0x2fc>
 800aee6:	e68d      	b.n	800ac04 <_printf_float+0x9c>
 800aee8:	9a04      	ldr	r2, [sp, #16]
 800aeea:	464b      	mov	r3, r9
 800aeec:	4442      	add	r2, r8
 800aeee:	4631      	mov	r1, r6
 800aef0:	4628      	mov	r0, r5
 800aef2:	47b8      	blx	r7
 800aef4:	3001      	adds	r0, #1
 800aef6:	d1c1      	bne.n	800ae7c <_printf_float+0x314>
 800aef8:	e684      	b.n	800ac04 <_printf_float+0x9c>
 800aefa:	9a08      	ldr	r2, [sp, #32]
 800aefc:	2a01      	cmp	r2, #1
 800aefe:	dc01      	bgt.n	800af04 <_printf_float+0x39c>
 800af00:	07db      	lsls	r3, r3, #31
 800af02:	d537      	bpl.n	800af74 <_printf_float+0x40c>
 800af04:	2301      	movs	r3, #1
 800af06:	4642      	mov	r2, r8
 800af08:	4631      	mov	r1, r6
 800af0a:	4628      	mov	r0, r5
 800af0c:	47b8      	blx	r7
 800af0e:	3001      	adds	r0, #1
 800af10:	f43f ae78 	beq.w	800ac04 <_printf_float+0x9c>
 800af14:	4653      	mov	r3, sl
 800af16:	465a      	mov	r2, fp
 800af18:	4631      	mov	r1, r6
 800af1a:	4628      	mov	r0, r5
 800af1c:	47b8      	blx	r7
 800af1e:	3001      	adds	r0, #1
 800af20:	f43f ae70 	beq.w	800ac04 <_printf_float+0x9c>
 800af24:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800af28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800af2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af30:	d01b      	beq.n	800af6a <_printf_float+0x402>
 800af32:	9b08      	ldr	r3, [sp, #32]
 800af34:	f108 0201 	add.w	r2, r8, #1
 800af38:	3b01      	subs	r3, #1
 800af3a:	4631      	mov	r1, r6
 800af3c:	4628      	mov	r0, r5
 800af3e:	47b8      	blx	r7
 800af40:	3001      	adds	r0, #1
 800af42:	d10e      	bne.n	800af62 <_printf_float+0x3fa>
 800af44:	e65e      	b.n	800ac04 <_printf_float+0x9c>
 800af46:	2301      	movs	r3, #1
 800af48:	464a      	mov	r2, r9
 800af4a:	4631      	mov	r1, r6
 800af4c:	4628      	mov	r0, r5
 800af4e:	47b8      	blx	r7
 800af50:	3001      	adds	r0, #1
 800af52:	f43f ae57 	beq.w	800ac04 <_printf_float+0x9c>
 800af56:	f108 0801 	add.w	r8, r8, #1
 800af5a:	9b08      	ldr	r3, [sp, #32]
 800af5c:	3b01      	subs	r3, #1
 800af5e:	4543      	cmp	r3, r8
 800af60:	dcf1      	bgt.n	800af46 <_printf_float+0x3de>
 800af62:	9b04      	ldr	r3, [sp, #16]
 800af64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800af68:	e6db      	b.n	800ad22 <_printf_float+0x1ba>
 800af6a:	f04f 0800 	mov.w	r8, #0
 800af6e:	f104 091a 	add.w	r9, r4, #26
 800af72:	e7f2      	b.n	800af5a <_printf_float+0x3f2>
 800af74:	2301      	movs	r3, #1
 800af76:	4642      	mov	r2, r8
 800af78:	e7df      	b.n	800af3a <_printf_float+0x3d2>
 800af7a:	2301      	movs	r3, #1
 800af7c:	464a      	mov	r2, r9
 800af7e:	4631      	mov	r1, r6
 800af80:	4628      	mov	r0, r5
 800af82:	47b8      	blx	r7
 800af84:	3001      	adds	r0, #1
 800af86:	f43f ae3d 	beq.w	800ac04 <_printf_float+0x9c>
 800af8a:	f108 0801 	add.w	r8, r8, #1
 800af8e:	68e3      	ldr	r3, [r4, #12]
 800af90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af92:	1a5b      	subs	r3, r3, r1
 800af94:	4543      	cmp	r3, r8
 800af96:	dcf0      	bgt.n	800af7a <_printf_float+0x412>
 800af98:	e6f7      	b.n	800ad8a <_printf_float+0x222>
 800af9a:	f04f 0800 	mov.w	r8, #0
 800af9e:	f104 0919 	add.w	r9, r4, #25
 800afa2:	e7f4      	b.n	800af8e <_printf_float+0x426>

0800afa4 <_printf_common>:
 800afa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afa8:	4616      	mov	r6, r2
 800afaa:	4699      	mov	r9, r3
 800afac:	688a      	ldr	r2, [r1, #8]
 800afae:	690b      	ldr	r3, [r1, #16]
 800afb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afb4:	4293      	cmp	r3, r2
 800afb6:	bfb8      	it	lt
 800afb8:	4613      	movlt	r3, r2
 800afba:	6033      	str	r3, [r6, #0]
 800afbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afc0:	4607      	mov	r7, r0
 800afc2:	460c      	mov	r4, r1
 800afc4:	b10a      	cbz	r2, 800afca <_printf_common+0x26>
 800afc6:	3301      	adds	r3, #1
 800afc8:	6033      	str	r3, [r6, #0]
 800afca:	6823      	ldr	r3, [r4, #0]
 800afcc:	0699      	lsls	r1, r3, #26
 800afce:	bf42      	ittt	mi
 800afd0:	6833      	ldrmi	r3, [r6, #0]
 800afd2:	3302      	addmi	r3, #2
 800afd4:	6033      	strmi	r3, [r6, #0]
 800afd6:	6825      	ldr	r5, [r4, #0]
 800afd8:	f015 0506 	ands.w	r5, r5, #6
 800afdc:	d106      	bne.n	800afec <_printf_common+0x48>
 800afde:	f104 0a19 	add.w	sl, r4, #25
 800afe2:	68e3      	ldr	r3, [r4, #12]
 800afe4:	6832      	ldr	r2, [r6, #0]
 800afe6:	1a9b      	subs	r3, r3, r2
 800afe8:	42ab      	cmp	r3, r5
 800afea:	dc26      	bgt.n	800b03a <_printf_common+0x96>
 800afec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aff0:	1e13      	subs	r3, r2, #0
 800aff2:	6822      	ldr	r2, [r4, #0]
 800aff4:	bf18      	it	ne
 800aff6:	2301      	movne	r3, #1
 800aff8:	0692      	lsls	r2, r2, #26
 800affa:	d42b      	bmi.n	800b054 <_printf_common+0xb0>
 800affc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b000:	4649      	mov	r1, r9
 800b002:	4638      	mov	r0, r7
 800b004:	47c0      	blx	r8
 800b006:	3001      	adds	r0, #1
 800b008:	d01e      	beq.n	800b048 <_printf_common+0xa4>
 800b00a:	6823      	ldr	r3, [r4, #0]
 800b00c:	68e5      	ldr	r5, [r4, #12]
 800b00e:	6832      	ldr	r2, [r6, #0]
 800b010:	f003 0306 	and.w	r3, r3, #6
 800b014:	2b04      	cmp	r3, #4
 800b016:	bf08      	it	eq
 800b018:	1aad      	subeq	r5, r5, r2
 800b01a:	68a3      	ldr	r3, [r4, #8]
 800b01c:	6922      	ldr	r2, [r4, #16]
 800b01e:	bf0c      	ite	eq
 800b020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b024:	2500      	movne	r5, #0
 800b026:	4293      	cmp	r3, r2
 800b028:	bfc4      	itt	gt
 800b02a:	1a9b      	subgt	r3, r3, r2
 800b02c:	18ed      	addgt	r5, r5, r3
 800b02e:	2600      	movs	r6, #0
 800b030:	341a      	adds	r4, #26
 800b032:	42b5      	cmp	r5, r6
 800b034:	d11a      	bne.n	800b06c <_printf_common+0xc8>
 800b036:	2000      	movs	r0, #0
 800b038:	e008      	b.n	800b04c <_printf_common+0xa8>
 800b03a:	2301      	movs	r3, #1
 800b03c:	4652      	mov	r2, sl
 800b03e:	4649      	mov	r1, r9
 800b040:	4638      	mov	r0, r7
 800b042:	47c0      	blx	r8
 800b044:	3001      	adds	r0, #1
 800b046:	d103      	bne.n	800b050 <_printf_common+0xac>
 800b048:	f04f 30ff 	mov.w	r0, #4294967295
 800b04c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b050:	3501      	adds	r5, #1
 800b052:	e7c6      	b.n	800afe2 <_printf_common+0x3e>
 800b054:	18e1      	adds	r1, r4, r3
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	2030      	movs	r0, #48	; 0x30
 800b05a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b05e:	4422      	add	r2, r4
 800b060:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b064:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b068:	3302      	adds	r3, #2
 800b06a:	e7c7      	b.n	800affc <_printf_common+0x58>
 800b06c:	2301      	movs	r3, #1
 800b06e:	4622      	mov	r2, r4
 800b070:	4649      	mov	r1, r9
 800b072:	4638      	mov	r0, r7
 800b074:	47c0      	blx	r8
 800b076:	3001      	adds	r0, #1
 800b078:	d0e6      	beq.n	800b048 <_printf_common+0xa4>
 800b07a:	3601      	adds	r6, #1
 800b07c:	e7d9      	b.n	800b032 <_printf_common+0x8e>
	...

0800b080 <_printf_i>:
 800b080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b084:	7e0f      	ldrb	r7, [r1, #24]
 800b086:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b088:	2f78      	cmp	r7, #120	; 0x78
 800b08a:	4691      	mov	r9, r2
 800b08c:	4680      	mov	r8, r0
 800b08e:	460c      	mov	r4, r1
 800b090:	469a      	mov	sl, r3
 800b092:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b096:	d807      	bhi.n	800b0a8 <_printf_i+0x28>
 800b098:	2f62      	cmp	r7, #98	; 0x62
 800b09a:	d80a      	bhi.n	800b0b2 <_printf_i+0x32>
 800b09c:	2f00      	cmp	r7, #0
 800b09e:	f000 80d8 	beq.w	800b252 <_printf_i+0x1d2>
 800b0a2:	2f58      	cmp	r7, #88	; 0x58
 800b0a4:	f000 80a3 	beq.w	800b1ee <_printf_i+0x16e>
 800b0a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0b0:	e03a      	b.n	800b128 <_printf_i+0xa8>
 800b0b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0b6:	2b15      	cmp	r3, #21
 800b0b8:	d8f6      	bhi.n	800b0a8 <_printf_i+0x28>
 800b0ba:	a101      	add	r1, pc, #4	; (adr r1, 800b0c0 <_printf_i+0x40>)
 800b0bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0c0:	0800b119 	.word	0x0800b119
 800b0c4:	0800b12d 	.word	0x0800b12d
 800b0c8:	0800b0a9 	.word	0x0800b0a9
 800b0cc:	0800b0a9 	.word	0x0800b0a9
 800b0d0:	0800b0a9 	.word	0x0800b0a9
 800b0d4:	0800b0a9 	.word	0x0800b0a9
 800b0d8:	0800b12d 	.word	0x0800b12d
 800b0dc:	0800b0a9 	.word	0x0800b0a9
 800b0e0:	0800b0a9 	.word	0x0800b0a9
 800b0e4:	0800b0a9 	.word	0x0800b0a9
 800b0e8:	0800b0a9 	.word	0x0800b0a9
 800b0ec:	0800b239 	.word	0x0800b239
 800b0f0:	0800b15d 	.word	0x0800b15d
 800b0f4:	0800b21b 	.word	0x0800b21b
 800b0f8:	0800b0a9 	.word	0x0800b0a9
 800b0fc:	0800b0a9 	.word	0x0800b0a9
 800b100:	0800b25b 	.word	0x0800b25b
 800b104:	0800b0a9 	.word	0x0800b0a9
 800b108:	0800b15d 	.word	0x0800b15d
 800b10c:	0800b0a9 	.word	0x0800b0a9
 800b110:	0800b0a9 	.word	0x0800b0a9
 800b114:	0800b223 	.word	0x0800b223
 800b118:	682b      	ldr	r3, [r5, #0]
 800b11a:	1d1a      	adds	r2, r3, #4
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	602a      	str	r2, [r5, #0]
 800b120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b128:	2301      	movs	r3, #1
 800b12a:	e0a3      	b.n	800b274 <_printf_i+0x1f4>
 800b12c:	6820      	ldr	r0, [r4, #0]
 800b12e:	6829      	ldr	r1, [r5, #0]
 800b130:	0606      	lsls	r6, r0, #24
 800b132:	f101 0304 	add.w	r3, r1, #4
 800b136:	d50a      	bpl.n	800b14e <_printf_i+0xce>
 800b138:	680e      	ldr	r6, [r1, #0]
 800b13a:	602b      	str	r3, [r5, #0]
 800b13c:	2e00      	cmp	r6, #0
 800b13e:	da03      	bge.n	800b148 <_printf_i+0xc8>
 800b140:	232d      	movs	r3, #45	; 0x2d
 800b142:	4276      	negs	r6, r6
 800b144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b148:	485e      	ldr	r0, [pc, #376]	; (800b2c4 <_printf_i+0x244>)
 800b14a:	230a      	movs	r3, #10
 800b14c:	e019      	b.n	800b182 <_printf_i+0x102>
 800b14e:	680e      	ldr	r6, [r1, #0]
 800b150:	602b      	str	r3, [r5, #0]
 800b152:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b156:	bf18      	it	ne
 800b158:	b236      	sxthne	r6, r6
 800b15a:	e7ef      	b.n	800b13c <_printf_i+0xbc>
 800b15c:	682b      	ldr	r3, [r5, #0]
 800b15e:	6820      	ldr	r0, [r4, #0]
 800b160:	1d19      	adds	r1, r3, #4
 800b162:	6029      	str	r1, [r5, #0]
 800b164:	0601      	lsls	r1, r0, #24
 800b166:	d501      	bpl.n	800b16c <_printf_i+0xec>
 800b168:	681e      	ldr	r6, [r3, #0]
 800b16a:	e002      	b.n	800b172 <_printf_i+0xf2>
 800b16c:	0646      	lsls	r6, r0, #25
 800b16e:	d5fb      	bpl.n	800b168 <_printf_i+0xe8>
 800b170:	881e      	ldrh	r6, [r3, #0]
 800b172:	4854      	ldr	r0, [pc, #336]	; (800b2c4 <_printf_i+0x244>)
 800b174:	2f6f      	cmp	r7, #111	; 0x6f
 800b176:	bf0c      	ite	eq
 800b178:	2308      	moveq	r3, #8
 800b17a:	230a      	movne	r3, #10
 800b17c:	2100      	movs	r1, #0
 800b17e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b182:	6865      	ldr	r5, [r4, #4]
 800b184:	60a5      	str	r5, [r4, #8]
 800b186:	2d00      	cmp	r5, #0
 800b188:	bfa2      	ittt	ge
 800b18a:	6821      	ldrge	r1, [r4, #0]
 800b18c:	f021 0104 	bicge.w	r1, r1, #4
 800b190:	6021      	strge	r1, [r4, #0]
 800b192:	b90e      	cbnz	r6, 800b198 <_printf_i+0x118>
 800b194:	2d00      	cmp	r5, #0
 800b196:	d04d      	beq.n	800b234 <_printf_i+0x1b4>
 800b198:	4615      	mov	r5, r2
 800b19a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b19e:	fb03 6711 	mls	r7, r3, r1, r6
 800b1a2:	5dc7      	ldrb	r7, [r0, r7]
 800b1a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b1a8:	4637      	mov	r7, r6
 800b1aa:	42bb      	cmp	r3, r7
 800b1ac:	460e      	mov	r6, r1
 800b1ae:	d9f4      	bls.n	800b19a <_printf_i+0x11a>
 800b1b0:	2b08      	cmp	r3, #8
 800b1b2:	d10b      	bne.n	800b1cc <_printf_i+0x14c>
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	07de      	lsls	r6, r3, #31
 800b1b8:	d508      	bpl.n	800b1cc <_printf_i+0x14c>
 800b1ba:	6923      	ldr	r3, [r4, #16]
 800b1bc:	6861      	ldr	r1, [r4, #4]
 800b1be:	4299      	cmp	r1, r3
 800b1c0:	bfde      	ittt	le
 800b1c2:	2330      	movle	r3, #48	; 0x30
 800b1c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b1cc:	1b52      	subs	r2, r2, r5
 800b1ce:	6122      	str	r2, [r4, #16]
 800b1d0:	f8cd a000 	str.w	sl, [sp]
 800b1d4:	464b      	mov	r3, r9
 800b1d6:	aa03      	add	r2, sp, #12
 800b1d8:	4621      	mov	r1, r4
 800b1da:	4640      	mov	r0, r8
 800b1dc:	f7ff fee2 	bl	800afa4 <_printf_common>
 800b1e0:	3001      	adds	r0, #1
 800b1e2:	d14c      	bne.n	800b27e <_printf_i+0x1fe>
 800b1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e8:	b004      	add	sp, #16
 800b1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ee:	4835      	ldr	r0, [pc, #212]	; (800b2c4 <_printf_i+0x244>)
 800b1f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b1f4:	6829      	ldr	r1, [r5, #0]
 800b1f6:	6823      	ldr	r3, [r4, #0]
 800b1f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1fc:	6029      	str	r1, [r5, #0]
 800b1fe:	061d      	lsls	r5, r3, #24
 800b200:	d514      	bpl.n	800b22c <_printf_i+0x1ac>
 800b202:	07df      	lsls	r7, r3, #31
 800b204:	bf44      	itt	mi
 800b206:	f043 0320 	orrmi.w	r3, r3, #32
 800b20a:	6023      	strmi	r3, [r4, #0]
 800b20c:	b91e      	cbnz	r6, 800b216 <_printf_i+0x196>
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	f023 0320 	bic.w	r3, r3, #32
 800b214:	6023      	str	r3, [r4, #0]
 800b216:	2310      	movs	r3, #16
 800b218:	e7b0      	b.n	800b17c <_printf_i+0xfc>
 800b21a:	6823      	ldr	r3, [r4, #0]
 800b21c:	f043 0320 	orr.w	r3, r3, #32
 800b220:	6023      	str	r3, [r4, #0]
 800b222:	2378      	movs	r3, #120	; 0x78
 800b224:	4828      	ldr	r0, [pc, #160]	; (800b2c8 <_printf_i+0x248>)
 800b226:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b22a:	e7e3      	b.n	800b1f4 <_printf_i+0x174>
 800b22c:	0659      	lsls	r1, r3, #25
 800b22e:	bf48      	it	mi
 800b230:	b2b6      	uxthmi	r6, r6
 800b232:	e7e6      	b.n	800b202 <_printf_i+0x182>
 800b234:	4615      	mov	r5, r2
 800b236:	e7bb      	b.n	800b1b0 <_printf_i+0x130>
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	6826      	ldr	r6, [r4, #0]
 800b23c:	6961      	ldr	r1, [r4, #20]
 800b23e:	1d18      	adds	r0, r3, #4
 800b240:	6028      	str	r0, [r5, #0]
 800b242:	0635      	lsls	r5, r6, #24
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	d501      	bpl.n	800b24c <_printf_i+0x1cc>
 800b248:	6019      	str	r1, [r3, #0]
 800b24a:	e002      	b.n	800b252 <_printf_i+0x1d2>
 800b24c:	0670      	lsls	r0, r6, #25
 800b24e:	d5fb      	bpl.n	800b248 <_printf_i+0x1c8>
 800b250:	8019      	strh	r1, [r3, #0]
 800b252:	2300      	movs	r3, #0
 800b254:	6123      	str	r3, [r4, #16]
 800b256:	4615      	mov	r5, r2
 800b258:	e7ba      	b.n	800b1d0 <_printf_i+0x150>
 800b25a:	682b      	ldr	r3, [r5, #0]
 800b25c:	1d1a      	adds	r2, r3, #4
 800b25e:	602a      	str	r2, [r5, #0]
 800b260:	681d      	ldr	r5, [r3, #0]
 800b262:	6862      	ldr	r2, [r4, #4]
 800b264:	2100      	movs	r1, #0
 800b266:	4628      	mov	r0, r5
 800b268:	f7f4 fff2 	bl	8000250 <memchr>
 800b26c:	b108      	cbz	r0, 800b272 <_printf_i+0x1f2>
 800b26e:	1b40      	subs	r0, r0, r5
 800b270:	6060      	str	r0, [r4, #4]
 800b272:	6863      	ldr	r3, [r4, #4]
 800b274:	6123      	str	r3, [r4, #16]
 800b276:	2300      	movs	r3, #0
 800b278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b27c:	e7a8      	b.n	800b1d0 <_printf_i+0x150>
 800b27e:	6923      	ldr	r3, [r4, #16]
 800b280:	462a      	mov	r2, r5
 800b282:	4649      	mov	r1, r9
 800b284:	4640      	mov	r0, r8
 800b286:	47d0      	blx	sl
 800b288:	3001      	adds	r0, #1
 800b28a:	d0ab      	beq.n	800b1e4 <_printf_i+0x164>
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	079b      	lsls	r3, r3, #30
 800b290:	d413      	bmi.n	800b2ba <_printf_i+0x23a>
 800b292:	68e0      	ldr	r0, [r4, #12]
 800b294:	9b03      	ldr	r3, [sp, #12]
 800b296:	4298      	cmp	r0, r3
 800b298:	bfb8      	it	lt
 800b29a:	4618      	movlt	r0, r3
 800b29c:	e7a4      	b.n	800b1e8 <_printf_i+0x168>
 800b29e:	2301      	movs	r3, #1
 800b2a0:	4632      	mov	r2, r6
 800b2a2:	4649      	mov	r1, r9
 800b2a4:	4640      	mov	r0, r8
 800b2a6:	47d0      	blx	sl
 800b2a8:	3001      	adds	r0, #1
 800b2aa:	d09b      	beq.n	800b1e4 <_printf_i+0x164>
 800b2ac:	3501      	adds	r5, #1
 800b2ae:	68e3      	ldr	r3, [r4, #12]
 800b2b0:	9903      	ldr	r1, [sp, #12]
 800b2b2:	1a5b      	subs	r3, r3, r1
 800b2b4:	42ab      	cmp	r3, r5
 800b2b6:	dcf2      	bgt.n	800b29e <_printf_i+0x21e>
 800b2b8:	e7eb      	b.n	800b292 <_printf_i+0x212>
 800b2ba:	2500      	movs	r5, #0
 800b2bc:	f104 0619 	add.w	r6, r4, #25
 800b2c0:	e7f5      	b.n	800b2ae <_printf_i+0x22e>
 800b2c2:	bf00      	nop
 800b2c4:	0800f20e 	.word	0x0800f20e
 800b2c8:	0800f21f 	.word	0x0800f21f

0800b2cc <_scanf_float>:
 800b2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d0:	b087      	sub	sp, #28
 800b2d2:	4617      	mov	r7, r2
 800b2d4:	9303      	str	r3, [sp, #12]
 800b2d6:	688b      	ldr	r3, [r1, #8]
 800b2d8:	1e5a      	subs	r2, r3, #1
 800b2da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b2de:	bf83      	ittte	hi
 800b2e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b2e4:	195b      	addhi	r3, r3, r5
 800b2e6:	9302      	strhi	r3, [sp, #8]
 800b2e8:	2300      	movls	r3, #0
 800b2ea:	bf86      	itte	hi
 800b2ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b2f0:	608b      	strhi	r3, [r1, #8]
 800b2f2:	9302      	strls	r3, [sp, #8]
 800b2f4:	680b      	ldr	r3, [r1, #0]
 800b2f6:	468b      	mov	fp, r1
 800b2f8:	2500      	movs	r5, #0
 800b2fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b2fe:	f84b 3b1c 	str.w	r3, [fp], #28
 800b302:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b306:	4680      	mov	r8, r0
 800b308:	460c      	mov	r4, r1
 800b30a:	465e      	mov	r6, fp
 800b30c:	46aa      	mov	sl, r5
 800b30e:	46a9      	mov	r9, r5
 800b310:	9501      	str	r5, [sp, #4]
 800b312:	68a2      	ldr	r2, [r4, #8]
 800b314:	b152      	cbz	r2, 800b32c <_scanf_float+0x60>
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	2b4e      	cmp	r3, #78	; 0x4e
 800b31c:	d864      	bhi.n	800b3e8 <_scanf_float+0x11c>
 800b31e:	2b40      	cmp	r3, #64	; 0x40
 800b320:	d83c      	bhi.n	800b39c <_scanf_float+0xd0>
 800b322:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b326:	b2c8      	uxtb	r0, r1
 800b328:	280e      	cmp	r0, #14
 800b32a:	d93a      	bls.n	800b3a2 <_scanf_float+0xd6>
 800b32c:	f1b9 0f00 	cmp.w	r9, #0
 800b330:	d003      	beq.n	800b33a <_scanf_float+0x6e>
 800b332:	6823      	ldr	r3, [r4, #0]
 800b334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b33e:	f1ba 0f01 	cmp.w	sl, #1
 800b342:	f200 8113 	bhi.w	800b56c <_scanf_float+0x2a0>
 800b346:	455e      	cmp	r6, fp
 800b348:	f200 8105 	bhi.w	800b556 <_scanf_float+0x28a>
 800b34c:	2501      	movs	r5, #1
 800b34e:	4628      	mov	r0, r5
 800b350:	b007      	add	sp, #28
 800b352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b356:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b35a:	2a0d      	cmp	r2, #13
 800b35c:	d8e6      	bhi.n	800b32c <_scanf_float+0x60>
 800b35e:	a101      	add	r1, pc, #4	; (adr r1, 800b364 <_scanf_float+0x98>)
 800b360:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b364:	0800b4a3 	.word	0x0800b4a3
 800b368:	0800b32d 	.word	0x0800b32d
 800b36c:	0800b32d 	.word	0x0800b32d
 800b370:	0800b32d 	.word	0x0800b32d
 800b374:	0800b503 	.word	0x0800b503
 800b378:	0800b4db 	.word	0x0800b4db
 800b37c:	0800b32d 	.word	0x0800b32d
 800b380:	0800b32d 	.word	0x0800b32d
 800b384:	0800b4b1 	.word	0x0800b4b1
 800b388:	0800b32d 	.word	0x0800b32d
 800b38c:	0800b32d 	.word	0x0800b32d
 800b390:	0800b32d 	.word	0x0800b32d
 800b394:	0800b32d 	.word	0x0800b32d
 800b398:	0800b469 	.word	0x0800b469
 800b39c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b3a0:	e7db      	b.n	800b35a <_scanf_float+0x8e>
 800b3a2:	290e      	cmp	r1, #14
 800b3a4:	d8c2      	bhi.n	800b32c <_scanf_float+0x60>
 800b3a6:	a001      	add	r0, pc, #4	; (adr r0, 800b3ac <_scanf_float+0xe0>)
 800b3a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b3ac:	0800b45b 	.word	0x0800b45b
 800b3b0:	0800b32d 	.word	0x0800b32d
 800b3b4:	0800b45b 	.word	0x0800b45b
 800b3b8:	0800b4ef 	.word	0x0800b4ef
 800b3bc:	0800b32d 	.word	0x0800b32d
 800b3c0:	0800b409 	.word	0x0800b409
 800b3c4:	0800b445 	.word	0x0800b445
 800b3c8:	0800b445 	.word	0x0800b445
 800b3cc:	0800b445 	.word	0x0800b445
 800b3d0:	0800b445 	.word	0x0800b445
 800b3d4:	0800b445 	.word	0x0800b445
 800b3d8:	0800b445 	.word	0x0800b445
 800b3dc:	0800b445 	.word	0x0800b445
 800b3e0:	0800b445 	.word	0x0800b445
 800b3e4:	0800b445 	.word	0x0800b445
 800b3e8:	2b6e      	cmp	r3, #110	; 0x6e
 800b3ea:	d809      	bhi.n	800b400 <_scanf_float+0x134>
 800b3ec:	2b60      	cmp	r3, #96	; 0x60
 800b3ee:	d8b2      	bhi.n	800b356 <_scanf_float+0x8a>
 800b3f0:	2b54      	cmp	r3, #84	; 0x54
 800b3f2:	d077      	beq.n	800b4e4 <_scanf_float+0x218>
 800b3f4:	2b59      	cmp	r3, #89	; 0x59
 800b3f6:	d199      	bne.n	800b32c <_scanf_float+0x60>
 800b3f8:	2d07      	cmp	r5, #7
 800b3fa:	d197      	bne.n	800b32c <_scanf_float+0x60>
 800b3fc:	2508      	movs	r5, #8
 800b3fe:	e029      	b.n	800b454 <_scanf_float+0x188>
 800b400:	2b74      	cmp	r3, #116	; 0x74
 800b402:	d06f      	beq.n	800b4e4 <_scanf_float+0x218>
 800b404:	2b79      	cmp	r3, #121	; 0x79
 800b406:	e7f6      	b.n	800b3f6 <_scanf_float+0x12a>
 800b408:	6821      	ldr	r1, [r4, #0]
 800b40a:	05c8      	lsls	r0, r1, #23
 800b40c:	d51a      	bpl.n	800b444 <_scanf_float+0x178>
 800b40e:	9b02      	ldr	r3, [sp, #8]
 800b410:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b414:	6021      	str	r1, [r4, #0]
 800b416:	f109 0901 	add.w	r9, r9, #1
 800b41a:	b11b      	cbz	r3, 800b424 <_scanf_float+0x158>
 800b41c:	3b01      	subs	r3, #1
 800b41e:	3201      	adds	r2, #1
 800b420:	9302      	str	r3, [sp, #8]
 800b422:	60a2      	str	r2, [r4, #8]
 800b424:	68a3      	ldr	r3, [r4, #8]
 800b426:	3b01      	subs	r3, #1
 800b428:	60a3      	str	r3, [r4, #8]
 800b42a:	6923      	ldr	r3, [r4, #16]
 800b42c:	3301      	adds	r3, #1
 800b42e:	6123      	str	r3, [r4, #16]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	3b01      	subs	r3, #1
 800b434:	2b00      	cmp	r3, #0
 800b436:	607b      	str	r3, [r7, #4]
 800b438:	f340 8084 	ble.w	800b544 <_scanf_float+0x278>
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	3301      	adds	r3, #1
 800b440:	603b      	str	r3, [r7, #0]
 800b442:	e766      	b.n	800b312 <_scanf_float+0x46>
 800b444:	eb1a 0f05 	cmn.w	sl, r5
 800b448:	f47f af70 	bne.w	800b32c <_scanf_float+0x60>
 800b44c:	6822      	ldr	r2, [r4, #0]
 800b44e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b452:	6022      	str	r2, [r4, #0]
 800b454:	f806 3b01 	strb.w	r3, [r6], #1
 800b458:	e7e4      	b.n	800b424 <_scanf_float+0x158>
 800b45a:	6822      	ldr	r2, [r4, #0]
 800b45c:	0610      	lsls	r0, r2, #24
 800b45e:	f57f af65 	bpl.w	800b32c <_scanf_float+0x60>
 800b462:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b466:	e7f4      	b.n	800b452 <_scanf_float+0x186>
 800b468:	f1ba 0f00 	cmp.w	sl, #0
 800b46c:	d10e      	bne.n	800b48c <_scanf_float+0x1c0>
 800b46e:	f1b9 0f00 	cmp.w	r9, #0
 800b472:	d10e      	bne.n	800b492 <_scanf_float+0x1c6>
 800b474:	6822      	ldr	r2, [r4, #0]
 800b476:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b47a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b47e:	d108      	bne.n	800b492 <_scanf_float+0x1c6>
 800b480:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b484:	6022      	str	r2, [r4, #0]
 800b486:	f04f 0a01 	mov.w	sl, #1
 800b48a:	e7e3      	b.n	800b454 <_scanf_float+0x188>
 800b48c:	f1ba 0f02 	cmp.w	sl, #2
 800b490:	d055      	beq.n	800b53e <_scanf_float+0x272>
 800b492:	2d01      	cmp	r5, #1
 800b494:	d002      	beq.n	800b49c <_scanf_float+0x1d0>
 800b496:	2d04      	cmp	r5, #4
 800b498:	f47f af48 	bne.w	800b32c <_scanf_float+0x60>
 800b49c:	3501      	adds	r5, #1
 800b49e:	b2ed      	uxtb	r5, r5
 800b4a0:	e7d8      	b.n	800b454 <_scanf_float+0x188>
 800b4a2:	f1ba 0f01 	cmp.w	sl, #1
 800b4a6:	f47f af41 	bne.w	800b32c <_scanf_float+0x60>
 800b4aa:	f04f 0a02 	mov.w	sl, #2
 800b4ae:	e7d1      	b.n	800b454 <_scanf_float+0x188>
 800b4b0:	b97d      	cbnz	r5, 800b4d2 <_scanf_float+0x206>
 800b4b2:	f1b9 0f00 	cmp.w	r9, #0
 800b4b6:	f47f af3c 	bne.w	800b332 <_scanf_float+0x66>
 800b4ba:	6822      	ldr	r2, [r4, #0]
 800b4bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b4c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b4c4:	f47f af39 	bne.w	800b33a <_scanf_float+0x6e>
 800b4c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b4cc:	6022      	str	r2, [r4, #0]
 800b4ce:	2501      	movs	r5, #1
 800b4d0:	e7c0      	b.n	800b454 <_scanf_float+0x188>
 800b4d2:	2d03      	cmp	r5, #3
 800b4d4:	d0e2      	beq.n	800b49c <_scanf_float+0x1d0>
 800b4d6:	2d05      	cmp	r5, #5
 800b4d8:	e7de      	b.n	800b498 <_scanf_float+0x1cc>
 800b4da:	2d02      	cmp	r5, #2
 800b4dc:	f47f af26 	bne.w	800b32c <_scanf_float+0x60>
 800b4e0:	2503      	movs	r5, #3
 800b4e2:	e7b7      	b.n	800b454 <_scanf_float+0x188>
 800b4e4:	2d06      	cmp	r5, #6
 800b4e6:	f47f af21 	bne.w	800b32c <_scanf_float+0x60>
 800b4ea:	2507      	movs	r5, #7
 800b4ec:	e7b2      	b.n	800b454 <_scanf_float+0x188>
 800b4ee:	6822      	ldr	r2, [r4, #0]
 800b4f0:	0591      	lsls	r1, r2, #22
 800b4f2:	f57f af1b 	bpl.w	800b32c <_scanf_float+0x60>
 800b4f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b4fa:	6022      	str	r2, [r4, #0]
 800b4fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800b500:	e7a8      	b.n	800b454 <_scanf_float+0x188>
 800b502:	6822      	ldr	r2, [r4, #0]
 800b504:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b508:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b50c:	d006      	beq.n	800b51c <_scanf_float+0x250>
 800b50e:	0550      	lsls	r0, r2, #21
 800b510:	f57f af0c 	bpl.w	800b32c <_scanf_float+0x60>
 800b514:	f1b9 0f00 	cmp.w	r9, #0
 800b518:	f43f af0f 	beq.w	800b33a <_scanf_float+0x6e>
 800b51c:	0591      	lsls	r1, r2, #22
 800b51e:	bf58      	it	pl
 800b520:	9901      	ldrpl	r1, [sp, #4]
 800b522:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b526:	bf58      	it	pl
 800b528:	eba9 0101 	subpl.w	r1, r9, r1
 800b52c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b530:	bf58      	it	pl
 800b532:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b536:	6022      	str	r2, [r4, #0]
 800b538:	f04f 0900 	mov.w	r9, #0
 800b53c:	e78a      	b.n	800b454 <_scanf_float+0x188>
 800b53e:	f04f 0a03 	mov.w	sl, #3
 800b542:	e787      	b.n	800b454 <_scanf_float+0x188>
 800b544:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b548:	4639      	mov	r1, r7
 800b54a:	4640      	mov	r0, r8
 800b54c:	4798      	blx	r3
 800b54e:	2800      	cmp	r0, #0
 800b550:	f43f aedf 	beq.w	800b312 <_scanf_float+0x46>
 800b554:	e6ea      	b.n	800b32c <_scanf_float+0x60>
 800b556:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b55a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b55e:	463a      	mov	r2, r7
 800b560:	4640      	mov	r0, r8
 800b562:	4798      	blx	r3
 800b564:	6923      	ldr	r3, [r4, #16]
 800b566:	3b01      	subs	r3, #1
 800b568:	6123      	str	r3, [r4, #16]
 800b56a:	e6ec      	b.n	800b346 <_scanf_float+0x7a>
 800b56c:	1e6b      	subs	r3, r5, #1
 800b56e:	2b06      	cmp	r3, #6
 800b570:	d825      	bhi.n	800b5be <_scanf_float+0x2f2>
 800b572:	2d02      	cmp	r5, #2
 800b574:	d836      	bhi.n	800b5e4 <_scanf_float+0x318>
 800b576:	455e      	cmp	r6, fp
 800b578:	f67f aee8 	bls.w	800b34c <_scanf_float+0x80>
 800b57c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b580:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b584:	463a      	mov	r2, r7
 800b586:	4640      	mov	r0, r8
 800b588:	4798      	blx	r3
 800b58a:	6923      	ldr	r3, [r4, #16]
 800b58c:	3b01      	subs	r3, #1
 800b58e:	6123      	str	r3, [r4, #16]
 800b590:	e7f1      	b.n	800b576 <_scanf_float+0x2aa>
 800b592:	9802      	ldr	r0, [sp, #8]
 800b594:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b598:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b59c:	9002      	str	r0, [sp, #8]
 800b59e:	463a      	mov	r2, r7
 800b5a0:	4640      	mov	r0, r8
 800b5a2:	4798      	blx	r3
 800b5a4:	6923      	ldr	r3, [r4, #16]
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	6123      	str	r3, [r4, #16]
 800b5aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b5ae:	fa5f fa8a 	uxtb.w	sl, sl
 800b5b2:	f1ba 0f02 	cmp.w	sl, #2
 800b5b6:	d1ec      	bne.n	800b592 <_scanf_float+0x2c6>
 800b5b8:	3d03      	subs	r5, #3
 800b5ba:	b2ed      	uxtb	r5, r5
 800b5bc:	1b76      	subs	r6, r6, r5
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	05da      	lsls	r2, r3, #23
 800b5c2:	d52f      	bpl.n	800b624 <_scanf_float+0x358>
 800b5c4:	055b      	lsls	r3, r3, #21
 800b5c6:	d510      	bpl.n	800b5ea <_scanf_float+0x31e>
 800b5c8:	455e      	cmp	r6, fp
 800b5ca:	f67f aebf 	bls.w	800b34c <_scanf_float+0x80>
 800b5ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b5d6:	463a      	mov	r2, r7
 800b5d8:	4640      	mov	r0, r8
 800b5da:	4798      	blx	r3
 800b5dc:	6923      	ldr	r3, [r4, #16]
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	6123      	str	r3, [r4, #16]
 800b5e2:	e7f1      	b.n	800b5c8 <_scanf_float+0x2fc>
 800b5e4:	46aa      	mov	sl, r5
 800b5e6:	9602      	str	r6, [sp, #8]
 800b5e8:	e7df      	b.n	800b5aa <_scanf_float+0x2de>
 800b5ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b5ee:	6923      	ldr	r3, [r4, #16]
 800b5f0:	2965      	cmp	r1, #101	; 0x65
 800b5f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b5f6:	f106 35ff 	add.w	r5, r6, #4294967295
 800b5fa:	6123      	str	r3, [r4, #16]
 800b5fc:	d00c      	beq.n	800b618 <_scanf_float+0x34c>
 800b5fe:	2945      	cmp	r1, #69	; 0x45
 800b600:	d00a      	beq.n	800b618 <_scanf_float+0x34c>
 800b602:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b606:	463a      	mov	r2, r7
 800b608:	4640      	mov	r0, r8
 800b60a:	4798      	blx	r3
 800b60c:	6923      	ldr	r3, [r4, #16]
 800b60e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b612:	3b01      	subs	r3, #1
 800b614:	1eb5      	subs	r5, r6, #2
 800b616:	6123      	str	r3, [r4, #16]
 800b618:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b61c:	463a      	mov	r2, r7
 800b61e:	4640      	mov	r0, r8
 800b620:	4798      	blx	r3
 800b622:	462e      	mov	r6, r5
 800b624:	6825      	ldr	r5, [r4, #0]
 800b626:	f015 0510 	ands.w	r5, r5, #16
 800b62a:	d14e      	bne.n	800b6ca <_scanf_float+0x3fe>
 800b62c:	7035      	strb	r5, [r6, #0]
 800b62e:	6823      	ldr	r3, [r4, #0]
 800b630:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b638:	d119      	bne.n	800b66e <_scanf_float+0x3a2>
 800b63a:	9b01      	ldr	r3, [sp, #4]
 800b63c:	454b      	cmp	r3, r9
 800b63e:	eba3 0209 	sub.w	r2, r3, r9
 800b642:	d121      	bne.n	800b688 <_scanf_float+0x3bc>
 800b644:	2200      	movs	r2, #0
 800b646:	4659      	mov	r1, fp
 800b648:	4640      	mov	r0, r8
 800b64a:	f000 fe3b 	bl	800c2c4 <_strtod_r>
 800b64e:	6822      	ldr	r2, [r4, #0]
 800b650:	9b03      	ldr	r3, [sp, #12]
 800b652:	f012 0f02 	tst.w	r2, #2
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	d021      	beq.n	800b69e <_scanf_float+0x3d2>
 800b65a:	9903      	ldr	r1, [sp, #12]
 800b65c:	1d1a      	adds	r2, r3, #4
 800b65e:	600a      	str	r2, [r1, #0]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	ed83 0b00 	vstr	d0, [r3]
 800b666:	68e3      	ldr	r3, [r4, #12]
 800b668:	3301      	adds	r3, #1
 800b66a:	60e3      	str	r3, [r4, #12]
 800b66c:	e66f      	b.n	800b34e <_scanf_float+0x82>
 800b66e:	9b04      	ldr	r3, [sp, #16]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d0e7      	beq.n	800b644 <_scanf_float+0x378>
 800b674:	9905      	ldr	r1, [sp, #20]
 800b676:	230a      	movs	r3, #10
 800b678:	462a      	mov	r2, r5
 800b67a:	3101      	adds	r1, #1
 800b67c:	4640      	mov	r0, r8
 800b67e:	f000 fea9 	bl	800c3d4 <_strtol_r>
 800b682:	9b04      	ldr	r3, [sp, #16]
 800b684:	9e05      	ldr	r6, [sp, #20]
 800b686:	1ac2      	subs	r2, r0, r3
 800b688:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b68c:	429e      	cmp	r6, r3
 800b68e:	bf28      	it	cs
 800b690:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b694:	490e      	ldr	r1, [pc, #56]	; (800b6d0 <_scanf_float+0x404>)
 800b696:	4630      	mov	r0, r6
 800b698:	f000 f824 	bl	800b6e4 <siprintf>
 800b69c:	e7d2      	b.n	800b644 <_scanf_float+0x378>
 800b69e:	9903      	ldr	r1, [sp, #12]
 800b6a0:	f012 0f04 	tst.w	r2, #4
 800b6a4:	f103 0204 	add.w	r2, r3, #4
 800b6a8:	600a      	str	r2, [r1, #0]
 800b6aa:	d1d9      	bne.n	800b660 <_scanf_float+0x394>
 800b6ac:	eeb4 0b40 	vcmp.f64	d0, d0
 800b6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b4:	681e      	ldr	r6, [r3, #0]
 800b6b6:	d705      	bvc.n	800b6c4 <_scanf_float+0x3f8>
 800b6b8:	4806      	ldr	r0, [pc, #24]	; (800b6d4 <_scanf_float+0x408>)
 800b6ba:	f000 f80d 	bl	800b6d8 <nanf>
 800b6be:	ed86 0a00 	vstr	s0, [r6]
 800b6c2:	e7d0      	b.n	800b666 <_scanf_float+0x39a>
 800b6c4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b6c8:	e7f9      	b.n	800b6be <_scanf_float+0x3f2>
 800b6ca:	2500      	movs	r5, #0
 800b6cc:	e63f      	b.n	800b34e <_scanf_float+0x82>
 800b6ce:	bf00      	nop
 800b6d0:	0800f230 	.word	0x0800f230
 800b6d4:	0800f638 	.word	0x0800f638

0800b6d8 <nanf>:
 800b6d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b6e0 <nanf+0x8>
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	7fc00000 	.word	0x7fc00000

0800b6e4 <siprintf>:
 800b6e4:	b40e      	push	{r1, r2, r3}
 800b6e6:	b500      	push	{lr}
 800b6e8:	b09c      	sub	sp, #112	; 0x70
 800b6ea:	ab1d      	add	r3, sp, #116	; 0x74
 800b6ec:	9002      	str	r0, [sp, #8]
 800b6ee:	9006      	str	r0, [sp, #24]
 800b6f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6f4:	4809      	ldr	r0, [pc, #36]	; (800b71c <siprintf+0x38>)
 800b6f6:	9107      	str	r1, [sp, #28]
 800b6f8:	9104      	str	r1, [sp, #16]
 800b6fa:	4909      	ldr	r1, [pc, #36]	; (800b720 <siprintf+0x3c>)
 800b6fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b700:	9105      	str	r1, [sp, #20]
 800b702:	6800      	ldr	r0, [r0, #0]
 800b704:	9301      	str	r3, [sp, #4]
 800b706:	a902      	add	r1, sp, #8
 800b708:	f002 fdfe 	bl	800e308 <_svfiprintf_r>
 800b70c:	9b02      	ldr	r3, [sp, #8]
 800b70e:	2200      	movs	r2, #0
 800b710:	701a      	strb	r2, [r3, #0]
 800b712:	b01c      	add	sp, #112	; 0x70
 800b714:	f85d eb04 	ldr.w	lr, [sp], #4
 800b718:	b003      	add	sp, #12
 800b71a:	4770      	bx	lr
 800b71c:	20000010 	.word	0x20000010
 800b720:	ffff0208 	.word	0xffff0208

0800b724 <sulp>:
 800b724:	b570      	push	{r4, r5, r6, lr}
 800b726:	4604      	mov	r4, r0
 800b728:	460d      	mov	r5, r1
 800b72a:	4616      	mov	r6, r2
 800b72c:	ec45 4b10 	vmov	d0, r4, r5
 800b730:	f002 fb4c 	bl	800ddcc <__ulp>
 800b734:	b17e      	cbz	r6, 800b756 <sulp+0x32>
 800b736:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b73a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b73e:	2b00      	cmp	r3, #0
 800b740:	dd09      	ble.n	800b756 <sulp+0x32>
 800b742:	051b      	lsls	r3, r3, #20
 800b744:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800b748:	2000      	movs	r0, #0
 800b74a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800b74e:	ec41 0b17 	vmov	d7, r0, r1
 800b752:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b756:	bd70      	pop	{r4, r5, r6, pc}

0800b758 <_strtod_l>:
 800b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	ed2d 8b0e 	vpush	{d8-d14}
 800b760:	b097      	sub	sp, #92	; 0x5c
 800b762:	461f      	mov	r7, r3
 800b764:	2300      	movs	r3, #0
 800b766:	9312      	str	r3, [sp, #72]	; 0x48
 800b768:	4ba1      	ldr	r3, [pc, #644]	; (800b9f0 <_strtod_l+0x298>)
 800b76a:	920d      	str	r2, [sp, #52]	; 0x34
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	9307      	str	r3, [sp, #28]
 800b770:	4604      	mov	r4, r0
 800b772:	4618      	mov	r0, r3
 800b774:	468b      	mov	fp, r1
 800b776:	f7f4 fd63 	bl	8000240 <strlen>
 800b77a:	f04f 0800 	mov.w	r8, #0
 800b77e:	4605      	mov	r5, r0
 800b780:	f04f 0900 	mov.w	r9, #0
 800b784:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800b788:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b78a:	7813      	ldrb	r3, [r2, #0]
 800b78c:	2b2b      	cmp	r3, #43	; 0x2b
 800b78e:	d04d      	beq.n	800b82c <_strtod_l+0xd4>
 800b790:	d83a      	bhi.n	800b808 <_strtod_l+0xb0>
 800b792:	2b0d      	cmp	r3, #13
 800b794:	d833      	bhi.n	800b7fe <_strtod_l+0xa6>
 800b796:	2b08      	cmp	r3, #8
 800b798:	d833      	bhi.n	800b802 <_strtod_l+0xaa>
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d03d      	beq.n	800b81a <_strtod_l+0xc2>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	9308      	str	r3, [sp, #32]
 800b7a2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800b7a4:	7833      	ldrb	r3, [r6, #0]
 800b7a6:	2b30      	cmp	r3, #48	; 0x30
 800b7a8:	f040 80b0 	bne.w	800b90c <_strtod_l+0x1b4>
 800b7ac:	7873      	ldrb	r3, [r6, #1]
 800b7ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b7b2:	2b58      	cmp	r3, #88	; 0x58
 800b7b4:	d167      	bne.n	800b886 <_strtod_l+0x12e>
 800b7b6:	9b08      	ldr	r3, [sp, #32]
 800b7b8:	9301      	str	r3, [sp, #4]
 800b7ba:	ab12      	add	r3, sp, #72	; 0x48
 800b7bc:	9702      	str	r7, [sp, #8]
 800b7be:	9300      	str	r3, [sp, #0]
 800b7c0:	4a8c      	ldr	r2, [pc, #560]	; (800b9f4 <_strtod_l+0x29c>)
 800b7c2:	ab13      	add	r3, sp, #76	; 0x4c
 800b7c4:	a911      	add	r1, sp, #68	; 0x44
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f001 fc68 	bl	800d09c <__gethex>
 800b7cc:	f010 0507 	ands.w	r5, r0, #7
 800b7d0:	4607      	mov	r7, r0
 800b7d2:	d005      	beq.n	800b7e0 <_strtod_l+0x88>
 800b7d4:	2d06      	cmp	r5, #6
 800b7d6:	d12b      	bne.n	800b830 <_strtod_l+0xd8>
 800b7d8:	3601      	adds	r6, #1
 800b7da:	2300      	movs	r3, #0
 800b7dc:	9611      	str	r6, [sp, #68]	; 0x44
 800b7de:	9308      	str	r3, [sp, #32]
 800b7e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	f040 854e 	bne.w	800c284 <_strtod_l+0xb2c>
 800b7e8:	9b08      	ldr	r3, [sp, #32]
 800b7ea:	b1e3      	cbz	r3, 800b826 <_strtod_l+0xce>
 800b7ec:	ec49 8b17 	vmov	d7, r8, r9
 800b7f0:	eeb1 0b47 	vneg.f64	d0, d7
 800b7f4:	b017      	add	sp, #92	; 0x5c
 800b7f6:	ecbd 8b0e 	vpop	{d8-d14}
 800b7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7fe:	2b20      	cmp	r3, #32
 800b800:	d1cd      	bne.n	800b79e <_strtod_l+0x46>
 800b802:	3201      	adds	r2, #1
 800b804:	9211      	str	r2, [sp, #68]	; 0x44
 800b806:	e7bf      	b.n	800b788 <_strtod_l+0x30>
 800b808:	2b2d      	cmp	r3, #45	; 0x2d
 800b80a:	d1c8      	bne.n	800b79e <_strtod_l+0x46>
 800b80c:	2301      	movs	r3, #1
 800b80e:	9308      	str	r3, [sp, #32]
 800b810:	1c53      	adds	r3, r2, #1
 800b812:	9311      	str	r3, [sp, #68]	; 0x44
 800b814:	7853      	ldrb	r3, [r2, #1]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1c3      	bne.n	800b7a2 <_strtod_l+0x4a>
 800b81a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b81c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800b820:	2b00      	cmp	r3, #0
 800b822:	f040 852d 	bne.w	800c280 <_strtod_l+0xb28>
 800b826:	ec49 8b10 	vmov	d0, r8, r9
 800b82a:	e7e3      	b.n	800b7f4 <_strtod_l+0x9c>
 800b82c:	2300      	movs	r3, #0
 800b82e:	e7ee      	b.n	800b80e <_strtod_l+0xb6>
 800b830:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b832:	b13a      	cbz	r2, 800b844 <_strtod_l+0xec>
 800b834:	2135      	movs	r1, #53	; 0x35
 800b836:	a814      	add	r0, sp, #80	; 0x50
 800b838:	f002 fbd0 	bl	800dfdc <__copybits>
 800b83c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b83e:	4620      	mov	r0, r4
 800b840:	f001 ff92 	bl	800d768 <_Bfree>
 800b844:	3d01      	subs	r5, #1
 800b846:	2d04      	cmp	r5, #4
 800b848:	d806      	bhi.n	800b858 <_strtod_l+0x100>
 800b84a:	e8df f005 	tbb	[pc, r5]
 800b84e:	030a      	.short	0x030a
 800b850:	1714      	.short	0x1714
 800b852:	0a          	.byte	0x0a
 800b853:	00          	.byte	0x00
 800b854:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800b858:	073f      	lsls	r7, r7, #28
 800b85a:	d5c1      	bpl.n	800b7e0 <_strtod_l+0x88>
 800b85c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800b860:	e7be      	b.n	800b7e0 <_strtod_l+0x88>
 800b862:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800b866:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b868:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b86c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b870:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b874:	e7f0      	b.n	800b858 <_strtod_l+0x100>
 800b876:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800b9f8 <_strtod_l+0x2a0>
 800b87a:	e7ed      	b.n	800b858 <_strtod_l+0x100>
 800b87c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b880:	f04f 38ff 	mov.w	r8, #4294967295
 800b884:	e7e8      	b.n	800b858 <_strtod_l+0x100>
 800b886:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b888:	1c5a      	adds	r2, r3, #1
 800b88a:	9211      	str	r2, [sp, #68]	; 0x44
 800b88c:	785b      	ldrb	r3, [r3, #1]
 800b88e:	2b30      	cmp	r3, #48	; 0x30
 800b890:	d0f9      	beq.n	800b886 <_strtod_l+0x12e>
 800b892:	2b00      	cmp	r3, #0
 800b894:	d0a4      	beq.n	800b7e0 <_strtod_l+0x88>
 800b896:	2301      	movs	r3, #1
 800b898:	f04f 0a00 	mov.w	sl, #0
 800b89c:	9304      	str	r3, [sp, #16]
 800b89e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b8a0:	930a      	str	r3, [sp, #40]	; 0x28
 800b8a2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b8a6:	f8cd a018 	str.w	sl, [sp, #24]
 800b8aa:	220a      	movs	r2, #10
 800b8ac:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b8ae:	7807      	ldrb	r7, [r0, #0]
 800b8b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b8b4:	b2d9      	uxtb	r1, r3
 800b8b6:	2909      	cmp	r1, #9
 800b8b8:	d92a      	bls.n	800b910 <_strtod_l+0x1b8>
 800b8ba:	9907      	ldr	r1, [sp, #28]
 800b8bc:	462a      	mov	r2, r5
 800b8be:	f002 fe3b 	bl	800e538 <strncmp>
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	d033      	beq.n	800b92e <_strtod_l+0x1d6>
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	9b06      	ldr	r3, [sp, #24]
 800b8ca:	463a      	mov	r2, r7
 800b8cc:	4601      	mov	r1, r0
 800b8ce:	4607      	mov	r7, r0
 800b8d0:	2a65      	cmp	r2, #101	; 0x65
 800b8d2:	d001      	beq.n	800b8d8 <_strtod_l+0x180>
 800b8d4:	2a45      	cmp	r2, #69	; 0x45
 800b8d6:	d117      	bne.n	800b908 <_strtod_l+0x1b0>
 800b8d8:	b91b      	cbnz	r3, 800b8e2 <_strtod_l+0x18a>
 800b8da:	9b04      	ldr	r3, [sp, #16]
 800b8dc:	4303      	orrs	r3, r0
 800b8de:	d09c      	beq.n	800b81a <_strtod_l+0xc2>
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800b8e6:	f10b 0201 	add.w	r2, fp, #1
 800b8ea:	9211      	str	r2, [sp, #68]	; 0x44
 800b8ec:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800b8f0:	2a2b      	cmp	r2, #43	; 0x2b
 800b8f2:	d071      	beq.n	800b9d8 <_strtod_l+0x280>
 800b8f4:	2a2d      	cmp	r2, #45	; 0x2d
 800b8f6:	d077      	beq.n	800b9e8 <_strtod_l+0x290>
 800b8f8:	f04f 0e00 	mov.w	lr, #0
 800b8fc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800b900:	2d09      	cmp	r5, #9
 800b902:	d97f      	bls.n	800ba04 <_strtod_l+0x2ac>
 800b904:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800b908:	2500      	movs	r5, #0
 800b90a:	e09b      	b.n	800ba44 <_strtod_l+0x2ec>
 800b90c:	2300      	movs	r3, #0
 800b90e:	e7c3      	b.n	800b898 <_strtod_l+0x140>
 800b910:	9906      	ldr	r1, [sp, #24]
 800b912:	2908      	cmp	r1, #8
 800b914:	bfdd      	ittte	le
 800b916:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b918:	fb02 3301 	mlale	r3, r2, r1, r3
 800b91c:	9309      	strle	r3, [sp, #36]	; 0x24
 800b91e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b922:	9b06      	ldr	r3, [sp, #24]
 800b924:	3001      	adds	r0, #1
 800b926:	3301      	adds	r3, #1
 800b928:	9306      	str	r3, [sp, #24]
 800b92a:	9011      	str	r0, [sp, #68]	; 0x44
 800b92c:	e7be      	b.n	800b8ac <_strtod_l+0x154>
 800b92e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b930:	195a      	adds	r2, r3, r5
 800b932:	9211      	str	r2, [sp, #68]	; 0x44
 800b934:	5d5a      	ldrb	r2, [r3, r5]
 800b936:	9b06      	ldr	r3, [sp, #24]
 800b938:	b3a3      	cbz	r3, 800b9a4 <_strtod_l+0x24c>
 800b93a:	4607      	mov	r7, r0
 800b93c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b940:	2909      	cmp	r1, #9
 800b942:	d912      	bls.n	800b96a <_strtod_l+0x212>
 800b944:	2101      	movs	r1, #1
 800b946:	e7c3      	b.n	800b8d0 <_strtod_l+0x178>
 800b948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b94a:	1c5a      	adds	r2, r3, #1
 800b94c:	9211      	str	r2, [sp, #68]	; 0x44
 800b94e:	785a      	ldrb	r2, [r3, #1]
 800b950:	3001      	adds	r0, #1
 800b952:	2a30      	cmp	r2, #48	; 0x30
 800b954:	d0f8      	beq.n	800b948 <_strtod_l+0x1f0>
 800b956:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b95a:	2b08      	cmp	r3, #8
 800b95c:	f200 8497 	bhi.w	800c28e <_strtod_l+0xb36>
 800b960:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b962:	930a      	str	r3, [sp, #40]	; 0x28
 800b964:	4607      	mov	r7, r0
 800b966:	2000      	movs	r0, #0
 800b968:	4603      	mov	r3, r0
 800b96a:	3a30      	subs	r2, #48	; 0x30
 800b96c:	f100 0101 	add.w	r1, r0, #1
 800b970:	d012      	beq.n	800b998 <_strtod_l+0x240>
 800b972:	440f      	add	r7, r1
 800b974:	eb00 0c03 	add.w	ip, r0, r3
 800b978:	4619      	mov	r1, r3
 800b97a:	250a      	movs	r5, #10
 800b97c:	4561      	cmp	r1, ip
 800b97e:	d113      	bne.n	800b9a8 <_strtod_l+0x250>
 800b980:	1819      	adds	r1, r3, r0
 800b982:	2908      	cmp	r1, #8
 800b984:	f103 0301 	add.w	r3, r3, #1
 800b988:	4403      	add	r3, r0
 800b98a:	dc1c      	bgt.n	800b9c6 <_strtod_l+0x26e>
 800b98c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b98e:	210a      	movs	r1, #10
 800b990:	fb01 2200 	mla	r2, r1, r0, r2
 800b994:	9209      	str	r2, [sp, #36]	; 0x24
 800b996:	2100      	movs	r1, #0
 800b998:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b99a:	1c50      	adds	r0, r2, #1
 800b99c:	9011      	str	r0, [sp, #68]	; 0x44
 800b99e:	7852      	ldrb	r2, [r2, #1]
 800b9a0:	4608      	mov	r0, r1
 800b9a2:	e7cb      	b.n	800b93c <_strtod_l+0x1e4>
 800b9a4:	9806      	ldr	r0, [sp, #24]
 800b9a6:	e7d4      	b.n	800b952 <_strtod_l+0x1fa>
 800b9a8:	2908      	cmp	r1, #8
 800b9aa:	dc04      	bgt.n	800b9b6 <_strtod_l+0x25e>
 800b9ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b9ae:	436e      	muls	r6, r5
 800b9b0:	9609      	str	r6, [sp, #36]	; 0x24
 800b9b2:	3101      	adds	r1, #1
 800b9b4:	e7e2      	b.n	800b97c <_strtod_l+0x224>
 800b9b6:	f101 0e01 	add.w	lr, r1, #1
 800b9ba:	f1be 0f10 	cmp.w	lr, #16
 800b9be:	bfd8      	it	le
 800b9c0:	fb05 fa0a 	mulle.w	sl, r5, sl
 800b9c4:	e7f5      	b.n	800b9b2 <_strtod_l+0x25a>
 800b9c6:	2b10      	cmp	r3, #16
 800b9c8:	bfdc      	itt	le
 800b9ca:	210a      	movle	r1, #10
 800b9cc:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800b9d0:	e7e1      	b.n	800b996 <_strtod_l+0x23e>
 800b9d2:	2700      	movs	r7, #0
 800b9d4:	2101      	movs	r1, #1
 800b9d6:	e780      	b.n	800b8da <_strtod_l+0x182>
 800b9d8:	f04f 0e00 	mov.w	lr, #0
 800b9dc:	f10b 0202 	add.w	r2, fp, #2
 800b9e0:	9211      	str	r2, [sp, #68]	; 0x44
 800b9e2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800b9e6:	e789      	b.n	800b8fc <_strtod_l+0x1a4>
 800b9e8:	f04f 0e01 	mov.w	lr, #1
 800b9ec:	e7f6      	b.n	800b9dc <_strtod_l+0x284>
 800b9ee:	bf00      	nop
 800b9f0:	0800f480 	.word	0x0800f480
 800b9f4:	0800f238 	.word	0x0800f238
 800b9f8:	7ff00000 	.word	0x7ff00000
 800b9fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b9fe:	1c55      	adds	r5, r2, #1
 800ba00:	9511      	str	r5, [sp, #68]	; 0x44
 800ba02:	7852      	ldrb	r2, [r2, #1]
 800ba04:	2a30      	cmp	r2, #48	; 0x30
 800ba06:	d0f9      	beq.n	800b9fc <_strtod_l+0x2a4>
 800ba08:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800ba0c:	2d08      	cmp	r5, #8
 800ba0e:	f63f af7b 	bhi.w	800b908 <_strtod_l+0x1b0>
 800ba12:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ba16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ba18:	9207      	str	r2, [sp, #28]
 800ba1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ba1c:	1c55      	adds	r5, r2, #1
 800ba1e:	9511      	str	r5, [sp, #68]	; 0x44
 800ba20:	7852      	ldrb	r2, [r2, #1]
 800ba22:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ba26:	2e09      	cmp	r6, #9
 800ba28:	d937      	bls.n	800ba9a <_strtod_l+0x342>
 800ba2a:	9e07      	ldr	r6, [sp, #28]
 800ba2c:	1bad      	subs	r5, r5, r6
 800ba2e:	2d08      	cmp	r5, #8
 800ba30:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800ba34:	dc02      	bgt.n	800ba3c <_strtod_l+0x2e4>
 800ba36:	4565      	cmp	r5, ip
 800ba38:	bfa8      	it	ge
 800ba3a:	4665      	movge	r5, ip
 800ba3c:	f1be 0f00 	cmp.w	lr, #0
 800ba40:	d000      	beq.n	800ba44 <_strtod_l+0x2ec>
 800ba42:	426d      	negs	r5, r5
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d14d      	bne.n	800bae4 <_strtod_l+0x38c>
 800ba48:	9b04      	ldr	r3, [sp, #16]
 800ba4a:	4303      	orrs	r3, r0
 800ba4c:	f47f aec8 	bne.w	800b7e0 <_strtod_l+0x88>
 800ba50:	2900      	cmp	r1, #0
 800ba52:	f47f aee2 	bne.w	800b81a <_strtod_l+0xc2>
 800ba56:	2a69      	cmp	r2, #105	; 0x69
 800ba58:	d027      	beq.n	800baaa <_strtod_l+0x352>
 800ba5a:	dc24      	bgt.n	800baa6 <_strtod_l+0x34e>
 800ba5c:	2a49      	cmp	r2, #73	; 0x49
 800ba5e:	d024      	beq.n	800baaa <_strtod_l+0x352>
 800ba60:	2a4e      	cmp	r2, #78	; 0x4e
 800ba62:	f47f aeda 	bne.w	800b81a <_strtod_l+0xc2>
 800ba66:	4996      	ldr	r1, [pc, #600]	; (800bcc0 <_strtod_l+0x568>)
 800ba68:	a811      	add	r0, sp, #68	; 0x44
 800ba6a:	f001 fd6f 	bl	800d54c <__match>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	f43f aed3 	beq.w	800b81a <_strtod_l+0xc2>
 800ba74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	2b28      	cmp	r3, #40	; 0x28
 800ba7a:	d12d      	bne.n	800bad8 <_strtod_l+0x380>
 800ba7c:	4991      	ldr	r1, [pc, #580]	; (800bcc4 <_strtod_l+0x56c>)
 800ba7e:	aa14      	add	r2, sp, #80	; 0x50
 800ba80:	a811      	add	r0, sp, #68	; 0x44
 800ba82:	f001 fd77 	bl	800d574 <__hexnan>
 800ba86:	2805      	cmp	r0, #5
 800ba88:	d126      	bne.n	800bad8 <_strtod_l+0x380>
 800ba8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba8c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ba90:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ba94:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ba98:	e6a2      	b.n	800b7e0 <_strtod_l+0x88>
 800ba9a:	250a      	movs	r5, #10
 800ba9c:	fb05 250c 	mla	r5, r5, ip, r2
 800baa0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800baa4:	e7b9      	b.n	800ba1a <_strtod_l+0x2c2>
 800baa6:	2a6e      	cmp	r2, #110	; 0x6e
 800baa8:	e7db      	b.n	800ba62 <_strtod_l+0x30a>
 800baaa:	4987      	ldr	r1, [pc, #540]	; (800bcc8 <_strtod_l+0x570>)
 800baac:	a811      	add	r0, sp, #68	; 0x44
 800baae:	f001 fd4d 	bl	800d54c <__match>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	f43f aeb1 	beq.w	800b81a <_strtod_l+0xc2>
 800bab8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800baba:	4984      	ldr	r1, [pc, #528]	; (800bccc <_strtod_l+0x574>)
 800babc:	3b01      	subs	r3, #1
 800babe:	a811      	add	r0, sp, #68	; 0x44
 800bac0:	9311      	str	r3, [sp, #68]	; 0x44
 800bac2:	f001 fd43 	bl	800d54c <__match>
 800bac6:	b910      	cbnz	r0, 800bace <_strtod_l+0x376>
 800bac8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800baca:	3301      	adds	r3, #1
 800bacc:	9311      	str	r3, [sp, #68]	; 0x44
 800bace:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800bce0 <_strtod_l+0x588>
 800bad2:	f04f 0800 	mov.w	r8, #0
 800bad6:	e683      	b.n	800b7e0 <_strtod_l+0x88>
 800bad8:	487d      	ldr	r0, [pc, #500]	; (800bcd0 <_strtod_l+0x578>)
 800bada:	f002 fd15 	bl	800e508 <nan>
 800bade:	ec59 8b10 	vmov	r8, r9, d0
 800bae2:	e67d      	b.n	800b7e0 <_strtod_l+0x88>
 800bae4:	1bea      	subs	r2, r5, r7
 800bae6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800baea:	9207      	str	r2, [sp, #28]
 800baec:	9a06      	ldr	r2, [sp, #24]
 800baee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800baf2:	2a00      	cmp	r2, #0
 800baf4:	bf08      	it	eq
 800baf6:	461a      	moveq	r2, r3
 800baf8:	2b10      	cmp	r3, #16
 800bafa:	9206      	str	r2, [sp, #24]
 800bafc:	461a      	mov	r2, r3
 800bafe:	bfa8      	it	ge
 800bb00:	2210      	movge	r2, #16
 800bb02:	2b09      	cmp	r3, #9
 800bb04:	ec59 8b17 	vmov	r8, r9, d7
 800bb08:	dd0c      	ble.n	800bb24 <_strtod_l+0x3cc>
 800bb0a:	4972      	ldr	r1, [pc, #456]	; (800bcd4 <_strtod_l+0x57c>)
 800bb0c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800bb10:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800bb14:	ee06 aa90 	vmov	s13, sl
 800bb18:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800bb1c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bb20:	ec59 8b16 	vmov	r8, r9, d6
 800bb24:	2b0f      	cmp	r3, #15
 800bb26:	dc36      	bgt.n	800bb96 <_strtod_l+0x43e>
 800bb28:	9907      	ldr	r1, [sp, #28]
 800bb2a:	2900      	cmp	r1, #0
 800bb2c:	f43f ae58 	beq.w	800b7e0 <_strtod_l+0x88>
 800bb30:	dd23      	ble.n	800bb7a <_strtod_l+0x422>
 800bb32:	2916      	cmp	r1, #22
 800bb34:	dc0b      	bgt.n	800bb4e <_strtod_l+0x3f6>
 800bb36:	4b67      	ldr	r3, [pc, #412]	; (800bcd4 <_strtod_l+0x57c>)
 800bb38:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800bb3c:	ed93 7b00 	vldr	d7, [r3]
 800bb40:	ec49 8b16 	vmov	d6, r8, r9
 800bb44:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb48:	ec59 8b17 	vmov	r8, r9, d7
 800bb4c:	e648      	b.n	800b7e0 <_strtod_l+0x88>
 800bb4e:	9807      	ldr	r0, [sp, #28]
 800bb50:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800bb54:	4281      	cmp	r1, r0
 800bb56:	db1e      	blt.n	800bb96 <_strtod_l+0x43e>
 800bb58:	4a5e      	ldr	r2, [pc, #376]	; (800bcd4 <_strtod_l+0x57c>)
 800bb5a:	f1c3 030f 	rsb	r3, r3, #15
 800bb5e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800bb62:	ed91 7b00 	vldr	d7, [r1]
 800bb66:	ec49 8b16 	vmov	d6, r8, r9
 800bb6a:	1ac3      	subs	r3, r0, r3
 800bb6c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bb70:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb74:	ed92 6b00 	vldr	d6, [r2]
 800bb78:	e7e4      	b.n	800bb44 <_strtod_l+0x3ec>
 800bb7a:	9907      	ldr	r1, [sp, #28]
 800bb7c:	3116      	adds	r1, #22
 800bb7e:	db0a      	blt.n	800bb96 <_strtod_l+0x43e>
 800bb80:	4b54      	ldr	r3, [pc, #336]	; (800bcd4 <_strtod_l+0x57c>)
 800bb82:	1b7d      	subs	r5, r7, r5
 800bb84:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bb88:	ed95 7b00 	vldr	d7, [r5]
 800bb8c:	ec49 8b16 	vmov	d6, r8, r9
 800bb90:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bb94:	e7d8      	b.n	800bb48 <_strtod_l+0x3f0>
 800bb96:	9907      	ldr	r1, [sp, #28]
 800bb98:	1a9a      	subs	r2, r3, r2
 800bb9a:	440a      	add	r2, r1
 800bb9c:	2a00      	cmp	r2, #0
 800bb9e:	dd6f      	ble.n	800bc80 <_strtod_l+0x528>
 800bba0:	f012 000f 	ands.w	r0, r2, #15
 800bba4:	d00a      	beq.n	800bbbc <_strtod_l+0x464>
 800bba6:	494b      	ldr	r1, [pc, #300]	; (800bcd4 <_strtod_l+0x57c>)
 800bba8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bbac:	ed91 7b00 	vldr	d7, [r1]
 800bbb0:	ec49 8b16 	vmov	d6, r8, r9
 800bbb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bbb8:	ec59 8b17 	vmov	r8, r9, d7
 800bbbc:	f032 020f 	bics.w	r2, r2, #15
 800bbc0:	d04f      	beq.n	800bc62 <_strtod_l+0x50a>
 800bbc2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800bbc6:	dd22      	ble.n	800bc0e <_strtod_l+0x4b6>
 800bbc8:	2500      	movs	r5, #0
 800bbca:	462e      	mov	r6, r5
 800bbcc:	9506      	str	r5, [sp, #24]
 800bbce:	462f      	mov	r7, r5
 800bbd0:	2322      	movs	r3, #34	; 0x22
 800bbd2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800bce0 <_strtod_l+0x588>
 800bbd6:	6023      	str	r3, [r4, #0]
 800bbd8:	f04f 0800 	mov.w	r8, #0
 800bbdc:	9b06      	ldr	r3, [sp, #24]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f43f adfe 	beq.w	800b7e0 <_strtod_l+0x88>
 800bbe4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	f001 fdbe 	bl	800d768 <_Bfree>
 800bbec:	4639      	mov	r1, r7
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f001 fdba 	bl	800d768 <_Bfree>
 800bbf4:	4631      	mov	r1, r6
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f001 fdb6 	bl	800d768 <_Bfree>
 800bbfc:	9906      	ldr	r1, [sp, #24]
 800bbfe:	4620      	mov	r0, r4
 800bc00:	f001 fdb2 	bl	800d768 <_Bfree>
 800bc04:	4629      	mov	r1, r5
 800bc06:	4620      	mov	r0, r4
 800bc08:	f001 fdae 	bl	800d768 <_Bfree>
 800bc0c:	e5e8      	b.n	800b7e0 <_strtod_l+0x88>
 800bc0e:	2000      	movs	r0, #0
 800bc10:	ec49 8b17 	vmov	d7, r8, r9
 800bc14:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800bcd8 <_strtod_l+0x580>
 800bc18:	1112      	asrs	r2, r2, #4
 800bc1a:	4601      	mov	r1, r0
 800bc1c:	2a01      	cmp	r2, #1
 800bc1e:	dc23      	bgt.n	800bc68 <_strtod_l+0x510>
 800bc20:	b108      	cbz	r0, 800bc26 <_strtod_l+0x4ce>
 800bc22:	ec59 8b17 	vmov	r8, r9, d7
 800bc26:	4a2c      	ldr	r2, [pc, #176]	; (800bcd8 <_strtod_l+0x580>)
 800bc28:	482c      	ldr	r0, [pc, #176]	; (800bcdc <_strtod_l+0x584>)
 800bc2a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bc2e:	ed92 7b00 	vldr	d7, [r2]
 800bc32:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bc36:	ec49 8b16 	vmov	d6, r8, r9
 800bc3a:	4a29      	ldr	r2, [pc, #164]	; (800bce0 <_strtod_l+0x588>)
 800bc3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bc40:	ee17 1a90 	vmov	r1, s15
 800bc44:	400a      	ands	r2, r1
 800bc46:	4282      	cmp	r2, r0
 800bc48:	ec59 8b17 	vmov	r8, r9, d7
 800bc4c:	d8bc      	bhi.n	800bbc8 <_strtod_l+0x470>
 800bc4e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800bc52:	4282      	cmp	r2, r0
 800bc54:	bf86      	itte	hi
 800bc56:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800bce4 <_strtod_l+0x58c>
 800bc5a:	f04f 38ff 	movhi.w	r8, #4294967295
 800bc5e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800bc62:	2200      	movs	r2, #0
 800bc64:	9204      	str	r2, [sp, #16]
 800bc66:	e078      	b.n	800bd5a <_strtod_l+0x602>
 800bc68:	07d6      	lsls	r6, r2, #31
 800bc6a:	d504      	bpl.n	800bc76 <_strtod_l+0x51e>
 800bc6c:	ed9c 6b00 	vldr	d6, [ip]
 800bc70:	2001      	movs	r0, #1
 800bc72:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bc76:	3101      	adds	r1, #1
 800bc78:	1052      	asrs	r2, r2, #1
 800bc7a:	f10c 0c08 	add.w	ip, ip, #8
 800bc7e:	e7cd      	b.n	800bc1c <_strtod_l+0x4c4>
 800bc80:	d0ef      	beq.n	800bc62 <_strtod_l+0x50a>
 800bc82:	4252      	negs	r2, r2
 800bc84:	f012 000f 	ands.w	r0, r2, #15
 800bc88:	d00a      	beq.n	800bca0 <_strtod_l+0x548>
 800bc8a:	4912      	ldr	r1, [pc, #72]	; (800bcd4 <_strtod_l+0x57c>)
 800bc8c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bc90:	ed91 7b00 	vldr	d7, [r1]
 800bc94:	ec49 8b16 	vmov	d6, r8, r9
 800bc98:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bc9c:	ec59 8b17 	vmov	r8, r9, d7
 800bca0:	1112      	asrs	r2, r2, #4
 800bca2:	d0de      	beq.n	800bc62 <_strtod_l+0x50a>
 800bca4:	2a1f      	cmp	r2, #31
 800bca6:	dd1f      	ble.n	800bce8 <_strtod_l+0x590>
 800bca8:	2500      	movs	r5, #0
 800bcaa:	462e      	mov	r6, r5
 800bcac:	9506      	str	r5, [sp, #24]
 800bcae:	462f      	mov	r7, r5
 800bcb0:	2322      	movs	r3, #34	; 0x22
 800bcb2:	f04f 0800 	mov.w	r8, #0
 800bcb6:	f04f 0900 	mov.w	r9, #0
 800bcba:	6023      	str	r3, [r4, #0]
 800bcbc:	e78e      	b.n	800bbdc <_strtod_l+0x484>
 800bcbe:	bf00      	nop
 800bcc0:	0800f209 	.word	0x0800f209
 800bcc4:	0800f24c 	.word	0x0800f24c
 800bcc8:	0800f201 	.word	0x0800f201
 800bccc:	0800f38c 	.word	0x0800f38c
 800bcd0:	0800f638 	.word	0x0800f638
 800bcd4:	0800f518 	.word	0x0800f518
 800bcd8:	0800f4f0 	.word	0x0800f4f0
 800bcdc:	7ca00000 	.word	0x7ca00000
 800bce0:	7ff00000 	.word	0x7ff00000
 800bce4:	7fefffff 	.word	0x7fefffff
 800bce8:	f012 0110 	ands.w	r1, r2, #16
 800bcec:	bf18      	it	ne
 800bcee:	216a      	movne	r1, #106	; 0x6a
 800bcf0:	9104      	str	r1, [sp, #16]
 800bcf2:	ec49 8b17 	vmov	d7, r8, r9
 800bcf6:	49be      	ldr	r1, [pc, #760]	; (800bff0 <_strtod_l+0x898>)
 800bcf8:	2000      	movs	r0, #0
 800bcfa:	07d6      	lsls	r6, r2, #31
 800bcfc:	d504      	bpl.n	800bd08 <_strtod_l+0x5b0>
 800bcfe:	ed91 6b00 	vldr	d6, [r1]
 800bd02:	2001      	movs	r0, #1
 800bd04:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bd08:	1052      	asrs	r2, r2, #1
 800bd0a:	f101 0108 	add.w	r1, r1, #8
 800bd0e:	d1f4      	bne.n	800bcfa <_strtod_l+0x5a2>
 800bd10:	b108      	cbz	r0, 800bd16 <_strtod_l+0x5be>
 800bd12:	ec59 8b17 	vmov	r8, r9, d7
 800bd16:	9a04      	ldr	r2, [sp, #16]
 800bd18:	b1c2      	cbz	r2, 800bd4c <_strtod_l+0x5f4>
 800bd1a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800bd1e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800bd22:	2a00      	cmp	r2, #0
 800bd24:	4648      	mov	r0, r9
 800bd26:	dd11      	ble.n	800bd4c <_strtod_l+0x5f4>
 800bd28:	2a1f      	cmp	r2, #31
 800bd2a:	f340 812e 	ble.w	800bf8a <_strtod_l+0x832>
 800bd2e:	2a34      	cmp	r2, #52	; 0x34
 800bd30:	bfde      	ittt	le
 800bd32:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800bd36:	f04f 32ff 	movle.w	r2, #4294967295
 800bd3a:	fa02 f101 	lslle.w	r1, r2, r1
 800bd3e:	f04f 0800 	mov.w	r8, #0
 800bd42:	bfcc      	ite	gt
 800bd44:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bd48:	ea01 0900 	andle.w	r9, r1, r0
 800bd4c:	ec49 8b17 	vmov	d7, r8, r9
 800bd50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd58:	d0a6      	beq.n	800bca8 <_strtod_l+0x550>
 800bd5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd5c:	9200      	str	r2, [sp, #0]
 800bd5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bd60:	9a06      	ldr	r2, [sp, #24]
 800bd62:	4620      	mov	r0, r4
 800bd64:	f001 fd68 	bl	800d838 <__s2b>
 800bd68:	9006      	str	r0, [sp, #24]
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	f43f af2c 	beq.w	800bbc8 <_strtod_l+0x470>
 800bd70:	9b07      	ldr	r3, [sp, #28]
 800bd72:	1b7d      	subs	r5, r7, r5
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	bfb4      	ite	lt
 800bd78:	462b      	movlt	r3, r5
 800bd7a:	2300      	movge	r3, #0
 800bd7c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd7e:	9b07      	ldr	r3, [sp, #28]
 800bd80:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800bfd0 <_strtod_l+0x878>
 800bd84:	ed9f ab94 	vldr	d10, [pc, #592]	; 800bfd8 <_strtod_l+0x880>
 800bd88:	ed9f bb95 	vldr	d11, [pc, #596]	; 800bfe0 <_strtod_l+0x888>
 800bd8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bd90:	2500      	movs	r5, #0
 800bd92:	930c      	str	r3, [sp, #48]	; 0x30
 800bd94:	462e      	mov	r6, r5
 800bd96:	9b06      	ldr	r3, [sp, #24]
 800bd98:	4620      	mov	r0, r4
 800bd9a:	6859      	ldr	r1, [r3, #4]
 800bd9c:	f001 fca4 	bl	800d6e8 <_Balloc>
 800bda0:	4607      	mov	r7, r0
 800bda2:	2800      	cmp	r0, #0
 800bda4:	f43f af14 	beq.w	800bbd0 <_strtod_l+0x478>
 800bda8:	9b06      	ldr	r3, [sp, #24]
 800bdaa:	691a      	ldr	r2, [r3, #16]
 800bdac:	3202      	adds	r2, #2
 800bdae:	f103 010c 	add.w	r1, r3, #12
 800bdb2:	0092      	lsls	r2, r2, #2
 800bdb4:	300c      	adds	r0, #12
 800bdb6:	f7fe fe2f 	bl	800aa18 <memcpy>
 800bdba:	ec49 8b10 	vmov	d0, r8, r9
 800bdbe:	aa14      	add	r2, sp, #80	; 0x50
 800bdc0:	a913      	add	r1, sp, #76	; 0x4c
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f002 f87e 	bl	800dec4 <__d2b>
 800bdc8:	ec49 8b18 	vmov	d8, r8, r9
 800bdcc:	9012      	str	r0, [sp, #72]	; 0x48
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	f43f aefe 	beq.w	800bbd0 <_strtod_l+0x478>
 800bdd4:	2101      	movs	r1, #1
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f001 fdc8 	bl	800d96c <__i2b>
 800bddc:	4606      	mov	r6, r0
 800bdde:	2800      	cmp	r0, #0
 800bde0:	f43f aef6 	beq.w	800bbd0 <_strtod_l+0x478>
 800bde4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bde6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	bfab      	itete	ge
 800bdec:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800bdee:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800bdf0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800bdf4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800bdf8:	bfac      	ite	ge
 800bdfa:	eb03 0b02 	addge.w	fp, r3, r2
 800bdfe:	eba2 0a03 	sublt.w	sl, r2, r3
 800be02:	9a04      	ldr	r2, [sp, #16]
 800be04:	1a9b      	subs	r3, r3, r2
 800be06:	440b      	add	r3, r1
 800be08:	4a7a      	ldr	r2, [pc, #488]	; (800bff4 <_strtod_l+0x89c>)
 800be0a:	3b01      	subs	r3, #1
 800be0c:	4293      	cmp	r3, r2
 800be0e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800be12:	f280 80cd 	bge.w	800bfb0 <_strtod_l+0x858>
 800be16:	1ad2      	subs	r2, r2, r3
 800be18:	2a1f      	cmp	r2, #31
 800be1a:	eba1 0102 	sub.w	r1, r1, r2
 800be1e:	f04f 0001 	mov.w	r0, #1
 800be22:	f300 80b9 	bgt.w	800bf98 <_strtod_l+0x840>
 800be26:	fa00 f302 	lsl.w	r3, r0, r2
 800be2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800be2c:	2300      	movs	r3, #0
 800be2e:	930a      	str	r3, [sp, #40]	; 0x28
 800be30:	eb0b 0301 	add.w	r3, fp, r1
 800be34:	9a04      	ldr	r2, [sp, #16]
 800be36:	459b      	cmp	fp, r3
 800be38:	448a      	add	sl, r1
 800be3a:	4492      	add	sl, r2
 800be3c:	465a      	mov	r2, fp
 800be3e:	bfa8      	it	ge
 800be40:	461a      	movge	r2, r3
 800be42:	4552      	cmp	r2, sl
 800be44:	bfa8      	it	ge
 800be46:	4652      	movge	r2, sl
 800be48:	2a00      	cmp	r2, #0
 800be4a:	bfc2      	ittt	gt
 800be4c:	1a9b      	subgt	r3, r3, r2
 800be4e:	ebaa 0a02 	subgt.w	sl, sl, r2
 800be52:	ebab 0b02 	subgt.w	fp, fp, r2
 800be56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be58:	2a00      	cmp	r2, #0
 800be5a:	dd18      	ble.n	800be8e <_strtod_l+0x736>
 800be5c:	4631      	mov	r1, r6
 800be5e:	4620      	mov	r0, r4
 800be60:	930f      	str	r3, [sp, #60]	; 0x3c
 800be62:	f001 fe43 	bl	800daec <__pow5mult>
 800be66:	4606      	mov	r6, r0
 800be68:	2800      	cmp	r0, #0
 800be6a:	f43f aeb1 	beq.w	800bbd0 <_strtod_l+0x478>
 800be6e:	4601      	mov	r1, r0
 800be70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be72:	4620      	mov	r0, r4
 800be74:	f001 fd90 	bl	800d998 <__multiply>
 800be78:	900e      	str	r0, [sp, #56]	; 0x38
 800be7a:	2800      	cmp	r0, #0
 800be7c:	f43f aea8 	beq.w	800bbd0 <_strtod_l+0x478>
 800be80:	9912      	ldr	r1, [sp, #72]	; 0x48
 800be82:	4620      	mov	r0, r4
 800be84:	f001 fc70 	bl	800d768 <_Bfree>
 800be88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be8c:	9212      	str	r2, [sp, #72]	; 0x48
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f300 8093 	bgt.w	800bfba <_strtod_l+0x862>
 800be94:	9b07      	ldr	r3, [sp, #28]
 800be96:	2b00      	cmp	r3, #0
 800be98:	dd08      	ble.n	800beac <_strtod_l+0x754>
 800be9a:	4639      	mov	r1, r7
 800be9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be9e:	4620      	mov	r0, r4
 800bea0:	f001 fe24 	bl	800daec <__pow5mult>
 800bea4:	4607      	mov	r7, r0
 800bea6:	2800      	cmp	r0, #0
 800bea8:	f43f ae92 	beq.w	800bbd0 <_strtod_l+0x478>
 800beac:	f1ba 0f00 	cmp.w	sl, #0
 800beb0:	dd08      	ble.n	800bec4 <_strtod_l+0x76c>
 800beb2:	4639      	mov	r1, r7
 800beb4:	4652      	mov	r2, sl
 800beb6:	4620      	mov	r0, r4
 800beb8:	f001 fe72 	bl	800dba0 <__lshift>
 800bebc:	4607      	mov	r7, r0
 800bebe:	2800      	cmp	r0, #0
 800bec0:	f43f ae86 	beq.w	800bbd0 <_strtod_l+0x478>
 800bec4:	f1bb 0f00 	cmp.w	fp, #0
 800bec8:	dd08      	ble.n	800bedc <_strtod_l+0x784>
 800beca:	4631      	mov	r1, r6
 800becc:	465a      	mov	r2, fp
 800bece:	4620      	mov	r0, r4
 800bed0:	f001 fe66 	bl	800dba0 <__lshift>
 800bed4:	4606      	mov	r6, r0
 800bed6:	2800      	cmp	r0, #0
 800bed8:	f43f ae7a 	beq.w	800bbd0 <_strtod_l+0x478>
 800bedc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bede:	463a      	mov	r2, r7
 800bee0:	4620      	mov	r0, r4
 800bee2:	f001 fee9 	bl	800dcb8 <__mdiff>
 800bee6:	4605      	mov	r5, r0
 800bee8:	2800      	cmp	r0, #0
 800beea:	f43f ae71 	beq.w	800bbd0 <_strtod_l+0x478>
 800beee:	2300      	movs	r3, #0
 800bef0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800bef4:	60c3      	str	r3, [r0, #12]
 800bef6:	4631      	mov	r1, r6
 800bef8:	f001 fec2 	bl	800dc80 <__mcmp>
 800befc:	2800      	cmp	r0, #0
 800befe:	da7d      	bge.n	800bffc <_strtod_l+0x8a4>
 800bf00:	ea5a 0308 	orrs.w	r3, sl, r8
 800bf04:	f040 80a3 	bne.w	800c04e <_strtod_l+0x8f6>
 800bf08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f040 809e 	bne.w	800c04e <_strtod_l+0x8f6>
 800bf12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf16:	0d1b      	lsrs	r3, r3, #20
 800bf18:	051b      	lsls	r3, r3, #20
 800bf1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bf1e:	f240 8096 	bls.w	800c04e <_strtod_l+0x8f6>
 800bf22:	696b      	ldr	r3, [r5, #20]
 800bf24:	b91b      	cbnz	r3, 800bf2e <_strtod_l+0x7d6>
 800bf26:	692b      	ldr	r3, [r5, #16]
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	f340 8090 	ble.w	800c04e <_strtod_l+0x8f6>
 800bf2e:	4629      	mov	r1, r5
 800bf30:	2201      	movs	r2, #1
 800bf32:	4620      	mov	r0, r4
 800bf34:	f001 fe34 	bl	800dba0 <__lshift>
 800bf38:	4631      	mov	r1, r6
 800bf3a:	4605      	mov	r5, r0
 800bf3c:	f001 fea0 	bl	800dc80 <__mcmp>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	f340 8084 	ble.w	800c04e <_strtod_l+0x8f6>
 800bf46:	9904      	ldr	r1, [sp, #16]
 800bf48:	4a2b      	ldr	r2, [pc, #172]	; (800bff8 <_strtod_l+0x8a0>)
 800bf4a:	464b      	mov	r3, r9
 800bf4c:	2900      	cmp	r1, #0
 800bf4e:	f000 809d 	beq.w	800c08c <_strtod_l+0x934>
 800bf52:	ea02 0109 	and.w	r1, r2, r9
 800bf56:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bf5a:	f300 8097 	bgt.w	800c08c <_strtod_l+0x934>
 800bf5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bf62:	f77f aea5 	ble.w	800bcb0 <_strtod_l+0x558>
 800bf66:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800bfe8 <_strtod_l+0x890>
 800bf6a:	ec49 8b16 	vmov	d6, r8, r9
 800bf6e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bf72:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bf76:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	bf08      	it	eq
 800bf7e:	2322      	moveq	r3, #34	; 0x22
 800bf80:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bf84:	bf08      	it	eq
 800bf86:	6023      	streq	r3, [r4, #0]
 800bf88:	e62c      	b.n	800bbe4 <_strtod_l+0x48c>
 800bf8a:	f04f 31ff 	mov.w	r1, #4294967295
 800bf8e:	fa01 f202 	lsl.w	r2, r1, r2
 800bf92:	ea02 0808 	and.w	r8, r2, r8
 800bf96:	e6d9      	b.n	800bd4c <_strtod_l+0x5f4>
 800bf98:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800bf9c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800bfa0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800bfa4:	33e2      	adds	r3, #226	; 0xe2
 800bfa6:	fa00 f303 	lsl.w	r3, r0, r3
 800bfaa:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800bfae:	e73f      	b.n	800be30 <_strtod_l+0x6d8>
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bfb8:	e73a      	b.n	800be30 <_strtod_l+0x6d8>
 800bfba:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f001 fdee 	bl	800dba0 <__lshift>
 800bfc4:	9012      	str	r0, [sp, #72]	; 0x48
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	f47f af64 	bne.w	800be94 <_strtod_l+0x73c>
 800bfcc:	e600      	b.n	800bbd0 <_strtod_l+0x478>
 800bfce:	bf00      	nop
 800bfd0:	94a03595 	.word	0x94a03595
 800bfd4:	3fcfffff 	.word	0x3fcfffff
 800bfd8:	94a03595 	.word	0x94a03595
 800bfdc:	3fdfffff 	.word	0x3fdfffff
 800bfe0:	35afe535 	.word	0x35afe535
 800bfe4:	3fe00000 	.word	0x3fe00000
 800bfe8:	00000000 	.word	0x00000000
 800bfec:	39500000 	.word	0x39500000
 800bff0:	0800f260 	.word	0x0800f260
 800bff4:	fffffc02 	.word	0xfffffc02
 800bff8:	7ff00000 	.word	0x7ff00000
 800bffc:	46cb      	mov	fp, r9
 800bffe:	d15f      	bne.n	800c0c0 <_strtod_l+0x968>
 800c000:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c004:	f1ba 0f00 	cmp.w	sl, #0
 800c008:	d02a      	beq.n	800c060 <_strtod_l+0x908>
 800c00a:	4aa7      	ldr	r2, [pc, #668]	; (800c2a8 <_strtod_l+0xb50>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d12b      	bne.n	800c068 <_strtod_l+0x910>
 800c010:	9b04      	ldr	r3, [sp, #16]
 800c012:	4642      	mov	r2, r8
 800c014:	b1fb      	cbz	r3, 800c056 <_strtod_l+0x8fe>
 800c016:	4ba5      	ldr	r3, [pc, #660]	; (800c2ac <_strtod_l+0xb54>)
 800c018:	ea09 0303 	and.w	r3, r9, r3
 800c01c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c020:	f04f 31ff 	mov.w	r1, #4294967295
 800c024:	d81a      	bhi.n	800c05c <_strtod_l+0x904>
 800c026:	0d1b      	lsrs	r3, r3, #20
 800c028:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c02c:	fa01 f303 	lsl.w	r3, r1, r3
 800c030:	429a      	cmp	r2, r3
 800c032:	d119      	bne.n	800c068 <_strtod_l+0x910>
 800c034:	4b9e      	ldr	r3, [pc, #632]	; (800c2b0 <_strtod_l+0xb58>)
 800c036:	459b      	cmp	fp, r3
 800c038:	d102      	bne.n	800c040 <_strtod_l+0x8e8>
 800c03a:	3201      	adds	r2, #1
 800c03c:	f43f adc8 	beq.w	800bbd0 <_strtod_l+0x478>
 800c040:	4b9a      	ldr	r3, [pc, #616]	; (800c2ac <_strtod_l+0xb54>)
 800c042:	ea0b 0303 	and.w	r3, fp, r3
 800c046:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c04a:	f04f 0800 	mov.w	r8, #0
 800c04e:	9b04      	ldr	r3, [sp, #16]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d188      	bne.n	800bf66 <_strtod_l+0x80e>
 800c054:	e5c6      	b.n	800bbe4 <_strtod_l+0x48c>
 800c056:	f04f 33ff 	mov.w	r3, #4294967295
 800c05a:	e7e9      	b.n	800c030 <_strtod_l+0x8d8>
 800c05c:	460b      	mov	r3, r1
 800c05e:	e7e7      	b.n	800c030 <_strtod_l+0x8d8>
 800c060:	ea53 0308 	orrs.w	r3, r3, r8
 800c064:	f43f af6f 	beq.w	800bf46 <_strtod_l+0x7ee>
 800c068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c06a:	b1cb      	cbz	r3, 800c0a0 <_strtod_l+0x948>
 800c06c:	ea13 0f0b 	tst.w	r3, fp
 800c070:	d0ed      	beq.n	800c04e <_strtod_l+0x8f6>
 800c072:	9a04      	ldr	r2, [sp, #16]
 800c074:	4640      	mov	r0, r8
 800c076:	4649      	mov	r1, r9
 800c078:	f1ba 0f00 	cmp.w	sl, #0
 800c07c:	d014      	beq.n	800c0a8 <_strtod_l+0x950>
 800c07e:	f7ff fb51 	bl	800b724 <sulp>
 800c082:	ee38 7b00 	vadd.f64	d7, d8, d0
 800c086:	ec59 8b17 	vmov	r8, r9, d7
 800c08a:	e7e0      	b.n	800c04e <_strtod_l+0x8f6>
 800c08c:	4013      	ands	r3, r2
 800c08e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c092:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c096:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c09a:	f04f 38ff 	mov.w	r8, #4294967295
 800c09e:	e7d6      	b.n	800c04e <_strtod_l+0x8f6>
 800c0a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0a2:	ea13 0f08 	tst.w	r3, r8
 800c0a6:	e7e3      	b.n	800c070 <_strtod_l+0x918>
 800c0a8:	f7ff fb3c 	bl	800b724 <sulp>
 800c0ac:	ee38 0b40 	vsub.f64	d0, d8, d0
 800c0b0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0b8:	ec59 8b10 	vmov	r8, r9, d0
 800c0bc:	d1c7      	bne.n	800c04e <_strtod_l+0x8f6>
 800c0be:	e5f7      	b.n	800bcb0 <_strtod_l+0x558>
 800c0c0:	4631      	mov	r1, r6
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	f001 ff5a 	bl	800df7c <__ratio>
 800c0c8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800c0cc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d4:	d865      	bhi.n	800c1a2 <_strtod_l+0xa4a>
 800c0d6:	f1ba 0f00 	cmp.w	sl, #0
 800c0da:	d042      	beq.n	800c162 <_strtod_l+0xa0a>
 800c0dc:	4b75      	ldr	r3, [pc, #468]	; (800c2b4 <_strtod_l+0xb5c>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800c0e4:	4871      	ldr	r0, [pc, #452]	; (800c2ac <_strtod_l+0xb54>)
 800c0e6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800c2c0 <_strtod_l+0xb68>
 800c0ea:	ea0b 0100 	and.w	r1, fp, r0
 800c0ee:	4561      	cmp	r1, ip
 800c0f0:	f040 808e 	bne.w	800c210 <_strtod_l+0xab8>
 800c0f4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800c0f8:	ec49 8b10 	vmov	d0, r8, r9
 800c0fc:	ec43 2b1c 	vmov	d12, r2, r3
 800c100:	910a      	str	r1, [sp, #40]	; 0x28
 800c102:	f001 fe63 	bl	800ddcc <__ulp>
 800c106:	ec49 8b1e 	vmov	d14, r8, r9
 800c10a:	4868      	ldr	r0, [pc, #416]	; (800c2ac <_strtod_l+0xb54>)
 800c10c:	eeac eb00 	vfma.f64	d14, d12, d0
 800c110:	ee1e 3a90 	vmov	r3, s29
 800c114:	4a68      	ldr	r2, [pc, #416]	; (800c2b8 <_strtod_l+0xb60>)
 800c116:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c118:	4018      	ands	r0, r3
 800c11a:	4290      	cmp	r0, r2
 800c11c:	ec59 8b1e 	vmov	r8, r9, d14
 800c120:	d94e      	bls.n	800c1c0 <_strtod_l+0xa68>
 800c122:	ee18 3a90 	vmov	r3, s17
 800c126:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d104      	bne.n	800c138 <_strtod_l+0x9e0>
 800c12e:	ee18 3a10 	vmov	r3, s16
 800c132:	3301      	adds	r3, #1
 800c134:	f43f ad4c 	beq.w	800bbd0 <_strtod_l+0x478>
 800c138:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800c2b0 <_strtod_l+0xb58>
 800c13c:	f04f 38ff 	mov.w	r8, #4294967295
 800c140:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c142:	4620      	mov	r0, r4
 800c144:	f001 fb10 	bl	800d768 <_Bfree>
 800c148:	4639      	mov	r1, r7
 800c14a:	4620      	mov	r0, r4
 800c14c:	f001 fb0c 	bl	800d768 <_Bfree>
 800c150:	4631      	mov	r1, r6
 800c152:	4620      	mov	r0, r4
 800c154:	f001 fb08 	bl	800d768 <_Bfree>
 800c158:	4629      	mov	r1, r5
 800c15a:	4620      	mov	r0, r4
 800c15c:	f001 fb04 	bl	800d768 <_Bfree>
 800c160:	e619      	b.n	800bd96 <_strtod_l+0x63e>
 800c162:	f1b8 0f00 	cmp.w	r8, #0
 800c166:	d112      	bne.n	800c18e <_strtod_l+0xa36>
 800c168:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c16c:	b9b3      	cbnz	r3, 800c19c <_strtod_l+0xa44>
 800c16e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c172:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c17a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c17e:	bf58      	it	pl
 800c180:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800c184:	eeb1 7b4d 	vneg.f64	d7, d13
 800c188:	ec53 2b17 	vmov	r2, r3, d7
 800c18c:	e7aa      	b.n	800c0e4 <_strtod_l+0x98c>
 800c18e:	f1b8 0f01 	cmp.w	r8, #1
 800c192:	d103      	bne.n	800c19c <_strtod_l+0xa44>
 800c194:	f1b9 0f00 	cmp.w	r9, #0
 800c198:	f43f ad8a 	beq.w	800bcb0 <_strtod_l+0x558>
 800c19c:	4b47      	ldr	r3, [pc, #284]	; (800c2bc <_strtod_l+0xb64>)
 800c19e:	2200      	movs	r2, #0
 800c1a0:	e79e      	b.n	800c0e0 <_strtod_l+0x988>
 800c1a2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c1a6:	ee20 db0d 	vmul.f64	d13, d0, d13
 800c1aa:	f1ba 0f00 	cmp.w	sl, #0
 800c1ae:	d104      	bne.n	800c1ba <_strtod_l+0xa62>
 800c1b0:	eeb1 7b4d 	vneg.f64	d7, d13
 800c1b4:	ec53 2b17 	vmov	r2, r3, d7
 800c1b8:	e794      	b.n	800c0e4 <_strtod_l+0x98c>
 800c1ba:	eeb0 7b4d 	vmov.f64	d7, d13
 800c1be:	e7f9      	b.n	800c1b4 <_strtod_l+0xa5c>
 800c1c0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c1c4:	9b04      	ldr	r3, [sp, #16]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d1ba      	bne.n	800c140 <_strtod_l+0x9e8>
 800c1ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c1ce:	0d1b      	lsrs	r3, r3, #20
 800c1d0:	051b      	lsls	r3, r3, #20
 800c1d2:	4299      	cmp	r1, r3
 800c1d4:	d1b4      	bne.n	800c140 <_strtod_l+0x9e8>
 800c1d6:	ec51 0b1d 	vmov	r0, r1, d13
 800c1da:	f7f4 fa5d 	bl	8000698 <__aeabi_d2lz>
 800c1de:	f7f4 fa15 	bl	800060c <__aeabi_l2d>
 800c1e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c1e6:	ec41 0b17 	vmov	d7, r0, r1
 800c1ea:	ea43 0308 	orr.w	r3, r3, r8
 800c1ee:	ea53 030a 	orrs.w	r3, r3, sl
 800c1f2:	ee3d db47 	vsub.f64	d13, d13, d7
 800c1f6:	d03c      	beq.n	800c272 <_strtod_l+0xb1a>
 800c1f8:	eeb4 dbca 	vcmpe.f64	d13, d10
 800c1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c200:	f53f acf0 	bmi.w	800bbe4 <_strtod_l+0x48c>
 800c204:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800c208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c20c:	dd98      	ble.n	800c140 <_strtod_l+0x9e8>
 800c20e:	e4e9      	b.n	800bbe4 <_strtod_l+0x48c>
 800c210:	9804      	ldr	r0, [sp, #16]
 800c212:	b1f0      	cbz	r0, 800c252 <_strtod_l+0xafa>
 800c214:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800c218:	d81b      	bhi.n	800c252 <_strtod_l+0xafa>
 800c21a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800c2a0 <_strtod_l+0xb48>
 800c21e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800c222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c226:	d811      	bhi.n	800c24c <_strtod_l+0xaf4>
 800c228:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800c22c:	ee1d 3a10 	vmov	r3, s26
 800c230:	2b01      	cmp	r3, #1
 800c232:	bf38      	it	cc
 800c234:	2301      	movcc	r3, #1
 800c236:	ee0d 3a10 	vmov	s26, r3
 800c23a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800c23e:	f1ba 0f00 	cmp.w	sl, #0
 800c242:	d113      	bne.n	800c26c <_strtod_l+0xb14>
 800c244:	eeb1 7b4d 	vneg.f64	d7, d13
 800c248:	ec53 2b17 	vmov	r2, r3, d7
 800c24c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800c250:	1a43      	subs	r3, r0, r1
 800c252:	eeb0 0b48 	vmov.f64	d0, d8
 800c256:	ec43 2b1c 	vmov	d12, r2, r3
 800c25a:	910a      	str	r1, [sp, #40]	; 0x28
 800c25c:	f001 fdb6 	bl	800ddcc <__ulp>
 800c260:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c262:	eeac 8b00 	vfma.f64	d8, d12, d0
 800c266:	ec59 8b18 	vmov	r8, r9, d8
 800c26a:	e7ab      	b.n	800c1c4 <_strtod_l+0xa6c>
 800c26c:	eeb0 7b4d 	vmov.f64	d7, d13
 800c270:	e7ea      	b.n	800c248 <_strtod_l+0xaf0>
 800c272:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800c276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c27a:	f57f af61 	bpl.w	800c140 <_strtod_l+0x9e8>
 800c27e:	e4b1      	b.n	800bbe4 <_strtod_l+0x48c>
 800c280:	2300      	movs	r3, #0
 800c282:	9308      	str	r3, [sp, #32]
 800c284:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c286:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c288:	6013      	str	r3, [r2, #0]
 800c28a:	f7ff baad 	b.w	800b7e8 <_strtod_l+0x90>
 800c28e:	2a65      	cmp	r2, #101	; 0x65
 800c290:	f43f ab9f 	beq.w	800b9d2 <_strtod_l+0x27a>
 800c294:	2a45      	cmp	r2, #69	; 0x45
 800c296:	f43f ab9c 	beq.w	800b9d2 <_strtod_l+0x27a>
 800c29a:	2101      	movs	r1, #1
 800c29c:	f7ff bbd4 	b.w	800ba48 <_strtod_l+0x2f0>
 800c2a0:	ffc00000 	.word	0xffc00000
 800c2a4:	41dfffff 	.word	0x41dfffff
 800c2a8:	000fffff 	.word	0x000fffff
 800c2ac:	7ff00000 	.word	0x7ff00000
 800c2b0:	7fefffff 	.word	0x7fefffff
 800c2b4:	3ff00000 	.word	0x3ff00000
 800c2b8:	7c9fffff 	.word	0x7c9fffff
 800c2bc:	bff00000 	.word	0xbff00000
 800c2c0:	7fe00000 	.word	0x7fe00000

0800c2c4 <_strtod_r>:
 800c2c4:	4b01      	ldr	r3, [pc, #4]	; (800c2cc <_strtod_r+0x8>)
 800c2c6:	f7ff ba47 	b.w	800b758 <_strtod_l>
 800c2ca:	bf00      	nop
 800c2cc:	20000078 	.word	0x20000078

0800c2d0 <_strtol_l.constprop.0>:
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d6:	d001      	beq.n	800c2dc <_strtol_l.constprop.0+0xc>
 800c2d8:	2b24      	cmp	r3, #36	; 0x24
 800c2da:	d906      	bls.n	800c2ea <_strtol_l.constprop.0+0x1a>
 800c2dc:	f7fe fb72 	bl	800a9c4 <__errno>
 800c2e0:	2316      	movs	r3, #22
 800c2e2:	6003      	str	r3, [r0, #0]
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c3d0 <_strtol_l.constprop.0+0x100>
 800c2ee:	460d      	mov	r5, r1
 800c2f0:	462e      	mov	r6, r5
 800c2f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c2fa:	f017 0708 	ands.w	r7, r7, #8
 800c2fe:	d1f7      	bne.n	800c2f0 <_strtol_l.constprop.0+0x20>
 800c300:	2c2d      	cmp	r4, #45	; 0x2d
 800c302:	d132      	bne.n	800c36a <_strtol_l.constprop.0+0x9a>
 800c304:	782c      	ldrb	r4, [r5, #0]
 800c306:	2701      	movs	r7, #1
 800c308:	1cb5      	adds	r5, r6, #2
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d05b      	beq.n	800c3c6 <_strtol_l.constprop.0+0xf6>
 800c30e:	2b10      	cmp	r3, #16
 800c310:	d109      	bne.n	800c326 <_strtol_l.constprop.0+0x56>
 800c312:	2c30      	cmp	r4, #48	; 0x30
 800c314:	d107      	bne.n	800c326 <_strtol_l.constprop.0+0x56>
 800c316:	782c      	ldrb	r4, [r5, #0]
 800c318:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c31c:	2c58      	cmp	r4, #88	; 0x58
 800c31e:	d14d      	bne.n	800c3bc <_strtol_l.constprop.0+0xec>
 800c320:	786c      	ldrb	r4, [r5, #1]
 800c322:	2310      	movs	r3, #16
 800c324:	3502      	adds	r5, #2
 800c326:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c32a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c32e:	f04f 0c00 	mov.w	ip, #0
 800c332:	fbb8 f9f3 	udiv	r9, r8, r3
 800c336:	4666      	mov	r6, ip
 800c338:	fb03 8a19 	mls	sl, r3, r9, r8
 800c33c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c340:	f1be 0f09 	cmp.w	lr, #9
 800c344:	d816      	bhi.n	800c374 <_strtol_l.constprop.0+0xa4>
 800c346:	4674      	mov	r4, lr
 800c348:	42a3      	cmp	r3, r4
 800c34a:	dd24      	ble.n	800c396 <_strtol_l.constprop.0+0xc6>
 800c34c:	f1bc 0f00 	cmp.w	ip, #0
 800c350:	db1e      	blt.n	800c390 <_strtol_l.constprop.0+0xc0>
 800c352:	45b1      	cmp	r9, r6
 800c354:	d31c      	bcc.n	800c390 <_strtol_l.constprop.0+0xc0>
 800c356:	d101      	bne.n	800c35c <_strtol_l.constprop.0+0x8c>
 800c358:	45a2      	cmp	sl, r4
 800c35a:	db19      	blt.n	800c390 <_strtol_l.constprop.0+0xc0>
 800c35c:	fb06 4603 	mla	r6, r6, r3, r4
 800c360:	f04f 0c01 	mov.w	ip, #1
 800c364:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c368:	e7e8      	b.n	800c33c <_strtol_l.constprop.0+0x6c>
 800c36a:	2c2b      	cmp	r4, #43	; 0x2b
 800c36c:	bf04      	itt	eq
 800c36e:	782c      	ldrbeq	r4, [r5, #0]
 800c370:	1cb5      	addeq	r5, r6, #2
 800c372:	e7ca      	b.n	800c30a <_strtol_l.constprop.0+0x3a>
 800c374:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c378:	f1be 0f19 	cmp.w	lr, #25
 800c37c:	d801      	bhi.n	800c382 <_strtol_l.constprop.0+0xb2>
 800c37e:	3c37      	subs	r4, #55	; 0x37
 800c380:	e7e2      	b.n	800c348 <_strtol_l.constprop.0+0x78>
 800c382:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c386:	f1be 0f19 	cmp.w	lr, #25
 800c38a:	d804      	bhi.n	800c396 <_strtol_l.constprop.0+0xc6>
 800c38c:	3c57      	subs	r4, #87	; 0x57
 800c38e:	e7db      	b.n	800c348 <_strtol_l.constprop.0+0x78>
 800c390:	f04f 3cff 	mov.w	ip, #4294967295
 800c394:	e7e6      	b.n	800c364 <_strtol_l.constprop.0+0x94>
 800c396:	f1bc 0f00 	cmp.w	ip, #0
 800c39a:	da05      	bge.n	800c3a8 <_strtol_l.constprop.0+0xd8>
 800c39c:	2322      	movs	r3, #34	; 0x22
 800c39e:	6003      	str	r3, [r0, #0]
 800c3a0:	4646      	mov	r6, r8
 800c3a2:	b942      	cbnz	r2, 800c3b6 <_strtol_l.constprop.0+0xe6>
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	e79e      	b.n	800c2e6 <_strtol_l.constprop.0+0x16>
 800c3a8:	b107      	cbz	r7, 800c3ac <_strtol_l.constprop.0+0xdc>
 800c3aa:	4276      	negs	r6, r6
 800c3ac:	2a00      	cmp	r2, #0
 800c3ae:	d0f9      	beq.n	800c3a4 <_strtol_l.constprop.0+0xd4>
 800c3b0:	f1bc 0f00 	cmp.w	ip, #0
 800c3b4:	d000      	beq.n	800c3b8 <_strtol_l.constprop.0+0xe8>
 800c3b6:	1e69      	subs	r1, r5, #1
 800c3b8:	6011      	str	r1, [r2, #0]
 800c3ba:	e7f3      	b.n	800c3a4 <_strtol_l.constprop.0+0xd4>
 800c3bc:	2430      	movs	r4, #48	; 0x30
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d1b1      	bne.n	800c326 <_strtol_l.constprop.0+0x56>
 800c3c2:	2308      	movs	r3, #8
 800c3c4:	e7af      	b.n	800c326 <_strtol_l.constprop.0+0x56>
 800c3c6:	2c30      	cmp	r4, #48	; 0x30
 800c3c8:	d0a5      	beq.n	800c316 <_strtol_l.constprop.0+0x46>
 800c3ca:	230a      	movs	r3, #10
 800c3cc:	e7ab      	b.n	800c326 <_strtol_l.constprop.0+0x56>
 800c3ce:	bf00      	nop
 800c3d0:	0800f289 	.word	0x0800f289

0800c3d4 <_strtol_r>:
 800c3d4:	f7ff bf7c 	b.w	800c2d0 <_strtol_l.constprop.0>

0800c3d8 <quorem>:
 800c3d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3dc:	6903      	ldr	r3, [r0, #16]
 800c3de:	690c      	ldr	r4, [r1, #16]
 800c3e0:	42a3      	cmp	r3, r4
 800c3e2:	4607      	mov	r7, r0
 800c3e4:	f2c0 8081 	blt.w	800c4ea <quorem+0x112>
 800c3e8:	3c01      	subs	r4, #1
 800c3ea:	f101 0814 	add.w	r8, r1, #20
 800c3ee:	f100 0514 	add.w	r5, r0, #20
 800c3f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3f6:	9301      	str	r3, [sp, #4]
 800c3f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c3fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c400:	3301      	adds	r3, #1
 800c402:	429a      	cmp	r2, r3
 800c404:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c408:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c40c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c410:	d331      	bcc.n	800c476 <quorem+0x9e>
 800c412:	f04f 0e00 	mov.w	lr, #0
 800c416:	4640      	mov	r0, r8
 800c418:	46ac      	mov	ip, r5
 800c41a:	46f2      	mov	sl, lr
 800c41c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c420:	b293      	uxth	r3, r2
 800c422:	fb06 e303 	mla	r3, r6, r3, lr
 800c426:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	ebaa 0303 	sub.w	r3, sl, r3
 800c430:	f8dc a000 	ldr.w	sl, [ip]
 800c434:	0c12      	lsrs	r2, r2, #16
 800c436:	fa13 f38a 	uxtah	r3, r3, sl
 800c43a:	fb06 e202 	mla	r2, r6, r2, lr
 800c43e:	9300      	str	r3, [sp, #0]
 800c440:	9b00      	ldr	r3, [sp, #0]
 800c442:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c446:	b292      	uxth	r2, r2
 800c448:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c44c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c450:	f8bd 3000 	ldrh.w	r3, [sp]
 800c454:	4581      	cmp	r9, r0
 800c456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c45a:	f84c 3b04 	str.w	r3, [ip], #4
 800c45e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c462:	d2db      	bcs.n	800c41c <quorem+0x44>
 800c464:	f855 300b 	ldr.w	r3, [r5, fp]
 800c468:	b92b      	cbnz	r3, 800c476 <quorem+0x9e>
 800c46a:	9b01      	ldr	r3, [sp, #4]
 800c46c:	3b04      	subs	r3, #4
 800c46e:	429d      	cmp	r5, r3
 800c470:	461a      	mov	r2, r3
 800c472:	d32e      	bcc.n	800c4d2 <quorem+0xfa>
 800c474:	613c      	str	r4, [r7, #16]
 800c476:	4638      	mov	r0, r7
 800c478:	f001 fc02 	bl	800dc80 <__mcmp>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	db24      	blt.n	800c4ca <quorem+0xf2>
 800c480:	3601      	adds	r6, #1
 800c482:	4628      	mov	r0, r5
 800c484:	f04f 0c00 	mov.w	ip, #0
 800c488:	f858 2b04 	ldr.w	r2, [r8], #4
 800c48c:	f8d0 e000 	ldr.w	lr, [r0]
 800c490:	b293      	uxth	r3, r2
 800c492:	ebac 0303 	sub.w	r3, ip, r3
 800c496:	0c12      	lsrs	r2, r2, #16
 800c498:	fa13 f38e 	uxtah	r3, r3, lr
 800c49c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c4a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c4aa:	45c1      	cmp	r9, r8
 800c4ac:	f840 3b04 	str.w	r3, [r0], #4
 800c4b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c4b4:	d2e8      	bcs.n	800c488 <quorem+0xb0>
 800c4b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4be:	b922      	cbnz	r2, 800c4ca <quorem+0xf2>
 800c4c0:	3b04      	subs	r3, #4
 800c4c2:	429d      	cmp	r5, r3
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	d30a      	bcc.n	800c4de <quorem+0x106>
 800c4c8:	613c      	str	r4, [r7, #16]
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	b003      	add	sp, #12
 800c4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d2:	6812      	ldr	r2, [r2, #0]
 800c4d4:	3b04      	subs	r3, #4
 800c4d6:	2a00      	cmp	r2, #0
 800c4d8:	d1cc      	bne.n	800c474 <quorem+0x9c>
 800c4da:	3c01      	subs	r4, #1
 800c4dc:	e7c7      	b.n	800c46e <quorem+0x96>
 800c4de:	6812      	ldr	r2, [r2, #0]
 800c4e0:	3b04      	subs	r3, #4
 800c4e2:	2a00      	cmp	r2, #0
 800c4e4:	d1f0      	bne.n	800c4c8 <quorem+0xf0>
 800c4e6:	3c01      	subs	r4, #1
 800c4e8:	e7eb      	b.n	800c4c2 <quorem+0xea>
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	e7ee      	b.n	800c4cc <quorem+0xf4>
	...

0800c4f0 <_dtoa_r>:
 800c4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f4:	ed2d 8b02 	vpush	{d8}
 800c4f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c4fa:	b091      	sub	sp, #68	; 0x44
 800c4fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c500:	ec59 8b10 	vmov	r8, r9, d0
 800c504:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c506:	9106      	str	r1, [sp, #24]
 800c508:	4606      	mov	r6, r0
 800c50a:	9208      	str	r2, [sp, #32]
 800c50c:	930c      	str	r3, [sp, #48]	; 0x30
 800c50e:	b975      	cbnz	r5, 800c52e <_dtoa_r+0x3e>
 800c510:	2010      	movs	r0, #16
 800c512:	f001 f8cf 	bl	800d6b4 <malloc>
 800c516:	4602      	mov	r2, r0
 800c518:	6270      	str	r0, [r6, #36]	; 0x24
 800c51a:	b920      	cbnz	r0, 800c526 <_dtoa_r+0x36>
 800c51c:	4baa      	ldr	r3, [pc, #680]	; (800c7c8 <_dtoa_r+0x2d8>)
 800c51e:	21ea      	movs	r1, #234	; 0xea
 800c520:	48aa      	ldr	r0, [pc, #680]	; (800c7cc <_dtoa_r+0x2dc>)
 800c522:	f002 f82b 	bl	800e57c <__assert_func>
 800c526:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c52a:	6005      	str	r5, [r0, #0]
 800c52c:	60c5      	str	r5, [r0, #12]
 800c52e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c530:	6819      	ldr	r1, [r3, #0]
 800c532:	b151      	cbz	r1, 800c54a <_dtoa_r+0x5a>
 800c534:	685a      	ldr	r2, [r3, #4]
 800c536:	604a      	str	r2, [r1, #4]
 800c538:	2301      	movs	r3, #1
 800c53a:	4093      	lsls	r3, r2
 800c53c:	608b      	str	r3, [r1, #8]
 800c53e:	4630      	mov	r0, r6
 800c540:	f001 f912 	bl	800d768 <_Bfree>
 800c544:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c546:	2200      	movs	r2, #0
 800c548:	601a      	str	r2, [r3, #0]
 800c54a:	f1b9 0300 	subs.w	r3, r9, #0
 800c54e:	bfbb      	ittet	lt
 800c550:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c554:	9303      	strlt	r3, [sp, #12]
 800c556:	2300      	movge	r3, #0
 800c558:	2201      	movlt	r2, #1
 800c55a:	bfac      	ite	ge
 800c55c:	6023      	strge	r3, [r4, #0]
 800c55e:	6022      	strlt	r2, [r4, #0]
 800c560:	4b9b      	ldr	r3, [pc, #620]	; (800c7d0 <_dtoa_r+0x2e0>)
 800c562:	9c03      	ldr	r4, [sp, #12]
 800c564:	43a3      	bics	r3, r4
 800c566:	d11c      	bne.n	800c5a2 <_dtoa_r+0xb2>
 800c568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c56a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c56e:	6013      	str	r3, [r2, #0]
 800c570:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c574:	ea53 0308 	orrs.w	r3, r3, r8
 800c578:	f000 84fd 	beq.w	800cf76 <_dtoa_r+0xa86>
 800c57c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c57e:	b963      	cbnz	r3, 800c59a <_dtoa_r+0xaa>
 800c580:	4b94      	ldr	r3, [pc, #592]	; (800c7d4 <_dtoa_r+0x2e4>)
 800c582:	e01f      	b.n	800c5c4 <_dtoa_r+0xd4>
 800c584:	4b94      	ldr	r3, [pc, #592]	; (800c7d8 <_dtoa_r+0x2e8>)
 800c586:	9301      	str	r3, [sp, #4]
 800c588:	3308      	adds	r3, #8
 800c58a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c58c:	6013      	str	r3, [r2, #0]
 800c58e:	9801      	ldr	r0, [sp, #4]
 800c590:	b011      	add	sp, #68	; 0x44
 800c592:	ecbd 8b02 	vpop	{d8}
 800c596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c59a:	4b8e      	ldr	r3, [pc, #568]	; (800c7d4 <_dtoa_r+0x2e4>)
 800c59c:	9301      	str	r3, [sp, #4]
 800c59e:	3303      	adds	r3, #3
 800c5a0:	e7f3      	b.n	800c58a <_dtoa_r+0x9a>
 800c5a2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c5a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ae:	d10b      	bne.n	800c5c8 <_dtoa_r+0xd8>
 800c5b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	6013      	str	r3, [r2, #0]
 800c5b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f000 84d9 	beq.w	800cf70 <_dtoa_r+0xa80>
 800c5be:	4887      	ldr	r0, [pc, #540]	; (800c7dc <_dtoa_r+0x2ec>)
 800c5c0:	6018      	str	r0, [r3, #0]
 800c5c2:	1e43      	subs	r3, r0, #1
 800c5c4:	9301      	str	r3, [sp, #4]
 800c5c6:	e7e2      	b.n	800c58e <_dtoa_r+0x9e>
 800c5c8:	a90f      	add	r1, sp, #60	; 0x3c
 800c5ca:	aa0e      	add	r2, sp, #56	; 0x38
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	eeb0 0b48 	vmov.f64	d0, d8
 800c5d2:	f001 fc77 	bl	800dec4 <__d2b>
 800c5d6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800c5da:	4605      	mov	r5, r0
 800c5dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c5de:	2900      	cmp	r1, #0
 800c5e0:	d046      	beq.n	800c670 <_dtoa_r+0x180>
 800c5e2:	ee18 4a90 	vmov	r4, s17
 800c5e6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c5ea:	ec53 2b18 	vmov	r2, r3, d8
 800c5ee:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800c5f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c5f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c5fa:	2400      	movs	r4, #0
 800c5fc:	ec43 2b16 	vmov	d6, r2, r3
 800c600:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c604:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c7b0 <_dtoa_r+0x2c0>
 800c608:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c60c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800c7b8 <_dtoa_r+0x2c8>
 800c610:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c614:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c7c0 <_dtoa_r+0x2d0>
 800c618:	ee07 1a90 	vmov	s15, r1
 800c61c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c620:	eeb0 7b46 	vmov.f64	d7, d6
 800c624:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c628:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c62c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c634:	ee16 ba90 	vmov	fp, s13
 800c638:	940a      	str	r4, [sp, #40]	; 0x28
 800c63a:	d508      	bpl.n	800c64e <_dtoa_r+0x15e>
 800c63c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c640:	eeb4 6b47 	vcmp.f64	d6, d7
 800c644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c648:	bf18      	it	ne
 800c64a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c64e:	f1bb 0f16 	cmp.w	fp, #22
 800c652:	d82f      	bhi.n	800c6b4 <_dtoa_r+0x1c4>
 800c654:	4b62      	ldr	r3, [pc, #392]	; (800c7e0 <_dtoa_r+0x2f0>)
 800c656:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c65a:	ed93 7b00 	vldr	d7, [r3]
 800c65e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c666:	d501      	bpl.n	800c66c <_dtoa_r+0x17c>
 800c668:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c66c:	2300      	movs	r3, #0
 800c66e:	e022      	b.n	800c6b6 <_dtoa_r+0x1c6>
 800c670:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c672:	4401      	add	r1, r0
 800c674:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800c678:	2b20      	cmp	r3, #32
 800c67a:	bfc1      	itttt	gt
 800c67c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c680:	fa04 f303 	lslgt.w	r3, r4, r3
 800c684:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800c688:	fa28 f804 	lsrgt.w	r8, r8, r4
 800c68c:	bfd6      	itet	le
 800c68e:	f1c3 0320 	rsble	r3, r3, #32
 800c692:	ea43 0808 	orrgt.w	r8, r3, r8
 800c696:	fa08 f803 	lslle.w	r8, r8, r3
 800c69a:	ee07 8a90 	vmov	s15, r8
 800c69e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c6a2:	3901      	subs	r1, #1
 800c6a4:	ee17 4a90 	vmov	r4, s15
 800c6a8:	ec53 2b17 	vmov	r2, r3, d7
 800c6ac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800c6b0:	2401      	movs	r4, #1
 800c6b2:	e7a3      	b.n	800c5fc <_dtoa_r+0x10c>
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6b8:	1a43      	subs	r3, r0, r1
 800c6ba:	1e5a      	subs	r2, r3, #1
 800c6bc:	bf45      	ittet	mi
 800c6be:	f1c3 0301 	rsbmi	r3, r3, #1
 800c6c2:	9304      	strmi	r3, [sp, #16]
 800c6c4:	2300      	movpl	r3, #0
 800c6c6:	2300      	movmi	r3, #0
 800c6c8:	9205      	str	r2, [sp, #20]
 800c6ca:	bf54      	ite	pl
 800c6cc:	9304      	strpl	r3, [sp, #16]
 800c6ce:	9305      	strmi	r3, [sp, #20]
 800c6d0:	f1bb 0f00 	cmp.w	fp, #0
 800c6d4:	db18      	blt.n	800c708 <_dtoa_r+0x218>
 800c6d6:	9b05      	ldr	r3, [sp, #20]
 800c6d8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c6dc:	445b      	add	r3, fp
 800c6de:	9305      	str	r3, [sp, #20]
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	9a06      	ldr	r2, [sp, #24]
 800c6e4:	2a09      	cmp	r2, #9
 800c6e6:	d849      	bhi.n	800c77c <_dtoa_r+0x28c>
 800c6e8:	2a05      	cmp	r2, #5
 800c6ea:	bfc4      	itt	gt
 800c6ec:	3a04      	subgt	r2, #4
 800c6ee:	9206      	strgt	r2, [sp, #24]
 800c6f0:	9a06      	ldr	r2, [sp, #24]
 800c6f2:	f1a2 0202 	sub.w	r2, r2, #2
 800c6f6:	bfcc      	ite	gt
 800c6f8:	2400      	movgt	r4, #0
 800c6fa:	2401      	movle	r4, #1
 800c6fc:	2a03      	cmp	r2, #3
 800c6fe:	d848      	bhi.n	800c792 <_dtoa_r+0x2a2>
 800c700:	e8df f002 	tbb	[pc, r2]
 800c704:	3a2c2e0b 	.word	0x3a2c2e0b
 800c708:	9b04      	ldr	r3, [sp, #16]
 800c70a:	2200      	movs	r2, #0
 800c70c:	eba3 030b 	sub.w	r3, r3, fp
 800c710:	9304      	str	r3, [sp, #16]
 800c712:	9209      	str	r2, [sp, #36]	; 0x24
 800c714:	f1cb 0300 	rsb	r3, fp, #0
 800c718:	e7e3      	b.n	800c6e2 <_dtoa_r+0x1f2>
 800c71a:	2200      	movs	r2, #0
 800c71c:	9207      	str	r2, [sp, #28]
 800c71e:	9a08      	ldr	r2, [sp, #32]
 800c720:	2a00      	cmp	r2, #0
 800c722:	dc39      	bgt.n	800c798 <_dtoa_r+0x2a8>
 800c724:	f04f 0a01 	mov.w	sl, #1
 800c728:	46d1      	mov	r9, sl
 800c72a:	4652      	mov	r2, sl
 800c72c:	f8cd a020 	str.w	sl, [sp, #32]
 800c730:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800c732:	2100      	movs	r1, #0
 800c734:	6079      	str	r1, [r7, #4]
 800c736:	2004      	movs	r0, #4
 800c738:	f100 0c14 	add.w	ip, r0, #20
 800c73c:	4594      	cmp	ip, r2
 800c73e:	6879      	ldr	r1, [r7, #4]
 800c740:	d92f      	bls.n	800c7a2 <_dtoa_r+0x2b2>
 800c742:	4630      	mov	r0, r6
 800c744:	930d      	str	r3, [sp, #52]	; 0x34
 800c746:	f000 ffcf 	bl	800d6e8 <_Balloc>
 800c74a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c74c:	9001      	str	r0, [sp, #4]
 800c74e:	4602      	mov	r2, r0
 800c750:	2800      	cmp	r0, #0
 800c752:	d149      	bne.n	800c7e8 <_dtoa_r+0x2f8>
 800c754:	4b23      	ldr	r3, [pc, #140]	; (800c7e4 <_dtoa_r+0x2f4>)
 800c756:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c75a:	e6e1      	b.n	800c520 <_dtoa_r+0x30>
 800c75c:	2201      	movs	r2, #1
 800c75e:	e7dd      	b.n	800c71c <_dtoa_r+0x22c>
 800c760:	2200      	movs	r2, #0
 800c762:	9207      	str	r2, [sp, #28]
 800c764:	9a08      	ldr	r2, [sp, #32]
 800c766:	eb0b 0a02 	add.w	sl, fp, r2
 800c76a:	f10a 0901 	add.w	r9, sl, #1
 800c76e:	464a      	mov	r2, r9
 800c770:	2a01      	cmp	r2, #1
 800c772:	bfb8      	it	lt
 800c774:	2201      	movlt	r2, #1
 800c776:	e7db      	b.n	800c730 <_dtoa_r+0x240>
 800c778:	2201      	movs	r2, #1
 800c77a:	e7f2      	b.n	800c762 <_dtoa_r+0x272>
 800c77c:	2401      	movs	r4, #1
 800c77e:	2200      	movs	r2, #0
 800c780:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800c784:	f04f 3aff 	mov.w	sl, #4294967295
 800c788:	2100      	movs	r1, #0
 800c78a:	46d1      	mov	r9, sl
 800c78c:	2212      	movs	r2, #18
 800c78e:	9108      	str	r1, [sp, #32]
 800c790:	e7ce      	b.n	800c730 <_dtoa_r+0x240>
 800c792:	2201      	movs	r2, #1
 800c794:	9207      	str	r2, [sp, #28]
 800c796:	e7f5      	b.n	800c784 <_dtoa_r+0x294>
 800c798:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c79c:	46d1      	mov	r9, sl
 800c79e:	4652      	mov	r2, sl
 800c7a0:	e7c6      	b.n	800c730 <_dtoa_r+0x240>
 800c7a2:	3101      	adds	r1, #1
 800c7a4:	6079      	str	r1, [r7, #4]
 800c7a6:	0040      	lsls	r0, r0, #1
 800c7a8:	e7c6      	b.n	800c738 <_dtoa_r+0x248>
 800c7aa:	bf00      	nop
 800c7ac:	f3af 8000 	nop.w
 800c7b0:	636f4361 	.word	0x636f4361
 800c7b4:	3fd287a7 	.word	0x3fd287a7
 800c7b8:	8b60c8b3 	.word	0x8b60c8b3
 800c7bc:	3fc68a28 	.word	0x3fc68a28
 800c7c0:	509f79fb 	.word	0x509f79fb
 800c7c4:	3fd34413 	.word	0x3fd34413
 800c7c8:	0800f396 	.word	0x0800f396
 800c7cc:	0800f3ad 	.word	0x0800f3ad
 800c7d0:	7ff00000 	.word	0x7ff00000
 800c7d4:	0800f392 	.word	0x0800f392
 800c7d8:	0800f389 	.word	0x0800f389
 800c7dc:	0800f20d 	.word	0x0800f20d
 800c7e0:	0800f518 	.word	0x0800f518
 800c7e4:	0800f408 	.word	0x0800f408
 800c7e8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c7ea:	9901      	ldr	r1, [sp, #4]
 800c7ec:	6011      	str	r1, [r2, #0]
 800c7ee:	f1b9 0f0e 	cmp.w	r9, #14
 800c7f2:	d86c      	bhi.n	800c8ce <_dtoa_r+0x3de>
 800c7f4:	2c00      	cmp	r4, #0
 800c7f6:	d06a      	beq.n	800c8ce <_dtoa_r+0x3de>
 800c7f8:	f1bb 0f00 	cmp.w	fp, #0
 800c7fc:	f340 80a0 	ble.w	800c940 <_dtoa_r+0x450>
 800c800:	49c1      	ldr	r1, [pc, #772]	; (800cb08 <_dtoa_r+0x618>)
 800c802:	f00b 020f 	and.w	r2, fp, #15
 800c806:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c80a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c80e:	ed92 7b00 	vldr	d7, [r2]
 800c812:	ea4f 112b 	mov.w	r1, fp, asr #4
 800c816:	f000 8087 	beq.w	800c928 <_dtoa_r+0x438>
 800c81a:	4abc      	ldr	r2, [pc, #752]	; (800cb0c <_dtoa_r+0x61c>)
 800c81c:	ed92 6b08 	vldr	d6, [r2, #32]
 800c820:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c824:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c828:	f001 010f 	and.w	r1, r1, #15
 800c82c:	2203      	movs	r2, #3
 800c82e:	48b7      	ldr	r0, [pc, #732]	; (800cb0c <_dtoa_r+0x61c>)
 800c830:	2900      	cmp	r1, #0
 800c832:	d17b      	bne.n	800c92c <_dtoa_r+0x43c>
 800c834:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c838:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c83c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c840:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c842:	2900      	cmp	r1, #0
 800c844:	f000 80a2 	beq.w	800c98c <_dtoa_r+0x49c>
 800c848:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c84c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c850:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c858:	f140 8098 	bpl.w	800c98c <_dtoa_r+0x49c>
 800c85c:	f1b9 0f00 	cmp.w	r9, #0
 800c860:	f000 8094 	beq.w	800c98c <_dtoa_r+0x49c>
 800c864:	f1ba 0f00 	cmp.w	sl, #0
 800c868:	dd2f      	ble.n	800c8ca <_dtoa_r+0x3da>
 800c86a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c86e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c872:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c876:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c87a:	3201      	adds	r2, #1
 800c87c:	4650      	mov	r0, sl
 800c87e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c882:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c886:	ee07 2a90 	vmov	s15, r2
 800c88a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c88e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c892:	ee15 4a90 	vmov	r4, s11
 800c896:	ec52 1b15 	vmov	r1, r2, d5
 800c89a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	d177      	bne.n	800c992 <_dtoa_r+0x4a2>
 800c8a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c8a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c8aa:	ec42 1b17 	vmov	d7, r1, r2
 800c8ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8b6:	f300 8263 	bgt.w	800cd80 <_dtoa_r+0x890>
 800c8ba:	eeb1 7b47 	vneg.f64	d7, d7
 800c8be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8c6:	f100 8258 	bmi.w	800cd7a <_dtoa_r+0x88a>
 800c8ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c8ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c8d0:	2a00      	cmp	r2, #0
 800c8d2:	f2c0 811d 	blt.w	800cb10 <_dtoa_r+0x620>
 800c8d6:	f1bb 0f0e 	cmp.w	fp, #14
 800c8da:	f300 8119 	bgt.w	800cb10 <_dtoa_r+0x620>
 800c8de:	4b8a      	ldr	r3, [pc, #552]	; (800cb08 <_dtoa_r+0x618>)
 800c8e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c8e4:	ed93 6b00 	vldr	d6, [r3]
 800c8e8:	9b08      	ldr	r3, [sp, #32]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	f280 80b7 	bge.w	800ca5e <_dtoa_r+0x56e>
 800c8f0:	f1b9 0f00 	cmp.w	r9, #0
 800c8f4:	f300 80b3 	bgt.w	800ca5e <_dtoa_r+0x56e>
 800c8f8:	f040 823f 	bne.w	800cd7a <_dtoa_r+0x88a>
 800c8fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c900:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c904:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c908:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c910:	464c      	mov	r4, r9
 800c912:	464f      	mov	r7, r9
 800c914:	f280 8215 	bge.w	800cd42 <_dtoa_r+0x852>
 800c918:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c91c:	2331      	movs	r3, #49	; 0x31
 800c91e:	f808 3b01 	strb.w	r3, [r8], #1
 800c922:	f10b 0b01 	add.w	fp, fp, #1
 800c926:	e211      	b.n	800cd4c <_dtoa_r+0x85c>
 800c928:	2202      	movs	r2, #2
 800c92a:	e780      	b.n	800c82e <_dtoa_r+0x33e>
 800c92c:	07cc      	lsls	r4, r1, #31
 800c92e:	d504      	bpl.n	800c93a <_dtoa_r+0x44a>
 800c930:	ed90 6b00 	vldr	d6, [r0]
 800c934:	3201      	adds	r2, #1
 800c936:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c93a:	1049      	asrs	r1, r1, #1
 800c93c:	3008      	adds	r0, #8
 800c93e:	e777      	b.n	800c830 <_dtoa_r+0x340>
 800c940:	d022      	beq.n	800c988 <_dtoa_r+0x498>
 800c942:	f1cb 0100 	rsb	r1, fp, #0
 800c946:	4a70      	ldr	r2, [pc, #448]	; (800cb08 <_dtoa_r+0x618>)
 800c948:	f001 000f 	and.w	r0, r1, #15
 800c94c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c950:	ed92 7b00 	vldr	d7, [r2]
 800c954:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c958:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c95c:	486b      	ldr	r0, [pc, #428]	; (800cb0c <_dtoa_r+0x61c>)
 800c95e:	1109      	asrs	r1, r1, #4
 800c960:	2400      	movs	r4, #0
 800c962:	2202      	movs	r2, #2
 800c964:	b929      	cbnz	r1, 800c972 <_dtoa_r+0x482>
 800c966:	2c00      	cmp	r4, #0
 800c968:	f43f af6a 	beq.w	800c840 <_dtoa_r+0x350>
 800c96c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c970:	e766      	b.n	800c840 <_dtoa_r+0x350>
 800c972:	07cf      	lsls	r7, r1, #31
 800c974:	d505      	bpl.n	800c982 <_dtoa_r+0x492>
 800c976:	ed90 6b00 	vldr	d6, [r0]
 800c97a:	3201      	adds	r2, #1
 800c97c:	2401      	movs	r4, #1
 800c97e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c982:	1049      	asrs	r1, r1, #1
 800c984:	3008      	adds	r0, #8
 800c986:	e7ed      	b.n	800c964 <_dtoa_r+0x474>
 800c988:	2202      	movs	r2, #2
 800c98a:	e759      	b.n	800c840 <_dtoa_r+0x350>
 800c98c:	465f      	mov	r7, fp
 800c98e:	4648      	mov	r0, r9
 800c990:	e775      	b.n	800c87e <_dtoa_r+0x38e>
 800c992:	ec42 1b17 	vmov	d7, r1, r2
 800c996:	4a5c      	ldr	r2, [pc, #368]	; (800cb08 <_dtoa_r+0x618>)
 800c998:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c99c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c9a0:	9a01      	ldr	r2, [sp, #4]
 800c9a2:	1814      	adds	r4, r2, r0
 800c9a4:	9a07      	ldr	r2, [sp, #28]
 800c9a6:	b352      	cbz	r2, 800c9fe <_dtoa_r+0x50e>
 800c9a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c9ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c9b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c9b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c9b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c9bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c9c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c9c4:	ee14 2a90 	vmov	r2, s9
 800c9c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c9cc:	3230      	adds	r2, #48	; 0x30
 800c9ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c9d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9da:	f808 2b01 	strb.w	r2, [r8], #1
 800c9de:	d439      	bmi.n	800ca54 <_dtoa_r+0x564>
 800c9e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c9e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9ec:	d472      	bmi.n	800cad4 <_dtoa_r+0x5e4>
 800c9ee:	45a0      	cmp	r8, r4
 800c9f0:	f43f af6b 	beq.w	800c8ca <_dtoa_r+0x3da>
 800c9f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c9f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c9fc:	e7e0      	b.n	800c9c0 <_dtoa_r+0x4d0>
 800c9fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ca02:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ca06:	4621      	mov	r1, r4
 800ca08:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ca0c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ca10:	ee14 2a90 	vmov	r2, s9
 800ca14:	3230      	adds	r2, #48	; 0x30
 800ca16:	f808 2b01 	strb.w	r2, [r8], #1
 800ca1a:	45a0      	cmp	r8, r4
 800ca1c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ca20:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ca24:	d118      	bne.n	800ca58 <_dtoa_r+0x568>
 800ca26:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ca2a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ca2e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ca32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca36:	dc4d      	bgt.n	800cad4 <_dtoa_r+0x5e4>
 800ca38:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ca3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ca40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca44:	f57f af41 	bpl.w	800c8ca <_dtoa_r+0x3da>
 800ca48:	4688      	mov	r8, r1
 800ca4a:	3901      	subs	r1, #1
 800ca4c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ca50:	2b30      	cmp	r3, #48	; 0x30
 800ca52:	d0f9      	beq.n	800ca48 <_dtoa_r+0x558>
 800ca54:	46bb      	mov	fp, r7
 800ca56:	e02a      	b.n	800caae <_dtoa_r+0x5be>
 800ca58:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ca5c:	e7d6      	b.n	800ca0c <_dtoa_r+0x51c>
 800ca5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca62:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ca66:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ca6a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ca6e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ca72:	ee15 3a10 	vmov	r3, s10
 800ca76:	3330      	adds	r3, #48	; 0x30
 800ca78:	f808 3b01 	strb.w	r3, [r8], #1
 800ca7c:	9b01      	ldr	r3, [sp, #4]
 800ca7e:	eba8 0303 	sub.w	r3, r8, r3
 800ca82:	4599      	cmp	r9, r3
 800ca84:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ca88:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ca8c:	d133      	bne.n	800caf6 <_dtoa_r+0x606>
 800ca8e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ca92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ca96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca9a:	dc1a      	bgt.n	800cad2 <_dtoa_r+0x5e2>
 800ca9c:	eeb4 7b46 	vcmp.f64	d7, d6
 800caa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa4:	d103      	bne.n	800caae <_dtoa_r+0x5be>
 800caa6:	ee15 3a10 	vmov	r3, s10
 800caaa:	07d9      	lsls	r1, r3, #31
 800caac:	d411      	bmi.n	800cad2 <_dtoa_r+0x5e2>
 800caae:	4629      	mov	r1, r5
 800cab0:	4630      	mov	r0, r6
 800cab2:	f000 fe59 	bl	800d768 <_Bfree>
 800cab6:	2300      	movs	r3, #0
 800cab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800caba:	f888 3000 	strb.w	r3, [r8]
 800cabe:	f10b 0301 	add.w	r3, fp, #1
 800cac2:	6013      	str	r3, [r2, #0]
 800cac4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	f43f ad61 	beq.w	800c58e <_dtoa_r+0x9e>
 800cacc:	f8c3 8000 	str.w	r8, [r3]
 800cad0:	e55d      	b.n	800c58e <_dtoa_r+0x9e>
 800cad2:	465f      	mov	r7, fp
 800cad4:	4643      	mov	r3, r8
 800cad6:	4698      	mov	r8, r3
 800cad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cadc:	2a39      	cmp	r2, #57	; 0x39
 800cade:	d106      	bne.n	800caee <_dtoa_r+0x5fe>
 800cae0:	9a01      	ldr	r2, [sp, #4]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d1f7      	bne.n	800cad6 <_dtoa_r+0x5e6>
 800cae6:	9901      	ldr	r1, [sp, #4]
 800cae8:	2230      	movs	r2, #48	; 0x30
 800caea:	3701      	adds	r7, #1
 800caec:	700a      	strb	r2, [r1, #0]
 800caee:	781a      	ldrb	r2, [r3, #0]
 800caf0:	3201      	adds	r2, #1
 800caf2:	701a      	strb	r2, [r3, #0]
 800caf4:	e7ae      	b.n	800ca54 <_dtoa_r+0x564>
 800caf6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cafa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb02:	d1b2      	bne.n	800ca6a <_dtoa_r+0x57a>
 800cb04:	e7d3      	b.n	800caae <_dtoa_r+0x5be>
 800cb06:	bf00      	nop
 800cb08:	0800f518 	.word	0x0800f518
 800cb0c:	0800f4f0 	.word	0x0800f4f0
 800cb10:	9907      	ldr	r1, [sp, #28]
 800cb12:	2900      	cmp	r1, #0
 800cb14:	f000 80d0 	beq.w	800ccb8 <_dtoa_r+0x7c8>
 800cb18:	9906      	ldr	r1, [sp, #24]
 800cb1a:	2901      	cmp	r1, #1
 800cb1c:	f300 80b4 	bgt.w	800cc88 <_dtoa_r+0x798>
 800cb20:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cb22:	2900      	cmp	r1, #0
 800cb24:	f000 80ac 	beq.w	800cc80 <_dtoa_r+0x790>
 800cb28:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cb2c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cb30:	461c      	mov	r4, r3
 800cb32:	930a      	str	r3, [sp, #40]	; 0x28
 800cb34:	9b04      	ldr	r3, [sp, #16]
 800cb36:	4413      	add	r3, r2
 800cb38:	9304      	str	r3, [sp, #16]
 800cb3a:	9b05      	ldr	r3, [sp, #20]
 800cb3c:	2101      	movs	r1, #1
 800cb3e:	4413      	add	r3, r2
 800cb40:	4630      	mov	r0, r6
 800cb42:	9305      	str	r3, [sp, #20]
 800cb44:	f000 ff12 	bl	800d96c <__i2b>
 800cb48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb4a:	4607      	mov	r7, r0
 800cb4c:	f1b8 0f00 	cmp.w	r8, #0
 800cb50:	dd0d      	ble.n	800cb6e <_dtoa_r+0x67e>
 800cb52:	9a05      	ldr	r2, [sp, #20]
 800cb54:	2a00      	cmp	r2, #0
 800cb56:	dd0a      	ble.n	800cb6e <_dtoa_r+0x67e>
 800cb58:	4542      	cmp	r2, r8
 800cb5a:	9904      	ldr	r1, [sp, #16]
 800cb5c:	bfa8      	it	ge
 800cb5e:	4642      	movge	r2, r8
 800cb60:	1a89      	subs	r1, r1, r2
 800cb62:	9104      	str	r1, [sp, #16]
 800cb64:	9905      	ldr	r1, [sp, #20]
 800cb66:	eba8 0802 	sub.w	r8, r8, r2
 800cb6a:	1a8a      	subs	r2, r1, r2
 800cb6c:	9205      	str	r2, [sp, #20]
 800cb6e:	b303      	cbz	r3, 800cbb2 <_dtoa_r+0x6c2>
 800cb70:	9a07      	ldr	r2, [sp, #28]
 800cb72:	2a00      	cmp	r2, #0
 800cb74:	f000 80a5 	beq.w	800ccc2 <_dtoa_r+0x7d2>
 800cb78:	2c00      	cmp	r4, #0
 800cb7a:	dd13      	ble.n	800cba4 <_dtoa_r+0x6b4>
 800cb7c:	4639      	mov	r1, r7
 800cb7e:	4622      	mov	r2, r4
 800cb80:	4630      	mov	r0, r6
 800cb82:	930d      	str	r3, [sp, #52]	; 0x34
 800cb84:	f000 ffb2 	bl	800daec <__pow5mult>
 800cb88:	462a      	mov	r2, r5
 800cb8a:	4601      	mov	r1, r0
 800cb8c:	4607      	mov	r7, r0
 800cb8e:	4630      	mov	r0, r6
 800cb90:	f000 ff02 	bl	800d998 <__multiply>
 800cb94:	4629      	mov	r1, r5
 800cb96:	900a      	str	r0, [sp, #40]	; 0x28
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f000 fde5 	bl	800d768 <_Bfree>
 800cb9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cba0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cba2:	4615      	mov	r5, r2
 800cba4:	1b1a      	subs	r2, r3, r4
 800cba6:	d004      	beq.n	800cbb2 <_dtoa_r+0x6c2>
 800cba8:	4629      	mov	r1, r5
 800cbaa:	4630      	mov	r0, r6
 800cbac:	f000 ff9e 	bl	800daec <__pow5mult>
 800cbb0:	4605      	mov	r5, r0
 800cbb2:	2101      	movs	r1, #1
 800cbb4:	4630      	mov	r0, r6
 800cbb6:	f000 fed9 	bl	800d96c <__i2b>
 800cbba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	f340 8081 	ble.w	800ccc6 <_dtoa_r+0x7d6>
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	4601      	mov	r1, r0
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f000 ff8f 	bl	800daec <__pow5mult>
 800cbce:	9b06      	ldr	r3, [sp, #24]
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	4604      	mov	r4, r0
 800cbd4:	dd7a      	ble.n	800cccc <_dtoa_r+0x7dc>
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	930a      	str	r3, [sp, #40]	; 0x28
 800cbda:	6922      	ldr	r2, [r4, #16]
 800cbdc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cbe0:	6910      	ldr	r0, [r2, #16]
 800cbe2:	f000 fe73 	bl	800d8cc <__hi0bits>
 800cbe6:	f1c0 0020 	rsb	r0, r0, #32
 800cbea:	9b05      	ldr	r3, [sp, #20]
 800cbec:	4418      	add	r0, r3
 800cbee:	f010 001f 	ands.w	r0, r0, #31
 800cbf2:	f000 808c 	beq.w	800cd0e <_dtoa_r+0x81e>
 800cbf6:	f1c0 0220 	rsb	r2, r0, #32
 800cbfa:	2a04      	cmp	r2, #4
 800cbfc:	f340 8085 	ble.w	800cd0a <_dtoa_r+0x81a>
 800cc00:	f1c0 001c 	rsb	r0, r0, #28
 800cc04:	9b04      	ldr	r3, [sp, #16]
 800cc06:	4403      	add	r3, r0
 800cc08:	9304      	str	r3, [sp, #16]
 800cc0a:	9b05      	ldr	r3, [sp, #20]
 800cc0c:	4403      	add	r3, r0
 800cc0e:	4480      	add	r8, r0
 800cc10:	9305      	str	r3, [sp, #20]
 800cc12:	9b04      	ldr	r3, [sp, #16]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	dd05      	ble.n	800cc24 <_dtoa_r+0x734>
 800cc18:	4629      	mov	r1, r5
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f000 ffbf 	bl	800dba0 <__lshift>
 800cc22:	4605      	mov	r5, r0
 800cc24:	9b05      	ldr	r3, [sp, #20]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	dd05      	ble.n	800cc36 <_dtoa_r+0x746>
 800cc2a:	4621      	mov	r1, r4
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	4630      	mov	r0, r6
 800cc30:	f000 ffb6 	bl	800dba0 <__lshift>
 800cc34:	4604      	mov	r4, r0
 800cc36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d06a      	beq.n	800cd12 <_dtoa_r+0x822>
 800cc3c:	4621      	mov	r1, r4
 800cc3e:	4628      	mov	r0, r5
 800cc40:	f001 f81e 	bl	800dc80 <__mcmp>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	da64      	bge.n	800cd12 <_dtoa_r+0x822>
 800cc48:	2300      	movs	r3, #0
 800cc4a:	4629      	mov	r1, r5
 800cc4c:	220a      	movs	r2, #10
 800cc4e:	4630      	mov	r0, r6
 800cc50:	f000 fdac 	bl	800d7ac <__multadd>
 800cc54:	9b07      	ldr	r3, [sp, #28]
 800cc56:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc5a:	4605      	mov	r5, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	f000 8191 	beq.w	800cf84 <_dtoa_r+0xa94>
 800cc62:	4639      	mov	r1, r7
 800cc64:	2300      	movs	r3, #0
 800cc66:	220a      	movs	r2, #10
 800cc68:	4630      	mov	r0, r6
 800cc6a:	f000 fd9f 	bl	800d7ac <__multadd>
 800cc6e:	f1ba 0f00 	cmp.w	sl, #0
 800cc72:	4607      	mov	r7, r0
 800cc74:	f300 808d 	bgt.w	800cd92 <_dtoa_r+0x8a2>
 800cc78:	9b06      	ldr	r3, [sp, #24]
 800cc7a:	2b02      	cmp	r3, #2
 800cc7c:	dc50      	bgt.n	800cd20 <_dtoa_r+0x830>
 800cc7e:	e088      	b.n	800cd92 <_dtoa_r+0x8a2>
 800cc80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc82:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cc86:	e751      	b.n	800cb2c <_dtoa_r+0x63c>
 800cc88:	f109 34ff 	add.w	r4, r9, #4294967295
 800cc8c:	42a3      	cmp	r3, r4
 800cc8e:	bfbf      	itttt	lt
 800cc90:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800cc92:	1ae3      	sublt	r3, r4, r3
 800cc94:	18d2      	addlt	r2, r2, r3
 800cc96:	9209      	strlt	r2, [sp, #36]	; 0x24
 800cc98:	bfb6      	itet	lt
 800cc9a:	4623      	movlt	r3, r4
 800cc9c:	1b1c      	subge	r4, r3, r4
 800cc9e:	2400      	movlt	r4, #0
 800cca0:	f1b9 0f00 	cmp.w	r9, #0
 800cca4:	bfb5      	itete	lt
 800cca6:	9a04      	ldrlt	r2, [sp, #16]
 800cca8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800ccac:	eba2 0809 	sublt.w	r8, r2, r9
 800ccb0:	464a      	movge	r2, r9
 800ccb2:	bfb8      	it	lt
 800ccb4:	2200      	movlt	r2, #0
 800ccb6:	e73c      	b.n	800cb32 <_dtoa_r+0x642>
 800ccb8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ccbc:	9f07      	ldr	r7, [sp, #28]
 800ccbe:	461c      	mov	r4, r3
 800ccc0:	e744      	b.n	800cb4c <_dtoa_r+0x65c>
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	e770      	b.n	800cba8 <_dtoa_r+0x6b8>
 800ccc6:	9b06      	ldr	r3, [sp, #24]
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	dc18      	bgt.n	800ccfe <_dtoa_r+0x80e>
 800cccc:	9b02      	ldr	r3, [sp, #8]
 800ccce:	b9b3      	cbnz	r3, 800ccfe <_dtoa_r+0x80e>
 800ccd0:	9b03      	ldr	r3, [sp, #12]
 800ccd2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ccd6:	b9a2      	cbnz	r2, 800cd02 <_dtoa_r+0x812>
 800ccd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ccdc:	0d12      	lsrs	r2, r2, #20
 800ccde:	0512      	lsls	r2, r2, #20
 800cce0:	b18a      	cbz	r2, 800cd06 <_dtoa_r+0x816>
 800cce2:	9b04      	ldr	r3, [sp, #16]
 800cce4:	3301      	adds	r3, #1
 800cce6:	9304      	str	r3, [sp, #16]
 800cce8:	9b05      	ldr	r3, [sp, #20]
 800ccea:	3301      	adds	r3, #1
 800ccec:	9305      	str	r3, [sp, #20]
 800ccee:	2301      	movs	r3, #1
 800ccf0:	930a      	str	r3, [sp, #40]	; 0x28
 800ccf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f47f af70 	bne.w	800cbda <_dtoa_r+0x6ea>
 800ccfa:	2001      	movs	r0, #1
 800ccfc:	e775      	b.n	800cbea <_dtoa_r+0x6fa>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	e7f6      	b.n	800ccf0 <_dtoa_r+0x800>
 800cd02:	9b02      	ldr	r3, [sp, #8]
 800cd04:	e7f4      	b.n	800ccf0 <_dtoa_r+0x800>
 800cd06:	920a      	str	r2, [sp, #40]	; 0x28
 800cd08:	e7f3      	b.n	800ccf2 <_dtoa_r+0x802>
 800cd0a:	d082      	beq.n	800cc12 <_dtoa_r+0x722>
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	301c      	adds	r0, #28
 800cd10:	e778      	b.n	800cc04 <_dtoa_r+0x714>
 800cd12:	f1b9 0f00 	cmp.w	r9, #0
 800cd16:	dc37      	bgt.n	800cd88 <_dtoa_r+0x898>
 800cd18:	9b06      	ldr	r3, [sp, #24]
 800cd1a:	2b02      	cmp	r3, #2
 800cd1c:	dd34      	ble.n	800cd88 <_dtoa_r+0x898>
 800cd1e:	46ca      	mov	sl, r9
 800cd20:	f1ba 0f00 	cmp.w	sl, #0
 800cd24:	d10d      	bne.n	800cd42 <_dtoa_r+0x852>
 800cd26:	4621      	mov	r1, r4
 800cd28:	4653      	mov	r3, sl
 800cd2a:	2205      	movs	r2, #5
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	f000 fd3d 	bl	800d7ac <__multadd>
 800cd32:	4601      	mov	r1, r0
 800cd34:	4604      	mov	r4, r0
 800cd36:	4628      	mov	r0, r5
 800cd38:	f000 ffa2 	bl	800dc80 <__mcmp>
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	f73f adeb 	bgt.w	800c918 <_dtoa_r+0x428>
 800cd42:	9b08      	ldr	r3, [sp, #32]
 800cd44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cd48:	ea6f 0b03 	mvn.w	fp, r3
 800cd4c:	f04f 0900 	mov.w	r9, #0
 800cd50:	4621      	mov	r1, r4
 800cd52:	4630      	mov	r0, r6
 800cd54:	f000 fd08 	bl	800d768 <_Bfree>
 800cd58:	2f00      	cmp	r7, #0
 800cd5a:	f43f aea8 	beq.w	800caae <_dtoa_r+0x5be>
 800cd5e:	f1b9 0f00 	cmp.w	r9, #0
 800cd62:	d005      	beq.n	800cd70 <_dtoa_r+0x880>
 800cd64:	45b9      	cmp	r9, r7
 800cd66:	d003      	beq.n	800cd70 <_dtoa_r+0x880>
 800cd68:	4649      	mov	r1, r9
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	f000 fcfc 	bl	800d768 <_Bfree>
 800cd70:	4639      	mov	r1, r7
 800cd72:	4630      	mov	r0, r6
 800cd74:	f000 fcf8 	bl	800d768 <_Bfree>
 800cd78:	e699      	b.n	800caae <_dtoa_r+0x5be>
 800cd7a:	2400      	movs	r4, #0
 800cd7c:	4627      	mov	r7, r4
 800cd7e:	e7e0      	b.n	800cd42 <_dtoa_r+0x852>
 800cd80:	46bb      	mov	fp, r7
 800cd82:	4604      	mov	r4, r0
 800cd84:	4607      	mov	r7, r0
 800cd86:	e5c7      	b.n	800c918 <_dtoa_r+0x428>
 800cd88:	9b07      	ldr	r3, [sp, #28]
 800cd8a:	46ca      	mov	sl, r9
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f000 8100 	beq.w	800cf92 <_dtoa_r+0xaa2>
 800cd92:	f1b8 0f00 	cmp.w	r8, #0
 800cd96:	dd05      	ble.n	800cda4 <_dtoa_r+0x8b4>
 800cd98:	4639      	mov	r1, r7
 800cd9a:	4642      	mov	r2, r8
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	f000 feff 	bl	800dba0 <__lshift>
 800cda2:	4607      	mov	r7, r0
 800cda4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d05d      	beq.n	800ce66 <_dtoa_r+0x976>
 800cdaa:	6879      	ldr	r1, [r7, #4]
 800cdac:	4630      	mov	r0, r6
 800cdae:	f000 fc9b 	bl	800d6e8 <_Balloc>
 800cdb2:	4680      	mov	r8, r0
 800cdb4:	b928      	cbnz	r0, 800cdc2 <_dtoa_r+0x8d2>
 800cdb6:	4b82      	ldr	r3, [pc, #520]	; (800cfc0 <_dtoa_r+0xad0>)
 800cdb8:	4602      	mov	r2, r0
 800cdba:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cdbe:	f7ff bbaf 	b.w	800c520 <_dtoa_r+0x30>
 800cdc2:	693a      	ldr	r2, [r7, #16]
 800cdc4:	3202      	adds	r2, #2
 800cdc6:	0092      	lsls	r2, r2, #2
 800cdc8:	f107 010c 	add.w	r1, r7, #12
 800cdcc:	300c      	adds	r0, #12
 800cdce:	f7fd fe23 	bl	800aa18 <memcpy>
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	4641      	mov	r1, r8
 800cdd6:	4630      	mov	r0, r6
 800cdd8:	f000 fee2 	bl	800dba0 <__lshift>
 800cddc:	9b01      	ldr	r3, [sp, #4]
 800cdde:	3301      	adds	r3, #1
 800cde0:	9304      	str	r3, [sp, #16]
 800cde2:	9b01      	ldr	r3, [sp, #4]
 800cde4:	4453      	add	r3, sl
 800cde6:	9308      	str	r3, [sp, #32]
 800cde8:	9b02      	ldr	r3, [sp, #8]
 800cdea:	f003 0301 	and.w	r3, r3, #1
 800cdee:	46b9      	mov	r9, r7
 800cdf0:	9307      	str	r3, [sp, #28]
 800cdf2:	4607      	mov	r7, r0
 800cdf4:	9b04      	ldr	r3, [sp, #16]
 800cdf6:	4621      	mov	r1, r4
 800cdf8:	3b01      	subs	r3, #1
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	9302      	str	r3, [sp, #8]
 800cdfe:	f7ff faeb 	bl	800c3d8 <quorem>
 800ce02:	4603      	mov	r3, r0
 800ce04:	3330      	adds	r3, #48	; 0x30
 800ce06:	9005      	str	r0, [sp, #20]
 800ce08:	4649      	mov	r1, r9
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce0e:	f000 ff37 	bl	800dc80 <__mcmp>
 800ce12:	463a      	mov	r2, r7
 800ce14:	4682      	mov	sl, r0
 800ce16:	4621      	mov	r1, r4
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f000 ff4d 	bl	800dcb8 <__mdiff>
 800ce1e:	68c2      	ldr	r2, [r0, #12]
 800ce20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce22:	4680      	mov	r8, r0
 800ce24:	bb0a      	cbnz	r2, 800ce6a <_dtoa_r+0x97a>
 800ce26:	4601      	mov	r1, r0
 800ce28:	4628      	mov	r0, r5
 800ce2a:	f000 ff29 	bl	800dc80 <__mcmp>
 800ce2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce30:	4602      	mov	r2, r0
 800ce32:	4641      	mov	r1, r8
 800ce34:	4630      	mov	r0, r6
 800ce36:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ce3a:	f000 fc95 	bl	800d768 <_Bfree>
 800ce3e:	9b06      	ldr	r3, [sp, #24]
 800ce40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce42:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ce46:	ea43 0102 	orr.w	r1, r3, r2
 800ce4a:	9b07      	ldr	r3, [sp, #28]
 800ce4c:	430b      	orrs	r3, r1
 800ce4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce50:	d10d      	bne.n	800ce6e <_dtoa_r+0x97e>
 800ce52:	2b39      	cmp	r3, #57	; 0x39
 800ce54:	d029      	beq.n	800ceaa <_dtoa_r+0x9ba>
 800ce56:	f1ba 0f00 	cmp.w	sl, #0
 800ce5a:	dd01      	ble.n	800ce60 <_dtoa_r+0x970>
 800ce5c:	9b05      	ldr	r3, [sp, #20]
 800ce5e:	3331      	adds	r3, #49	; 0x31
 800ce60:	9a02      	ldr	r2, [sp, #8]
 800ce62:	7013      	strb	r3, [r2, #0]
 800ce64:	e774      	b.n	800cd50 <_dtoa_r+0x860>
 800ce66:	4638      	mov	r0, r7
 800ce68:	e7b8      	b.n	800cddc <_dtoa_r+0x8ec>
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	e7e1      	b.n	800ce32 <_dtoa_r+0x942>
 800ce6e:	f1ba 0f00 	cmp.w	sl, #0
 800ce72:	db06      	blt.n	800ce82 <_dtoa_r+0x992>
 800ce74:	9906      	ldr	r1, [sp, #24]
 800ce76:	ea41 0a0a 	orr.w	sl, r1, sl
 800ce7a:	9907      	ldr	r1, [sp, #28]
 800ce7c:	ea5a 0101 	orrs.w	r1, sl, r1
 800ce80:	d120      	bne.n	800cec4 <_dtoa_r+0x9d4>
 800ce82:	2a00      	cmp	r2, #0
 800ce84:	ddec      	ble.n	800ce60 <_dtoa_r+0x970>
 800ce86:	4629      	mov	r1, r5
 800ce88:	2201      	movs	r2, #1
 800ce8a:	4630      	mov	r0, r6
 800ce8c:	9304      	str	r3, [sp, #16]
 800ce8e:	f000 fe87 	bl	800dba0 <__lshift>
 800ce92:	4621      	mov	r1, r4
 800ce94:	4605      	mov	r5, r0
 800ce96:	f000 fef3 	bl	800dc80 <__mcmp>
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	9b04      	ldr	r3, [sp, #16]
 800ce9e:	dc02      	bgt.n	800cea6 <_dtoa_r+0x9b6>
 800cea0:	d1de      	bne.n	800ce60 <_dtoa_r+0x970>
 800cea2:	07da      	lsls	r2, r3, #31
 800cea4:	d5dc      	bpl.n	800ce60 <_dtoa_r+0x970>
 800cea6:	2b39      	cmp	r3, #57	; 0x39
 800cea8:	d1d8      	bne.n	800ce5c <_dtoa_r+0x96c>
 800ceaa:	9a02      	ldr	r2, [sp, #8]
 800ceac:	2339      	movs	r3, #57	; 0x39
 800ceae:	7013      	strb	r3, [r2, #0]
 800ceb0:	4643      	mov	r3, r8
 800ceb2:	4698      	mov	r8, r3
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ceba:	2a39      	cmp	r2, #57	; 0x39
 800cebc:	d051      	beq.n	800cf62 <_dtoa_r+0xa72>
 800cebe:	3201      	adds	r2, #1
 800cec0:	701a      	strb	r2, [r3, #0]
 800cec2:	e745      	b.n	800cd50 <_dtoa_r+0x860>
 800cec4:	2a00      	cmp	r2, #0
 800cec6:	dd03      	ble.n	800ced0 <_dtoa_r+0x9e0>
 800cec8:	2b39      	cmp	r3, #57	; 0x39
 800ceca:	d0ee      	beq.n	800ceaa <_dtoa_r+0x9ba>
 800cecc:	3301      	adds	r3, #1
 800cece:	e7c7      	b.n	800ce60 <_dtoa_r+0x970>
 800ced0:	9a04      	ldr	r2, [sp, #16]
 800ced2:	9908      	ldr	r1, [sp, #32]
 800ced4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ced8:	428a      	cmp	r2, r1
 800ceda:	d02b      	beq.n	800cf34 <_dtoa_r+0xa44>
 800cedc:	4629      	mov	r1, r5
 800cede:	2300      	movs	r3, #0
 800cee0:	220a      	movs	r2, #10
 800cee2:	4630      	mov	r0, r6
 800cee4:	f000 fc62 	bl	800d7ac <__multadd>
 800cee8:	45b9      	cmp	r9, r7
 800ceea:	4605      	mov	r5, r0
 800ceec:	f04f 0300 	mov.w	r3, #0
 800cef0:	f04f 020a 	mov.w	r2, #10
 800cef4:	4649      	mov	r1, r9
 800cef6:	4630      	mov	r0, r6
 800cef8:	d107      	bne.n	800cf0a <_dtoa_r+0xa1a>
 800cefa:	f000 fc57 	bl	800d7ac <__multadd>
 800cefe:	4681      	mov	r9, r0
 800cf00:	4607      	mov	r7, r0
 800cf02:	9b04      	ldr	r3, [sp, #16]
 800cf04:	3301      	adds	r3, #1
 800cf06:	9304      	str	r3, [sp, #16]
 800cf08:	e774      	b.n	800cdf4 <_dtoa_r+0x904>
 800cf0a:	f000 fc4f 	bl	800d7ac <__multadd>
 800cf0e:	4639      	mov	r1, r7
 800cf10:	4681      	mov	r9, r0
 800cf12:	2300      	movs	r3, #0
 800cf14:	220a      	movs	r2, #10
 800cf16:	4630      	mov	r0, r6
 800cf18:	f000 fc48 	bl	800d7ac <__multadd>
 800cf1c:	4607      	mov	r7, r0
 800cf1e:	e7f0      	b.n	800cf02 <_dtoa_r+0xa12>
 800cf20:	f1ba 0f00 	cmp.w	sl, #0
 800cf24:	9a01      	ldr	r2, [sp, #4]
 800cf26:	bfcc      	ite	gt
 800cf28:	46d0      	movgt	r8, sl
 800cf2a:	f04f 0801 	movle.w	r8, #1
 800cf2e:	4490      	add	r8, r2
 800cf30:	f04f 0900 	mov.w	r9, #0
 800cf34:	4629      	mov	r1, r5
 800cf36:	2201      	movs	r2, #1
 800cf38:	4630      	mov	r0, r6
 800cf3a:	9302      	str	r3, [sp, #8]
 800cf3c:	f000 fe30 	bl	800dba0 <__lshift>
 800cf40:	4621      	mov	r1, r4
 800cf42:	4605      	mov	r5, r0
 800cf44:	f000 fe9c 	bl	800dc80 <__mcmp>
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	dcb1      	bgt.n	800ceb0 <_dtoa_r+0x9c0>
 800cf4c:	d102      	bne.n	800cf54 <_dtoa_r+0xa64>
 800cf4e:	9b02      	ldr	r3, [sp, #8]
 800cf50:	07db      	lsls	r3, r3, #31
 800cf52:	d4ad      	bmi.n	800ceb0 <_dtoa_r+0x9c0>
 800cf54:	4643      	mov	r3, r8
 800cf56:	4698      	mov	r8, r3
 800cf58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf5c:	2a30      	cmp	r2, #48	; 0x30
 800cf5e:	d0fa      	beq.n	800cf56 <_dtoa_r+0xa66>
 800cf60:	e6f6      	b.n	800cd50 <_dtoa_r+0x860>
 800cf62:	9a01      	ldr	r2, [sp, #4]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d1a4      	bne.n	800ceb2 <_dtoa_r+0x9c2>
 800cf68:	f10b 0b01 	add.w	fp, fp, #1
 800cf6c:	2331      	movs	r3, #49	; 0x31
 800cf6e:	e778      	b.n	800ce62 <_dtoa_r+0x972>
 800cf70:	4b14      	ldr	r3, [pc, #80]	; (800cfc4 <_dtoa_r+0xad4>)
 800cf72:	f7ff bb27 	b.w	800c5c4 <_dtoa_r+0xd4>
 800cf76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	f47f ab03 	bne.w	800c584 <_dtoa_r+0x94>
 800cf7e:	4b12      	ldr	r3, [pc, #72]	; (800cfc8 <_dtoa_r+0xad8>)
 800cf80:	f7ff bb20 	b.w	800c5c4 <_dtoa_r+0xd4>
 800cf84:	f1ba 0f00 	cmp.w	sl, #0
 800cf88:	dc03      	bgt.n	800cf92 <_dtoa_r+0xaa2>
 800cf8a:	9b06      	ldr	r3, [sp, #24]
 800cf8c:	2b02      	cmp	r3, #2
 800cf8e:	f73f aec7 	bgt.w	800cd20 <_dtoa_r+0x830>
 800cf92:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cf96:	4621      	mov	r1, r4
 800cf98:	4628      	mov	r0, r5
 800cf9a:	f7ff fa1d 	bl	800c3d8 <quorem>
 800cf9e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cfa2:	f808 3b01 	strb.w	r3, [r8], #1
 800cfa6:	9a01      	ldr	r2, [sp, #4]
 800cfa8:	eba8 0202 	sub.w	r2, r8, r2
 800cfac:	4592      	cmp	sl, r2
 800cfae:	ddb7      	ble.n	800cf20 <_dtoa_r+0xa30>
 800cfb0:	4629      	mov	r1, r5
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	220a      	movs	r2, #10
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	f000 fbf8 	bl	800d7ac <__multadd>
 800cfbc:	4605      	mov	r5, r0
 800cfbe:	e7ea      	b.n	800cf96 <_dtoa_r+0xaa6>
 800cfc0:	0800f408 	.word	0x0800f408
 800cfc4:	0800f20c 	.word	0x0800f20c
 800cfc8:	0800f389 	.word	0x0800f389

0800cfcc <rshift>:
 800cfcc:	6903      	ldr	r3, [r0, #16]
 800cfce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cfd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cfda:	f100 0414 	add.w	r4, r0, #20
 800cfde:	dd45      	ble.n	800d06c <rshift+0xa0>
 800cfe0:	f011 011f 	ands.w	r1, r1, #31
 800cfe4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cfe8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cfec:	d10c      	bne.n	800d008 <rshift+0x3c>
 800cfee:	f100 0710 	add.w	r7, r0, #16
 800cff2:	4629      	mov	r1, r5
 800cff4:	42b1      	cmp	r1, r6
 800cff6:	d334      	bcc.n	800d062 <rshift+0x96>
 800cff8:	1a9b      	subs	r3, r3, r2
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	1eea      	subs	r2, r5, #3
 800cffe:	4296      	cmp	r6, r2
 800d000:	bf38      	it	cc
 800d002:	2300      	movcc	r3, #0
 800d004:	4423      	add	r3, r4
 800d006:	e015      	b.n	800d034 <rshift+0x68>
 800d008:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d00c:	f1c1 0820 	rsb	r8, r1, #32
 800d010:	40cf      	lsrs	r7, r1
 800d012:	f105 0e04 	add.w	lr, r5, #4
 800d016:	46a1      	mov	r9, r4
 800d018:	4576      	cmp	r6, lr
 800d01a:	46f4      	mov	ip, lr
 800d01c:	d815      	bhi.n	800d04a <rshift+0x7e>
 800d01e:	1a9a      	subs	r2, r3, r2
 800d020:	0092      	lsls	r2, r2, #2
 800d022:	3a04      	subs	r2, #4
 800d024:	3501      	adds	r5, #1
 800d026:	42ae      	cmp	r6, r5
 800d028:	bf38      	it	cc
 800d02a:	2200      	movcc	r2, #0
 800d02c:	18a3      	adds	r3, r4, r2
 800d02e:	50a7      	str	r7, [r4, r2]
 800d030:	b107      	cbz	r7, 800d034 <rshift+0x68>
 800d032:	3304      	adds	r3, #4
 800d034:	1b1a      	subs	r2, r3, r4
 800d036:	42a3      	cmp	r3, r4
 800d038:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d03c:	bf08      	it	eq
 800d03e:	2300      	moveq	r3, #0
 800d040:	6102      	str	r2, [r0, #16]
 800d042:	bf08      	it	eq
 800d044:	6143      	streq	r3, [r0, #20]
 800d046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d04a:	f8dc c000 	ldr.w	ip, [ip]
 800d04e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d052:	ea4c 0707 	orr.w	r7, ip, r7
 800d056:	f849 7b04 	str.w	r7, [r9], #4
 800d05a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d05e:	40cf      	lsrs	r7, r1
 800d060:	e7da      	b.n	800d018 <rshift+0x4c>
 800d062:	f851 cb04 	ldr.w	ip, [r1], #4
 800d066:	f847 cf04 	str.w	ip, [r7, #4]!
 800d06a:	e7c3      	b.n	800cff4 <rshift+0x28>
 800d06c:	4623      	mov	r3, r4
 800d06e:	e7e1      	b.n	800d034 <rshift+0x68>

0800d070 <__hexdig_fun>:
 800d070:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d074:	2b09      	cmp	r3, #9
 800d076:	d802      	bhi.n	800d07e <__hexdig_fun+0xe>
 800d078:	3820      	subs	r0, #32
 800d07a:	b2c0      	uxtb	r0, r0
 800d07c:	4770      	bx	lr
 800d07e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d082:	2b05      	cmp	r3, #5
 800d084:	d801      	bhi.n	800d08a <__hexdig_fun+0x1a>
 800d086:	3847      	subs	r0, #71	; 0x47
 800d088:	e7f7      	b.n	800d07a <__hexdig_fun+0xa>
 800d08a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d08e:	2b05      	cmp	r3, #5
 800d090:	d801      	bhi.n	800d096 <__hexdig_fun+0x26>
 800d092:	3827      	subs	r0, #39	; 0x27
 800d094:	e7f1      	b.n	800d07a <__hexdig_fun+0xa>
 800d096:	2000      	movs	r0, #0
 800d098:	4770      	bx	lr
	...

0800d09c <__gethex>:
 800d09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a0:	ed2d 8b02 	vpush	{d8}
 800d0a4:	b089      	sub	sp, #36	; 0x24
 800d0a6:	ee08 0a10 	vmov	s16, r0
 800d0aa:	9304      	str	r3, [sp, #16]
 800d0ac:	4bb4      	ldr	r3, [pc, #720]	; (800d380 <__gethex+0x2e4>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	9301      	str	r3, [sp, #4]
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	468b      	mov	fp, r1
 800d0b6:	4690      	mov	r8, r2
 800d0b8:	f7f3 f8c2 	bl	8000240 <strlen>
 800d0bc:	9b01      	ldr	r3, [sp, #4]
 800d0be:	f8db 2000 	ldr.w	r2, [fp]
 800d0c2:	4403      	add	r3, r0
 800d0c4:	4682      	mov	sl, r0
 800d0c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d0ca:	9305      	str	r3, [sp, #20]
 800d0cc:	1c93      	adds	r3, r2, #2
 800d0ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d0d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d0d6:	32fe      	adds	r2, #254	; 0xfe
 800d0d8:	18d1      	adds	r1, r2, r3
 800d0da:	461f      	mov	r7, r3
 800d0dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d0e0:	9100      	str	r1, [sp, #0]
 800d0e2:	2830      	cmp	r0, #48	; 0x30
 800d0e4:	d0f8      	beq.n	800d0d8 <__gethex+0x3c>
 800d0e6:	f7ff ffc3 	bl	800d070 <__hexdig_fun>
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d13a      	bne.n	800d166 <__gethex+0xca>
 800d0f0:	9901      	ldr	r1, [sp, #4]
 800d0f2:	4652      	mov	r2, sl
 800d0f4:	4638      	mov	r0, r7
 800d0f6:	f001 fa1f 	bl	800e538 <strncmp>
 800d0fa:	4605      	mov	r5, r0
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	d168      	bne.n	800d1d2 <__gethex+0x136>
 800d100:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d104:	eb07 060a 	add.w	r6, r7, sl
 800d108:	f7ff ffb2 	bl	800d070 <__hexdig_fun>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d062      	beq.n	800d1d6 <__gethex+0x13a>
 800d110:	4633      	mov	r3, r6
 800d112:	7818      	ldrb	r0, [r3, #0]
 800d114:	2830      	cmp	r0, #48	; 0x30
 800d116:	461f      	mov	r7, r3
 800d118:	f103 0301 	add.w	r3, r3, #1
 800d11c:	d0f9      	beq.n	800d112 <__gethex+0x76>
 800d11e:	f7ff ffa7 	bl	800d070 <__hexdig_fun>
 800d122:	2301      	movs	r3, #1
 800d124:	fab0 f480 	clz	r4, r0
 800d128:	0964      	lsrs	r4, r4, #5
 800d12a:	4635      	mov	r5, r6
 800d12c:	9300      	str	r3, [sp, #0]
 800d12e:	463a      	mov	r2, r7
 800d130:	4616      	mov	r6, r2
 800d132:	3201      	adds	r2, #1
 800d134:	7830      	ldrb	r0, [r6, #0]
 800d136:	f7ff ff9b 	bl	800d070 <__hexdig_fun>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d1f8      	bne.n	800d130 <__gethex+0x94>
 800d13e:	9901      	ldr	r1, [sp, #4]
 800d140:	4652      	mov	r2, sl
 800d142:	4630      	mov	r0, r6
 800d144:	f001 f9f8 	bl	800e538 <strncmp>
 800d148:	b980      	cbnz	r0, 800d16c <__gethex+0xd0>
 800d14a:	b94d      	cbnz	r5, 800d160 <__gethex+0xc4>
 800d14c:	eb06 050a 	add.w	r5, r6, sl
 800d150:	462a      	mov	r2, r5
 800d152:	4616      	mov	r6, r2
 800d154:	3201      	adds	r2, #1
 800d156:	7830      	ldrb	r0, [r6, #0]
 800d158:	f7ff ff8a 	bl	800d070 <__hexdig_fun>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d1f8      	bne.n	800d152 <__gethex+0xb6>
 800d160:	1bad      	subs	r5, r5, r6
 800d162:	00ad      	lsls	r5, r5, #2
 800d164:	e004      	b.n	800d170 <__gethex+0xd4>
 800d166:	2400      	movs	r4, #0
 800d168:	4625      	mov	r5, r4
 800d16a:	e7e0      	b.n	800d12e <__gethex+0x92>
 800d16c:	2d00      	cmp	r5, #0
 800d16e:	d1f7      	bne.n	800d160 <__gethex+0xc4>
 800d170:	7833      	ldrb	r3, [r6, #0]
 800d172:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d176:	2b50      	cmp	r3, #80	; 0x50
 800d178:	d13b      	bne.n	800d1f2 <__gethex+0x156>
 800d17a:	7873      	ldrb	r3, [r6, #1]
 800d17c:	2b2b      	cmp	r3, #43	; 0x2b
 800d17e:	d02c      	beq.n	800d1da <__gethex+0x13e>
 800d180:	2b2d      	cmp	r3, #45	; 0x2d
 800d182:	d02e      	beq.n	800d1e2 <__gethex+0x146>
 800d184:	1c71      	adds	r1, r6, #1
 800d186:	f04f 0900 	mov.w	r9, #0
 800d18a:	7808      	ldrb	r0, [r1, #0]
 800d18c:	f7ff ff70 	bl	800d070 <__hexdig_fun>
 800d190:	1e43      	subs	r3, r0, #1
 800d192:	b2db      	uxtb	r3, r3
 800d194:	2b18      	cmp	r3, #24
 800d196:	d82c      	bhi.n	800d1f2 <__gethex+0x156>
 800d198:	f1a0 0210 	sub.w	r2, r0, #16
 800d19c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d1a0:	f7ff ff66 	bl	800d070 <__hexdig_fun>
 800d1a4:	1e43      	subs	r3, r0, #1
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	2b18      	cmp	r3, #24
 800d1aa:	d91d      	bls.n	800d1e8 <__gethex+0x14c>
 800d1ac:	f1b9 0f00 	cmp.w	r9, #0
 800d1b0:	d000      	beq.n	800d1b4 <__gethex+0x118>
 800d1b2:	4252      	negs	r2, r2
 800d1b4:	4415      	add	r5, r2
 800d1b6:	f8cb 1000 	str.w	r1, [fp]
 800d1ba:	b1e4      	cbz	r4, 800d1f6 <__gethex+0x15a>
 800d1bc:	9b00      	ldr	r3, [sp, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	bf14      	ite	ne
 800d1c2:	2700      	movne	r7, #0
 800d1c4:	2706      	moveq	r7, #6
 800d1c6:	4638      	mov	r0, r7
 800d1c8:	b009      	add	sp, #36	; 0x24
 800d1ca:	ecbd 8b02 	vpop	{d8}
 800d1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d2:	463e      	mov	r6, r7
 800d1d4:	4625      	mov	r5, r4
 800d1d6:	2401      	movs	r4, #1
 800d1d8:	e7ca      	b.n	800d170 <__gethex+0xd4>
 800d1da:	f04f 0900 	mov.w	r9, #0
 800d1de:	1cb1      	adds	r1, r6, #2
 800d1e0:	e7d3      	b.n	800d18a <__gethex+0xee>
 800d1e2:	f04f 0901 	mov.w	r9, #1
 800d1e6:	e7fa      	b.n	800d1de <__gethex+0x142>
 800d1e8:	230a      	movs	r3, #10
 800d1ea:	fb03 0202 	mla	r2, r3, r2, r0
 800d1ee:	3a10      	subs	r2, #16
 800d1f0:	e7d4      	b.n	800d19c <__gethex+0x100>
 800d1f2:	4631      	mov	r1, r6
 800d1f4:	e7df      	b.n	800d1b6 <__gethex+0x11a>
 800d1f6:	1bf3      	subs	r3, r6, r7
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	4621      	mov	r1, r4
 800d1fc:	2b07      	cmp	r3, #7
 800d1fe:	dc0b      	bgt.n	800d218 <__gethex+0x17c>
 800d200:	ee18 0a10 	vmov	r0, s16
 800d204:	f000 fa70 	bl	800d6e8 <_Balloc>
 800d208:	4604      	mov	r4, r0
 800d20a:	b940      	cbnz	r0, 800d21e <__gethex+0x182>
 800d20c:	4b5d      	ldr	r3, [pc, #372]	; (800d384 <__gethex+0x2e8>)
 800d20e:	4602      	mov	r2, r0
 800d210:	21de      	movs	r1, #222	; 0xde
 800d212:	485d      	ldr	r0, [pc, #372]	; (800d388 <__gethex+0x2ec>)
 800d214:	f001 f9b2 	bl	800e57c <__assert_func>
 800d218:	3101      	adds	r1, #1
 800d21a:	105b      	asrs	r3, r3, #1
 800d21c:	e7ee      	b.n	800d1fc <__gethex+0x160>
 800d21e:	f100 0914 	add.w	r9, r0, #20
 800d222:	f04f 0b00 	mov.w	fp, #0
 800d226:	f1ca 0301 	rsb	r3, sl, #1
 800d22a:	f8cd 9008 	str.w	r9, [sp, #8]
 800d22e:	f8cd b000 	str.w	fp, [sp]
 800d232:	9306      	str	r3, [sp, #24]
 800d234:	42b7      	cmp	r7, r6
 800d236:	d340      	bcc.n	800d2ba <__gethex+0x21e>
 800d238:	9802      	ldr	r0, [sp, #8]
 800d23a:	9b00      	ldr	r3, [sp, #0]
 800d23c:	f840 3b04 	str.w	r3, [r0], #4
 800d240:	eba0 0009 	sub.w	r0, r0, r9
 800d244:	1080      	asrs	r0, r0, #2
 800d246:	0146      	lsls	r6, r0, #5
 800d248:	6120      	str	r0, [r4, #16]
 800d24a:	4618      	mov	r0, r3
 800d24c:	f000 fb3e 	bl	800d8cc <__hi0bits>
 800d250:	1a30      	subs	r0, r6, r0
 800d252:	f8d8 6000 	ldr.w	r6, [r8]
 800d256:	42b0      	cmp	r0, r6
 800d258:	dd63      	ble.n	800d322 <__gethex+0x286>
 800d25a:	1b87      	subs	r7, r0, r6
 800d25c:	4639      	mov	r1, r7
 800d25e:	4620      	mov	r0, r4
 800d260:	f000 fedf 	bl	800e022 <__any_on>
 800d264:	4682      	mov	sl, r0
 800d266:	b1a8      	cbz	r0, 800d294 <__gethex+0x1f8>
 800d268:	1e7b      	subs	r3, r7, #1
 800d26a:	1159      	asrs	r1, r3, #5
 800d26c:	f003 021f 	and.w	r2, r3, #31
 800d270:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d274:	f04f 0a01 	mov.w	sl, #1
 800d278:	fa0a f202 	lsl.w	r2, sl, r2
 800d27c:	420a      	tst	r2, r1
 800d27e:	d009      	beq.n	800d294 <__gethex+0x1f8>
 800d280:	4553      	cmp	r3, sl
 800d282:	dd05      	ble.n	800d290 <__gethex+0x1f4>
 800d284:	1eb9      	subs	r1, r7, #2
 800d286:	4620      	mov	r0, r4
 800d288:	f000 fecb 	bl	800e022 <__any_on>
 800d28c:	2800      	cmp	r0, #0
 800d28e:	d145      	bne.n	800d31c <__gethex+0x280>
 800d290:	f04f 0a02 	mov.w	sl, #2
 800d294:	4639      	mov	r1, r7
 800d296:	4620      	mov	r0, r4
 800d298:	f7ff fe98 	bl	800cfcc <rshift>
 800d29c:	443d      	add	r5, r7
 800d29e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d2a2:	42ab      	cmp	r3, r5
 800d2a4:	da4c      	bge.n	800d340 <__gethex+0x2a4>
 800d2a6:	ee18 0a10 	vmov	r0, s16
 800d2aa:	4621      	mov	r1, r4
 800d2ac:	f000 fa5c 	bl	800d768 <_Bfree>
 800d2b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	6013      	str	r3, [r2, #0]
 800d2b6:	27a3      	movs	r7, #163	; 0xa3
 800d2b8:	e785      	b.n	800d1c6 <__gethex+0x12a>
 800d2ba:	1e73      	subs	r3, r6, #1
 800d2bc:	9a05      	ldr	r2, [sp, #20]
 800d2be:	9303      	str	r3, [sp, #12]
 800d2c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d019      	beq.n	800d2fc <__gethex+0x260>
 800d2c8:	f1bb 0f20 	cmp.w	fp, #32
 800d2cc:	d107      	bne.n	800d2de <__gethex+0x242>
 800d2ce:	9b02      	ldr	r3, [sp, #8]
 800d2d0:	9a00      	ldr	r2, [sp, #0]
 800d2d2:	f843 2b04 	str.w	r2, [r3], #4
 800d2d6:	9302      	str	r3, [sp, #8]
 800d2d8:	2300      	movs	r3, #0
 800d2da:	9300      	str	r3, [sp, #0]
 800d2dc:	469b      	mov	fp, r3
 800d2de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d2e2:	f7ff fec5 	bl	800d070 <__hexdig_fun>
 800d2e6:	9b00      	ldr	r3, [sp, #0]
 800d2e8:	f000 000f 	and.w	r0, r0, #15
 800d2ec:	fa00 f00b 	lsl.w	r0, r0, fp
 800d2f0:	4303      	orrs	r3, r0
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	f10b 0b04 	add.w	fp, fp, #4
 800d2f8:	9b03      	ldr	r3, [sp, #12]
 800d2fa:	e00d      	b.n	800d318 <__gethex+0x27c>
 800d2fc:	9b03      	ldr	r3, [sp, #12]
 800d2fe:	9a06      	ldr	r2, [sp, #24]
 800d300:	4413      	add	r3, r2
 800d302:	42bb      	cmp	r3, r7
 800d304:	d3e0      	bcc.n	800d2c8 <__gethex+0x22c>
 800d306:	4618      	mov	r0, r3
 800d308:	9901      	ldr	r1, [sp, #4]
 800d30a:	9307      	str	r3, [sp, #28]
 800d30c:	4652      	mov	r2, sl
 800d30e:	f001 f913 	bl	800e538 <strncmp>
 800d312:	9b07      	ldr	r3, [sp, #28]
 800d314:	2800      	cmp	r0, #0
 800d316:	d1d7      	bne.n	800d2c8 <__gethex+0x22c>
 800d318:	461e      	mov	r6, r3
 800d31a:	e78b      	b.n	800d234 <__gethex+0x198>
 800d31c:	f04f 0a03 	mov.w	sl, #3
 800d320:	e7b8      	b.n	800d294 <__gethex+0x1f8>
 800d322:	da0a      	bge.n	800d33a <__gethex+0x29e>
 800d324:	1a37      	subs	r7, r6, r0
 800d326:	4621      	mov	r1, r4
 800d328:	ee18 0a10 	vmov	r0, s16
 800d32c:	463a      	mov	r2, r7
 800d32e:	f000 fc37 	bl	800dba0 <__lshift>
 800d332:	1bed      	subs	r5, r5, r7
 800d334:	4604      	mov	r4, r0
 800d336:	f100 0914 	add.w	r9, r0, #20
 800d33a:	f04f 0a00 	mov.w	sl, #0
 800d33e:	e7ae      	b.n	800d29e <__gethex+0x202>
 800d340:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d344:	42a8      	cmp	r0, r5
 800d346:	dd72      	ble.n	800d42e <__gethex+0x392>
 800d348:	1b45      	subs	r5, r0, r5
 800d34a:	42ae      	cmp	r6, r5
 800d34c:	dc36      	bgt.n	800d3bc <__gethex+0x320>
 800d34e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d352:	2b02      	cmp	r3, #2
 800d354:	d02a      	beq.n	800d3ac <__gethex+0x310>
 800d356:	2b03      	cmp	r3, #3
 800d358:	d02c      	beq.n	800d3b4 <__gethex+0x318>
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d11c      	bne.n	800d398 <__gethex+0x2fc>
 800d35e:	42ae      	cmp	r6, r5
 800d360:	d11a      	bne.n	800d398 <__gethex+0x2fc>
 800d362:	2e01      	cmp	r6, #1
 800d364:	d112      	bne.n	800d38c <__gethex+0x2f0>
 800d366:	9a04      	ldr	r2, [sp, #16]
 800d368:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d36c:	6013      	str	r3, [r2, #0]
 800d36e:	2301      	movs	r3, #1
 800d370:	6123      	str	r3, [r4, #16]
 800d372:	f8c9 3000 	str.w	r3, [r9]
 800d376:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d378:	2762      	movs	r7, #98	; 0x62
 800d37a:	601c      	str	r4, [r3, #0]
 800d37c:	e723      	b.n	800d1c6 <__gethex+0x12a>
 800d37e:	bf00      	nop
 800d380:	0800f480 	.word	0x0800f480
 800d384:	0800f408 	.word	0x0800f408
 800d388:	0800f419 	.word	0x0800f419
 800d38c:	1e71      	subs	r1, r6, #1
 800d38e:	4620      	mov	r0, r4
 800d390:	f000 fe47 	bl	800e022 <__any_on>
 800d394:	2800      	cmp	r0, #0
 800d396:	d1e6      	bne.n	800d366 <__gethex+0x2ca>
 800d398:	ee18 0a10 	vmov	r0, s16
 800d39c:	4621      	mov	r1, r4
 800d39e:	f000 f9e3 	bl	800d768 <_Bfree>
 800d3a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	6013      	str	r3, [r2, #0]
 800d3a8:	2750      	movs	r7, #80	; 0x50
 800d3aa:	e70c      	b.n	800d1c6 <__gethex+0x12a>
 800d3ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1f2      	bne.n	800d398 <__gethex+0x2fc>
 800d3b2:	e7d8      	b.n	800d366 <__gethex+0x2ca>
 800d3b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d1d5      	bne.n	800d366 <__gethex+0x2ca>
 800d3ba:	e7ed      	b.n	800d398 <__gethex+0x2fc>
 800d3bc:	1e6f      	subs	r7, r5, #1
 800d3be:	f1ba 0f00 	cmp.w	sl, #0
 800d3c2:	d131      	bne.n	800d428 <__gethex+0x38c>
 800d3c4:	b127      	cbz	r7, 800d3d0 <__gethex+0x334>
 800d3c6:	4639      	mov	r1, r7
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f000 fe2a 	bl	800e022 <__any_on>
 800d3ce:	4682      	mov	sl, r0
 800d3d0:	117b      	asrs	r3, r7, #5
 800d3d2:	2101      	movs	r1, #1
 800d3d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d3d8:	f007 071f 	and.w	r7, r7, #31
 800d3dc:	fa01 f707 	lsl.w	r7, r1, r7
 800d3e0:	421f      	tst	r7, r3
 800d3e2:	4629      	mov	r1, r5
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	bf18      	it	ne
 800d3e8:	f04a 0a02 	orrne.w	sl, sl, #2
 800d3ec:	1b76      	subs	r6, r6, r5
 800d3ee:	f7ff fded 	bl	800cfcc <rshift>
 800d3f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d3f6:	2702      	movs	r7, #2
 800d3f8:	f1ba 0f00 	cmp.w	sl, #0
 800d3fc:	d048      	beq.n	800d490 <__gethex+0x3f4>
 800d3fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d402:	2b02      	cmp	r3, #2
 800d404:	d015      	beq.n	800d432 <__gethex+0x396>
 800d406:	2b03      	cmp	r3, #3
 800d408:	d017      	beq.n	800d43a <__gethex+0x39e>
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d109      	bne.n	800d422 <__gethex+0x386>
 800d40e:	f01a 0f02 	tst.w	sl, #2
 800d412:	d006      	beq.n	800d422 <__gethex+0x386>
 800d414:	f8d9 0000 	ldr.w	r0, [r9]
 800d418:	ea4a 0a00 	orr.w	sl, sl, r0
 800d41c:	f01a 0f01 	tst.w	sl, #1
 800d420:	d10e      	bne.n	800d440 <__gethex+0x3a4>
 800d422:	f047 0710 	orr.w	r7, r7, #16
 800d426:	e033      	b.n	800d490 <__gethex+0x3f4>
 800d428:	f04f 0a01 	mov.w	sl, #1
 800d42c:	e7d0      	b.n	800d3d0 <__gethex+0x334>
 800d42e:	2701      	movs	r7, #1
 800d430:	e7e2      	b.n	800d3f8 <__gethex+0x35c>
 800d432:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d434:	f1c3 0301 	rsb	r3, r3, #1
 800d438:	9315      	str	r3, [sp, #84]	; 0x54
 800d43a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d0f0      	beq.n	800d422 <__gethex+0x386>
 800d440:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d444:	f104 0314 	add.w	r3, r4, #20
 800d448:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d44c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d450:	f04f 0c00 	mov.w	ip, #0
 800d454:	4618      	mov	r0, r3
 800d456:	f853 2b04 	ldr.w	r2, [r3], #4
 800d45a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d45e:	d01c      	beq.n	800d49a <__gethex+0x3fe>
 800d460:	3201      	adds	r2, #1
 800d462:	6002      	str	r2, [r0, #0]
 800d464:	2f02      	cmp	r7, #2
 800d466:	f104 0314 	add.w	r3, r4, #20
 800d46a:	d13f      	bne.n	800d4ec <__gethex+0x450>
 800d46c:	f8d8 2000 	ldr.w	r2, [r8]
 800d470:	3a01      	subs	r2, #1
 800d472:	42b2      	cmp	r2, r6
 800d474:	d10a      	bne.n	800d48c <__gethex+0x3f0>
 800d476:	1171      	asrs	r1, r6, #5
 800d478:	2201      	movs	r2, #1
 800d47a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d47e:	f006 061f 	and.w	r6, r6, #31
 800d482:	fa02 f606 	lsl.w	r6, r2, r6
 800d486:	421e      	tst	r6, r3
 800d488:	bf18      	it	ne
 800d48a:	4617      	movne	r7, r2
 800d48c:	f047 0720 	orr.w	r7, r7, #32
 800d490:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d492:	601c      	str	r4, [r3, #0]
 800d494:	9b04      	ldr	r3, [sp, #16]
 800d496:	601d      	str	r5, [r3, #0]
 800d498:	e695      	b.n	800d1c6 <__gethex+0x12a>
 800d49a:	4299      	cmp	r1, r3
 800d49c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d4a0:	d8d8      	bhi.n	800d454 <__gethex+0x3b8>
 800d4a2:	68a3      	ldr	r3, [r4, #8]
 800d4a4:	459b      	cmp	fp, r3
 800d4a6:	db19      	blt.n	800d4dc <__gethex+0x440>
 800d4a8:	6861      	ldr	r1, [r4, #4]
 800d4aa:	ee18 0a10 	vmov	r0, s16
 800d4ae:	3101      	adds	r1, #1
 800d4b0:	f000 f91a 	bl	800d6e8 <_Balloc>
 800d4b4:	4681      	mov	r9, r0
 800d4b6:	b918      	cbnz	r0, 800d4c0 <__gethex+0x424>
 800d4b8:	4b1a      	ldr	r3, [pc, #104]	; (800d524 <__gethex+0x488>)
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	2184      	movs	r1, #132	; 0x84
 800d4be:	e6a8      	b.n	800d212 <__gethex+0x176>
 800d4c0:	6922      	ldr	r2, [r4, #16]
 800d4c2:	3202      	adds	r2, #2
 800d4c4:	f104 010c 	add.w	r1, r4, #12
 800d4c8:	0092      	lsls	r2, r2, #2
 800d4ca:	300c      	adds	r0, #12
 800d4cc:	f7fd faa4 	bl	800aa18 <memcpy>
 800d4d0:	4621      	mov	r1, r4
 800d4d2:	ee18 0a10 	vmov	r0, s16
 800d4d6:	f000 f947 	bl	800d768 <_Bfree>
 800d4da:	464c      	mov	r4, r9
 800d4dc:	6923      	ldr	r3, [r4, #16]
 800d4de:	1c5a      	adds	r2, r3, #1
 800d4e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d4e4:	6122      	str	r2, [r4, #16]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	615a      	str	r2, [r3, #20]
 800d4ea:	e7bb      	b.n	800d464 <__gethex+0x3c8>
 800d4ec:	6922      	ldr	r2, [r4, #16]
 800d4ee:	455a      	cmp	r2, fp
 800d4f0:	dd0b      	ble.n	800d50a <__gethex+0x46e>
 800d4f2:	2101      	movs	r1, #1
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f7ff fd69 	bl	800cfcc <rshift>
 800d4fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d4fe:	3501      	adds	r5, #1
 800d500:	42ab      	cmp	r3, r5
 800d502:	f6ff aed0 	blt.w	800d2a6 <__gethex+0x20a>
 800d506:	2701      	movs	r7, #1
 800d508:	e7c0      	b.n	800d48c <__gethex+0x3f0>
 800d50a:	f016 061f 	ands.w	r6, r6, #31
 800d50e:	d0fa      	beq.n	800d506 <__gethex+0x46a>
 800d510:	4453      	add	r3, sl
 800d512:	f1c6 0620 	rsb	r6, r6, #32
 800d516:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d51a:	f000 f9d7 	bl	800d8cc <__hi0bits>
 800d51e:	42b0      	cmp	r0, r6
 800d520:	dbe7      	blt.n	800d4f2 <__gethex+0x456>
 800d522:	e7f0      	b.n	800d506 <__gethex+0x46a>
 800d524:	0800f408 	.word	0x0800f408

0800d528 <L_shift>:
 800d528:	f1c2 0208 	rsb	r2, r2, #8
 800d52c:	0092      	lsls	r2, r2, #2
 800d52e:	b570      	push	{r4, r5, r6, lr}
 800d530:	f1c2 0620 	rsb	r6, r2, #32
 800d534:	6843      	ldr	r3, [r0, #4]
 800d536:	6804      	ldr	r4, [r0, #0]
 800d538:	fa03 f506 	lsl.w	r5, r3, r6
 800d53c:	432c      	orrs	r4, r5
 800d53e:	40d3      	lsrs	r3, r2
 800d540:	6004      	str	r4, [r0, #0]
 800d542:	f840 3f04 	str.w	r3, [r0, #4]!
 800d546:	4288      	cmp	r0, r1
 800d548:	d3f4      	bcc.n	800d534 <L_shift+0xc>
 800d54a:	bd70      	pop	{r4, r5, r6, pc}

0800d54c <__match>:
 800d54c:	b530      	push	{r4, r5, lr}
 800d54e:	6803      	ldr	r3, [r0, #0]
 800d550:	3301      	adds	r3, #1
 800d552:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d556:	b914      	cbnz	r4, 800d55e <__match+0x12>
 800d558:	6003      	str	r3, [r0, #0]
 800d55a:	2001      	movs	r0, #1
 800d55c:	bd30      	pop	{r4, r5, pc}
 800d55e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d562:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d566:	2d19      	cmp	r5, #25
 800d568:	bf98      	it	ls
 800d56a:	3220      	addls	r2, #32
 800d56c:	42a2      	cmp	r2, r4
 800d56e:	d0f0      	beq.n	800d552 <__match+0x6>
 800d570:	2000      	movs	r0, #0
 800d572:	e7f3      	b.n	800d55c <__match+0x10>

0800d574 <__hexnan>:
 800d574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d578:	680b      	ldr	r3, [r1, #0]
 800d57a:	115e      	asrs	r6, r3, #5
 800d57c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d580:	f013 031f 	ands.w	r3, r3, #31
 800d584:	b087      	sub	sp, #28
 800d586:	bf18      	it	ne
 800d588:	3604      	addne	r6, #4
 800d58a:	2500      	movs	r5, #0
 800d58c:	1f37      	subs	r7, r6, #4
 800d58e:	4690      	mov	r8, r2
 800d590:	6802      	ldr	r2, [r0, #0]
 800d592:	9301      	str	r3, [sp, #4]
 800d594:	4682      	mov	sl, r0
 800d596:	f846 5c04 	str.w	r5, [r6, #-4]
 800d59a:	46b9      	mov	r9, r7
 800d59c:	463c      	mov	r4, r7
 800d59e:	9502      	str	r5, [sp, #8]
 800d5a0:	46ab      	mov	fp, r5
 800d5a2:	7851      	ldrb	r1, [r2, #1]
 800d5a4:	1c53      	adds	r3, r2, #1
 800d5a6:	9303      	str	r3, [sp, #12]
 800d5a8:	b341      	cbz	r1, 800d5fc <__hexnan+0x88>
 800d5aa:	4608      	mov	r0, r1
 800d5ac:	9205      	str	r2, [sp, #20]
 800d5ae:	9104      	str	r1, [sp, #16]
 800d5b0:	f7ff fd5e 	bl	800d070 <__hexdig_fun>
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	d14f      	bne.n	800d658 <__hexnan+0xe4>
 800d5b8:	9904      	ldr	r1, [sp, #16]
 800d5ba:	9a05      	ldr	r2, [sp, #20]
 800d5bc:	2920      	cmp	r1, #32
 800d5be:	d818      	bhi.n	800d5f2 <__hexnan+0x7e>
 800d5c0:	9b02      	ldr	r3, [sp, #8]
 800d5c2:	459b      	cmp	fp, r3
 800d5c4:	dd13      	ble.n	800d5ee <__hexnan+0x7a>
 800d5c6:	454c      	cmp	r4, r9
 800d5c8:	d206      	bcs.n	800d5d8 <__hexnan+0x64>
 800d5ca:	2d07      	cmp	r5, #7
 800d5cc:	dc04      	bgt.n	800d5d8 <__hexnan+0x64>
 800d5ce:	462a      	mov	r2, r5
 800d5d0:	4649      	mov	r1, r9
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f7ff ffa8 	bl	800d528 <L_shift>
 800d5d8:	4544      	cmp	r4, r8
 800d5da:	d950      	bls.n	800d67e <__hexnan+0x10a>
 800d5dc:	2300      	movs	r3, #0
 800d5de:	f1a4 0904 	sub.w	r9, r4, #4
 800d5e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5e6:	f8cd b008 	str.w	fp, [sp, #8]
 800d5ea:	464c      	mov	r4, r9
 800d5ec:	461d      	mov	r5, r3
 800d5ee:	9a03      	ldr	r2, [sp, #12]
 800d5f0:	e7d7      	b.n	800d5a2 <__hexnan+0x2e>
 800d5f2:	2929      	cmp	r1, #41	; 0x29
 800d5f4:	d156      	bne.n	800d6a4 <__hexnan+0x130>
 800d5f6:	3202      	adds	r2, #2
 800d5f8:	f8ca 2000 	str.w	r2, [sl]
 800d5fc:	f1bb 0f00 	cmp.w	fp, #0
 800d600:	d050      	beq.n	800d6a4 <__hexnan+0x130>
 800d602:	454c      	cmp	r4, r9
 800d604:	d206      	bcs.n	800d614 <__hexnan+0xa0>
 800d606:	2d07      	cmp	r5, #7
 800d608:	dc04      	bgt.n	800d614 <__hexnan+0xa0>
 800d60a:	462a      	mov	r2, r5
 800d60c:	4649      	mov	r1, r9
 800d60e:	4620      	mov	r0, r4
 800d610:	f7ff ff8a 	bl	800d528 <L_shift>
 800d614:	4544      	cmp	r4, r8
 800d616:	d934      	bls.n	800d682 <__hexnan+0x10e>
 800d618:	f1a8 0204 	sub.w	r2, r8, #4
 800d61c:	4623      	mov	r3, r4
 800d61e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d622:	f842 1f04 	str.w	r1, [r2, #4]!
 800d626:	429f      	cmp	r7, r3
 800d628:	d2f9      	bcs.n	800d61e <__hexnan+0xaa>
 800d62a:	1b3b      	subs	r3, r7, r4
 800d62c:	f023 0303 	bic.w	r3, r3, #3
 800d630:	3304      	adds	r3, #4
 800d632:	3401      	adds	r4, #1
 800d634:	3e03      	subs	r6, #3
 800d636:	42b4      	cmp	r4, r6
 800d638:	bf88      	it	hi
 800d63a:	2304      	movhi	r3, #4
 800d63c:	4443      	add	r3, r8
 800d63e:	2200      	movs	r2, #0
 800d640:	f843 2b04 	str.w	r2, [r3], #4
 800d644:	429f      	cmp	r7, r3
 800d646:	d2fb      	bcs.n	800d640 <__hexnan+0xcc>
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	b91b      	cbnz	r3, 800d654 <__hexnan+0xe0>
 800d64c:	4547      	cmp	r7, r8
 800d64e:	d127      	bne.n	800d6a0 <__hexnan+0x12c>
 800d650:	2301      	movs	r3, #1
 800d652:	603b      	str	r3, [r7, #0]
 800d654:	2005      	movs	r0, #5
 800d656:	e026      	b.n	800d6a6 <__hexnan+0x132>
 800d658:	3501      	adds	r5, #1
 800d65a:	2d08      	cmp	r5, #8
 800d65c:	f10b 0b01 	add.w	fp, fp, #1
 800d660:	dd06      	ble.n	800d670 <__hexnan+0xfc>
 800d662:	4544      	cmp	r4, r8
 800d664:	d9c3      	bls.n	800d5ee <__hexnan+0x7a>
 800d666:	2300      	movs	r3, #0
 800d668:	f844 3c04 	str.w	r3, [r4, #-4]
 800d66c:	2501      	movs	r5, #1
 800d66e:	3c04      	subs	r4, #4
 800d670:	6822      	ldr	r2, [r4, #0]
 800d672:	f000 000f 	and.w	r0, r0, #15
 800d676:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d67a:	6022      	str	r2, [r4, #0]
 800d67c:	e7b7      	b.n	800d5ee <__hexnan+0x7a>
 800d67e:	2508      	movs	r5, #8
 800d680:	e7b5      	b.n	800d5ee <__hexnan+0x7a>
 800d682:	9b01      	ldr	r3, [sp, #4]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d0df      	beq.n	800d648 <__hexnan+0xd4>
 800d688:	f04f 32ff 	mov.w	r2, #4294967295
 800d68c:	f1c3 0320 	rsb	r3, r3, #32
 800d690:	fa22 f303 	lsr.w	r3, r2, r3
 800d694:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d698:	401a      	ands	r2, r3
 800d69a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d69e:	e7d3      	b.n	800d648 <__hexnan+0xd4>
 800d6a0:	3f04      	subs	r7, #4
 800d6a2:	e7d1      	b.n	800d648 <__hexnan+0xd4>
 800d6a4:	2004      	movs	r0, #4
 800d6a6:	b007      	add	sp, #28
 800d6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6ac <_localeconv_r>:
 800d6ac:	4800      	ldr	r0, [pc, #0]	; (800d6b0 <_localeconv_r+0x4>)
 800d6ae:	4770      	bx	lr
 800d6b0:	20000168 	.word	0x20000168

0800d6b4 <malloc>:
 800d6b4:	4b02      	ldr	r3, [pc, #8]	; (800d6c0 <malloc+0xc>)
 800d6b6:	4601      	mov	r1, r0
 800d6b8:	6818      	ldr	r0, [r3, #0]
 800d6ba:	f000 bd55 	b.w	800e168 <_malloc_r>
 800d6be:	bf00      	nop
 800d6c0:	20000010 	.word	0x20000010

0800d6c4 <__ascii_mbtowc>:
 800d6c4:	b082      	sub	sp, #8
 800d6c6:	b901      	cbnz	r1, 800d6ca <__ascii_mbtowc+0x6>
 800d6c8:	a901      	add	r1, sp, #4
 800d6ca:	b142      	cbz	r2, 800d6de <__ascii_mbtowc+0x1a>
 800d6cc:	b14b      	cbz	r3, 800d6e2 <__ascii_mbtowc+0x1e>
 800d6ce:	7813      	ldrb	r3, [r2, #0]
 800d6d0:	600b      	str	r3, [r1, #0]
 800d6d2:	7812      	ldrb	r2, [r2, #0]
 800d6d4:	1e10      	subs	r0, r2, #0
 800d6d6:	bf18      	it	ne
 800d6d8:	2001      	movne	r0, #1
 800d6da:	b002      	add	sp, #8
 800d6dc:	4770      	bx	lr
 800d6de:	4610      	mov	r0, r2
 800d6e0:	e7fb      	b.n	800d6da <__ascii_mbtowc+0x16>
 800d6e2:	f06f 0001 	mvn.w	r0, #1
 800d6e6:	e7f8      	b.n	800d6da <__ascii_mbtowc+0x16>

0800d6e8 <_Balloc>:
 800d6e8:	b570      	push	{r4, r5, r6, lr}
 800d6ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d6ec:	4604      	mov	r4, r0
 800d6ee:	460d      	mov	r5, r1
 800d6f0:	b976      	cbnz	r6, 800d710 <_Balloc+0x28>
 800d6f2:	2010      	movs	r0, #16
 800d6f4:	f7ff ffde 	bl	800d6b4 <malloc>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	6260      	str	r0, [r4, #36]	; 0x24
 800d6fc:	b920      	cbnz	r0, 800d708 <_Balloc+0x20>
 800d6fe:	4b18      	ldr	r3, [pc, #96]	; (800d760 <_Balloc+0x78>)
 800d700:	4818      	ldr	r0, [pc, #96]	; (800d764 <_Balloc+0x7c>)
 800d702:	2166      	movs	r1, #102	; 0x66
 800d704:	f000 ff3a 	bl	800e57c <__assert_func>
 800d708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d70c:	6006      	str	r6, [r0, #0]
 800d70e:	60c6      	str	r6, [r0, #12]
 800d710:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d712:	68f3      	ldr	r3, [r6, #12]
 800d714:	b183      	cbz	r3, 800d738 <_Balloc+0x50>
 800d716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d71e:	b9b8      	cbnz	r0, 800d750 <_Balloc+0x68>
 800d720:	2101      	movs	r1, #1
 800d722:	fa01 f605 	lsl.w	r6, r1, r5
 800d726:	1d72      	adds	r2, r6, #5
 800d728:	0092      	lsls	r2, r2, #2
 800d72a:	4620      	mov	r0, r4
 800d72c:	f000 fc9a 	bl	800e064 <_calloc_r>
 800d730:	b160      	cbz	r0, 800d74c <_Balloc+0x64>
 800d732:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d736:	e00e      	b.n	800d756 <_Balloc+0x6e>
 800d738:	2221      	movs	r2, #33	; 0x21
 800d73a:	2104      	movs	r1, #4
 800d73c:	4620      	mov	r0, r4
 800d73e:	f000 fc91 	bl	800e064 <_calloc_r>
 800d742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d744:	60f0      	str	r0, [r6, #12]
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d1e4      	bne.n	800d716 <_Balloc+0x2e>
 800d74c:	2000      	movs	r0, #0
 800d74e:	bd70      	pop	{r4, r5, r6, pc}
 800d750:	6802      	ldr	r2, [r0, #0]
 800d752:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d756:	2300      	movs	r3, #0
 800d758:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d75c:	e7f7      	b.n	800d74e <_Balloc+0x66>
 800d75e:	bf00      	nop
 800d760:	0800f396 	.word	0x0800f396
 800d764:	0800f494 	.word	0x0800f494

0800d768 <_Bfree>:
 800d768:	b570      	push	{r4, r5, r6, lr}
 800d76a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d76c:	4605      	mov	r5, r0
 800d76e:	460c      	mov	r4, r1
 800d770:	b976      	cbnz	r6, 800d790 <_Bfree+0x28>
 800d772:	2010      	movs	r0, #16
 800d774:	f7ff ff9e 	bl	800d6b4 <malloc>
 800d778:	4602      	mov	r2, r0
 800d77a:	6268      	str	r0, [r5, #36]	; 0x24
 800d77c:	b920      	cbnz	r0, 800d788 <_Bfree+0x20>
 800d77e:	4b09      	ldr	r3, [pc, #36]	; (800d7a4 <_Bfree+0x3c>)
 800d780:	4809      	ldr	r0, [pc, #36]	; (800d7a8 <_Bfree+0x40>)
 800d782:	218a      	movs	r1, #138	; 0x8a
 800d784:	f000 fefa 	bl	800e57c <__assert_func>
 800d788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d78c:	6006      	str	r6, [r0, #0]
 800d78e:	60c6      	str	r6, [r0, #12]
 800d790:	b13c      	cbz	r4, 800d7a2 <_Bfree+0x3a>
 800d792:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d794:	6862      	ldr	r2, [r4, #4]
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d79c:	6021      	str	r1, [r4, #0]
 800d79e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d7a2:	bd70      	pop	{r4, r5, r6, pc}
 800d7a4:	0800f396 	.word	0x0800f396
 800d7a8:	0800f494 	.word	0x0800f494

0800d7ac <__multadd>:
 800d7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b0:	690d      	ldr	r5, [r1, #16]
 800d7b2:	4607      	mov	r7, r0
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	461e      	mov	r6, r3
 800d7b8:	f101 0c14 	add.w	ip, r1, #20
 800d7bc:	2000      	movs	r0, #0
 800d7be:	f8dc 3000 	ldr.w	r3, [ip]
 800d7c2:	b299      	uxth	r1, r3
 800d7c4:	fb02 6101 	mla	r1, r2, r1, r6
 800d7c8:	0c1e      	lsrs	r6, r3, #16
 800d7ca:	0c0b      	lsrs	r3, r1, #16
 800d7cc:	fb02 3306 	mla	r3, r2, r6, r3
 800d7d0:	b289      	uxth	r1, r1
 800d7d2:	3001      	adds	r0, #1
 800d7d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7d8:	4285      	cmp	r5, r0
 800d7da:	f84c 1b04 	str.w	r1, [ip], #4
 800d7de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7e2:	dcec      	bgt.n	800d7be <__multadd+0x12>
 800d7e4:	b30e      	cbz	r6, 800d82a <__multadd+0x7e>
 800d7e6:	68a3      	ldr	r3, [r4, #8]
 800d7e8:	42ab      	cmp	r3, r5
 800d7ea:	dc19      	bgt.n	800d820 <__multadd+0x74>
 800d7ec:	6861      	ldr	r1, [r4, #4]
 800d7ee:	4638      	mov	r0, r7
 800d7f0:	3101      	adds	r1, #1
 800d7f2:	f7ff ff79 	bl	800d6e8 <_Balloc>
 800d7f6:	4680      	mov	r8, r0
 800d7f8:	b928      	cbnz	r0, 800d806 <__multadd+0x5a>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	4b0c      	ldr	r3, [pc, #48]	; (800d830 <__multadd+0x84>)
 800d7fe:	480d      	ldr	r0, [pc, #52]	; (800d834 <__multadd+0x88>)
 800d800:	21b5      	movs	r1, #181	; 0xb5
 800d802:	f000 febb 	bl	800e57c <__assert_func>
 800d806:	6922      	ldr	r2, [r4, #16]
 800d808:	3202      	adds	r2, #2
 800d80a:	f104 010c 	add.w	r1, r4, #12
 800d80e:	0092      	lsls	r2, r2, #2
 800d810:	300c      	adds	r0, #12
 800d812:	f7fd f901 	bl	800aa18 <memcpy>
 800d816:	4621      	mov	r1, r4
 800d818:	4638      	mov	r0, r7
 800d81a:	f7ff ffa5 	bl	800d768 <_Bfree>
 800d81e:	4644      	mov	r4, r8
 800d820:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d824:	3501      	adds	r5, #1
 800d826:	615e      	str	r6, [r3, #20]
 800d828:	6125      	str	r5, [r4, #16]
 800d82a:	4620      	mov	r0, r4
 800d82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d830:	0800f408 	.word	0x0800f408
 800d834:	0800f494 	.word	0x0800f494

0800d838 <__s2b>:
 800d838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d83c:	460c      	mov	r4, r1
 800d83e:	4615      	mov	r5, r2
 800d840:	461f      	mov	r7, r3
 800d842:	2209      	movs	r2, #9
 800d844:	3308      	adds	r3, #8
 800d846:	4606      	mov	r6, r0
 800d848:	fb93 f3f2 	sdiv	r3, r3, r2
 800d84c:	2100      	movs	r1, #0
 800d84e:	2201      	movs	r2, #1
 800d850:	429a      	cmp	r2, r3
 800d852:	db09      	blt.n	800d868 <__s2b+0x30>
 800d854:	4630      	mov	r0, r6
 800d856:	f7ff ff47 	bl	800d6e8 <_Balloc>
 800d85a:	b940      	cbnz	r0, 800d86e <__s2b+0x36>
 800d85c:	4602      	mov	r2, r0
 800d85e:	4b19      	ldr	r3, [pc, #100]	; (800d8c4 <__s2b+0x8c>)
 800d860:	4819      	ldr	r0, [pc, #100]	; (800d8c8 <__s2b+0x90>)
 800d862:	21ce      	movs	r1, #206	; 0xce
 800d864:	f000 fe8a 	bl	800e57c <__assert_func>
 800d868:	0052      	lsls	r2, r2, #1
 800d86a:	3101      	adds	r1, #1
 800d86c:	e7f0      	b.n	800d850 <__s2b+0x18>
 800d86e:	9b08      	ldr	r3, [sp, #32]
 800d870:	6143      	str	r3, [r0, #20]
 800d872:	2d09      	cmp	r5, #9
 800d874:	f04f 0301 	mov.w	r3, #1
 800d878:	6103      	str	r3, [r0, #16]
 800d87a:	dd16      	ble.n	800d8aa <__s2b+0x72>
 800d87c:	f104 0909 	add.w	r9, r4, #9
 800d880:	46c8      	mov	r8, r9
 800d882:	442c      	add	r4, r5
 800d884:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d888:	4601      	mov	r1, r0
 800d88a:	3b30      	subs	r3, #48	; 0x30
 800d88c:	220a      	movs	r2, #10
 800d88e:	4630      	mov	r0, r6
 800d890:	f7ff ff8c 	bl	800d7ac <__multadd>
 800d894:	45a0      	cmp	r8, r4
 800d896:	d1f5      	bne.n	800d884 <__s2b+0x4c>
 800d898:	f1a5 0408 	sub.w	r4, r5, #8
 800d89c:	444c      	add	r4, r9
 800d89e:	1b2d      	subs	r5, r5, r4
 800d8a0:	1963      	adds	r3, r4, r5
 800d8a2:	42bb      	cmp	r3, r7
 800d8a4:	db04      	blt.n	800d8b0 <__s2b+0x78>
 800d8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8aa:	340a      	adds	r4, #10
 800d8ac:	2509      	movs	r5, #9
 800d8ae:	e7f6      	b.n	800d89e <__s2b+0x66>
 800d8b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d8b4:	4601      	mov	r1, r0
 800d8b6:	3b30      	subs	r3, #48	; 0x30
 800d8b8:	220a      	movs	r2, #10
 800d8ba:	4630      	mov	r0, r6
 800d8bc:	f7ff ff76 	bl	800d7ac <__multadd>
 800d8c0:	e7ee      	b.n	800d8a0 <__s2b+0x68>
 800d8c2:	bf00      	nop
 800d8c4:	0800f408 	.word	0x0800f408
 800d8c8:	0800f494 	.word	0x0800f494

0800d8cc <__hi0bits>:
 800d8cc:	0c03      	lsrs	r3, r0, #16
 800d8ce:	041b      	lsls	r3, r3, #16
 800d8d0:	b9d3      	cbnz	r3, 800d908 <__hi0bits+0x3c>
 800d8d2:	0400      	lsls	r0, r0, #16
 800d8d4:	2310      	movs	r3, #16
 800d8d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d8da:	bf04      	itt	eq
 800d8dc:	0200      	lsleq	r0, r0, #8
 800d8de:	3308      	addeq	r3, #8
 800d8e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d8e4:	bf04      	itt	eq
 800d8e6:	0100      	lsleq	r0, r0, #4
 800d8e8:	3304      	addeq	r3, #4
 800d8ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d8ee:	bf04      	itt	eq
 800d8f0:	0080      	lsleq	r0, r0, #2
 800d8f2:	3302      	addeq	r3, #2
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	db05      	blt.n	800d904 <__hi0bits+0x38>
 800d8f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d8fc:	f103 0301 	add.w	r3, r3, #1
 800d900:	bf08      	it	eq
 800d902:	2320      	moveq	r3, #32
 800d904:	4618      	mov	r0, r3
 800d906:	4770      	bx	lr
 800d908:	2300      	movs	r3, #0
 800d90a:	e7e4      	b.n	800d8d6 <__hi0bits+0xa>

0800d90c <__lo0bits>:
 800d90c:	6803      	ldr	r3, [r0, #0]
 800d90e:	f013 0207 	ands.w	r2, r3, #7
 800d912:	4601      	mov	r1, r0
 800d914:	d00b      	beq.n	800d92e <__lo0bits+0x22>
 800d916:	07da      	lsls	r2, r3, #31
 800d918:	d423      	bmi.n	800d962 <__lo0bits+0x56>
 800d91a:	0798      	lsls	r0, r3, #30
 800d91c:	bf49      	itett	mi
 800d91e:	085b      	lsrmi	r3, r3, #1
 800d920:	089b      	lsrpl	r3, r3, #2
 800d922:	2001      	movmi	r0, #1
 800d924:	600b      	strmi	r3, [r1, #0]
 800d926:	bf5c      	itt	pl
 800d928:	600b      	strpl	r3, [r1, #0]
 800d92a:	2002      	movpl	r0, #2
 800d92c:	4770      	bx	lr
 800d92e:	b298      	uxth	r0, r3
 800d930:	b9a8      	cbnz	r0, 800d95e <__lo0bits+0x52>
 800d932:	0c1b      	lsrs	r3, r3, #16
 800d934:	2010      	movs	r0, #16
 800d936:	b2da      	uxtb	r2, r3
 800d938:	b90a      	cbnz	r2, 800d93e <__lo0bits+0x32>
 800d93a:	3008      	adds	r0, #8
 800d93c:	0a1b      	lsrs	r3, r3, #8
 800d93e:	071a      	lsls	r2, r3, #28
 800d940:	bf04      	itt	eq
 800d942:	091b      	lsreq	r3, r3, #4
 800d944:	3004      	addeq	r0, #4
 800d946:	079a      	lsls	r2, r3, #30
 800d948:	bf04      	itt	eq
 800d94a:	089b      	lsreq	r3, r3, #2
 800d94c:	3002      	addeq	r0, #2
 800d94e:	07da      	lsls	r2, r3, #31
 800d950:	d403      	bmi.n	800d95a <__lo0bits+0x4e>
 800d952:	085b      	lsrs	r3, r3, #1
 800d954:	f100 0001 	add.w	r0, r0, #1
 800d958:	d005      	beq.n	800d966 <__lo0bits+0x5a>
 800d95a:	600b      	str	r3, [r1, #0]
 800d95c:	4770      	bx	lr
 800d95e:	4610      	mov	r0, r2
 800d960:	e7e9      	b.n	800d936 <__lo0bits+0x2a>
 800d962:	2000      	movs	r0, #0
 800d964:	4770      	bx	lr
 800d966:	2020      	movs	r0, #32
 800d968:	4770      	bx	lr
	...

0800d96c <__i2b>:
 800d96c:	b510      	push	{r4, lr}
 800d96e:	460c      	mov	r4, r1
 800d970:	2101      	movs	r1, #1
 800d972:	f7ff feb9 	bl	800d6e8 <_Balloc>
 800d976:	4602      	mov	r2, r0
 800d978:	b928      	cbnz	r0, 800d986 <__i2b+0x1a>
 800d97a:	4b05      	ldr	r3, [pc, #20]	; (800d990 <__i2b+0x24>)
 800d97c:	4805      	ldr	r0, [pc, #20]	; (800d994 <__i2b+0x28>)
 800d97e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d982:	f000 fdfb 	bl	800e57c <__assert_func>
 800d986:	2301      	movs	r3, #1
 800d988:	6144      	str	r4, [r0, #20]
 800d98a:	6103      	str	r3, [r0, #16]
 800d98c:	bd10      	pop	{r4, pc}
 800d98e:	bf00      	nop
 800d990:	0800f408 	.word	0x0800f408
 800d994:	0800f494 	.word	0x0800f494

0800d998 <__multiply>:
 800d998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d99c:	4691      	mov	r9, r2
 800d99e:	690a      	ldr	r2, [r1, #16]
 800d9a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	bfb8      	it	lt
 800d9a8:	460b      	movlt	r3, r1
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	bfbc      	itt	lt
 800d9ae:	464c      	movlt	r4, r9
 800d9b0:	4699      	movlt	r9, r3
 800d9b2:	6927      	ldr	r7, [r4, #16]
 800d9b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d9b8:	68a3      	ldr	r3, [r4, #8]
 800d9ba:	6861      	ldr	r1, [r4, #4]
 800d9bc:	eb07 060a 	add.w	r6, r7, sl
 800d9c0:	42b3      	cmp	r3, r6
 800d9c2:	b085      	sub	sp, #20
 800d9c4:	bfb8      	it	lt
 800d9c6:	3101      	addlt	r1, #1
 800d9c8:	f7ff fe8e 	bl	800d6e8 <_Balloc>
 800d9cc:	b930      	cbnz	r0, 800d9dc <__multiply+0x44>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	4b44      	ldr	r3, [pc, #272]	; (800dae4 <__multiply+0x14c>)
 800d9d2:	4845      	ldr	r0, [pc, #276]	; (800dae8 <__multiply+0x150>)
 800d9d4:	f240 115d 	movw	r1, #349	; 0x15d
 800d9d8:	f000 fdd0 	bl	800e57c <__assert_func>
 800d9dc:	f100 0514 	add.w	r5, r0, #20
 800d9e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d9e4:	462b      	mov	r3, r5
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	4543      	cmp	r3, r8
 800d9ea:	d321      	bcc.n	800da30 <__multiply+0x98>
 800d9ec:	f104 0314 	add.w	r3, r4, #20
 800d9f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d9f4:	f109 0314 	add.w	r3, r9, #20
 800d9f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d9fc:	9202      	str	r2, [sp, #8]
 800d9fe:	1b3a      	subs	r2, r7, r4
 800da00:	3a15      	subs	r2, #21
 800da02:	f022 0203 	bic.w	r2, r2, #3
 800da06:	3204      	adds	r2, #4
 800da08:	f104 0115 	add.w	r1, r4, #21
 800da0c:	428f      	cmp	r7, r1
 800da0e:	bf38      	it	cc
 800da10:	2204      	movcc	r2, #4
 800da12:	9201      	str	r2, [sp, #4]
 800da14:	9a02      	ldr	r2, [sp, #8]
 800da16:	9303      	str	r3, [sp, #12]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d80c      	bhi.n	800da36 <__multiply+0x9e>
 800da1c:	2e00      	cmp	r6, #0
 800da1e:	dd03      	ble.n	800da28 <__multiply+0x90>
 800da20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800da24:	2b00      	cmp	r3, #0
 800da26:	d05a      	beq.n	800dade <__multiply+0x146>
 800da28:	6106      	str	r6, [r0, #16]
 800da2a:	b005      	add	sp, #20
 800da2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da30:	f843 2b04 	str.w	r2, [r3], #4
 800da34:	e7d8      	b.n	800d9e8 <__multiply+0x50>
 800da36:	f8b3 a000 	ldrh.w	sl, [r3]
 800da3a:	f1ba 0f00 	cmp.w	sl, #0
 800da3e:	d024      	beq.n	800da8a <__multiply+0xf2>
 800da40:	f104 0e14 	add.w	lr, r4, #20
 800da44:	46a9      	mov	r9, r5
 800da46:	f04f 0c00 	mov.w	ip, #0
 800da4a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800da4e:	f8d9 1000 	ldr.w	r1, [r9]
 800da52:	fa1f fb82 	uxth.w	fp, r2
 800da56:	b289      	uxth	r1, r1
 800da58:	fb0a 110b 	mla	r1, sl, fp, r1
 800da5c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800da60:	f8d9 2000 	ldr.w	r2, [r9]
 800da64:	4461      	add	r1, ip
 800da66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800da6a:	fb0a c20b 	mla	r2, sl, fp, ip
 800da6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800da72:	b289      	uxth	r1, r1
 800da74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800da78:	4577      	cmp	r7, lr
 800da7a:	f849 1b04 	str.w	r1, [r9], #4
 800da7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800da82:	d8e2      	bhi.n	800da4a <__multiply+0xb2>
 800da84:	9a01      	ldr	r2, [sp, #4]
 800da86:	f845 c002 	str.w	ip, [r5, r2]
 800da8a:	9a03      	ldr	r2, [sp, #12]
 800da8c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800da90:	3304      	adds	r3, #4
 800da92:	f1b9 0f00 	cmp.w	r9, #0
 800da96:	d020      	beq.n	800dada <__multiply+0x142>
 800da98:	6829      	ldr	r1, [r5, #0]
 800da9a:	f104 0c14 	add.w	ip, r4, #20
 800da9e:	46ae      	mov	lr, r5
 800daa0:	f04f 0a00 	mov.w	sl, #0
 800daa4:	f8bc b000 	ldrh.w	fp, [ip]
 800daa8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800daac:	fb09 220b 	mla	r2, r9, fp, r2
 800dab0:	4492      	add	sl, r2
 800dab2:	b289      	uxth	r1, r1
 800dab4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dab8:	f84e 1b04 	str.w	r1, [lr], #4
 800dabc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dac0:	f8be 1000 	ldrh.w	r1, [lr]
 800dac4:	0c12      	lsrs	r2, r2, #16
 800dac6:	fb09 1102 	mla	r1, r9, r2, r1
 800daca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dace:	4567      	cmp	r7, ip
 800dad0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dad4:	d8e6      	bhi.n	800daa4 <__multiply+0x10c>
 800dad6:	9a01      	ldr	r2, [sp, #4]
 800dad8:	50a9      	str	r1, [r5, r2]
 800dada:	3504      	adds	r5, #4
 800dadc:	e79a      	b.n	800da14 <__multiply+0x7c>
 800dade:	3e01      	subs	r6, #1
 800dae0:	e79c      	b.n	800da1c <__multiply+0x84>
 800dae2:	bf00      	nop
 800dae4:	0800f408 	.word	0x0800f408
 800dae8:	0800f494 	.word	0x0800f494

0800daec <__pow5mult>:
 800daec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daf0:	4615      	mov	r5, r2
 800daf2:	f012 0203 	ands.w	r2, r2, #3
 800daf6:	4606      	mov	r6, r0
 800daf8:	460f      	mov	r7, r1
 800dafa:	d007      	beq.n	800db0c <__pow5mult+0x20>
 800dafc:	4c25      	ldr	r4, [pc, #148]	; (800db94 <__pow5mult+0xa8>)
 800dafe:	3a01      	subs	r2, #1
 800db00:	2300      	movs	r3, #0
 800db02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800db06:	f7ff fe51 	bl	800d7ac <__multadd>
 800db0a:	4607      	mov	r7, r0
 800db0c:	10ad      	asrs	r5, r5, #2
 800db0e:	d03d      	beq.n	800db8c <__pow5mult+0xa0>
 800db10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800db12:	b97c      	cbnz	r4, 800db34 <__pow5mult+0x48>
 800db14:	2010      	movs	r0, #16
 800db16:	f7ff fdcd 	bl	800d6b4 <malloc>
 800db1a:	4602      	mov	r2, r0
 800db1c:	6270      	str	r0, [r6, #36]	; 0x24
 800db1e:	b928      	cbnz	r0, 800db2c <__pow5mult+0x40>
 800db20:	4b1d      	ldr	r3, [pc, #116]	; (800db98 <__pow5mult+0xac>)
 800db22:	481e      	ldr	r0, [pc, #120]	; (800db9c <__pow5mult+0xb0>)
 800db24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800db28:	f000 fd28 	bl	800e57c <__assert_func>
 800db2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db30:	6004      	str	r4, [r0, #0]
 800db32:	60c4      	str	r4, [r0, #12]
 800db34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800db38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db3c:	b94c      	cbnz	r4, 800db52 <__pow5mult+0x66>
 800db3e:	f240 2171 	movw	r1, #625	; 0x271
 800db42:	4630      	mov	r0, r6
 800db44:	f7ff ff12 	bl	800d96c <__i2b>
 800db48:	2300      	movs	r3, #0
 800db4a:	f8c8 0008 	str.w	r0, [r8, #8]
 800db4e:	4604      	mov	r4, r0
 800db50:	6003      	str	r3, [r0, #0]
 800db52:	f04f 0900 	mov.w	r9, #0
 800db56:	07eb      	lsls	r3, r5, #31
 800db58:	d50a      	bpl.n	800db70 <__pow5mult+0x84>
 800db5a:	4639      	mov	r1, r7
 800db5c:	4622      	mov	r2, r4
 800db5e:	4630      	mov	r0, r6
 800db60:	f7ff ff1a 	bl	800d998 <__multiply>
 800db64:	4639      	mov	r1, r7
 800db66:	4680      	mov	r8, r0
 800db68:	4630      	mov	r0, r6
 800db6a:	f7ff fdfd 	bl	800d768 <_Bfree>
 800db6e:	4647      	mov	r7, r8
 800db70:	106d      	asrs	r5, r5, #1
 800db72:	d00b      	beq.n	800db8c <__pow5mult+0xa0>
 800db74:	6820      	ldr	r0, [r4, #0]
 800db76:	b938      	cbnz	r0, 800db88 <__pow5mult+0x9c>
 800db78:	4622      	mov	r2, r4
 800db7a:	4621      	mov	r1, r4
 800db7c:	4630      	mov	r0, r6
 800db7e:	f7ff ff0b 	bl	800d998 <__multiply>
 800db82:	6020      	str	r0, [r4, #0]
 800db84:	f8c0 9000 	str.w	r9, [r0]
 800db88:	4604      	mov	r4, r0
 800db8a:	e7e4      	b.n	800db56 <__pow5mult+0x6a>
 800db8c:	4638      	mov	r0, r7
 800db8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db92:	bf00      	nop
 800db94:	0800f5e0 	.word	0x0800f5e0
 800db98:	0800f396 	.word	0x0800f396
 800db9c:	0800f494 	.word	0x0800f494

0800dba0 <__lshift>:
 800dba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dba4:	460c      	mov	r4, r1
 800dba6:	6849      	ldr	r1, [r1, #4]
 800dba8:	6923      	ldr	r3, [r4, #16]
 800dbaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dbae:	68a3      	ldr	r3, [r4, #8]
 800dbb0:	4607      	mov	r7, r0
 800dbb2:	4691      	mov	r9, r2
 800dbb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dbb8:	f108 0601 	add.w	r6, r8, #1
 800dbbc:	42b3      	cmp	r3, r6
 800dbbe:	db0b      	blt.n	800dbd8 <__lshift+0x38>
 800dbc0:	4638      	mov	r0, r7
 800dbc2:	f7ff fd91 	bl	800d6e8 <_Balloc>
 800dbc6:	4605      	mov	r5, r0
 800dbc8:	b948      	cbnz	r0, 800dbde <__lshift+0x3e>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	4b2a      	ldr	r3, [pc, #168]	; (800dc78 <__lshift+0xd8>)
 800dbce:	482b      	ldr	r0, [pc, #172]	; (800dc7c <__lshift+0xdc>)
 800dbd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dbd4:	f000 fcd2 	bl	800e57c <__assert_func>
 800dbd8:	3101      	adds	r1, #1
 800dbda:	005b      	lsls	r3, r3, #1
 800dbdc:	e7ee      	b.n	800dbbc <__lshift+0x1c>
 800dbde:	2300      	movs	r3, #0
 800dbe0:	f100 0114 	add.w	r1, r0, #20
 800dbe4:	f100 0210 	add.w	r2, r0, #16
 800dbe8:	4618      	mov	r0, r3
 800dbea:	4553      	cmp	r3, sl
 800dbec:	db37      	blt.n	800dc5e <__lshift+0xbe>
 800dbee:	6920      	ldr	r0, [r4, #16]
 800dbf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dbf4:	f104 0314 	add.w	r3, r4, #20
 800dbf8:	f019 091f 	ands.w	r9, r9, #31
 800dbfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dc04:	d02f      	beq.n	800dc66 <__lshift+0xc6>
 800dc06:	f1c9 0e20 	rsb	lr, r9, #32
 800dc0a:	468a      	mov	sl, r1
 800dc0c:	f04f 0c00 	mov.w	ip, #0
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	fa02 f209 	lsl.w	r2, r2, r9
 800dc16:	ea42 020c 	orr.w	r2, r2, ip
 800dc1a:	f84a 2b04 	str.w	r2, [sl], #4
 800dc1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc22:	4298      	cmp	r0, r3
 800dc24:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dc28:	d8f2      	bhi.n	800dc10 <__lshift+0x70>
 800dc2a:	1b03      	subs	r3, r0, r4
 800dc2c:	3b15      	subs	r3, #21
 800dc2e:	f023 0303 	bic.w	r3, r3, #3
 800dc32:	3304      	adds	r3, #4
 800dc34:	f104 0215 	add.w	r2, r4, #21
 800dc38:	4290      	cmp	r0, r2
 800dc3a:	bf38      	it	cc
 800dc3c:	2304      	movcc	r3, #4
 800dc3e:	f841 c003 	str.w	ip, [r1, r3]
 800dc42:	f1bc 0f00 	cmp.w	ip, #0
 800dc46:	d001      	beq.n	800dc4c <__lshift+0xac>
 800dc48:	f108 0602 	add.w	r6, r8, #2
 800dc4c:	3e01      	subs	r6, #1
 800dc4e:	4638      	mov	r0, r7
 800dc50:	612e      	str	r6, [r5, #16]
 800dc52:	4621      	mov	r1, r4
 800dc54:	f7ff fd88 	bl	800d768 <_Bfree>
 800dc58:	4628      	mov	r0, r5
 800dc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc5e:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc62:	3301      	adds	r3, #1
 800dc64:	e7c1      	b.n	800dbea <__lshift+0x4a>
 800dc66:	3904      	subs	r1, #4
 800dc68:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc6c:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc70:	4298      	cmp	r0, r3
 800dc72:	d8f9      	bhi.n	800dc68 <__lshift+0xc8>
 800dc74:	e7ea      	b.n	800dc4c <__lshift+0xac>
 800dc76:	bf00      	nop
 800dc78:	0800f408 	.word	0x0800f408
 800dc7c:	0800f494 	.word	0x0800f494

0800dc80 <__mcmp>:
 800dc80:	b530      	push	{r4, r5, lr}
 800dc82:	6902      	ldr	r2, [r0, #16]
 800dc84:	690c      	ldr	r4, [r1, #16]
 800dc86:	1b12      	subs	r2, r2, r4
 800dc88:	d10e      	bne.n	800dca8 <__mcmp+0x28>
 800dc8a:	f100 0314 	add.w	r3, r0, #20
 800dc8e:	3114      	adds	r1, #20
 800dc90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dc94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dc98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dc9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dca0:	42a5      	cmp	r5, r4
 800dca2:	d003      	beq.n	800dcac <__mcmp+0x2c>
 800dca4:	d305      	bcc.n	800dcb2 <__mcmp+0x32>
 800dca6:	2201      	movs	r2, #1
 800dca8:	4610      	mov	r0, r2
 800dcaa:	bd30      	pop	{r4, r5, pc}
 800dcac:	4283      	cmp	r3, r0
 800dcae:	d3f3      	bcc.n	800dc98 <__mcmp+0x18>
 800dcb0:	e7fa      	b.n	800dca8 <__mcmp+0x28>
 800dcb2:	f04f 32ff 	mov.w	r2, #4294967295
 800dcb6:	e7f7      	b.n	800dca8 <__mcmp+0x28>

0800dcb8 <__mdiff>:
 800dcb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcbc:	460c      	mov	r4, r1
 800dcbe:	4606      	mov	r6, r0
 800dcc0:	4611      	mov	r1, r2
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	4690      	mov	r8, r2
 800dcc6:	f7ff ffdb 	bl	800dc80 <__mcmp>
 800dcca:	1e05      	subs	r5, r0, #0
 800dccc:	d110      	bne.n	800dcf0 <__mdiff+0x38>
 800dcce:	4629      	mov	r1, r5
 800dcd0:	4630      	mov	r0, r6
 800dcd2:	f7ff fd09 	bl	800d6e8 <_Balloc>
 800dcd6:	b930      	cbnz	r0, 800dce6 <__mdiff+0x2e>
 800dcd8:	4b3a      	ldr	r3, [pc, #232]	; (800ddc4 <__mdiff+0x10c>)
 800dcda:	4602      	mov	r2, r0
 800dcdc:	f240 2132 	movw	r1, #562	; 0x232
 800dce0:	4839      	ldr	r0, [pc, #228]	; (800ddc8 <__mdiff+0x110>)
 800dce2:	f000 fc4b 	bl	800e57c <__assert_func>
 800dce6:	2301      	movs	r3, #1
 800dce8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dcec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf0:	bfa4      	itt	ge
 800dcf2:	4643      	movge	r3, r8
 800dcf4:	46a0      	movge	r8, r4
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dcfc:	bfa6      	itte	ge
 800dcfe:	461c      	movge	r4, r3
 800dd00:	2500      	movge	r5, #0
 800dd02:	2501      	movlt	r5, #1
 800dd04:	f7ff fcf0 	bl	800d6e8 <_Balloc>
 800dd08:	b920      	cbnz	r0, 800dd14 <__mdiff+0x5c>
 800dd0a:	4b2e      	ldr	r3, [pc, #184]	; (800ddc4 <__mdiff+0x10c>)
 800dd0c:	4602      	mov	r2, r0
 800dd0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dd12:	e7e5      	b.n	800dce0 <__mdiff+0x28>
 800dd14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dd18:	6926      	ldr	r6, [r4, #16]
 800dd1a:	60c5      	str	r5, [r0, #12]
 800dd1c:	f104 0914 	add.w	r9, r4, #20
 800dd20:	f108 0514 	add.w	r5, r8, #20
 800dd24:	f100 0e14 	add.w	lr, r0, #20
 800dd28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dd2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dd30:	f108 0210 	add.w	r2, r8, #16
 800dd34:	46f2      	mov	sl, lr
 800dd36:	2100      	movs	r1, #0
 800dd38:	f859 3b04 	ldr.w	r3, [r9], #4
 800dd3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dd40:	fa1f f883 	uxth.w	r8, r3
 800dd44:	fa11 f18b 	uxtah	r1, r1, fp
 800dd48:	0c1b      	lsrs	r3, r3, #16
 800dd4a:	eba1 0808 	sub.w	r8, r1, r8
 800dd4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dd52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dd56:	fa1f f888 	uxth.w	r8, r8
 800dd5a:	1419      	asrs	r1, r3, #16
 800dd5c:	454e      	cmp	r6, r9
 800dd5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dd62:	f84a 3b04 	str.w	r3, [sl], #4
 800dd66:	d8e7      	bhi.n	800dd38 <__mdiff+0x80>
 800dd68:	1b33      	subs	r3, r6, r4
 800dd6a:	3b15      	subs	r3, #21
 800dd6c:	f023 0303 	bic.w	r3, r3, #3
 800dd70:	3304      	adds	r3, #4
 800dd72:	3415      	adds	r4, #21
 800dd74:	42a6      	cmp	r6, r4
 800dd76:	bf38      	it	cc
 800dd78:	2304      	movcc	r3, #4
 800dd7a:	441d      	add	r5, r3
 800dd7c:	4473      	add	r3, lr
 800dd7e:	469e      	mov	lr, r3
 800dd80:	462e      	mov	r6, r5
 800dd82:	4566      	cmp	r6, ip
 800dd84:	d30e      	bcc.n	800dda4 <__mdiff+0xec>
 800dd86:	f10c 0203 	add.w	r2, ip, #3
 800dd8a:	1b52      	subs	r2, r2, r5
 800dd8c:	f022 0203 	bic.w	r2, r2, #3
 800dd90:	3d03      	subs	r5, #3
 800dd92:	45ac      	cmp	ip, r5
 800dd94:	bf38      	it	cc
 800dd96:	2200      	movcc	r2, #0
 800dd98:	441a      	add	r2, r3
 800dd9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dd9e:	b17b      	cbz	r3, 800ddc0 <__mdiff+0x108>
 800dda0:	6107      	str	r7, [r0, #16]
 800dda2:	e7a3      	b.n	800dcec <__mdiff+0x34>
 800dda4:	f856 8b04 	ldr.w	r8, [r6], #4
 800dda8:	fa11 f288 	uxtah	r2, r1, r8
 800ddac:	1414      	asrs	r4, r2, #16
 800ddae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ddb2:	b292      	uxth	r2, r2
 800ddb4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ddb8:	f84e 2b04 	str.w	r2, [lr], #4
 800ddbc:	1421      	asrs	r1, r4, #16
 800ddbe:	e7e0      	b.n	800dd82 <__mdiff+0xca>
 800ddc0:	3f01      	subs	r7, #1
 800ddc2:	e7ea      	b.n	800dd9a <__mdiff+0xe2>
 800ddc4:	0800f408 	.word	0x0800f408
 800ddc8:	0800f494 	.word	0x0800f494

0800ddcc <__ulp>:
 800ddcc:	b082      	sub	sp, #8
 800ddce:	ed8d 0b00 	vstr	d0, [sp]
 800ddd2:	9b01      	ldr	r3, [sp, #4]
 800ddd4:	4912      	ldr	r1, [pc, #72]	; (800de20 <__ulp+0x54>)
 800ddd6:	4019      	ands	r1, r3
 800ddd8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dddc:	2900      	cmp	r1, #0
 800ddde:	dd05      	ble.n	800ddec <__ulp+0x20>
 800dde0:	2200      	movs	r2, #0
 800dde2:	460b      	mov	r3, r1
 800dde4:	ec43 2b10 	vmov	d0, r2, r3
 800dde8:	b002      	add	sp, #8
 800ddea:	4770      	bx	lr
 800ddec:	4249      	negs	r1, r1
 800ddee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ddf2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ddf6:	f04f 0200 	mov.w	r2, #0
 800ddfa:	f04f 0300 	mov.w	r3, #0
 800ddfe:	da04      	bge.n	800de0a <__ulp+0x3e>
 800de00:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800de04:	fa41 f300 	asr.w	r3, r1, r0
 800de08:	e7ec      	b.n	800dde4 <__ulp+0x18>
 800de0a:	f1a0 0114 	sub.w	r1, r0, #20
 800de0e:	291e      	cmp	r1, #30
 800de10:	bfda      	itte	le
 800de12:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800de16:	fa20 f101 	lsrle.w	r1, r0, r1
 800de1a:	2101      	movgt	r1, #1
 800de1c:	460a      	mov	r2, r1
 800de1e:	e7e1      	b.n	800dde4 <__ulp+0x18>
 800de20:	7ff00000 	.word	0x7ff00000

0800de24 <__b2d>:
 800de24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de26:	6905      	ldr	r5, [r0, #16]
 800de28:	f100 0714 	add.w	r7, r0, #20
 800de2c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800de30:	1f2e      	subs	r6, r5, #4
 800de32:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800de36:	4620      	mov	r0, r4
 800de38:	f7ff fd48 	bl	800d8cc <__hi0bits>
 800de3c:	f1c0 0320 	rsb	r3, r0, #32
 800de40:	280a      	cmp	r0, #10
 800de42:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dec0 <__b2d+0x9c>
 800de46:	600b      	str	r3, [r1, #0]
 800de48:	dc14      	bgt.n	800de74 <__b2d+0x50>
 800de4a:	f1c0 0e0b 	rsb	lr, r0, #11
 800de4e:	fa24 f10e 	lsr.w	r1, r4, lr
 800de52:	42b7      	cmp	r7, r6
 800de54:	ea41 030c 	orr.w	r3, r1, ip
 800de58:	bf34      	ite	cc
 800de5a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800de5e:	2100      	movcs	r1, #0
 800de60:	3015      	adds	r0, #21
 800de62:	fa04 f000 	lsl.w	r0, r4, r0
 800de66:	fa21 f10e 	lsr.w	r1, r1, lr
 800de6a:	ea40 0201 	orr.w	r2, r0, r1
 800de6e:	ec43 2b10 	vmov	d0, r2, r3
 800de72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de74:	42b7      	cmp	r7, r6
 800de76:	bf3a      	itte	cc
 800de78:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800de7c:	f1a5 0608 	subcc.w	r6, r5, #8
 800de80:	2100      	movcs	r1, #0
 800de82:	380b      	subs	r0, #11
 800de84:	d017      	beq.n	800deb6 <__b2d+0x92>
 800de86:	f1c0 0c20 	rsb	ip, r0, #32
 800de8a:	fa04 f500 	lsl.w	r5, r4, r0
 800de8e:	42be      	cmp	r6, r7
 800de90:	fa21 f40c 	lsr.w	r4, r1, ip
 800de94:	ea45 0504 	orr.w	r5, r5, r4
 800de98:	bf8c      	ite	hi
 800de9a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800de9e:	2400      	movls	r4, #0
 800dea0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dea4:	fa01 f000 	lsl.w	r0, r1, r0
 800dea8:	fa24 f40c 	lsr.w	r4, r4, ip
 800deac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800deb0:	ea40 0204 	orr.w	r2, r0, r4
 800deb4:	e7db      	b.n	800de6e <__b2d+0x4a>
 800deb6:	ea44 030c 	orr.w	r3, r4, ip
 800deba:	460a      	mov	r2, r1
 800debc:	e7d7      	b.n	800de6e <__b2d+0x4a>
 800debe:	bf00      	nop
 800dec0:	3ff00000 	.word	0x3ff00000

0800dec4 <__d2b>:
 800dec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dec8:	4689      	mov	r9, r1
 800deca:	2101      	movs	r1, #1
 800decc:	ec57 6b10 	vmov	r6, r7, d0
 800ded0:	4690      	mov	r8, r2
 800ded2:	f7ff fc09 	bl	800d6e8 <_Balloc>
 800ded6:	4604      	mov	r4, r0
 800ded8:	b930      	cbnz	r0, 800dee8 <__d2b+0x24>
 800deda:	4602      	mov	r2, r0
 800dedc:	4b25      	ldr	r3, [pc, #148]	; (800df74 <__d2b+0xb0>)
 800dede:	4826      	ldr	r0, [pc, #152]	; (800df78 <__d2b+0xb4>)
 800dee0:	f240 310a 	movw	r1, #778	; 0x30a
 800dee4:	f000 fb4a 	bl	800e57c <__assert_func>
 800dee8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800deec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800def0:	bb35      	cbnz	r5, 800df40 <__d2b+0x7c>
 800def2:	2e00      	cmp	r6, #0
 800def4:	9301      	str	r3, [sp, #4]
 800def6:	d028      	beq.n	800df4a <__d2b+0x86>
 800def8:	4668      	mov	r0, sp
 800defa:	9600      	str	r6, [sp, #0]
 800defc:	f7ff fd06 	bl	800d90c <__lo0bits>
 800df00:	9900      	ldr	r1, [sp, #0]
 800df02:	b300      	cbz	r0, 800df46 <__d2b+0x82>
 800df04:	9a01      	ldr	r2, [sp, #4]
 800df06:	f1c0 0320 	rsb	r3, r0, #32
 800df0a:	fa02 f303 	lsl.w	r3, r2, r3
 800df0e:	430b      	orrs	r3, r1
 800df10:	40c2      	lsrs	r2, r0
 800df12:	6163      	str	r3, [r4, #20]
 800df14:	9201      	str	r2, [sp, #4]
 800df16:	9b01      	ldr	r3, [sp, #4]
 800df18:	61a3      	str	r3, [r4, #24]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	bf14      	ite	ne
 800df1e:	2202      	movne	r2, #2
 800df20:	2201      	moveq	r2, #1
 800df22:	6122      	str	r2, [r4, #16]
 800df24:	b1d5      	cbz	r5, 800df5c <__d2b+0x98>
 800df26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800df2a:	4405      	add	r5, r0
 800df2c:	f8c9 5000 	str.w	r5, [r9]
 800df30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800df34:	f8c8 0000 	str.w	r0, [r8]
 800df38:	4620      	mov	r0, r4
 800df3a:	b003      	add	sp, #12
 800df3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df44:	e7d5      	b.n	800def2 <__d2b+0x2e>
 800df46:	6161      	str	r1, [r4, #20]
 800df48:	e7e5      	b.n	800df16 <__d2b+0x52>
 800df4a:	a801      	add	r0, sp, #4
 800df4c:	f7ff fcde 	bl	800d90c <__lo0bits>
 800df50:	9b01      	ldr	r3, [sp, #4]
 800df52:	6163      	str	r3, [r4, #20]
 800df54:	2201      	movs	r2, #1
 800df56:	6122      	str	r2, [r4, #16]
 800df58:	3020      	adds	r0, #32
 800df5a:	e7e3      	b.n	800df24 <__d2b+0x60>
 800df5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df64:	f8c9 0000 	str.w	r0, [r9]
 800df68:	6918      	ldr	r0, [r3, #16]
 800df6a:	f7ff fcaf 	bl	800d8cc <__hi0bits>
 800df6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df72:	e7df      	b.n	800df34 <__d2b+0x70>
 800df74:	0800f408 	.word	0x0800f408
 800df78:	0800f494 	.word	0x0800f494

0800df7c <__ratio>:
 800df7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df80:	4688      	mov	r8, r1
 800df82:	4669      	mov	r1, sp
 800df84:	4681      	mov	r9, r0
 800df86:	f7ff ff4d 	bl	800de24 <__b2d>
 800df8a:	a901      	add	r1, sp, #4
 800df8c:	4640      	mov	r0, r8
 800df8e:	ec55 4b10 	vmov	r4, r5, d0
 800df92:	ee10 aa10 	vmov	sl, s0
 800df96:	f7ff ff45 	bl	800de24 <__b2d>
 800df9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df9e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800dfa2:	1a59      	subs	r1, r3, r1
 800dfa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfa8:	1ad3      	subs	r3, r2, r3
 800dfaa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800dfae:	ec57 6b10 	vmov	r6, r7, d0
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	bfd6      	itet	le
 800dfb6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dfba:	462a      	movgt	r2, r5
 800dfbc:	463a      	movle	r2, r7
 800dfbe:	46ab      	mov	fp, r5
 800dfc0:	bfd6      	itet	le
 800dfc2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800dfc6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800dfca:	ee00 3a90 	vmovle	s1, r3
 800dfce:	ec4b ab17 	vmov	d7, sl, fp
 800dfd2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800dfd6:	b003      	add	sp, #12
 800dfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfdc <__copybits>:
 800dfdc:	3901      	subs	r1, #1
 800dfde:	b570      	push	{r4, r5, r6, lr}
 800dfe0:	1149      	asrs	r1, r1, #5
 800dfe2:	6914      	ldr	r4, [r2, #16]
 800dfe4:	3101      	adds	r1, #1
 800dfe6:	f102 0314 	add.w	r3, r2, #20
 800dfea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dfee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dff2:	1f05      	subs	r5, r0, #4
 800dff4:	42a3      	cmp	r3, r4
 800dff6:	d30c      	bcc.n	800e012 <__copybits+0x36>
 800dff8:	1aa3      	subs	r3, r4, r2
 800dffa:	3b11      	subs	r3, #17
 800dffc:	f023 0303 	bic.w	r3, r3, #3
 800e000:	3211      	adds	r2, #17
 800e002:	42a2      	cmp	r2, r4
 800e004:	bf88      	it	hi
 800e006:	2300      	movhi	r3, #0
 800e008:	4418      	add	r0, r3
 800e00a:	2300      	movs	r3, #0
 800e00c:	4288      	cmp	r0, r1
 800e00e:	d305      	bcc.n	800e01c <__copybits+0x40>
 800e010:	bd70      	pop	{r4, r5, r6, pc}
 800e012:	f853 6b04 	ldr.w	r6, [r3], #4
 800e016:	f845 6f04 	str.w	r6, [r5, #4]!
 800e01a:	e7eb      	b.n	800dff4 <__copybits+0x18>
 800e01c:	f840 3b04 	str.w	r3, [r0], #4
 800e020:	e7f4      	b.n	800e00c <__copybits+0x30>

0800e022 <__any_on>:
 800e022:	f100 0214 	add.w	r2, r0, #20
 800e026:	6900      	ldr	r0, [r0, #16]
 800e028:	114b      	asrs	r3, r1, #5
 800e02a:	4298      	cmp	r0, r3
 800e02c:	b510      	push	{r4, lr}
 800e02e:	db11      	blt.n	800e054 <__any_on+0x32>
 800e030:	dd0a      	ble.n	800e048 <__any_on+0x26>
 800e032:	f011 011f 	ands.w	r1, r1, #31
 800e036:	d007      	beq.n	800e048 <__any_on+0x26>
 800e038:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e03c:	fa24 f001 	lsr.w	r0, r4, r1
 800e040:	fa00 f101 	lsl.w	r1, r0, r1
 800e044:	428c      	cmp	r4, r1
 800e046:	d10b      	bne.n	800e060 <__any_on+0x3e>
 800e048:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e04c:	4293      	cmp	r3, r2
 800e04e:	d803      	bhi.n	800e058 <__any_on+0x36>
 800e050:	2000      	movs	r0, #0
 800e052:	bd10      	pop	{r4, pc}
 800e054:	4603      	mov	r3, r0
 800e056:	e7f7      	b.n	800e048 <__any_on+0x26>
 800e058:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e05c:	2900      	cmp	r1, #0
 800e05e:	d0f5      	beq.n	800e04c <__any_on+0x2a>
 800e060:	2001      	movs	r0, #1
 800e062:	e7f6      	b.n	800e052 <__any_on+0x30>

0800e064 <_calloc_r>:
 800e064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e066:	fba1 2402 	umull	r2, r4, r1, r2
 800e06a:	b94c      	cbnz	r4, 800e080 <_calloc_r+0x1c>
 800e06c:	4611      	mov	r1, r2
 800e06e:	9201      	str	r2, [sp, #4]
 800e070:	f000 f87a 	bl	800e168 <_malloc_r>
 800e074:	9a01      	ldr	r2, [sp, #4]
 800e076:	4605      	mov	r5, r0
 800e078:	b930      	cbnz	r0, 800e088 <_calloc_r+0x24>
 800e07a:	4628      	mov	r0, r5
 800e07c:	b003      	add	sp, #12
 800e07e:	bd30      	pop	{r4, r5, pc}
 800e080:	220c      	movs	r2, #12
 800e082:	6002      	str	r2, [r0, #0]
 800e084:	2500      	movs	r5, #0
 800e086:	e7f8      	b.n	800e07a <_calloc_r+0x16>
 800e088:	4621      	mov	r1, r4
 800e08a:	f7fc fcd3 	bl	800aa34 <memset>
 800e08e:	e7f4      	b.n	800e07a <_calloc_r+0x16>

0800e090 <_free_r>:
 800e090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e092:	2900      	cmp	r1, #0
 800e094:	d044      	beq.n	800e120 <_free_r+0x90>
 800e096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e09a:	9001      	str	r0, [sp, #4]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	f1a1 0404 	sub.w	r4, r1, #4
 800e0a2:	bfb8      	it	lt
 800e0a4:	18e4      	addlt	r4, r4, r3
 800e0a6:	f000 fab3 	bl	800e610 <__malloc_lock>
 800e0aa:	4a1e      	ldr	r2, [pc, #120]	; (800e124 <_free_r+0x94>)
 800e0ac:	9801      	ldr	r0, [sp, #4]
 800e0ae:	6813      	ldr	r3, [r2, #0]
 800e0b0:	b933      	cbnz	r3, 800e0c0 <_free_r+0x30>
 800e0b2:	6063      	str	r3, [r4, #4]
 800e0b4:	6014      	str	r4, [r2, #0]
 800e0b6:	b003      	add	sp, #12
 800e0b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0bc:	f000 baae 	b.w	800e61c <__malloc_unlock>
 800e0c0:	42a3      	cmp	r3, r4
 800e0c2:	d908      	bls.n	800e0d6 <_free_r+0x46>
 800e0c4:	6825      	ldr	r5, [r4, #0]
 800e0c6:	1961      	adds	r1, r4, r5
 800e0c8:	428b      	cmp	r3, r1
 800e0ca:	bf01      	itttt	eq
 800e0cc:	6819      	ldreq	r1, [r3, #0]
 800e0ce:	685b      	ldreq	r3, [r3, #4]
 800e0d0:	1949      	addeq	r1, r1, r5
 800e0d2:	6021      	streq	r1, [r4, #0]
 800e0d4:	e7ed      	b.n	800e0b2 <_free_r+0x22>
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	b10b      	cbz	r3, 800e0e0 <_free_r+0x50>
 800e0dc:	42a3      	cmp	r3, r4
 800e0de:	d9fa      	bls.n	800e0d6 <_free_r+0x46>
 800e0e0:	6811      	ldr	r1, [r2, #0]
 800e0e2:	1855      	adds	r5, r2, r1
 800e0e4:	42a5      	cmp	r5, r4
 800e0e6:	d10b      	bne.n	800e100 <_free_r+0x70>
 800e0e8:	6824      	ldr	r4, [r4, #0]
 800e0ea:	4421      	add	r1, r4
 800e0ec:	1854      	adds	r4, r2, r1
 800e0ee:	42a3      	cmp	r3, r4
 800e0f0:	6011      	str	r1, [r2, #0]
 800e0f2:	d1e0      	bne.n	800e0b6 <_free_r+0x26>
 800e0f4:	681c      	ldr	r4, [r3, #0]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	6053      	str	r3, [r2, #4]
 800e0fa:	4421      	add	r1, r4
 800e0fc:	6011      	str	r1, [r2, #0]
 800e0fe:	e7da      	b.n	800e0b6 <_free_r+0x26>
 800e100:	d902      	bls.n	800e108 <_free_r+0x78>
 800e102:	230c      	movs	r3, #12
 800e104:	6003      	str	r3, [r0, #0]
 800e106:	e7d6      	b.n	800e0b6 <_free_r+0x26>
 800e108:	6825      	ldr	r5, [r4, #0]
 800e10a:	1961      	adds	r1, r4, r5
 800e10c:	428b      	cmp	r3, r1
 800e10e:	bf04      	itt	eq
 800e110:	6819      	ldreq	r1, [r3, #0]
 800e112:	685b      	ldreq	r3, [r3, #4]
 800e114:	6063      	str	r3, [r4, #4]
 800e116:	bf04      	itt	eq
 800e118:	1949      	addeq	r1, r1, r5
 800e11a:	6021      	streq	r1, [r4, #0]
 800e11c:	6054      	str	r4, [r2, #4]
 800e11e:	e7ca      	b.n	800e0b6 <_free_r+0x26>
 800e120:	b003      	add	sp, #12
 800e122:	bd30      	pop	{r4, r5, pc}
 800e124:	20004e5c 	.word	0x20004e5c

0800e128 <sbrk_aligned>:
 800e128:	b570      	push	{r4, r5, r6, lr}
 800e12a:	4e0e      	ldr	r6, [pc, #56]	; (800e164 <sbrk_aligned+0x3c>)
 800e12c:	460c      	mov	r4, r1
 800e12e:	6831      	ldr	r1, [r6, #0]
 800e130:	4605      	mov	r5, r0
 800e132:	b911      	cbnz	r1, 800e13a <sbrk_aligned+0x12>
 800e134:	f000 f9f0 	bl	800e518 <_sbrk_r>
 800e138:	6030      	str	r0, [r6, #0]
 800e13a:	4621      	mov	r1, r4
 800e13c:	4628      	mov	r0, r5
 800e13e:	f000 f9eb 	bl	800e518 <_sbrk_r>
 800e142:	1c43      	adds	r3, r0, #1
 800e144:	d00a      	beq.n	800e15c <sbrk_aligned+0x34>
 800e146:	1cc4      	adds	r4, r0, #3
 800e148:	f024 0403 	bic.w	r4, r4, #3
 800e14c:	42a0      	cmp	r0, r4
 800e14e:	d007      	beq.n	800e160 <sbrk_aligned+0x38>
 800e150:	1a21      	subs	r1, r4, r0
 800e152:	4628      	mov	r0, r5
 800e154:	f000 f9e0 	bl	800e518 <_sbrk_r>
 800e158:	3001      	adds	r0, #1
 800e15a:	d101      	bne.n	800e160 <sbrk_aligned+0x38>
 800e15c:	f04f 34ff 	mov.w	r4, #4294967295
 800e160:	4620      	mov	r0, r4
 800e162:	bd70      	pop	{r4, r5, r6, pc}
 800e164:	20004e60 	.word	0x20004e60

0800e168 <_malloc_r>:
 800e168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e16c:	1ccd      	adds	r5, r1, #3
 800e16e:	f025 0503 	bic.w	r5, r5, #3
 800e172:	3508      	adds	r5, #8
 800e174:	2d0c      	cmp	r5, #12
 800e176:	bf38      	it	cc
 800e178:	250c      	movcc	r5, #12
 800e17a:	2d00      	cmp	r5, #0
 800e17c:	4607      	mov	r7, r0
 800e17e:	db01      	blt.n	800e184 <_malloc_r+0x1c>
 800e180:	42a9      	cmp	r1, r5
 800e182:	d905      	bls.n	800e190 <_malloc_r+0x28>
 800e184:	230c      	movs	r3, #12
 800e186:	603b      	str	r3, [r7, #0]
 800e188:	2600      	movs	r6, #0
 800e18a:	4630      	mov	r0, r6
 800e18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e190:	4e2e      	ldr	r6, [pc, #184]	; (800e24c <_malloc_r+0xe4>)
 800e192:	f000 fa3d 	bl	800e610 <__malloc_lock>
 800e196:	6833      	ldr	r3, [r6, #0]
 800e198:	461c      	mov	r4, r3
 800e19a:	bb34      	cbnz	r4, 800e1ea <_malloc_r+0x82>
 800e19c:	4629      	mov	r1, r5
 800e19e:	4638      	mov	r0, r7
 800e1a0:	f7ff ffc2 	bl	800e128 <sbrk_aligned>
 800e1a4:	1c43      	adds	r3, r0, #1
 800e1a6:	4604      	mov	r4, r0
 800e1a8:	d14d      	bne.n	800e246 <_malloc_r+0xde>
 800e1aa:	6834      	ldr	r4, [r6, #0]
 800e1ac:	4626      	mov	r6, r4
 800e1ae:	2e00      	cmp	r6, #0
 800e1b0:	d140      	bne.n	800e234 <_malloc_r+0xcc>
 800e1b2:	6823      	ldr	r3, [r4, #0]
 800e1b4:	4631      	mov	r1, r6
 800e1b6:	4638      	mov	r0, r7
 800e1b8:	eb04 0803 	add.w	r8, r4, r3
 800e1bc:	f000 f9ac 	bl	800e518 <_sbrk_r>
 800e1c0:	4580      	cmp	r8, r0
 800e1c2:	d13a      	bne.n	800e23a <_malloc_r+0xd2>
 800e1c4:	6821      	ldr	r1, [r4, #0]
 800e1c6:	3503      	adds	r5, #3
 800e1c8:	1a6d      	subs	r5, r5, r1
 800e1ca:	f025 0503 	bic.w	r5, r5, #3
 800e1ce:	3508      	adds	r5, #8
 800e1d0:	2d0c      	cmp	r5, #12
 800e1d2:	bf38      	it	cc
 800e1d4:	250c      	movcc	r5, #12
 800e1d6:	4629      	mov	r1, r5
 800e1d8:	4638      	mov	r0, r7
 800e1da:	f7ff ffa5 	bl	800e128 <sbrk_aligned>
 800e1de:	3001      	adds	r0, #1
 800e1e0:	d02b      	beq.n	800e23a <_malloc_r+0xd2>
 800e1e2:	6823      	ldr	r3, [r4, #0]
 800e1e4:	442b      	add	r3, r5
 800e1e6:	6023      	str	r3, [r4, #0]
 800e1e8:	e00e      	b.n	800e208 <_malloc_r+0xa0>
 800e1ea:	6822      	ldr	r2, [r4, #0]
 800e1ec:	1b52      	subs	r2, r2, r5
 800e1ee:	d41e      	bmi.n	800e22e <_malloc_r+0xc6>
 800e1f0:	2a0b      	cmp	r2, #11
 800e1f2:	d916      	bls.n	800e222 <_malloc_r+0xba>
 800e1f4:	1961      	adds	r1, r4, r5
 800e1f6:	42a3      	cmp	r3, r4
 800e1f8:	6025      	str	r5, [r4, #0]
 800e1fa:	bf18      	it	ne
 800e1fc:	6059      	strne	r1, [r3, #4]
 800e1fe:	6863      	ldr	r3, [r4, #4]
 800e200:	bf08      	it	eq
 800e202:	6031      	streq	r1, [r6, #0]
 800e204:	5162      	str	r2, [r4, r5]
 800e206:	604b      	str	r3, [r1, #4]
 800e208:	4638      	mov	r0, r7
 800e20a:	f104 060b 	add.w	r6, r4, #11
 800e20e:	f000 fa05 	bl	800e61c <__malloc_unlock>
 800e212:	f026 0607 	bic.w	r6, r6, #7
 800e216:	1d23      	adds	r3, r4, #4
 800e218:	1af2      	subs	r2, r6, r3
 800e21a:	d0b6      	beq.n	800e18a <_malloc_r+0x22>
 800e21c:	1b9b      	subs	r3, r3, r6
 800e21e:	50a3      	str	r3, [r4, r2]
 800e220:	e7b3      	b.n	800e18a <_malloc_r+0x22>
 800e222:	6862      	ldr	r2, [r4, #4]
 800e224:	42a3      	cmp	r3, r4
 800e226:	bf0c      	ite	eq
 800e228:	6032      	streq	r2, [r6, #0]
 800e22a:	605a      	strne	r2, [r3, #4]
 800e22c:	e7ec      	b.n	800e208 <_malloc_r+0xa0>
 800e22e:	4623      	mov	r3, r4
 800e230:	6864      	ldr	r4, [r4, #4]
 800e232:	e7b2      	b.n	800e19a <_malloc_r+0x32>
 800e234:	4634      	mov	r4, r6
 800e236:	6876      	ldr	r6, [r6, #4]
 800e238:	e7b9      	b.n	800e1ae <_malloc_r+0x46>
 800e23a:	230c      	movs	r3, #12
 800e23c:	603b      	str	r3, [r7, #0]
 800e23e:	4638      	mov	r0, r7
 800e240:	f000 f9ec 	bl	800e61c <__malloc_unlock>
 800e244:	e7a1      	b.n	800e18a <_malloc_r+0x22>
 800e246:	6025      	str	r5, [r4, #0]
 800e248:	e7de      	b.n	800e208 <_malloc_r+0xa0>
 800e24a:	bf00      	nop
 800e24c:	20004e5c 	.word	0x20004e5c

0800e250 <__ssputs_r>:
 800e250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e254:	688e      	ldr	r6, [r1, #8]
 800e256:	429e      	cmp	r6, r3
 800e258:	4682      	mov	sl, r0
 800e25a:	460c      	mov	r4, r1
 800e25c:	4690      	mov	r8, r2
 800e25e:	461f      	mov	r7, r3
 800e260:	d838      	bhi.n	800e2d4 <__ssputs_r+0x84>
 800e262:	898a      	ldrh	r2, [r1, #12]
 800e264:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e268:	d032      	beq.n	800e2d0 <__ssputs_r+0x80>
 800e26a:	6825      	ldr	r5, [r4, #0]
 800e26c:	6909      	ldr	r1, [r1, #16]
 800e26e:	eba5 0901 	sub.w	r9, r5, r1
 800e272:	6965      	ldr	r5, [r4, #20]
 800e274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e278:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e27c:	3301      	adds	r3, #1
 800e27e:	444b      	add	r3, r9
 800e280:	106d      	asrs	r5, r5, #1
 800e282:	429d      	cmp	r5, r3
 800e284:	bf38      	it	cc
 800e286:	461d      	movcc	r5, r3
 800e288:	0553      	lsls	r3, r2, #21
 800e28a:	d531      	bpl.n	800e2f0 <__ssputs_r+0xa0>
 800e28c:	4629      	mov	r1, r5
 800e28e:	f7ff ff6b 	bl	800e168 <_malloc_r>
 800e292:	4606      	mov	r6, r0
 800e294:	b950      	cbnz	r0, 800e2ac <__ssputs_r+0x5c>
 800e296:	230c      	movs	r3, #12
 800e298:	f8ca 3000 	str.w	r3, [sl]
 800e29c:	89a3      	ldrh	r3, [r4, #12]
 800e29e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2a2:	81a3      	strh	r3, [r4, #12]
 800e2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2ac:	6921      	ldr	r1, [r4, #16]
 800e2ae:	464a      	mov	r2, r9
 800e2b0:	f7fc fbb2 	bl	800aa18 <memcpy>
 800e2b4:	89a3      	ldrh	r3, [r4, #12]
 800e2b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e2ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2be:	81a3      	strh	r3, [r4, #12]
 800e2c0:	6126      	str	r6, [r4, #16]
 800e2c2:	6165      	str	r5, [r4, #20]
 800e2c4:	444e      	add	r6, r9
 800e2c6:	eba5 0509 	sub.w	r5, r5, r9
 800e2ca:	6026      	str	r6, [r4, #0]
 800e2cc:	60a5      	str	r5, [r4, #8]
 800e2ce:	463e      	mov	r6, r7
 800e2d0:	42be      	cmp	r6, r7
 800e2d2:	d900      	bls.n	800e2d6 <__ssputs_r+0x86>
 800e2d4:	463e      	mov	r6, r7
 800e2d6:	6820      	ldr	r0, [r4, #0]
 800e2d8:	4632      	mov	r2, r6
 800e2da:	4641      	mov	r1, r8
 800e2dc:	f000 f97e 	bl	800e5dc <memmove>
 800e2e0:	68a3      	ldr	r3, [r4, #8]
 800e2e2:	1b9b      	subs	r3, r3, r6
 800e2e4:	60a3      	str	r3, [r4, #8]
 800e2e6:	6823      	ldr	r3, [r4, #0]
 800e2e8:	4433      	add	r3, r6
 800e2ea:	6023      	str	r3, [r4, #0]
 800e2ec:	2000      	movs	r0, #0
 800e2ee:	e7db      	b.n	800e2a8 <__ssputs_r+0x58>
 800e2f0:	462a      	mov	r2, r5
 800e2f2:	f000 f999 	bl	800e628 <_realloc_r>
 800e2f6:	4606      	mov	r6, r0
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	d1e1      	bne.n	800e2c0 <__ssputs_r+0x70>
 800e2fc:	6921      	ldr	r1, [r4, #16]
 800e2fe:	4650      	mov	r0, sl
 800e300:	f7ff fec6 	bl	800e090 <_free_r>
 800e304:	e7c7      	b.n	800e296 <__ssputs_r+0x46>
	...

0800e308 <_svfiprintf_r>:
 800e308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e30c:	4698      	mov	r8, r3
 800e30e:	898b      	ldrh	r3, [r1, #12]
 800e310:	061b      	lsls	r3, r3, #24
 800e312:	b09d      	sub	sp, #116	; 0x74
 800e314:	4607      	mov	r7, r0
 800e316:	460d      	mov	r5, r1
 800e318:	4614      	mov	r4, r2
 800e31a:	d50e      	bpl.n	800e33a <_svfiprintf_r+0x32>
 800e31c:	690b      	ldr	r3, [r1, #16]
 800e31e:	b963      	cbnz	r3, 800e33a <_svfiprintf_r+0x32>
 800e320:	2140      	movs	r1, #64	; 0x40
 800e322:	f7ff ff21 	bl	800e168 <_malloc_r>
 800e326:	6028      	str	r0, [r5, #0]
 800e328:	6128      	str	r0, [r5, #16]
 800e32a:	b920      	cbnz	r0, 800e336 <_svfiprintf_r+0x2e>
 800e32c:	230c      	movs	r3, #12
 800e32e:	603b      	str	r3, [r7, #0]
 800e330:	f04f 30ff 	mov.w	r0, #4294967295
 800e334:	e0d1      	b.n	800e4da <_svfiprintf_r+0x1d2>
 800e336:	2340      	movs	r3, #64	; 0x40
 800e338:	616b      	str	r3, [r5, #20]
 800e33a:	2300      	movs	r3, #0
 800e33c:	9309      	str	r3, [sp, #36]	; 0x24
 800e33e:	2320      	movs	r3, #32
 800e340:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e344:	f8cd 800c 	str.w	r8, [sp, #12]
 800e348:	2330      	movs	r3, #48	; 0x30
 800e34a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e4f4 <_svfiprintf_r+0x1ec>
 800e34e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e352:	f04f 0901 	mov.w	r9, #1
 800e356:	4623      	mov	r3, r4
 800e358:	469a      	mov	sl, r3
 800e35a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e35e:	b10a      	cbz	r2, 800e364 <_svfiprintf_r+0x5c>
 800e360:	2a25      	cmp	r2, #37	; 0x25
 800e362:	d1f9      	bne.n	800e358 <_svfiprintf_r+0x50>
 800e364:	ebba 0b04 	subs.w	fp, sl, r4
 800e368:	d00b      	beq.n	800e382 <_svfiprintf_r+0x7a>
 800e36a:	465b      	mov	r3, fp
 800e36c:	4622      	mov	r2, r4
 800e36e:	4629      	mov	r1, r5
 800e370:	4638      	mov	r0, r7
 800e372:	f7ff ff6d 	bl	800e250 <__ssputs_r>
 800e376:	3001      	adds	r0, #1
 800e378:	f000 80aa 	beq.w	800e4d0 <_svfiprintf_r+0x1c8>
 800e37c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e37e:	445a      	add	r2, fp
 800e380:	9209      	str	r2, [sp, #36]	; 0x24
 800e382:	f89a 3000 	ldrb.w	r3, [sl]
 800e386:	2b00      	cmp	r3, #0
 800e388:	f000 80a2 	beq.w	800e4d0 <_svfiprintf_r+0x1c8>
 800e38c:	2300      	movs	r3, #0
 800e38e:	f04f 32ff 	mov.w	r2, #4294967295
 800e392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e396:	f10a 0a01 	add.w	sl, sl, #1
 800e39a:	9304      	str	r3, [sp, #16]
 800e39c:	9307      	str	r3, [sp, #28]
 800e39e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3a2:	931a      	str	r3, [sp, #104]	; 0x68
 800e3a4:	4654      	mov	r4, sl
 800e3a6:	2205      	movs	r2, #5
 800e3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ac:	4851      	ldr	r0, [pc, #324]	; (800e4f4 <_svfiprintf_r+0x1ec>)
 800e3ae:	f7f1 ff4f 	bl	8000250 <memchr>
 800e3b2:	9a04      	ldr	r2, [sp, #16]
 800e3b4:	b9d8      	cbnz	r0, 800e3ee <_svfiprintf_r+0xe6>
 800e3b6:	06d0      	lsls	r0, r2, #27
 800e3b8:	bf44      	itt	mi
 800e3ba:	2320      	movmi	r3, #32
 800e3bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3c0:	0711      	lsls	r1, r2, #28
 800e3c2:	bf44      	itt	mi
 800e3c4:	232b      	movmi	r3, #43	; 0x2b
 800e3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3ca:	f89a 3000 	ldrb.w	r3, [sl]
 800e3ce:	2b2a      	cmp	r3, #42	; 0x2a
 800e3d0:	d015      	beq.n	800e3fe <_svfiprintf_r+0xf6>
 800e3d2:	9a07      	ldr	r2, [sp, #28]
 800e3d4:	4654      	mov	r4, sl
 800e3d6:	2000      	movs	r0, #0
 800e3d8:	f04f 0c0a 	mov.w	ip, #10
 800e3dc:	4621      	mov	r1, r4
 800e3de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3e2:	3b30      	subs	r3, #48	; 0x30
 800e3e4:	2b09      	cmp	r3, #9
 800e3e6:	d94e      	bls.n	800e486 <_svfiprintf_r+0x17e>
 800e3e8:	b1b0      	cbz	r0, 800e418 <_svfiprintf_r+0x110>
 800e3ea:	9207      	str	r2, [sp, #28]
 800e3ec:	e014      	b.n	800e418 <_svfiprintf_r+0x110>
 800e3ee:	eba0 0308 	sub.w	r3, r0, r8
 800e3f2:	fa09 f303 	lsl.w	r3, r9, r3
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	9304      	str	r3, [sp, #16]
 800e3fa:	46a2      	mov	sl, r4
 800e3fc:	e7d2      	b.n	800e3a4 <_svfiprintf_r+0x9c>
 800e3fe:	9b03      	ldr	r3, [sp, #12]
 800e400:	1d19      	adds	r1, r3, #4
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	9103      	str	r1, [sp, #12]
 800e406:	2b00      	cmp	r3, #0
 800e408:	bfbb      	ittet	lt
 800e40a:	425b      	neglt	r3, r3
 800e40c:	f042 0202 	orrlt.w	r2, r2, #2
 800e410:	9307      	strge	r3, [sp, #28]
 800e412:	9307      	strlt	r3, [sp, #28]
 800e414:	bfb8      	it	lt
 800e416:	9204      	strlt	r2, [sp, #16]
 800e418:	7823      	ldrb	r3, [r4, #0]
 800e41a:	2b2e      	cmp	r3, #46	; 0x2e
 800e41c:	d10c      	bne.n	800e438 <_svfiprintf_r+0x130>
 800e41e:	7863      	ldrb	r3, [r4, #1]
 800e420:	2b2a      	cmp	r3, #42	; 0x2a
 800e422:	d135      	bne.n	800e490 <_svfiprintf_r+0x188>
 800e424:	9b03      	ldr	r3, [sp, #12]
 800e426:	1d1a      	adds	r2, r3, #4
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	9203      	str	r2, [sp, #12]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	bfb8      	it	lt
 800e430:	f04f 33ff 	movlt.w	r3, #4294967295
 800e434:	3402      	adds	r4, #2
 800e436:	9305      	str	r3, [sp, #20]
 800e438:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e504 <_svfiprintf_r+0x1fc>
 800e43c:	7821      	ldrb	r1, [r4, #0]
 800e43e:	2203      	movs	r2, #3
 800e440:	4650      	mov	r0, sl
 800e442:	f7f1 ff05 	bl	8000250 <memchr>
 800e446:	b140      	cbz	r0, 800e45a <_svfiprintf_r+0x152>
 800e448:	2340      	movs	r3, #64	; 0x40
 800e44a:	eba0 000a 	sub.w	r0, r0, sl
 800e44e:	fa03 f000 	lsl.w	r0, r3, r0
 800e452:	9b04      	ldr	r3, [sp, #16]
 800e454:	4303      	orrs	r3, r0
 800e456:	3401      	adds	r4, #1
 800e458:	9304      	str	r3, [sp, #16]
 800e45a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e45e:	4826      	ldr	r0, [pc, #152]	; (800e4f8 <_svfiprintf_r+0x1f0>)
 800e460:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e464:	2206      	movs	r2, #6
 800e466:	f7f1 fef3 	bl	8000250 <memchr>
 800e46a:	2800      	cmp	r0, #0
 800e46c:	d038      	beq.n	800e4e0 <_svfiprintf_r+0x1d8>
 800e46e:	4b23      	ldr	r3, [pc, #140]	; (800e4fc <_svfiprintf_r+0x1f4>)
 800e470:	bb1b      	cbnz	r3, 800e4ba <_svfiprintf_r+0x1b2>
 800e472:	9b03      	ldr	r3, [sp, #12]
 800e474:	3307      	adds	r3, #7
 800e476:	f023 0307 	bic.w	r3, r3, #7
 800e47a:	3308      	adds	r3, #8
 800e47c:	9303      	str	r3, [sp, #12]
 800e47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e480:	4433      	add	r3, r6
 800e482:	9309      	str	r3, [sp, #36]	; 0x24
 800e484:	e767      	b.n	800e356 <_svfiprintf_r+0x4e>
 800e486:	fb0c 3202 	mla	r2, ip, r2, r3
 800e48a:	460c      	mov	r4, r1
 800e48c:	2001      	movs	r0, #1
 800e48e:	e7a5      	b.n	800e3dc <_svfiprintf_r+0xd4>
 800e490:	2300      	movs	r3, #0
 800e492:	3401      	adds	r4, #1
 800e494:	9305      	str	r3, [sp, #20]
 800e496:	4619      	mov	r1, r3
 800e498:	f04f 0c0a 	mov.w	ip, #10
 800e49c:	4620      	mov	r0, r4
 800e49e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4a2:	3a30      	subs	r2, #48	; 0x30
 800e4a4:	2a09      	cmp	r2, #9
 800e4a6:	d903      	bls.n	800e4b0 <_svfiprintf_r+0x1a8>
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d0c5      	beq.n	800e438 <_svfiprintf_r+0x130>
 800e4ac:	9105      	str	r1, [sp, #20]
 800e4ae:	e7c3      	b.n	800e438 <_svfiprintf_r+0x130>
 800e4b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4b4:	4604      	mov	r4, r0
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	e7f0      	b.n	800e49c <_svfiprintf_r+0x194>
 800e4ba:	ab03      	add	r3, sp, #12
 800e4bc:	9300      	str	r3, [sp, #0]
 800e4be:	462a      	mov	r2, r5
 800e4c0:	4b0f      	ldr	r3, [pc, #60]	; (800e500 <_svfiprintf_r+0x1f8>)
 800e4c2:	a904      	add	r1, sp, #16
 800e4c4:	4638      	mov	r0, r7
 800e4c6:	f7fc fb4f 	bl	800ab68 <_printf_float>
 800e4ca:	1c42      	adds	r2, r0, #1
 800e4cc:	4606      	mov	r6, r0
 800e4ce:	d1d6      	bne.n	800e47e <_svfiprintf_r+0x176>
 800e4d0:	89ab      	ldrh	r3, [r5, #12]
 800e4d2:	065b      	lsls	r3, r3, #25
 800e4d4:	f53f af2c 	bmi.w	800e330 <_svfiprintf_r+0x28>
 800e4d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4da:	b01d      	add	sp, #116	; 0x74
 800e4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4e0:	ab03      	add	r3, sp, #12
 800e4e2:	9300      	str	r3, [sp, #0]
 800e4e4:	462a      	mov	r2, r5
 800e4e6:	4b06      	ldr	r3, [pc, #24]	; (800e500 <_svfiprintf_r+0x1f8>)
 800e4e8:	a904      	add	r1, sp, #16
 800e4ea:	4638      	mov	r0, r7
 800e4ec:	f7fc fdc8 	bl	800b080 <_printf_i>
 800e4f0:	e7eb      	b.n	800e4ca <_svfiprintf_r+0x1c2>
 800e4f2:	bf00      	nop
 800e4f4:	0800f5ec 	.word	0x0800f5ec
 800e4f8:	0800f5f6 	.word	0x0800f5f6
 800e4fc:	0800ab69 	.word	0x0800ab69
 800e500:	0800e251 	.word	0x0800e251
 800e504:	0800f5f2 	.word	0x0800f5f2

0800e508 <nan>:
 800e508:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e510 <nan+0x8>
 800e50c:	4770      	bx	lr
 800e50e:	bf00      	nop
 800e510:	00000000 	.word	0x00000000
 800e514:	7ff80000 	.word	0x7ff80000

0800e518 <_sbrk_r>:
 800e518:	b538      	push	{r3, r4, r5, lr}
 800e51a:	4d06      	ldr	r5, [pc, #24]	; (800e534 <_sbrk_r+0x1c>)
 800e51c:	2300      	movs	r3, #0
 800e51e:	4604      	mov	r4, r0
 800e520:	4608      	mov	r0, r1
 800e522:	602b      	str	r3, [r5, #0]
 800e524:	f7f3 fe98 	bl	8002258 <_sbrk>
 800e528:	1c43      	adds	r3, r0, #1
 800e52a:	d102      	bne.n	800e532 <_sbrk_r+0x1a>
 800e52c:	682b      	ldr	r3, [r5, #0]
 800e52e:	b103      	cbz	r3, 800e532 <_sbrk_r+0x1a>
 800e530:	6023      	str	r3, [r4, #0]
 800e532:	bd38      	pop	{r3, r4, r5, pc}
 800e534:	20004e64 	.word	0x20004e64

0800e538 <strncmp>:
 800e538:	b510      	push	{r4, lr}
 800e53a:	b17a      	cbz	r2, 800e55c <strncmp+0x24>
 800e53c:	4603      	mov	r3, r0
 800e53e:	3901      	subs	r1, #1
 800e540:	1884      	adds	r4, r0, r2
 800e542:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e546:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e54a:	4290      	cmp	r0, r2
 800e54c:	d101      	bne.n	800e552 <strncmp+0x1a>
 800e54e:	42a3      	cmp	r3, r4
 800e550:	d101      	bne.n	800e556 <strncmp+0x1e>
 800e552:	1a80      	subs	r0, r0, r2
 800e554:	bd10      	pop	{r4, pc}
 800e556:	2800      	cmp	r0, #0
 800e558:	d1f3      	bne.n	800e542 <strncmp+0xa>
 800e55a:	e7fa      	b.n	800e552 <strncmp+0x1a>
 800e55c:	4610      	mov	r0, r2
 800e55e:	e7f9      	b.n	800e554 <strncmp+0x1c>

0800e560 <__ascii_wctomb>:
 800e560:	b149      	cbz	r1, 800e576 <__ascii_wctomb+0x16>
 800e562:	2aff      	cmp	r2, #255	; 0xff
 800e564:	bf85      	ittet	hi
 800e566:	238a      	movhi	r3, #138	; 0x8a
 800e568:	6003      	strhi	r3, [r0, #0]
 800e56a:	700a      	strbls	r2, [r1, #0]
 800e56c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e570:	bf98      	it	ls
 800e572:	2001      	movls	r0, #1
 800e574:	4770      	bx	lr
 800e576:	4608      	mov	r0, r1
 800e578:	4770      	bx	lr
	...

0800e57c <__assert_func>:
 800e57c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e57e:	4614      	mov	r4, r2
 800e580:	461a      	mov	r2, r3
 800e582:	4b09      	ldr	r3, [pc, #36]	; (800e5a8 <__assert_func+0x2c>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	4605      	mov	r5, r0
 800e588:	68d8      	ldr	r0, [r3, #12]
 800e58a:	b14c      	cbz	r4, 800e5a0 <__assert_func+0x24>
 800e58c:	4b07      	ldr	r3, [pc, #28]	; (800e5ac <__assert_func+0x30>)
 800e58e:	9100      	str	r1, [sp, #0]
 800e590:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e594:	4906      	ldr	r1, [pc, #24]	; (800e5b0 <__assert_func+0x34>)
 800e596:	462b      	mov	r3, r5
 800e598:	f000 f80e 	bl	800e5b8 <fiprintf>
 800e59c:	f000 fa8c 	bl	800eab8 <abort>
 800e5a0:	4b04      	ldr	r3, [pc, #16]	; (800e5b4 <__assert_func+0x38>)
 800e5a2:	461c      	mov	r4, r3
 800e5a4:	e7f3      	b.n	800e58e <__assert_func+0x12>
 800e5a6:	bf00      	nop
 800e5a8:	20000010 	.word	0x20000010
 800e5ac:	0800f5fd 	.word	0x0800f5fd
 800e5b0:	0800f60a 	.word	0x0800f60a
 800e5b4:	0800f638 	.word	0x0800f638

0800e5b8 <fiprintf>:
 800e5b8:	b40e      	push	{r1, r2, r3}
 800e5ba:	b503      	push	{r0, r1, lr}
 800e5bc:	4601      	mov	r1, r0
 800e5be:	ab03      	add	r3, sp, #12
 800e5c0:	4805      	ldr	r0, [pc, #20]	; (800e5d8 <fiprintf+0x20>)
 800e5c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5c6:	6800      	ldr	r0, [r0, #0]
 800e5c8:	9301      	str	r3, [sp, #4]
 800e5ca:	f000 f885 	bl	800e6d8 <_vfiprintf_r>
 800e5ce:	b002      	add	sp, #8
 800e5d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5d4:	b003      	add	sp, #12
 800e5d6:	4770      	bx	lr
 800e5d8:	20000010 	.word	0x20000010

0800e5dc <memmove>:
 800e5dc:	4288      	cmp	r0, r1
 800e5de:	b510      	push	{r4, lr}
 800e5e0:	eb01 0402 	add.w	r4, r1, r2
 800e5e4:	d902      	bls.n	800e5ec <memmove+0x10>
 800e5e6:	4284      	cmp	r4, r0
 800e5e8:	4623      	mov	r3, r4
 800e5ea:	d807      	bhi.n	800e5fc <memmove+0x20>
 800e5ec:	1e43      	subs	r3, r0, #1
 800e5ee:	42a1      	cmp	r1, r4
 800e5f0:	d008      	beq.n	800e604 <memmove+0x28>
 800e5f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e5fa:	e7f8      	b.n	800e5ee <memmove+0x12>
 800e5fc:	4402      	add	r2, r0
 800e5fe:	4601      	mov	r1, r0
 800e600:	428a      	cmp	r2, r1
 800e602:	d100      	bne.n	800e606 <memmove+0x2a>
 800e604:	bd10      	pop	{r4, pc}
 800e606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e60a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e60e:	e7f7      	b.n	800e600 <memmove+0x24>

0800e610 <__malloc_lock>:
 800e610:	4801      	ldr	r0, [pc, #4]	; (800e618 <__malloc_lock+0x8>)
 800e612:	f000 bc11 	b.w	800ee38 <__retarget_lock_acquire_recursive>
 800e616:	bf00      	nop
 800e618:	20004e68 	.word	0x20004e68

0800e61c <__malloc_unlock>:
 800e61c:	4801      	ldr	r0, [pc, #4]	; (800e624 <__malloc_unlock+0x8>)
 800e61e:	f000 bc0c 	b.w	800ee3a <__retarget_lock_release_recursive>
 800e622:	bf00      	nop
 800e624:	20004e68 	.word	0x20004e68

0800e628 <_realloc_r>:
 800e628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e62c:	4680      	mov	r8, r0
 800e62e:	4614      	mov	r4, r2
 800e630:	460e      	mov	r6, r1
 800e632:	b921      	cbnz	r1, 800e63e <_realloc_r+0x16>
 800e634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e638:	4611      	mov	r1, r2
 800e63a:	f7ff bd95 	b.w	800e168 <_malloc_r>
 800e63e:	b92a      	cbnz	r2, 800e64c <_realloc_r+0x24>
 800e640:	f7ff fd26 	bl	800e090 <_free_r>
 800e644:	4625      	mov	r5, r4
 800e646:	4628      	mov	r0, r5
 800e648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e64c:	f000 fc5c 	bl	800ef08 <_malloc_usable_size_r>
 800e650:	4284      	cmp	r4, r0
 800e652:	4607      	mov	r7, r0
 800e654:	d802      	bhi.n	800e65c <_realloc_r+0x34>
 800e656:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e65a:	d812      	bhi.n	800e682 <_realloc_r+0x5a>
 800e65c:	4621      	mov	r1, r4
 800e65e:	4640      	mov	r0, r8
 800e660:	f7ff fd82 	bl	800e168 <_malloc_r>
 800e664:	4605      	mov	r5, r0
 800e666:	2800      	cmp	r0, #0
 800e668:	d0ed      	beq.n	800e646 <_realloc_r+0x1e>
 800e66a:	42bc      	cmp	r4, r7
 800e66c:	4622      	mov	r2, r4
 800e66e:	4631      	mov	r1, r6
 800e670:	bf28      	it	cs
 800e672:	463a      	movcs	r2, r7
 800e674:	f7fc f9d0 	bl	800aa18 <memcpy>
 800e678:	4631      	mov	r1, r6
 800e67a:	4640      	mov	r0, r8
 800e67c:	f7ff fd08 	bl	800e090 <_free_r>
 800e680:	e7e1      	b.n	800e646 <_realloc_r+0x1e>
 800e682:	4635      	mov	r5, r6
 800e684:	e7df      	b.n	800e646 <_realloc_r+0x1e>

0800e686 <__sfputc_r>:
 800e686:	6893      	ldr	r3, [r2, #8]
 800e688:	3b01      	subs	r3, #1
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	b410      	push	{r4}
 800e68e:	6093      	str	r3, [r2, #8]
 800e690:	da08      	bge.n	800e6a4 <__sfputc_r+0x1e>
 800e692:	6994      	ldr	r4, [r2, #24]
 800e694:	42a3      	cmp	r3, r4
 800e696:	db01      	blt.n	800e69c <__sfputc_r+0x16>
 800e698:	290a      	cmp	r1, #10
 800e69a:	d103      	bne.n	800e6a4 <__sfputc_r+0x1e>
 800e69c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6a0:	f000 b94a 	b.w	800e938 <__swbuf_r>
 800e6a4:	6813      	ldr	r3, [r2, #0]
 800e6a6:	1c58      	adds	r0, r3, #1
 800e6a8:	6010      	str	r0, [r2, #0]
 800e6aa:	7019      	strb	r1, [r3, #0]
 800e6ac:	4608      	mov	r0, r1
 800e6ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <__sfputs_r>:
 800e6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6b6:	4606      	mov	r6, r0
 800e6b8:	460f      	mov	r7, r1
 800e6ba:	4614      	mov	r4, r2
 800e6bc:	18d5      	adds	r5, r2, r3
 800e6be:	42ac      	cmp	r4, r5
 800e6c0:	d101      	bne.n	800e6c6 <__sfputs_r+0x12>
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	e007      	b.n	800e6d6 <__sfputs_r+0x22>
 800e6c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6ca:	463a      	mov	r2, r7
 800e6cc:	4630      	mov	r0, r6
 800e6ce:	f7ff ffda 	bl	800e686 <__sfputc_r>
 800e6d2:	1c43      	adds	r3, r0, #1
 800e6d4:	d1f3      	bne.n	800e6be <__sfputs_r+0xa>
 800e6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e6d8 <_vfiprintf_r>:
 800e6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6dc:	460d      	mov	r5, r1
 800e6de:	b09d      	sub	sp, #116	; 0x74
 800e6e0:	4614      	mov	r4, r2
 800e6e2:	4698      	mov	r8, r3
 800e6e4:	4606      	mov	r6, r0
 800e6e6:	b118      	cbz	r0, 800e6f0 <_vfiprintf_r+0x18>
 800e6e8:	6983      	ldr	r3, [r0, #24]
 800e6ea:	b90b      	cbnz	r3, 800e6f0 <_vfiprintf_r+0x18>
 800e6ec:	f000 fb06 	bl	800ecfc <__sinit>
 800e6f0:	4b89      	ldr	r3, [pc, #548]	; (800e918 <_vfiprintf_r+0x240>)
 800e6f2:	429d      	cmp	r5, r3
 800e6f4:	d11b      	bne.n	800e72e <_vfiprintf_r+0x56>
 800e6f6:	6875      	ldr	r5, [r6, #4]
 800e6f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6fa:	07d9      	lsls	r1, r3, #31
 800e6fc:	d405      	bmi.n	800e70a <_vfiprintf_r+0x32>
 800e6fe:	89ab      	ldrh	r3, [r5, #12]
 800e700:	059a      	lsls	r2, r3, #22
 800e702:	d402      	bmi.n	800e70a <_vfiprintf_r+0x32>
 800e704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e706:	f000 fb97 	bl	800ee38 <__retarget_lock_acquire_recursive>
 800e70a:	89ab      	ldrh	r3, [r5, #12]
 800e70c:	071b      	lsls	r3, r3, #28
 800e70e:	d501      	bpl.n	800e714 <_vfiprintf_r+0x3c>
 800e710:	692b      	ldr	r3, [r5, #16]
 800e712:	b9eb      	cbnz	r3, 800e750 <_vfiprintf_r+0x78>
 800e714:	4629      	mov	r1, r5
 800e716:	4630      	mov	r0, r6
 800e718:	f000 f960 	bl	800e9dc <__swsetup_r>
 800e71c:	b1c0      	cbz	r0, 800e750 <_vfiprintf_r+0x78>
 800e71e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e720:	07dc      	lsls	r4, r3, #31
 800e722:	d50e      	bpl.n	800e742 <_vfiprintf_r+0x6a>
 800e724:	f04f 30ff 	mov.w	r0, #4294967295
 800e728:	b01d      	add	sp, #116	; 0x74
 800e72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e72e:	4b7b      	ldr	r3, [pc, #492]	; (800e91c <_vfiprintf_r+0x244>)
 800e730:	429d      	cmp	r5, r3
 800e732:	d101      	bne.n	800e738 <_vfiprintf_r+0x60>
 800e734:	68b5      	ldr	r5, [r6, #8]
 800e736:	e7df      	b.n	800e6f8 <_vfiprintf_r+0x20>
 800e738:	4b79      	ldr	r3, [pc, #484]	; (800e920 <_vfiprintf_r+0x248>)
 800e73a:	429d      	cmp	r5, r3
 800e73c:	bf08      	it	eq
 800e73e:	68f5      	ldreq	r5, [r6, #12]
 800e740:	e7da      	b.n	800e6f8 <_vfiprintf_r+0x20>
 800e742:	89ab      	ldrh	r3, [r5, #12]
 800e744:	0598      	lsls	r0, r3, #22
 800e746:	d4ed      	bmi.n	800e724 <_vfiprintf_r+0x4c>
 800e748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e74a:	f000 fb76 	bl	800ee3a <__retarget_lock_release_recursive>
 800e74e:	e7e9      	b.n	800e724 <_vfiprintf_r+0x4c>
 800e750:	2300      	movs	r3, #0
 800e752:	9309      	str	r3, [sp, #36]	; 0x24
 800e754:	2320      	movs	r3, #32
 800e756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e75a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e75e:	2330      	movs	r3, #48	; 0x30
 800e760:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e924 <_vfiprintf_r+0x24c>
 800e764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e768:	f04f 0901 	mov.w	r9, #1
 800e76c:	4623      	mov	r3, r4
 800e76e:	469a      	mov	sl, r3
 800e770:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e774:	b10a      	cbz	r2, 800e77a <_vfiprintf_r+0xa2>
 800e776:	2a25      	cmp	r2, #37	; 0x25
 800e778:	d1f9      	bne.n	800e76e <_vfiprintf_r+0x96>
 800e77a:	ebba 0b04 	subs.w	fp, sl, r4
 800e77e:	d00b      	beq.n	800e798 <_vfiprintf_r+0xc0>
 800e780:	465b      	mov	r3, fp
 800e782:	4622      	mov	r2, r4
 800e784:	4629      	mov	r1, r5
 800e786:	4630      	mov	r0, r6
 800e788:	f7ff ff94 	bl	800e6b4 <__sfputs_r>
 800e78c:	3001      	adds	r0, #1
 800e78e:	f000 80aa 	beq.w	800e8e6 <_vfiprintf_r+0x20e>
 800e792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e794:	445a      	add	r2, fp
 800e796:	9209      	str	r2, [sp, #36]	; 0x24
 800e798:	f89a 3000 	ldrb.w	r3, [sl]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f000 80a2 	beq.w	800e8e6 <_vfiprintf_r+0x20e>
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e7a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7ac:	f10a 0a01 	add.w	sl, sl, #1
 800e7b0:	9304      	str	r3, [sp, #16]
 800e7b2:	9307      	str	r3, [sp, #28]
 800e7b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7b8:	931a      	str	r3, [sp, #104]	; 0x68
 800e7ba:	4654      	mov	r4, sl
 800e7bc:	2205      	movs	r2, #5
 800e7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7c2:	4858      	ldr	r0, [pc, #352]	; (800e924 <_vfiprintf_r+0x24c>)
 800e7c4:	f7f1 fd44 	bl	8000250 <memchr>
 800e7c8:	9a04      	ldr	r2, [sp, #16]
 800e7ca:	b9d8      	cbnz	r0, 800e804 <_vfiprintf_r+0x12c>
 800e7cc:	06d1      	lsls	r1, r2, #27
 800e7ce:	bf44      	itt	mi
 800e7d0:	2320      	movmi	r3, #32
 800e7d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7d6:	0713      	lsls	r3, r2, #28
 800e7d8:	bf44      	itt	mi
 800e7da:	232b      	movmi	r3, #43	; 0x2b
 800e7dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7e0:	f89a 3000 	ldrb.w	r3, [sl]
 800e7e4:	2b2a      	cmp	r3, #42	; 0x2a
 800e7e6:	d015      	beq.n	800e814 <_vfiprintf_r+0x13c>
 800e7e8:	9a07      	ldr	r2, [sp, #28]
 800e7ea:	4654      	mov	r4, sl
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	f04f 0c0a 	mov.w	ip, #10
 800e7f2:	4621      	mov	r1, r4
 800e7f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7f8:	3b30      	subs	r3, #48	; 0x30
 800e7fa:	2b09      	cmp	r3, #9
 800e7fc:	d94e      	bls.n	800e89c <_vfiprintf_r+0x1c4>
 800e7fe:	b1b0      	cbz	r0, 800e82e <_vfiprintf_r+0x156>
 800e800:	9207      	str	r2, [sp, #28]
 800e802:	e014      	b.n	800e82e <_vfiprintf_r+0x156>
 800e804:	eba0 0308 	sub.w	r3, r0, r8
 800e808:	fa09 f303 	lsl.w	r3, r9, r3
 800e80c:	4313      	orrs	r3, r2
 800e80e:	9304      	str	r3, [sp, #16]
 800e810:	46a2      	mov	sl, r4
 800e812:	e7d2      	b.n	800e7ba <_vfiprintf_r+0xe2>
 800e814:	9b03      	ldr	r3, [sp, #12]
 800e816:	1d19      	adds	r1, r3, #4
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	9103      	str	r1, [sp, #12]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	bfbb      	ittet	lt
 800e820:	425b      	neglt	r3, r3
 800e822:	f042 0202 	orrlt.w	r2, r2, #2
 800e826:	9307      	strge	r3, [sp, #28]
 800e828:	9307      	strlt	r3, [sp, #28]
 800e82a:	bfb8      	it	lt
 800e82c:	9204      	strlt	r2, [sp, #16]
 800e82e:	7823      	ldrb	r3, [r4, #0]
 800e830:	2b2e      	cmp	r3, #46	; 0x2e
 800e832:	d10c      	bne.n	800e84e <_vfiprintf_r+0x176>
 800e834:	7863      	ldrb	r3, [r4, #1]
 800e836:	2b2a      	cmp	r3, #42	; 0x2a
 800e838:	d135      	bne.n	800e8a6 <_vfiprintf_r+0x1ce>
 800e83a:	9b03      	ldr	r3, [sp, #12]
 800e83c:	1d1a      	adds	r2, r3, #4
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	9203      	str	r2, [sp, #12]
 800e842:	2b00      	cmp	r3, #0
 800e844:	bfb8      	it	lt
 800e846:	f04f 33ff 	movlt.w	r3, #4294967295
 800e84a:	3402      	adds	r4, #2
 800e84c:	9305      	str	r3, [sp, #20]
 800e84e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e934 <_vfiprintf_r+0x25c>
 800e852:	7821      	ldrb	r1, [r4, #0]
 800e854:	2203      	movs	r2, #3
 800e856:	4650      	mov	r0, sl
 800e858:	f7f1 fcfa 	bl	8000250 <memchr>
 800e85c:	b140      	cbz	r0, 800e870 <_vfiprintf_r+0x198>
 800e85e:	2340      	movs	r3, #64	; 0x40
 800e860:	eba0 000a 	sub.w	r0, r0, sl
 800e864:	fa03 f000 	lsl.w	r0, r3, r0
 800e868:	9b04      	ldr	r3, [sp, #16]
 800e86a:	4303      	orrs	r3, r0
 800e86c:	3401      	adds	r4, #1
 800e86e:	9304      	str	r3, [sp, #16]
 800e870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e874:	482c      	ldr	r0, [pc, #176]	; (800e928 <_vfiprintf_r+0x250>)
 800e876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e87a:	2206      	movs	r2, #6
 800e87c:	f7f1 fce8 	bl	8000250 <memchr>
 800e880:	2800      	cmp	r0, #0
 800e882:	d03f      	beq.n	800e904 <_vfiprintf_r+0x22c>
 800e884:	4b29      	ldr	r3, [pc, #164]	; (800e92c <_vfiprintf_r+0x254>)
 800e886:	bb1b      	cbnz	r3, 800e8d0 <_vfiprintf_r+0x1f8>
 800e888:	9b03      	ldr	r3, [sp, #12]
 800e88a:	3307      	adds	r3, #7
 800e88c:	f023 0307 	bic.w	r3, r3, #7
 800e890:	3308      	adds	r3, #8
 800e892:	9303      	str	r3, [sp, #12]
 800e894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e896:	443b      	add	r3, r7
 800e898:	9309      	str	r3, [sp, #36]	; 0x24
 800e89a:	e767      	b.n	800e76c <_vfiprintf_r+0x94>
 800e89c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e8a0:	460c      	mov	r4, r1
 800e8a2:	2001      	movs	r0, #1
 800e8a4:	e7a5      	b.n	800e7f2 <_vfiprintf_r+0x11a>
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	3401      	adds	r4, #1
 800e8aa:	9305      	str	r3, [sp, #20]
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	f04f 0c0a 	mov.w	ip, #10
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8b8:	3a30      	subs	r2, #48	; 0x30
 800e8ba:	2a09      	cmp	r2, #9
 800e8bc:	d903      	bls.n	800e8c6 <_vfiprintf_r+0x1ee>
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d0c5      	beq.n	800e84e <_vfiprintf_r+0x176>
 800e8c2:	9105      	str	r1, [sp, #20]
 800e8c4:	e7c3      	b.n	800e84e <_vfiprintf_r+0x176>
 800e8c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8ca:	4604      	mov	r4, r0
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	e7f0      	b.n	800e8b2 <_vfiprintf_r+0x1da>
 800e8d0:	ab03      	add	r3, sp, #12
 800e8d2:	9300      	str	r3, [sp, #0]
 800e8d4:	462a      	mov	r2, r5
 800e8d6:	4b16      	ldr	r3, [pc, #88]	; (800e930 <_vfiprintf_r+0x258>)
 800e8d8:	a904      	add	r1, sp, #16
 800e8da:	4630      	mov	r0, r6
 800e8dc:	f7fc f944 	bl	800ab68 <_printf_float>
 800e8e0:	4607      	mov	r7, r0
 800e8e2:	1c78      	adds	r0, r7, #1
 800e8e4:	d1d6      	bne.n	800e894 <_vfiprintf_r+0x1bc>
 800e8e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8e8:	07d9      	lsls	r1, r3, #31
 800e8ea:	d405      	bmi.n	800e8f8 <_vfiprintf_r+0x220>
 800e8ec:	89ab      	ldrh	r3, [r5, #12]
 800e8ee:	059a      	lsls	r2, r3, #22
 800e8f0:	d402      	bmi.n	800e8f8 <_vfiprintf_r+0x220>
 800e8f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8f4:	f000 faa1 	bl	800ee3a <__retarget_lock_release_recursive>
 800e8f8:	89ab      	ldrh	r3, [r5, #12]
 800e8fa:	065b      	lsls	r3, r3, #25
 800e8fc:	f53f af12 	bmi.w	800e724 <_vfiprintf_r+0x4c>
 800e900:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e902:	e711      	b.n	800e728 <_vfiprintf_r+0x50>
 800e904:	ab03      	add	r3, sp, #12
 800e906:	9300      	str	r3, [sp, #0]
 800e908:	462a      	mov	r2, r5
 800e90a:	4b09      	ldr	r3, [pc, #36]	; (800e930 <_vfiprintf_r+0x258>)
 800e90c:	a904      	add	r1, sp, #16
 800e90e:	4630      	mov	r0, r6
 800e910:	f7fc fbb6 	bl	800b080 <_printf_i>
 800e914:	e7e4      	b.n	800e8e0 <_vfiprintf_r+0x208>
 800e916:	bf00      	nop
 800e918:	0800f65c 	.word	0x0800f65c
 800e91c:	0800f67c 	.word	0x0800f67c
 800e920:	0800f63c 	.word	0x0800f63c
 800e924:	0800f5ec 	.word	0x0800f5ec
 800e928:	0800f5f6 	.word	0x0800f5f6
 800e92c:	0800ab69 	.word	0x0800ab69
 800e930:	0800e6b5 	.word	0x0800e6b5
 800e934:	0800f5f2 	.word	0x0800f5f2

0800e938 <__swbuf_r>:
 800e938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e93a:	460e      	mov	r6, r1
 800e93c:	4614      	mov	r4, r2
 800e93e:	4605      	mov	r5, r0
 800e940:	b118      	cbz	r0, 800e94a <__swbuf_r+0x12>
 800e942:	6983      	ldr	r3, [r0, #24]
 800e944:	b90b      	cbnz	r3, 800e94a <__swbuf_r+0x12>
 800e946:	f000 f9d9 	bl	800ecfc <__sinit>
 800e94a:	4b21      	ldr	r3, [pc, #132]	; (800e9d0 <__swbuf_r+0x98>)
 800e94c:	429c      	cmp	r4, r3
 800e94e:	d12b      	bne.n	800e9a8 <__swbuf_r+0x70>
 800e950:	686c      	ldr	r4, [r5, #4]
 800e952:	69a3      	ldr	r3, [r4, #24]
 800e954:	60a3      	str	r3, [r4, #8]
 800e956:	89a3      	ldrh	r3, [r4, #12]
 800e958:	071a      	lsls	r2, r3, #28
 800e95a:	d52f      	bpl.n	800e9bc <__swbuf_r+0x84>
 800e95c:	6923      	ldr	r3, [r4, #16]
 800e95e:	b36b      	cbz	r3, 800e9bc <__swbuf_r+0x84>
 800e960:	6923      	ldr	r3, [r4, #16]
 800e962:	6820      	ldr	r0, [r4, #0]
 800e964:	1ac0      	subs	r0, r0, r3
 800e966:	6963      	ldr	r3, [r4, #20]
 800e968:	b2f6      	uxtb	r6, r6
 800e96a:	4283      	cmp	r3, r0
 800e96c:	4637      	mov	r7, r6
 800e96e:	dc04      	bgt.n	800e97a <__swbuf_r+0x42>
 800e970:	4621      	mov	r1, r4
 800e972:	4628      	mov	r0, r5
 800e974:	f000 f92e 	bl	800ebd4 <_fflush_r>
 800e978:	bb30      	cbnz	r0, 800e9c8 <__swbuf_r+0x90>
 800e97a:	68a3      	ldr	r3, [r4, #8]
 800e97c:	3b01      	subs	r3, #1
 800e97e:	60a3      	str	r3, [r4, #8]
 800e980:	6823      	ldr	r3, [r4, #0]
 800e982:	1c5a      	adds	r2, r3, #1
 800e984:	6022      	str	r2, [r4, #0]
 800e986:	701e      	strb	r6, [r3, #0]
 800e988:	6963      	ldr	r3, [r4, #20]
 800e98a:	3001      	adds	r0, #1
 800e98c:	4283      	cmp	r3, r0
 800e98e:	d004      	beq.n	800e99a <__swbuf_r+0x62>
 800e990:	89a3      	ldrh	r3, [r4, #12]
 800e992:	07db      	lsls	r3, r3, #31
 800e994:	d506      	bpl.n	800e9a4 <__swbuf_r+0x6c>
 800e996:	2e0a      	cmp	r6, #10
 800e998:	d104      	bne.n	800e9a4 <__swbuf_r+0x6c>
 800e99a:	4621      	mov	r1, r4
 800e99c:	4628      	mov	r0, r5
 800e99e:	f000 f919 	bl	800ebd4 <_fflush_r>
 800e9a2:	b988      	cbnz	r0, 800e9c8 <__swbuf_r+0x90>
 800e9a4:	4638      	mov	r0, r7
 800e9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9a8:	4b0a      	ldr	r3, [pc, #40]	; (800e9d4 <__swbuf_r+0x9c>)
 800e9aa:	429c      	cmp	r4, r3
 800e9ac:	d101      	bne.n	800e9b2 <__swbuf_r+0x7a>
 800e9ae:	68ac      	ldr	r4, [r5, #8]
 800e9b0:	e7cf      	b.n	800e952 <__swbuf_r+0x1a>
 800e9b2:	4b09      	ldr	r3, [pc, #36]	; (800e9d8 <__swbuf_r+0xa0>)
 800e9b4:	429c      	cmp	r4, r3
 800e9b6:	bf08      	it	eq
 800e9b8:	68ec      	ldreq	r4, [r5, #12]
 800e9ba:	e7ca      	b.n	800e952 <__swbuf_r+0x1a>
 800e9bc:	4621      	mov	r1, r4
 800e9be:	4628      	mov	r0, r5
 800e9c0:	f000 f80c 	bl	800e9dc <__swsetup_r>
 800e9c4:	2800      	cmp	r0, #0
 800e9c6:	d0cb      	beq.n	800e960 <__swbuf_r+0x28>
 800e9c8:	f04f 37ff 	mov.w	r7, #4294967295
 800e9cc:	e7ea      	b.n	800e9a4 <__swbuf_r+0x6c>
 800e9ce:	bf00      	nop
 800e9d0:	0800f65c 	.word	0x0800f65c
 800e9d4:	0800f67c 	.word	0x0800f67c
 800e9d8:	0800f63c 	.word	0x0800f63c

0800e9dc <__swsetup_r>:
 800e9dc:	4b32      	ldr	r3, [pc, #200]	; (800eaa8 <__swsetup_r+0xcc>)
 800e9de:	b570      	push	{r4, r5, r6, lr}
 800e9e0:	681d      	ldr	r5, [r3, #0]
 800e9e2:	4606      	mov	r6, r0
 800e9e4:	460c      	mov	r4, r1
 800e9e6:	b125      	cbz	r5, 800e9f2 <__swsetup_r+0x16>
 800e9e8:	69ab      	ldr	r3, [r5, #24]
 800e9ea:	b913      	cbnz	r3, 800e9f2 <__swsetup_r+0x16>
 800e9ec:	4628      	mov	r0, r5
 800e9ee:	f000 f985 	bl	800ecfc <__sinit>
 800e9f2:	4b2e      	ldr	r3, [pc, #184]	; (800eaac <__swsetup_r+0xd0>)
 800e9f4:	429c      	cmp	r4, r3
 800e9f6:	d10f      	bne.n	800ea18 <__swsetup_r+0x3c>
 800e9f8:	686c      	ldr	r4, [r5, #4]
 800e9fa:	89a3      	ldrh	r3, [r4, #12]
 800e9fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea00:	0719      	lsls	r1, r3, #28
 800ea02:	d42c      	bmi.n	800ea5e <__swsetup_r+0x82>
 800ea04:	06dd      	lsls	r5, r3, #27
 800ea06:	d411      	bmi.n	800ea2c <__swsetup_r+0x50>
 800ea08:	2309      	movs	r3, #9
 800ea0a:	6033      	str	r3, [r6, #0]
 800ea0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ea10:	81a3      	strh	r3, [r4, #12]
 800ea12:	f04f 30ff 	mov.w	r0, #4294967295
 800ea16:	e03e      	b.n	800ea96 <__swsetup_r+0xba>
 800ea18:	4b25      	ldr	r3, [pc, #148]	; (800eab0 <__swsetup_r+0xd4>)
 800ea1a:	429c      	cmp	r4, r3
 800ea1c:	d101      	bne.n	800ea22 <__swsetup_r+0x46>
 800ea1e:	68ac      	ldr	r4, [r5, #8]
 800ea20:	e7eb      	b.n	800e9fa <__swsetup_r+0x1e>
 800ea22:	4b24      	ldr	r3, [pc, #144]	; (800eab4 <__swsetup_r+0xd8>)
 800ea24:	429c      	cmp	r4, r3
 800ea26:	bf08      	it	eq
 800ea28:	68ec      	ldreq	r4, [r5, #12]
 800ea2a:	e7e6      	b.n	800e9fa <__swsetup_r+0x1e>
 800ea2c:	0758      	lsls	r0, r3, #29
 800ea2e:	d512      	bpl.n	800ea56 <__swsetup_r+0x7a>
 800ea30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea32:	b141      	cbz	r1, 800ea46 <__swsetup_r+0x6a>
 800ea34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea38:	4299      	cmp	r1, r3
 800ea3a:	d002      	beq.n	800ea42 <__swsetup_r+0x66>
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	f7ff fb27 	bl	800e090 <_free_r>
 800ea42:	2300      	movs	r3, #0
 800ea44:	6363      	str	r3, [r4, #52]	; 0x34
 800ea46:	89a3      	ldrh	r3, [r4, #12]
 800ea48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ea4c:	81a3      	strh	r3, [r4, #12]
 800ea4e:	2300      	movs	r3, #0
 800ea50:	6063      	str	r3, [r4, #4]
 800ea52:	6923      	ldr	r3, [r4, #16]
 800ea54:	6023      	str	r3, [r4, #0]
 800ea56:	89a3      	ldrh	r3, [r4, #12]
 800ea58:	f043 0308 	orr.w	r3, r3, #8
 800ea5c:	81a3      	strh	r3, [r4, #12]
 800ea5e:	6923      	ldr	r3, [r4, #16]
 800ea60:	b94b      	cbnz	r3, 800ea76 <__swsetup_r+0x9a>
 800ea62:	89a3      	ldrh	r3, [r4, #12]
 800ea64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea6c:	d003      	beq.n	800ea76 <__swsetup_r+0x9a>
 800ea6e:	4621      	mov	r1, r4
 800ea70:	4630      	mov	r0, r6
 800ea72:	f000 fa09 	bl	800ee88 <__smakebuf_r>
 800ea76:	89a0      	ldrh	r0, [r4, #12]
 800ea78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea7c:	f010 0301 	ands.w	r3, r0, #1
 800ea80:	d00a      	beq.n	800ea98 <__swsetup_r+0xbc>
 800ea82:	2300      	movs	r3, #0
 800ea84:	60a3      	str	r3, [r4, #8]
 800ea86:	6963      	ldr	r3, [r4, #20]
 800ea88:	425b      	negs	r3, r3
 800ea8a:	61a3      	str	r3, [r4, #24]
 800ea8c:	6923      	ldr	r3, [r4, #16]
 800ea8e:	b943      	cbnz	r3, 800eaa2 <__swsetup_r+0xc6>
 800ea90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ea94:	d1ba      	bne.n	800ea0c <__swsetup_r+0x30>
 800ea96:	bd70      	pop	{r4, r5, r6, pc}
 800ea98:	0781      	lsls	r1, r0, #30
 800ea9a:	bf58      	it	pl
 800ea9c:	6963      	ldrpl	r3, [r4, #20]
 800ea9e:	60a3      	str	r3, [r4, #8]
 800eaa0:	e7f4      	b.n	800ea8c <__swsetup_r+0xb0>
 800eaa2:	2000      	movs	r0, #0
 800eaa4:	e7f7      	b.n	800ea96 <__swsetup_r+0xba>
 800eaa6:	bf00      	nop
 800eaa8:	20000010 	.word	0x20000010
 800eaac:	0800f65c 	.word	0x0800f65c
 800eab0:	0800f67c 	.word	0x0800f67c
 800eab4:	0800f63c 	.word	0x0800f63c

0800eab8 <abort>:
 800eab8:	b508      	push	{r3, lr}
 800eaba:	2006      	movs	r0, #6
 800eabc:	f000 fa54 	bl	800ef68 <raise>
 800eac0:	2001      	movs	r0, #1
 800eac2:	f7f3 fb51 	bl	8002168 <_exit>
	...

0800eac8 <__sflush_r>:
 800eac8:	898a      	ldrh	r2, [r1, #12]
 800eaca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eace:	4605      	mov	r5, r0
 800ead0:	0710      	lsls	r0, r2, #28
 800ead2:	460c      	mov	r4, r1
 800ead4:	d458      	bmi.n	800eb88 <__sflush_r+0xc0>
 800ead6:	684b      	ldr	r3, [r1, #4]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	dc05      	bgt.n	800eae8 <__sflush_r+0x20>
 800eadc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eade:	2b00      	cmp	r3, #0
 800eae0:	dc02      	bgt.n	800eae8 <__sflush_r+0x20>
 800eae2:	2000      	movs	r0, #0
 800eae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eaea:	2e00      	cmp	r6, #0
 800eaec:	d0f9      	beq.n	800eae2 <__sflush_r+0x1a>
 800eaee:	2300      	movs	r3, #0
 800eaf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eaf4:	682f      	ldr	r7, [r5, #0]
 800eaf6:	602b      	str	r3, [r5, #0]
 800eaf8:	d032      	beq.n	800eb60 <__sflush_r+0x98>
 800eafa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eafc:	89a3      	ldrh	r3, [r4, #12]
 800eafe:	075a      	lsls	r2, r3, #29
 800eb00:	d505      	bpl.n	800eb0e <__sflush_r+0x46>
 800eb02:	6863      	ldr	r3, [r4, #4]
 800eb04:	1ac0      	subs	r0, r0, r3
 800eb06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb08:	b10b      	cbz	r3, 800eb0e <__sflush_r+0x46>
 800eb0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb0c:	1ac0      	subs	r0, r0, r3
 800eb0e:	2300      	movs	r3, #0
 800eb10:	4602      	mov	r2, r0
 800eb12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb14:	6a21      	ldr	r1, [r4, #32]
 800eb16:	4628      	mov	r0, r5
 800eb18:	47b0      	blx	r6
 800eb1a:	1c43      	adds	r3, r0, #1
 800eb1c:	89a3      	ldrh	r3, [r4, #12]
 800eb1e:	d106      	bne.n	800eb2e <__sflush_r+0x66>
 800eb20:	6829      	ldr	r1, [r5, #0]
 800eb22:	291d      	cmp	r1, #29
 800eb24:	d82c      	bhi.n	800eb80 <__sflush_r+0xb8>
 800eb26:	4a2a      	ldr	r2, [pc, #168]	; (800ebd0 <__sflush_r+0x108>)
 800eb28:	40ca      	lsrs	r2, r1
 800eb2a:	07d6      	lsls	r6, r2, #31
 800eb2c:	d528      	bpl.n	800eb80 <__sflush_r+0xb8>
 800eb2e:	2200      	movs	r2, #0
 800eb30:	6062      	str	r2, [r4, #4]
 800eb32:	04d9      	lsls	r1, r3, #19
 800eb34:	6922      	ldr	r2, [r4, #16]
 800eb36:	6022      	str	r2, [r4, #0]
 800eb38:	d504      	bpl.n	800eb44 <__sflush_r+0x7c>
 800eb3a:	1c42      	adds	r2, r0, #1
 800eb3c:	d101      	bne.n	800eb42 <__sflush_r+0x7a>
 800eb3e:	682b      	ldr	r3, [r5, #0]
 800eb40:	b903      	cbnz	r3, 800eb44 <__sflush_r+0x7c>
 800eb42:	6560      	str	r0, [r4, #84]	; 0x54
 800eb44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb46:	602f      	str	r7, [r5, #0]
 800eb48:	2900      	cmp	r1, #0
 800eb4a:	d0ca      	beq.n	800eae2 <__sflush_r+0x1a>
 800eb4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb50:	4299      	cmp	r1, r3
 800eb52:	d002      	beq.n	800eb5a <__sflush_r+0x92>
 800eb54:	4628      	mov	r0, r5
 800eb56:	f7ff fa9b 	bl	800e090 <_free_r>
 800eb5a:	2000      	movs	r0, #0
 800eb5c:	6360      	str	r0, [r4, #52]	; 0x34
 800eb5e:	e7c1      	b.n	800eae4 <__sflush_r+0x1c>
 800eb60:	6a21      	ldr	r1, [r4, #32]
 800eb62:	2301      	movs	r3, #1
 800eb64:	4628      	mov	r0, r5
 800eb66:	47b0      	blx	r6
 800eb68:	1c41      	adds	r1, r0, #1
 800eb6a:	d1c7      	bne.n	800eafc <__sflush_r+0x34>
 800eb6c:	682b      	ldr	r3, [r5, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d0c4      	beq.n	800eafc <__sflush_r+0x34>
 800eb72:	2b1d      	cmp	r3, #29
 800eb74:	d001      	beq.n	800eb7a <__sflush_r+0xb2>
 800eb76:	2b16      	cmp	r3, #22
 800eb78:	d101      	bne.n	800eb7e <__sflush_r+0xb6>
 800eb7a:	602f      	str	r7, [r5, #0]
 800eb7c:	e7b1      	b.n	800eae2 <__sflush_r+0x1a>
 800eb7e:	89a3      	ldrh	r3, [r4, #12]
 800eb80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb84:	81a3      	strh	r3, [r4, #12]
 800eb86:	e7ad      	b.n	800eae4 <__sflush_r+0x1c>
 800eb88:	690f      	ldr	r7, [r1, #16]
 800eb8a:	2f00      	cmp	r7, #0
 800eb8c:	d0a9      	beq.n	800eae2 <__sflush_r+0x1a>
 800eb8e:	0793      	lsls	r3, r2, #30
 800eb90:	680e      	ldr	r6, [r1, #0]
 800eb92:	bf08      	it	eq
 800eb94:	694b      	ldreq	r3, [r1, #20]
 800eb96:	600f      	str	r7, [r1, #0]
 800eb98:	bf18      	it	ne
 800eb9a:	2300      	movne	r3, #0
 800eb9c:	eba6 0807 	sub.w	r8, r6, r7
 800eba0:	608b      	str	r3, [r1, #8]
 800eba2:	f1b8 0f00 	cmp.w	r8, #0
 800eba6:	dd9c      	ble.n	800eae2 <__sflush_r+0x1a>
 800eba8:	6a21      	ldr	r1, [r4, #32]
 800ebaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebac:	4643      	mov	r3, r8
 800ebae:	463a      	mov	r2, r7
 800ebb0:	4628      	mov	r0, r5
 800ebb2:	47b0      	blx	r6
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	dc06      	bgt.n	800ebc6 <__sflush_r+0xfe>
 800ebb8:	89a3      	ldrh	r3, [r4, #12]
 800ebba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebbe:	81a3      	strh	r3, [r4, #12]
 800ebc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc4:	e78e      	b.n	800eae4 <__sflush_r+0x1c>
 800ebc6:	4407      	add	r7, r0
 800ebc8:	eba8 0800 	sub.w	r8, r8, r0
 800ebcc:	e7e9      	b.n	800eba2 <__sflush_r+0xda>
 800ebce:	bf00      	nop
 800ebd0:	20400001 	.word	0x20400001

0800ebd4 <_fflush_r>:
 800ebd4:	b538      	push	{r3, r4, r5, lr}
 800ebd6:	690b      	ldr	r3, [r1, #16]
 800ebd8:	4605      	mov	r5, r0
 800ebda:	460c      	mov	r4, r1
 800ebdc:	b913      	cbnz	r3, 800ebe4 <_fflush_r+0x10>
 800ebde:	2500      	movs	r5, #0
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	bd38      	pop	{r3, r4, r5, pc}
 800ebe4:	b118      	cbz	r0, 800ebee <_fflush_r+0x1a>
 800ebe6:	6983      	ldr	r3, [r0, #24]
 800ebe8:	b90b      	cbnz	r3, 800ebee <_fflush_r+0x1a>
 800ebea:	f000 f887 	bl	800ecfc <__sinit>
 800ebee:	4b14      	ldr	r3, [pc, #80]	; (800ec40 <_fflush_r+0x6c>)
 800ebf0:	429c      	cmp	r4, r3
 800ebf2:	d11b      	bne.n	800ec2c <_fflush_r+0x58>
 800ebf4:	686c      	ldr	r4, [r5, #4]
 800ebf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d0ef      	beq.n	800ebde <_fflush_r+0xa>
 800ebfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec00:	07d0      	lsls	r0, r2, #31
 800ec02:	d404      	bmi.n	800ec0e <_fflush_r+0x3a>
 800ec04:	0599      	lsls	r1, r3, #22
 800ec06:	d402      	bmi.n	800ec0e <_fflush_r+0x3a>
 800ec08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec0a:	f000 f915 	bl	800ee38 <__retarget_lock_acquire_recursive>
 800ec0e:	4628      	mov	r0, r5
 800ec10:	4621      	mov	r1, r4
 800ec12:	f7ff ff59 	bl	800eac8 <__sflush_r>
 800ec16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec18:	07da      	lsls	r2, r3, #31
 800ec1a:	4605      	mov	r5, r0
 800ec1c:	d4e0      	bmi.n	800ebe0 <_fflush_r+0xc>
 800ec1e:	89a3      	ldrh	r3, [r4, #12]
 800ec20:	059b      	lsls	r3, r3, #22
 800ec22:	d4dd      	bmi.n	800ebe0 <_fflush_r+0xc>
 800ec24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec26:	f000 f908 	bl	800ee3a <__retarget_lock_release_recursive>
 800ec2a:	e7d9      	b.n	800ebe0 <_fflush_r+0xc>
 800ec2c:	4b05      	ldr	r3, [pc, #20]	; (800ec44 <_fflush_r+0x70>)
 800ec2e:	429c      	cmp	r4, r3
 800ec30:	d101      	bne.n	800ec36 <_fflush_r+0x62>
 800ec32:	68ac      	ldr	r4, [r5, #8]
 800ec34:	e7df      	b.n	800ebf6 <_fflush_r+0x22>
 800ec36:	4b04      	ldr	r3, [pc, #16]	; (800ec48 <_fflush_r+0x74>)
 800ec38:	429c      	cmp	r4, r3
 800ec3a:	bf08      	it	eq
 800ec3c:	68ec      	ldreq	r4, [r5, #12]
 800ec3e:	e7da      	b.n	800ebf6 <_fflush_r+0x22>
 800ec40:	0800f65c 	.word	0x0800f65c
 800ec44:	0800f67c 	.word	0x0800f67c
 800ec48:	0800f63c 	.word	0x0800f63c

0800ec4c <std>:
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	b510      	push	{r4, lr}
 800ec50:	4604      	mov	r4, r0
 800ec52:	e9c0 3300 	strd	r3, r3, [r0]
 800ec56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec5a:	6083      	str	r3, [r0, #8]
 800ec5c:	8181      	strh	r1, [r0, #12]
 800ec5e:	6643      	str	r3, [r0, #100]	; 0x64
 800ec60:	81c2      	strh	r2, [r0, #14]
 800ec62:	6183      	str	r3, [r0, #24]
 800ec64:	4619      	mov	r1, r3
 800ec66:	2208      	movs	r2, #8
 800ec68:	305c      	adds	r0, #92	; 0x5c
 800ec6a:	f7fb fee3 	bl	800aa34 <memset>
 800ec6e:	4b05      	ldr	r3, [pc, #20]	; (800ec84 <std+0x38>)
 800ec70:	6263      	str	r3, [r4, #36]	; 0x24
 800ec72:	4b05      	ldr	r3, [pc, #20]	; (800ec88 <std+0x3c>)
 800ec74:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec76:	4b05      	ldr	r3, [pc, #20]	; (800ec8c <std+0x40>)
 800ec78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec7a:	4b05      	ldr	r3, [pc, #20]	; (800ec90 <std+0x44>)
 800ec7c:	6224      	str	r4, [r4, #32]
 800ec7e:	6323      	str	r3, [r4, #48]	; 0x30
 800ec80:	bd10      	pop	{r4, pc}
 800ec82:	bf00      	nop
 800ec84:	0800efa1 	.word	0x0800efa1
 800ec88:	0800efc3 	.word	0x0800efc3
 800ec8c:	0800effb 	.word	0x0800effb
 800ec90:	0800f01f 	.word	0x0800f01f

0800ec94 <_cleanup_r>:
 800ec94:	4901      	ldr	r1, [pc, #4]	; (800ec9c <_cleanup_r+0x8>)
 800ec96:	f000 b8af 	b.w	800edf8 <_fwalk_reent>
 800ec9a:	bf00      	nop
 800ec9c:	0800ebd5 	.word	0x0800ebd5

0800eca0 <__sfmoreglue>:
 800eca0:	b570      	push	{r4, r5, r6, lr}
 800eca2:	2268      	movs	r2, #104	; 0x68
 800eca4:	1e4d      	subs	r5, r1, #1
 800eca6:	4355      	muls	r5, r2
 800eca8:	460e      	mov	r6, r1
 800ecaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ecae:	f7ff fa5b 	bl	800e168 <_malloc_r>
 800ecb2:	4604      	mov	r4, r0
 800ecb4:	b140      	cbz	r0, 800ecc8 <__sfmoreglue+0x28>
 800ecb6:	2100      	movs	r1, #0
 800ecb8:	e9c0 1600 	strd	r1, r6, [r0]
 800ecbc:	300c      	adds	r0, #12
 800ecbe:	60a0      	str	r0, [r4, #8]
 800ecc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ecc4:	f7fb feb6 	bl	800aa34 <memset>
 800ecc8:	4620      	mov	r0, r4
 800ecca:	bd70      	pop	{r4, r5, r6, pc}

0800eccc <__sfp_lock_acquire>:
 800eccc:	4801      	ldr	r0, [pc, #4]	; (800ecd4 <__sfp_lock_acquire+0x8>)
 800ecce:	f000 b8b3 	b.w	800ee38 <__retarget_lock_acquire_recursive>
 800ecd2:	bf00      	nop
 800ecd4:	20004e69 	.word	0x20004e69

0800ecd8 <__sfp_lock_release>:
 800ecd8:	4801      	ldr	r0, [pc, #4]	; (800ece0 <__sfp_lock_release+0x8>)
 800ecda:	f000 b8ae 	b.w	800ee3a <__retarget_lock_release_recursive>
 800ecde:	bf00      	nop
 800ece0:	20004e69 	.word	0x20004e69

0800ece4 <__sinit_lock_acquire>:
 800ece4:	4801      	ldr	r0, [pc, #4]	; (800ecec <__sinit_lock_acquire+0x8>)
 800ece6:	f000 b8a7 	b.w	800ee38 <__retarget_lock_acquire_recursive>
 800ecea:	bf00      	nop
 800ecec:	20004e6a 	.word	0x20004e6a

0800ecf0 <__sinit_lock_release>:
 800ecf0:	4801      	ldr	r0, [pc, #4]	; (800ecf8 <__sinit_lock_release+0x8>)
 800ecf2:	f000 b8a2 	b.w	800ee3a <__retarget_lock_release_recursive>
 800ecf6:	bf00      	nop
 800ecf8:	20004e6a 	.word	0x20004e6a

0800ecfc <__sinit>:
 800ecfc:	b510      	push	{r4, lr}
 800ecfe:	4604      	mov	r4, r0
 800ed00:	f7ff fff0 	bl	800ece4 <__sinit_lock_acquire>
 800ed04:	69a3      	ldr	r3, [r4, #24]
 800ed06:	b11b      	cbz	r3, 800ed10 <__sinit+0x14>
 800ed08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed0c:	f7ff bff0 	b.w	800ecf0 <__sinit_lock_release>
 800ed10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ed14:	6523      	str	r3, [r4, #80]	; 0x50
 800ed16:	4b13      	ldr	r3, [pc, #76]	; (800ed64 <__sinit+0x68>)
 800ed18:	4a13      	ldr	r2, [pc, #76]	; (800ed68 <__sinit+0x6c>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ed1e:	42a3      	cmp	r3, r4
 800ed20:	bf04      	itt	eq
 800ed22:	2301      	moveq	r3, #1
 800ed24:	61a3      	streq	r3, [r4, #24]
 800ed26:	4620      	mov	r0, r4
 800ed28:	f000 f820 	bl	800ed6c <__sfp>
 800ed2c:	6060      	str	r0, [r4, #4]
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f000 f81c 	bl	800ed6c <__sfp>
 800ed34:	60a0      	str	r0, [r4, #8]
 800ed36:	4620      	mov	r0, r4
 800ed38:	f000 f818 	bl	800ed6c <__sfp>
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	60e0      	str	r0, [r4, #12]
 800ed40:	2104      	movs	r1, #4
 800ed42:	6860      	ldr	r0, [r4, #4]
 800ed44:	f7ff ff82 	bl	800ec4c <std>
 800ed48:	68a0      	ldr	r0, [r4, #8]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	2109      	movs	r1, #9
 800ed4e:	f7ff ff7d 	bl	800ec4c <std>
 800ed52:	68e0      	ldr	r0, [r4, #12]
 800ed54:	2202      	movs	r2, #2
 800ed56:	2112      	movs	r1, #18
 800ed58:	f7ff ff78 	bl	800ec4c <std>
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	61a3      	str	r3, [r4, #24]
 800ed60:	e7d2      	b.n	800ed08 <__sinit+0xc>
 800ed62:	bf00      	nop
 800ed64:	0800f1f8 	.word	0x0800f1f8
 800ed68:	0800ec95 	.word	0x0800ec95

0800ed6c <__sfp>:
 800ed6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed6e:	4607      	mov	r7, r0
 800ed70:	f7ff ffac 	bl	800eccc <__sfp_lock_acquire>
 800ed74:	4b1e      	ldr	r3, [pc, #120]	; (800edf0 <__sfp+0x84>)
 800ed76:	681e      	ldr	r6, [r3, #0]
 800ed78:	69b3      	ldr	r3, [r6, #24]
 800ed7a:	b913      	cbnz	r3, 800ed82 <__sfp+0x16>
 800ed7c:	4630      	mov	r0, r6
 800ed7e:	f7ff ffbd 	bl	800ecfc <__sinit>
 800ed82:	3648      	adds	r6, #72	; 0x48
 800ed84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ed88:	3b01      	subs	r3, #1
 800ed8a:	d503      	bpl.n	800ed94 <__sfp+0x28>
 800ed8c:	6833      	ldr	r3, [r6, #0]
 800ed8e:	b30b      	cbz	r3, 800edd4 <__sfp+0x68>
 800ed90:	6836      	ldr	r6, [r6, #0]
 800ed92:	e7f7      	b.n	800ed84 <__sfp+0x18>
 800ed94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ed98:	b9d5      	cbnz	r5, 800edd0 <__sfp+0x64>
 800ed9a:	4b16      	ldr	r3, [pc, #88]	; (800edf4 <__sfp+0x88>)
 800ed9c:	60e3      	str	r3, [r4, #12]
 800ed9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eda2:	6665      	str	r5, [r4, #100]	; 0x64
 800eda4:	f000 f847 	bl	800ee36 <__retarget_lock_init_recursive>
 800eda8:	f7ff ff96 	bl	800ecd8 <__sfp_lock_release>
 800edac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800edb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800edb4:	6025      	str	r5, [r4, #0]
 800edb6:	61a5      	str	r5, [r4, #24]
 800edb8:	2208      	movs	r2, #8
 800edba:	4629      	mov	r1, r5
 800edbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800edc0:	f7fb fe38 	bl	800aa34 <memset>
 800edc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800edc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800edcc:	4620      	mov	r0, r4
 800edce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edd0:	3468      	adds	r4, #104	; 0x68
 800edd2:	e7d9      	b.n	800ed88 <__sfp+0x1c>
 800edd4:	2104      	movs	r1, #4
 800edd6:	4638      	mov	r0, r7
 800edd8:	f7ff ff62 	bl	800eca0 <__sfmoreglue>
 800eddc:	4604      	mov	r4, r0
 800edde:	6030      	str	r0, [r6, #0]
 800ede0:	2800      	cmp	r0, #0
 800ede2:	d1d5      	bne.n	800ed90 <__sfp+0x24>
 800ede4:	f7ff ff78 	bl	800ecd8 <__sfp_lock_release>
 800ede8:	230c      	movs	r3, #12
 800edea:	603b      	str	r3, [r7, #0]
 800edec:	e7ee      	b.n	800edcc <__sfp+0x60>
 800edee:	bf00      	nop
 800edf0:	0800f1f8 	.word	0x0800f1f8
 800edf4:	ffff0001 	.word	0xffff0001

0800edf8 <_fwalk_reent>:
 800edf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edfc:	4606      	mov	r6, r0
 800edfe:	4688      	mov	r8, r1
 800ee00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ee04:	2700      	movs	r7, #0
 800ee06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee0a:	f1b9 0901 	subs.w	r9, r9, #1
 800ee0e:	d505      	bpl.n	800ee1c <_fwalk_reent+0x24>
 800ee10:	6824      	ldr	r4, [r4, #0]
 800ee12:	2c00      	cmp	r4, #0
 800ee14:	d1f7      	bne.n	800ee06 <_fwalk_reent+0xe>
 800ee16:	4638      	mov	r0, r7
 800ee18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee1c:	89ab      	ldrh	r3, [r5, #12]
 800ee1e:	2b01      	cmp	r3, #1
 800ee20:	d907      	bls.n	800ee32 <_fwalk_reent+0x3a>
 800ee22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee26:	3301      	adds	r3, #1
 800ee28:	d003      	beq.n	800ee32 <_fwalk_reent+0x3a>
 800ee2a:	4629      	mov	r1, r5
 800ee2c:	4630      	mov	r0, r6
 800ee2e:	47c0      	blx	r8
 800ee30:	4307      	orrs	r7, r0
 800ee32:	3568      	adds	r5, #104	; 0x68
 800ee34:	e7e9      	b.n	800ee0a <_fwalk_reent+0x12>

0800ee36 <__retarget_lock_init_recursive>:
 800ee36:	4770      	bx	lr

0800ee38 <__retarget_lock_acquire_recursive>:
 800ee38:	4770      	bx	lr

0800ee3a <__retarget_lock_release_recursive>:
 800ee3a:	4770      	bx	lr

0800ee3c <__swhatbuf_r>:
 800ee3c:	b570      	push	{r4, r5, r6, lr}
 800ee3e:	460e      	mov	r6, r1
 800ee40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee44:	2900      	cmp	r1, #0
 800ee46:	b096      	sub	sp, #88	; 0x58
 800ee48:	4614      	mov	r4, r2
 800ee4a:	461d      	mov	r5, r3
 800ee4c:	da08      	bge.n	800ee60 <__swhatbuf_r+0x24>
 800ee4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ee52:	2200      	movs	r2, #0
 800ee54:	602a      	str	r2, [r5, #0]
 800ee56:	061a      	lsls	r2, r3, #24
 800ee58:	d410      	bmi.n	800ee7c <__swhatbuf_r+0x40>
 800ee5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee5e:	e00e      	b.n	800ee7e <__swhatbuf_r+0x42>
 800ee60:	466a      	mov	r2, sp
 800ee62:	f000 f903 	bl	800f06c <_fstat_r>
 800ee66:	2800      	cmp	r0, #0
 800ee68:	dbf1      	blt.n	800ee4e <__swhatbuf_r+0x12>
 800ee6a:	9a01      	ldr	r2, [sp, #4]
 800ee6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ee70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ee74:	425a      	negs	r2, r3
 800ee76:	415a      	adcs	r2, r3
 800ee78:	602a      	str	r2, [r5, #0]
 800ee7a:	e7ee      	b.n	800ee5a <__swhatbuf_r+0x1e>
 800ee7c:	2340      	movs	r3, #64	; 0x40
 800ee7e:	2000      	movs	r0, #0
 800ee80:	6023      	str	r3, [r4, #0]
 800ee82:	b016      	add	sp, #88	; 0x58
 800ee84:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ee88 <__smakebuf_r>:
 800ee88:	898b      	ldrh	r3, [r1, #12]
 800ee8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ee8c:	079d      	lsls	r5, r3, #30
 800ee8e:	4606      	mov	r6, r0
 800ee90:	460c      	mov	r4, r1
 800ee92:	d507      	bpl.n	800eea4 <__smakebuf_r+0x1c>
 800ee94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ee98:	6023      	str	r3, [r4, #0]
 800ee9a:	6123      	str	r3, [r4, #16]
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	6163      	str	r3, [r4, #20]
 800eea0:	b002      	add	sp, #8
 800eea2:	bd70      	pop	{r4, r5, r6, pc}
 800eea4:	ab01      	add	r3, sp, #4
 800eea6:	466a      	mov	r2, sp
 800eea8:	f7ff ffc8 	bl	800ee3c <__swhatbuf_r>
 800eeac:	9900      	ldr	r1, [sp, #0]
 800eeae:	4605      	mov	r5, r0
 800eeb0:	4630      	mov	r0, r6
 800eeb2:	f7ff f959 	bl	800e168 <_malloc_r>
 800eeb6:	b948      	cbnz	r0, 800eecc <__smakebuf_r+0x44>
 800eeb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eebc:	059a      	lsls	r2, r3, #22
 800eebe:	d4ef      	bmi.n	800eea0 <__smakebuf_r+0x18>
 800eec0:	f023 0303 	bic.w	r3, r3, #3
 800eec4:	f043 0302 	orr.w	r3, r3, #2
 800eec8:	81a3      	strh	r3, [r4, #12]
 800eeca:	e7e3      	b.n	800ee94 <__smakebuf_r+0xc>
 800eecc:	4b0d      	ldr	r3, [pc, #52]	; (800ef04 <__smakebuf_r+0x7c>)
 800eece:	62b3      	str	r3, [r6, #40]	; 0x28
 800eed0:	89a3      	ldrh	r3, [r4, #12]
 800eed2:	6020      	str	r0, [r4, #0]
 800eed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eed8:	81a3      	strh	r3, [r4, #12]
 800eeda:	9b00      	ldr	r3, [sp, #0]
 800eedc:	6163      	str	r3, [r4, #20]
 800eede:	9b01      	ldr	r3, [sp, #4]
 800eee0:	6120      	str	r0, [r4, #16]
 800eee2:	b15b      	cbz	r3, 800eefc <__smakebuf_r+0x74>
 800eee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eee8:	4630      	mov	r0, r6
 800eeea:	f000 f8d1 	bl	800f090 <_isatty_r>
 800eeee:	b128      	cbz	r0, 800eefc <__smakebuf_r+0x74>
 800eef0:	89a3      	ldrh	r3, [r4, #12]
 800eef2:	f023 0303 	bic.w	r3, r3, #3
 800eef6:	f043 0301 	orr.w	r3, r3, #1
 800eefa:	81a3      	strh	r3, [r4, #12]
 800eefc:	89a0      	ldrh	r0, [r4, #12]
 800eefe:	4305      	orrs	r5, r0
 800ef00:	81a5      	strh	r5, [r4, #12]
 800ef02:	e7cd      	b.n	800eea0 <__smakebuf_r+0x18>
 800ef04:	0800ec95 	.word	0x0800ec95

0800ef08 <_malloc_usable_size_r>:
 800ef08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef0c:	1f18      	subs	r0, r3, #4
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	bfbc      	itt	lt
 800ef12:	580b      	ldrlt	r3, [r1, r0]
 800ef14:	18c0      	addlt	r0, r0, r3
 800ef16:	4770      	bx	lr

0800ef18 <_raise_r>:
 800ef18:	291f      	cmp	r1, #31
 800ef1a:	b538      	push	{r3, r4, r5, lr}
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	460d      	mov	r5, r1
 800ef20:	d904      	bls.n	800ef2c <_raise_r+0x14>
 800ef22:	2316      	movs	r3, #22
 800ef24:	6003      	str	r3, [r0, #0]
 800ef26:	f04f 30ff 	mov.w	r0, #4294967295
 800ef2a:	bd38      	pop	{r3, r4, r5, pc}
 800ef2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef2e:	b112      	cbz	r2, 800ef36 <_raise_r+0x1e>
 800ef30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef34:	b94b      	cbnz	r3, 800ef4a <_raise_r+0x32>
 800ef36:	4620      	mov	r0, r4
 800ef38:	f000 f830 	bl	800ef9c <_getpid_r>
 800ef3c:	462a      	mov	r2, r5
 800ef3e:	4601      	mov	r1, r0
 800ef40:	4620      	mov	r0, r4
 800ef42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef46:	f000 b817 	b.w	800ef78 <_kill_r>
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d00a      	beq.n	800ef64 <_raise_r+0x4c>
 800ef4e:	1c59      	adds	r1, r3, #1
 800ef50:	d103      	bne.n	800ef5a <_raise_r+0x42>
 800ef52:	2316      	movs	r3, #22
 800ef54:	6003      	str	r3, [r0, #0]
 800ef56:	2001      	movs	r0, #1
 800ef58:	e7e7      	b.n	800ef2a <_raise_r+0x12>
 800ef5a:	2400      	movs	r4, #0
 800ef5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef60:	4628      	mov	r0, r5
 800ef62:	4798      	blx	r3
 800ef64:	2000      	movs	r0, #0
 800ef66:	e7e0      	b.n	800ef2a <_raise_r+0x12>

0800ef68 <raise>:
 800ef68:	4b02      	ldr	r3, [pc, #8]	; (800ef74 <raise+0xc>)
 800ef6a:	4601      	mov	r1, r0
 800ef6c:	6818      	ldr	r0, [r3, #0]
 800ef6e:	f7ff bfd3 	b.w	800ef18 <_raise_r>
 800ef72:	bf00      	nop
 800ef74:	20000010 	.word	0x20000010

0800ef78 <_kill_r>:
 800ef78:	b538      	push	{r3, r4, r5, lr}
 800ef7a:	4d07      	ldr	r5, [pc, #28]	; (800ef98 <_kill_r+0x20>)
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	4604      	mov	r4, r0
 800ef80:	4608      	mov	r0, r1
 800ef82:	4611      	mov	r1, r2
 800ef84:	602b      	str	r3, [r5, #0]
 800ef86:	f7f3 f8df 	bl	8002148 <_kill>
 800ef8a:	1c43      	adds	r3, r0, #1
 800ef8c:	d102      	bne.n	800ef94 <_kill_r+0x1c>
 800ef8e:	682b      	ldr	r3, [r5, #0]
 800ef90:	b103      	cbz	r3, 800ef94 <_kill_r+0x1c>
 800ef92:	6023      	str	r3, [r4, #0]
 800ef94:	bd38      	pop	{r3, r4, r5, pc}
 800ef96:	bf00      	nop
 800ef98:	20004e64 	.word	0x20004e64

0800ef9c <_getpid_r>:
 800ef9c:	f7f3 b8cc 	b.w	8002138 <_getpid>

0800efa0 <__sread>:
 800efa0:	b510      	push	{r4, lr}
 800efa2:	460c      	mov	r4, r1
 800efa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efa8:	f000 f894 	bl	800f0d4 <_read_r>
 800efac:	2800      	cmp	r0, #0
 800efae:	bfab      	itete	ge
 800efb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800efb2:	89a3      	ldrhlt	r3, [r4, #12]
 800efb4:	181b      	addge	r3, r3, r0
 800efb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800efba:	bfac      	ite	ge
 800efbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800efbe:	81a3      	strhlt	r3, [r4, #12]
 800efc0:	bd10      	pop	{r4, pc}

0800efc2 <__swrite>:
 800efc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc6:	461f      	mov	r7, r3
 800efc8:	898b      	ldrh	r3, [r1, #12]
 800efca:	05db      	lsls	r3, r3, #23
 800efcc:	4605      	mov	r5, r0
 800efce:	460c      	mov	r4, r1
 800efd0:	4616      	mov	r6, r2
 800efd2:	d505      	bpl.n	800efe0 <__swrite+0x1e>
 800efd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efd8:	2302      	movs	r3, #2
 800efda:	2200      	movs	r2, #0
 800efdc:	f000 f868 	bl	800f0b0 <_lseek_r>
 800efe0:	89a3      	ldrh	r3, [r4, #12]
 800efe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800efea:	81a3      	strh	r3, [r4, #12]
 800efec:	4632      	mov	r2, r6
 800efee:	463b      	mov	r3, r7
 800eff0:	4628      	mov	r0, r5
 800eff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eff6:	f000 b817 	b.w	800f028 <_write_r>

0800effa <__sseek>:
 800effa:	b510      	push	{r4, lr}
 800effc:	460c      	mov	r4, r1
 800effe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f002:	f000 f855 	bl	800f0b0 <_lseek_r>
 800f006:	1c43      	adds	r3, r0, #1
 800f008:	89a3      	ldrh	r3, [r4, #12]
 800f00a:	bf15      	itete	ne
 800f00c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f00e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f016:	81a3      	strheq	r3, [r4, #12]
 800f018:	bf18      	it	ne
 800f01a:	81a3      	strhne	r3, [r4, #12]
 800f01c:	bd10      	pop	{r4, pc}

0800f01e <__sclose>:
 800f01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f022:	f000 b813 	b.w	800f04c <_close_r>
	...

0800f028 <_write_r>:
 800f028:	b538      	push	{r3, r4, r5, lr}
 800f02a:	4d07      	ldr	r5, [pc, #28]	; (800f048 <_write_r+0x20>)
 800f02c:	4604      	mov	r4, r0
 800f02e:	4608      	mov	r0, r1
 800f030:	4611      	mov	r1, r2
 800f032:	2200      	movs	r2, #0
 800f034:	602a      	str	r2, [r5, #0]
 800f036:	461a      	mov	r2, r3
 800f038:	f7f3 f8bd 	bl	80021b6 <_write>
 800f03c:	1c43      	adds	r3, r0, #1
 800f03e:	d102      	bne.n	800f046 <_write_r+0x1e>
 800f040:	682b      	ldr	r3, [r5, #0]
 800f042:	b103      	cbz	r3, 800f046 <_write_r+0x1e>
 800f044:	6023      	str	r3, [r4, #0]
 800f046:	bd38      	pop	{r3, r4, r5, pc}
 800f048:	20004e64 	.word	0x20004e64

0800f04c <_close_r>:
 800f04c:	b538      	push	{r3, r4, r5, lr}
 800f04e:	4d06      	ldr	r5, [pc, #24]	; (800f068 <_close_r+0x1c>)
 800f050:	2300      	movs	r3, #0
 800f052:	4604      	mov	r4, r0
 800f054:	4608      	mov	r0, r1
 800f056:	602b      	str	r3, [r5, #0]
 800f058:	f7f3 f8c9 	bl	80021ee <_close>
 800f05c:	1c43      	adds	r3, r0, #1
 800f05e:	d102      	bne.n	800f066 <_close_r+0x1a>
 800f060:	682b      	ldr	r3, [r5, #0]
 800f062:	b103      	cbz	r3, 800f066 <_close_r+0x1a>
 800f064:	6023      	str	r3, [r4, #0]
 800f066:	bd38      	pop	{r3, r4, r5, pc}
 800f068:	20004e64 	.word	0x20004e64

0800f06c <_fstat_r>:
 800f06c:	b538      	push	{r3, r4, r5, lr}
 800f06e:	4d07      	ldr	r5, [pc, #28]	; (800f08c <_fstat_r+0x20>)
 800f070:	2300      	movs	r3, #0
 800f072:	4604      	mov	r4, r0
 800f074:	4608      	mov	r0, r1
 800f076:	4611      	mov	r1, r2
 800f078:	602b      	str	r3, [r5, #0]
 800f07a:	f7f3 f8c4 	bl	8002206 <_fstat>
 800f07e:	1c43      	adds	r3, r0, #1
 800f080:	d102      	bne.n	800f088 <_fstat_r+0x1c>
 800f082:	682b      	ldr	r3, [r5, #0]
 800f084:	b103      	cbz	r3, 800f088 <_fstat_r+0x1c>
 800f086:	6023      	str	r3, [r4, #0]
 800f088:	bd38      	pop	{r3, r4, r5, pc}
 800f08a:	bf00      	nop
 800f08c:	20004e64 	.word	0x20004e64

0800f090 <_isatty_r>:
 800f090:	b538      	push	{r3, r4, r5, lr}
 800f092:	4d06      	ldr	r5, [pc, #24]	; (800f0ac <_isatty_r+0x1c>)
 800f094:	2300      	movs	r3, #0
 800f096:	4604      	mov	r4, r0
 800f098:	4608      	mov	r0, r1
 800f09a:	602b      	str	r3, [r5, #0]
 800f09c:	f7f3 f8c3 	bl	8002226 <_isatty>
 800f0a0:	1c43      	adds	r3, r0, #1
 800f0a2:	d102      	bne.n	800f0aa <_isatty_r+0x1a>
 800f0a4:	682b      	ldr	r3, [r5, #0]
 800f0a6:	b103      	cbz	r3, 800f0aa <_isatty_r+0x1a>
 800f0a8:	6023      	str	r3, [r4, #0]
 800f0aa:	bd38      	pop	{r3, r4, r5, pc}
 800f0ac:	20004e64 	.word	0x20004e64

0800f0b0 <_lseek_r>:
 800f0b0:	b538      	push	{r3, r4, r5, lr}
 800f0b2:	4d07      	ldr	r5, [pc, #28]	; (800f0d0 <_lseek_r+0x20>)
 800f0b4:	4604      	mov	r4, r0
 800f0b6:	4608      	mov	r0, r1
 800f0b8:	4611      	mov	r1, r2
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	602a      	str	r2, [r5, #0]
 800f0be:	461a      	mov	r2, r3
 800f0c0:	f7f3 f8bc 	bl	800223c <_lseek>
 800f0c4:	1c43      	adds	r3, r0, #1
 800f0c6:	d102      	bne.n	800f0ce <_lseek_r+0x1e>
 800f0c8:	682b      	ldr	r3, [r5, #0]
 800f0ca:	b103      	cbz	r3, 800f0ce <_lseek_r+0x1e>
 800f0cc:	6023      	str	r3, [r4, #0]
 800f0ce:	bd38      	pop	{r3, r4, r5, pc}
 800f0d0:	20004e64 	.word	0x20004e64

0800f0d4 <_read_r>:
 800f0d4:	b538      	push	{r3, r4, r5, lr}
 800f0d6:	4d07      	ldr	r5, [pc, #28]	; (800f0f4 <_read_r+0x20>)
 800f0d8:	4604      	mov	r4, r0
 800f0da:	4608      	mov	r0, r1
 800f0dc:	4611      	mov	r1, r2
 800f0de:	2200      	movs	r2, #0
 800f0e0:	602a      	str	r2, [r5, #0]
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	f7f3 f84a 	bl	800217c <_read>
 800f0e8:	1c43      	adds	r3, r0, #1
 800f0ea:	d102      	bne.n	800f0f2 <_read_r+0x1e>
 800f0ec:	682b      	ldr	r3, [r5, #0]
 800f0ee:	b103      	cbz	r3, 800f0f2 <_read_r+0x1e>
 800f0f0:	6023      	str	r3, [r4, #0]
 800f0f2:	bd38      	pop	{r3, r4, r5, pc}
 800f0f4:	20004e64 	.word	0x20004e64

0800f0f8 <_init>:
 800f0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0fa:	bf00      	nop
 800f0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0fe:	bc08      	pop	{r3}
 800f100:	469e      	mov	lr, r3
 800f102:	4770      	bx	lr

0800f104 <_fini>:
 800f104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f106:	bf00      	nop
 800f108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f10a:	bc08      	pop	{r3}
 800f10c:	469e      	mov	lr, r3
 800f10e:	4770      	bx	lr
