
YellowSubmarineSTMControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0f0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800f2f0  0800f2f0  0001f2f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f87c  0800f87c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f87c  0800f87c  0001f87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f884  0800f884  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f884  0800f884  0001f884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f88c  0800f88c  0001f88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800f890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c24  200001e8  0800fa78  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e0c  0800fa78  00024e0c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024fd8  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004de0  00000000  00000000  000451ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cd8  00000000  00000000  00049fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af0  00000000  00000000  0004bca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f5e1  00000000  00000000  0004d798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002245d  00000000  00000000  0007cd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d9fb  00000000  00000000  0009f1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001acbd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008df4  00000000  00000000  001acc24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e8 	.word	0x200001e8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f2d8 	.word	0x0800f2d8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ec 	.word	0x200001ec
 800023c:	0800f2d8 	.word	0x0800f2d8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <_ZN8DC_Motor3runEif>:
#include"main.h"



void DC_Motor::run(int direction, float velocity)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	ed87 0a01 	vstr	s0, [r7, #4]
	if(!direction) stop();
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d103      	bne.n	80009f8 <_ZN8DC_Motor3runEif+0x1c>
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f000 f817 	bl	8000a24 <_ZN8DC_Motor4stopEv>
		HAL_GPIO_WritePin(this->EN_GPIO_Port, this->EN_Pin,GPIO_PIN_SET);

		__HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL_1, velocity); // nie da sie przekazac makro do funkcji :<
	}

}
 80009f6:	e011      	b.n	8000a1c <_ZN8DC_Motor3runEif+0x40>
		HAL_GPIO_WritePin(this->EN_GPIO_Port, this->EN_Pin,GPIO_PIN_SET);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	6818      	ldr	r0, [r3, #0]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	889b      	ldrh	r3, [r3, #4]
 8000a00:	2201      	movs	r2, #1
 8000a02:	4619      	mov	r1, r3
 8000a04:	f002 f964 	bl	8002cd0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL_1, velocity); // nie da sie przekazac makro do funkcji :<
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a16:	ee17 2a90 	vmov	r2, s15
 8000a1a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <_ZN8DC_Motor4stopEv>:


void DC_Motor::stop()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(this->EN_GPIO_Port, this->EN_Pin,GPIO_PIN_RESET); // idk czy to dziala
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	889b      	ldrh	r3, [r3, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	4619      	mov	r1, r3
 8000a38:	f002 f94a 	bl	8002cd0 <HAL_GPIO_WritePin>

}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_ZN8DC_Motor4initEP12GPIO_TypeDeftP17TIM_HandleTypeDef>:


void DC_Motor::init(GPIO_TypeDef *EN_GPIO_Port,
	uint16_t EN_Pin,
	TIM_HandleTypeDef *htim)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	4613      	mov	r3, r2
 8000a52:	80fb      	strh	r3, [r7, #6]
	this->htim=htim;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	683a      	ldr	r2, [r7, #0]
 8000a58:	609a      	str	r2, [r3, #8]
	this->EN_GPIO_Port=EN_GPIO_Port;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	68ba      	ldr	r2, [r7, #8]
 8000a5e:	601a      	str	r2, [r3, #0]
	this->EN_Pin=EN_Pin;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	88fa      	ldrh	r2, [r7, #6]
 8000a64:	809a      	strh	r2, [r3, #4]

}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <_ZN5DHT2217pinChangeCallBackEv>:
#include <DHT22_TempHumidity.h>
#include"main.h"

//###############################################################################################################
void  DHT22::pinChangeCallBack()
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
  this->time = HAL_GetTick();
 8000a7a:	f001 fda9 	bl	80025d0 <HAL_GetTick>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	661a      	str	r2, [r3, #96]	; 0x60
  if(this->cnt < sizeof(this->data)-1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000a8a:	2b52      	cmp	r3, #82	; 0x52
 8000a8c:	d81d      	bhi.n	8000aca <_ZN5DHT2217pinChangeCallBackEv+0x58>
  {
	  this->data[this->cnt] = this->tim->Instance->CNT - this->lastCNT;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	f8b1 105e 	ldrh.w	r1, [r1, #94]	; 0x5e
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	440b      	add	r3, r1
 8000aac:	729a      	strb	r2, [r3, #10]
	  this->lastCNT = this->tim->Instance->CNT;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	665a      	str	r2, [r3, #100]	; 0x64
	  this->cnt++;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  }
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_ZN5DHT227delayUsEt>:
//###############################################################################################################
void  DHT22::delayUs(uint16_t delay)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	460b      	mov	r3, r1
 8000adc:	807b      	strh	r3, [r7, #2]
	this->tim->Instance->CNT=0;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
  while(this->tim->Instance->CNT < delay);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000af0:	887b      	ldrh	r3, [r7, #2]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	bf34      	ite	cc
 8000af6:	2301      	movcc	r3, #1
 8000af8:	2300      	movcs	r3, #0
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d000      	beq.n	8000b02 <_ZN5DHT227delayUsEt+0x30>
 8000b00:	e7f2      	b.n	8000ae8 <_ZN5DHT227delayUsEt+0x16>
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <_ZN5DHT226outputEv>:
//###############################################################################################################
void  DHT22::output()
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b088      	sub	sp, #32
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio;
  this->gpio->BSRR = this->pin;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	891a      	ldrh	r2, [r3, #8]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	619a      	str	r2, [r3, #24]
  gpio.Mode = GPIO_MODE_OUTPUT_OD;
 8000b20:	2311      	movs	r3, #17
 8000b22:	613b      	str	r3, [r7, #16]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61bb      	str	r3, [r7, #24]
  gpio.Pin = this->pin;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	891b      	ldrh	r3, [r3, #8]
 8000b2c:	60fb      	str	r3, [r7, #12]
  gpio.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(this->gpio,&gpio);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f107 020c 	add.w	r2, r7, #12
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 ff1b 	bl	8002978 <HAL_GPIO_Init>
}
 8000b42:	bf00      	nop
 8000b44:	3720      	adds	r7, #32
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_ZN5DHT225inputEv>:
//###############################################################################################################
void  DHT22::input()
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b088      	sub	sp, #32
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio;
  gpio.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b52:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b56:	613b      	str	r3, [r7, #16]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
  gpio.Pin = this->pin;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	891b      	ldrh	r3, [r3, #8]
 8000b60:	60fb      	str	r3, [r7, #12]
  gpio.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(this->gpio,&gpio);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f107 020c 	add.w	r2, r7, #12
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f001 ff01 	bl	8002978 <HAL_GPIO_Init>
}
 8000b76:	bf00      	nop
 8000b78:	3720      	adds	r7, #32
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_ZN5DHT226decodeEPh>:
//###############################################################################################################
bool  DHT22::decode(uint8_t *byteArray)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b085      	sub	sp, #20
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	6039      	str	r1, [r7, #0]
  int8_t bit;
      if((this->data[0] < 60) || (this->data[0] > 100) || (this->data[1] < 60) || (this->data[1] > 100))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	7a9b      	ldrb	r3, [r3, #10]
 8000b8c:	2b3b      	cmp	r3, #59	; 0x3b
 8000b8e:	d90b      	bls.n	8000ba8 <_ZN5DHT226decodeEPh+0x2a>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7a9b      	ldrb	r3, [r3, #10]
 8000b94:	2b64      	cmp	r3, #100	; 0x64
 8000b96:	d807      	bhi.n	8000ba8 <_ZN5DHT226decodeEPh+0x2a>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	7adb      	ldrb	r3, [r3, #11]
 8000b9c:	2b3b      	cmp	r3, #59	; 0x3b
 8000b9e:	d903      	bls.n	8000ba8 <_ZN5DHT226decodeEPh+0x2a>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	7adb      	ldrb	r3, [r3, #11]
 8000ba4:	2b64      	cmp	r3, #100	; 0x64
 8000ba6:	d901      	bls.n	8000bac <_ZN5DHT226decodeEPh+0x2e>
        return false;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	e069      	b.n	8000c80 <_ZN5DHT226decodeEPh+0x102>
      bit = 7;
 8000bac:	2307      	movs	r3, #7
 8000bae:	73fb      	strb	r3, [r7, #15]
      for(uint8_t i=0 ; i<80 ; i+=2)
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73bb      	strb	r3, [r7, #14]
 8000bb4:	7bbb      	ldrb	r3, [r7, #14]
 8000bb6:	2b4f      	cmp	r3, #79	; 0x4f
 8000bb8:	d862      	bhi.n	8000c80 <_ZN5DHT226decodeEPh+0x102>
      {
        if((this->data[i+2] >= 35) && (this->data[i+2] <= 70))
 8000bba:	7bbb      	ldrb	r3, [r7, #14]
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	7a9b      	ldrb	r3, [r3, #10]
 8000bc4:	2b22      	cmp	r3, #34	; 0x22
 8000bc6:	d955      	bls.n	8000c74 <_ZN5DHT226decodeEPh+0xf6>
 8000bc8:	7bbb      	ldrb	r3, [r7, #14]
 8000bca:	3302      	adds	r3, #2
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	4413      	add	r3, r2
 8000bd0:	7a9b      	ldrb	r3, [r3, #10]
 8000bd2:	2b46      	cmp	r3, #70	; 0x46
 8000bd4:	d84e      	bhi.n	8000c74 <_ZN5DHT226decodeEPh+0xf6>
        {
          if((this->data[i+3] >= 10) && (this->data[i+3] <= 45))
 8000bd6:	7bbb      	ldrb	r3, [r7, #14]
 8000bd8:	3303      	adds	r3, #3
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	7a9b      	ldrb	r3, [r3, #10]
 8000be0:	2b09      	cmp	r3, #9
 8000be2:	d917      	bls.n	8000c14 <_ZN5DHT226decodeEPh+0x96>
 8000be4:	7bbb      	ldrb	r3, [r7, #14]
 8000be6:	3303      	adds	r3, #3
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	4413      	add	r3, r2
 8000bec:	7a9b      	ldrb	r3, [r3, #10]
 8000bee:	2b2d      	cmp	r3, #45	; 0x2d
 8000bf0:	d810      	bhi.n	8000c14 <_ZN5DHT226decodeEPh+0x96>
            *byteArray &= ~(1<<bit);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b25a      	sxtb	r2, r3
 8000bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	b25b      	sxtb	r3, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	b25b      	sxtb	r3, r3
 8000c08:	4013      	ands	r3, r2
 8000c0a:	b25b      	sxtb	r3, r3
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e01e      	b.n	8000c52 <_ZN5DHT226decodeEPh+0xd4>
          else if((this->data[i+3] >= 55) && (this->data[i+3] <= 95))
 8000c14:	7bbb      	ldrb	r3, [r7, #14]
 8000c16:	3303      	adds	r3, #3
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	7a9b      	ldrb	r3, [r3, #10]
 8000c1e:	2b36      	cmp	r3, #54	; 0x36
 8000c20:	d915      	bls.n	8000c4e <_ZN5DHT226decodeEPh+0xd0>
 8000c22:	7bbb      	ldrb	r3, [r7, #14]
 8000c24:	3303      	adds	r3, #3
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	7a9b      	ldrb	r3, [r3, #10]
 8000c2c:	2b5f      	cmp	r3, #95	; 0x5f
 8000c2e:	d80e      	bhi.n	8000c4e <_ZN5DHT226decodeEPh+0xd0>
            *byteArray |= (1<<bit);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b25a      	sxtb	r2, r3
 8000c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c40:	b25b      	sxtb	r3, r3
 8000c42:	4313      	orrs	r3, r2
 8000c44:	b25b      	sxtb	r3, r3
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	e001      	b.n	8000c52 <_ZN5DHT226decodeEPh+0xd4>
          else
            return false;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e016      	b.n	8000c80 <_ZN5DHT226decodeEPh+0x102>
          bit--;
 8000c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	73fb      	strb	r3, [r7, #15]
          if(bit == -1)
 8000c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c66:	d107      	bne.n	8000c78 <_ZN5DHT226decodeEPh+0xfa>
          {
            bit = 7;
 8000c68:	2307      	movs	r3, #7
 8000c6a:	73fb      	strb	r3, [r7, #15]
            byteArray++;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	603b      	str	r3, [r7, #0]
          if(bit == -1)
 8000c72:	e001      	b.n	8000c78 <_ZN5DHT226decodeEPh+0xfa>
          }
        }
        else
          return false;
 8000c74:	2300      	movs	r3, #0
 8000c76:	e003      	b.n	8000c80 <_ZN5DHT226decodeEPh+0x102>
      for(uint8_t i=0 ; i<80 ; i+=2)
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
 8000c7a:	3302      	adds	r3, #2
 8000c7c:	73bb      	strb	r3, [r7, #14]
 8000c7e:	e799      	b.n	8000bb4 <_ZN5DHT226decodeEPh+0x36>
      }

}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <_ZN5DHT224initEP17TIM_HandleTypeDeftP12GPIO_TypeDeft>:
//###############################################################################################################
bool DHT22::init(TIM_HandleTypeDef *tim,uint16_t  timerBusFrequencyMHz, GPIO_TypeDef *gpio, uint16_t  pin)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	80fb      	strh	r3, [r7, #6]
	this->tim = tim;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	601a      	str	r2, [r3, #0]
	this->gpio = gpio;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
	this->pin = pin;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	8b3a      	ldrh	r2, [r7, #24]
 8000cac:	811a      	strh	r2, [r3, #8]
  output();
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f7ff ff2d 	bl	8000b0e <_ZN5DHT226outputEv>
  this->tim->Init.Prescaler = timerBusFrequencyMHz - 1;
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	1e5a      	subs	r2, r3, #1
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
  this->tim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  this->tim->Init.Period = 0xFFFF;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cce:	60da      	str	r2, [r3, #12]
  this->tim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  HAL_TIM_Base_Init(this->tim);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f004 f8c9 	bl	8004e74 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(this->tim);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f004 f91c 	bl	8004f24 <HAL_TIM_Base_Start>
  while(HAL_GetTick()<2000)
 8000cec:	f001 fc70 	bl	80025d0 <HAL_GetTick>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	bf94      	ite	ls
 8000cfa:	2301      	movls	r3, #1
 8000cfc:	2300      	movhi	r3, #0
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <_ZN5DHT224initEP17TIM_HandleTypeDeftP12GPIO_TypeDeft+0x80>
	   HAL_Delay(5);
 8000d04:	2005      	movs	r0, #5
 8000d06:	f001 fc6f 	bl	80025e8 <HAL_Delay>
  while(HAL_GetTick()<2000)
 8000d0a:	e7ef      	b.n	8000cec <_ZN5DHT224initEP17TIM_HandleTypeDeftP12GPIO_TypeDeft+0x60>
  return true;
 8000d0c:	2301      	movs	r3, #1
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_ZN5DHT224readEv>:
//###############################################################################################################
bool  DHT22::read()
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  uint32_t  startTime;

      output();
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff fef5 	bl	8000b0e <_ZN5DHT226outputEv>
      this->gpio->BSRR = (this->pin)<<16;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	891b      	ldrh	r3, [r3, #8]
 8000d28:	041a      	lsls	r2, r3, #16
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	619a      	str	r2, [r3, #24]
      HAL_Delay(1);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f001 fc59 	bl	80025e8 <HAL_Delay>
      this->gpio->BSRR = this->pin;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	891a      	ldrh	r2, [r3, #8]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	619a      	str	r2, [r3, #24]
      delayUs(5);
 8000d40:	2105      	movs	r1, #5
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff fec5 	bl	8000ad2 <_ZN5DHT227delayUsEt>
      this->gpio->BSRR = (this->pin)<<16;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	891b      	ldrh	r3, [r3, #8]
 8000d4c:	041a      	lsls	r2, r3, #16
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	619a      	str	r2, [r3, #24]
      delayUs(5);
 8000d54:	2105      	movs	r1, #5
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff febb 	bl	8000ad2 <_ZN5DHT227delayUsEt>
      this->cnt = 0;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      this->lastCNT = 0;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	665a      	str	r2, [r3, #100]	; 0x64
      this->tim->Instance->CNT = 0;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2200      	movs	r2, #0
 8000d72:	625a      	str	r2, [r3, #36]	; 0x24
      startTime = HAL_GetTick();
 8000d74:	f001 fc2c 	bl	80025d0 <HAL_GetTick>
 8000d78:	6178      	str	r0, [r7, #20]
      input();
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff fee5 	bl	8000b4a <_ZN5DHT225inputEv>
      while(1)
      {
        if(HAL_GetTick() - this->time > 1)
 8000d80:	f001 fc26 	bl	80025d0 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	bf8c      	ite	hi
 8000d90:	2301      	movhi	r3, #1
 8000d92:	2300      	movls	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0f2      	beq.n	8000d80 <_ZN5DHT224readEv+0x6a>
        {
          uint8_t data[5];
          if(decode(data) == false)
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	4619      	mov	r1, r3
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff feec 	bl	8000b7e <_ZN5DHT226decodeEPh>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	bf0c      	ite	eq
 8000dac:	2301      	moveq	r3, #1
 8000dae:	2300      	movne	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <_ZN5DHT224readEv+0xa4>
            return false;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e033      	b.n	8000e22 <_ZN5DHT224readEv+0x10c>
          if(((data[0] + data[1] + data[2] + data[3]) & 0x00FF) != data[4])
 8000dba:	7b3b      	ldrb	r3, [r7, #12]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	7b7b      	ldrb	r3, [r7, #13]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	7bba      	ldrb	r2, [r7, #14]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	4413      	add	r3, r2
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	7c3a      	ldrb	r2, [r7, #16]
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d001      	beq.n	8000dd6 <_ZN5DHT224readEv+0xc0>
            return false;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e025      	b.n	8000e22 <_ZN5DHT224readEv+0x10c>

          this->temperature = (float)(data[2]*256 + data[3]) / 10.0f;
 8000dd6:	7bbb      	ldrb	r3, [r7, #14]
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	7bfa      	ldrb	r2, [r7, #15]
 8000ddc:	4413      	add	r3, r2
 8000dde:	ee07 3a90 	vmov	s15, r3
 8000de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000de6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000dea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
          this->humidity = (float)(data[0]*256 + data[1]) / 10.0f;
 8000df4:	7b3b      	ldrb	r3, [r7, #12]
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	7b7a      	ldrb	r2, [r7, #13]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	ee07 3a90 	vmov	s15, r3
 8000e00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e04:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000e08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

          this->dataValid = true;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2201      	movs	r2, #1
 8000e16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          output();
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fe77 	bl	8000b0e <_ZN5DHT226outputEv>
          return true;
 8000e20:	2301      	movs	r3, #1
        }
      }

}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_ZN4LSM6C1Ev>:

#define DS33_WHO_ID    0x69

// Constructors ////////////////////////////////////////////////////////////////

LSM6::LSM6(void)
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
{
  _device = device_auto;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2201      	movs	r2, #1
 8000e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  io_timeout = 0;  // 0 = no timeout
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	851a      	strh	r2, [r3, #40]	; 0x28
  did_timeout = false;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_ZN4LSM64initE19__I2C_HandleTypeDefNS_10deviceTypeENS_8sa0StateE>:
{
  return io_timeout;
}

bool LSM6::init(I2C_HandleTypeDef _hi2c,deviceType device, sa0State sa0)
{
 8000e56:	b084      	sub	sp, #16
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	f107 0014 	add.w	r0, r7, #20
 8000e64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->hi2c=_hi2c;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	332c      	adds	r3, #44	; 0x2c
 8000e6c:	f107 0114 	add.w	r1, r7, #20
 8000e70:	224c      	movs	r2, #76	; 0x4c
 8000e72:	4618      	mov	r0, r3
 8000e74:	f009 fec0 	bl	800abf8 <memcpy>
	device = device_DS33;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60

    // make sure device and SA0 were successfully detected; otherwise, indicate failure
    if (device == device_auto || sa0 == sa0_auto)
 8000e7e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d003      	beq.n	8000e8e <_ZN4LSM64initE19__I2C_HandleTypeDefNS_10deviceTypeENS_8sa0StateE+0x38>
 8000e86:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d101      	bne.n	8000e92 <_ZN4LSM64initE19__I2C_HandleTypeDefNS_10deviceTypeENS_8sa0StateE+0x3c>
    {
      return false;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e01e      	b.n	8000ed0 <_ZN4LSM64initE19__I2C_HandleTypeDefNS_10deviceTypeENS_8sa0StateE+0x7a>
    }

  _device = device;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8000e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(device==device_DS33)
 8000e9c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d111      	bne.n	8000ec8 <_ZN4LSM64initE19__I2C_HandleTypeDefNS_10deviceTypeENS_8sa0StateE+0x72>
  {
      address = (sa0 == sa0_high) ? DS33_SA0_HIGH_ADDRESS : DS33_SA0_LOW_ADDRESS;
 8000ea4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d101      	bne.n	8000eb0 <_ZN4LSM64initE19__I2C_HandleTypeDefNS_10deviceTypeENS_8sa0StateE+0x5a>
 8000eac:	226b      	movs	r2, #107	; 0x6b
 8000eae:	e000      	b.n	8000eb2 <_ZN4LSM64initE19__I2C_HandleTypeDefNS_10deviceTypeENS_8sa0StateE+0x5c>
 8000eb0:	226a      	movs	r2, #106	; 0x6a
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      address_shl=address<<1;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  }

  enableDefault();
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 f808 	bl	8000ede <_ZN4LSM613enableDefaultEv>

  return true;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eda:	b004      	add	sp, #16
 8000edc:	4770      	bx	lr

08000ede <_ZN4LSM613enableDefaultEv>:

void LSM6::enableDefault(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  if (_device == device_DS33)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10e      	bne.n	8000f0e <_ZN4LSM613enableDefaultEv+0x30>
  {
    // Accelerometer

    // 0x80 = 0b10000000
    // ODR = 1000 (1.66 kHz (high performance)); FS_XL = 00 (+/-2 g full scale)
    writeReg(CTRL1_XL, 0x80);
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 f80e 	bl	8000f16 <_ZN4LSM68writeRegEhh>
    // Gyro

    // 0x80 = 0b010000000
    // ODR = 1000 (1.66 kHz (high performance)); FS_XL = 00 (245 dps)
    writeReg(CTRL2_G, 0x80);
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	2111      	movs	r1, #17
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 f809 	bl	8000f16 <_ZN4LSM68writeRegEhh>
    // Common

    // 0x04 = 0b00000100
    // IF_INC = 1 (automatically increment register address)
    writeReg(CTRL3_C, 0x04);
 8000f04:	2204      	movs	r2, #4
 8000f06:	2112      	movs	r1, #18
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 f804 	bl	8000f16 <_ZN4LSM68writeRegEhh>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <_ZN4LSM68writeRegEhh>:

void LSM6::writeReg(uint8_t reg, uint8_t value)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b088      	sub	sp, #32
 8000f1a:	af04      	add	r7, sp, #16
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	70fb      	strb	r3, [r7, #3]
 8000f22:	4613      	mov	r3, r2
 8000f24:	70bb      	strb	r3, [r7, #2]
	uint8_t command=value;
 8000f26:	78bb      	ldrb	r3, [r7, #2]
 8000f28:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&this->hi2c,address_shl, reg, 1, &command, sizeof(command), 100);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000f36:	b299      	uxth	r1, r3
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	2364      	movs	r3, #100	; 0x64
 8000f3e:	9302      	str	r3, [sp, #8]
 8000f40:	2301      	movs	r3, #1
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	f107 030f 	add.w	r3, r7, #15
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	f001 ff82 	bl	8002e54 <HAL_I2C_Mem_Write>
\
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <_ZN4LSM67readRegEh>:

uint8_t LSM6::readReg(uint8_t reg)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af04      	add	r7, sp, #16
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status=HAL_I2C_Mem_Read(&this->hi2c, address_shl, reg, 1, &value, sizeof(value), 200);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000f74:	b299      	uxth	r1, r3
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	23c8      	movs	r3, #200	; 0xc8
 8000f7c:	9302      	str	r3, [sp, #8]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	f107 030e 	add.w	r3, r7, #14
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f002 f877 	bl	800307c <HAL_I2C_Mem_Read>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]
	return (status==HAL_OK)?value:(-1);
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d101      	bne.n	8000f9c <_ZN4LSM67readRegEh+0x44>
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	e000      	b.n	8000f9e <_ZN4LSM67readRegEh+0x46>
 8000f9c:	23ff      	movs	r3, #255	; 0xff
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <_ZN4LSM67readAccEv>:


// Reads the 3 accelerometer channels and stores them in vector a
void LSM6::readAcc(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
	uint8_t data[6];

	data[0]=readReg(OUTX_H_XL) ;
 8000fae:	2129      	movs	r1, #41	; 0x29
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ffd1 	bl	8000f58 <_ZN4LSM67readRegEh>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	723b      	strb	r3, [r7, #8]
	data[1]=readReg(OUTX_L_XL);
 8000fba:	2128      	movs	r1, #40	; 0x28
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ffcb 	bl	8000f58 <_ZN4LSM67readRegEh>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	727b      	strb	r3, [r7, #9]

	data[2]=readReg(OUTY_H_XL);
 8000fc6:	212b      	movs	r1, #43	; 0x2b
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ffc5 	bl	8000f58 <_ZN4LSM67readRegEh>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	72bb      	strb	r3, [r7, #10]
	data[3]=readReg(OUTY_L_XL);
 8000fd2:	212a      	movs	r1, #42	; 0x2a
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ffbf 	bl	8000f58 <_ZN4LSM67readRegEh>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	72fb      	strb	r3, [r7, #11]

	data[4]=readReg(OUTZ_H_XL);
 8000fde:	212d      	movs	r1, #45	; 0x2d
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ffb9 	bl	8000f58 <_ZN4LSM67readRegEh>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	733b      	strb	r3, [r7, #12]
	data[5]=readReg(OUTZ_L_XL);
 8000fea:	212c      	movs	r1, #44	; 0x2c
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ffb3 	bl	8000f58 <_ZN4LSM67readRegEh>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	737b      	strb	r3, [r7, #13]

	a.x  = (int16_t)((data[0] << 8) | data[1]);
 8000ff6:	7a3b      	ldrb	r3, [r7, #8]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	7a7b      	ldrb	r3, [r7, #9]
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b21a      	sxth	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	801a      	strh	r2, [r3, #0]
	a.y = (int16_t)((data[2] << 8) | data[3]);
 8001008:	7abb      	ldrb	r3, [r7, #10]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	7afb      	ldrb	r3, [r7, #11]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21a      	sxth	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	805a      	strh	r2, [r3, #2]
	a.z = (int16_t)((data[4] << 8) | data[5]);
 800101a:	7b3b      	ldrb	r3, [r7, #12]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b21a      	sxth	r2, r3
 8001020:	7b7b      	ldrb	r3, [r7, #13]
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21a      	sxth	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	809a      	strh	r2, [r3, #4]
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_ZN4LSM68readGyroEv>:

// Reads the 3 gyro channels and stores them in vector g
void LSM6::readGyro(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	uint8_t data[6];

	data[0]=readReg(OUTX_H_G);
 800103c:	2123      	movs	r1, #35	; 0x23
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ff8a 	bl	8000f58 <_ZN4LSM67readRegEh>
 8001044:	4603      	mov	r3, r0
 8001046:	723b      	strb	r3, [r7, #8]
	data[1]=readReg(OUTX_L_G);
 8001048:	2122      	movs	r1, #34	; 0x22
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ff84 	bl	8000f58 <_ZN4LSM67readRegEh>
 8001050:	4603      	mov	r3, r0
 8001052:	727b      	strb	r3, [r7, #9]

	data[2]=readReg(OUTY_H_G);
 8001054:	2125      	movs	r1, #37	; 0x25
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ff7e 	bl	8000f58 <_ZN4LSM67readRegEh>
 800105c:	4603      	mov	r3, r0
 800105e:	72bb      	strb	r3, [r7, #10]
	data[3]=readReg(OUTY_L_G);
 8001060:	2124      	movs	r1, #36	; 0x24
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ff78 	bl	8000f58 <_ZN4LSM67readRegEh>
 8001068:	4603      	mov	r3, r0
 800106a:	72fb      	strb	r3, [r7, #11]

	data[4]=readReg(OUTZ_H_G);
 800106c:	2127      	movs	r1, #39	; 0x27
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ff72 	bl	8000f58 <_ZN4LSM67readRegEh>
 8001074:	4603      	mov	r3, r0
 8001076:	733b      	strb	r3, [r7, #12]
	data[5]=readReg(OUTZ_L_G);
 8001078:	2126      	movs	r1, #38	; 0x26
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ff6c 	bl	8000f58 <_ZN4LSM67readRegEh>
 8001080:	4603      	mov	r3, r0
 8001082:	737b      	strb	r3, [r7, #13]

	g.x  = (int16_t)((data[0] << 8) | data[1]);
 8001084:	7a3b      	ldrb	r3, [r7, #8]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	7a7b      	ldrb	r3, [r7, #9]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	80da      	strh	r2, [r3, #6]
	g.y = (int16_t)((data[2] << 8) | data[3]);
 8001096:	7abb      	ldrb	r3, [r7, #10]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	7afb      	ldrb	r3, [r7, #11]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	811a      	strh	r2, [r3, #8]
	g.z = (int16_t)((data[4] << 8) | data[5]);
 80010a8:	7b3b      	ldrb	r3, [r7, #12]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7b7b      	ldrb	r3, [r7, #13]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	815a      	strh	r2, [r3, #10]

}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_ZN4LSM64readEv>:

// Reads all 6 channels of the LSM6 and stores them in the object variables
void LSM6::read(void)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  readAcc();
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ff6b 	bl	8000fa6 <_ZN4LSM67readAccEv>
  readGyro();
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ffaf 	bl	8001034 <_ZN4LSM68readGyroEv>
  scaleVectors();
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 f806 	bl	80010e8 <_ZN4LSM612scaleVectorsEv>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	0000      	movs	r0, r0
	...

080010e8 <_ZN4LSM612scaleVectorsEv>:
  a->y /= mag;
  a->z /= mag;
}

void LSM6::scaleVectors()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	   float a_x = this->a.x*2.0f/32678.0f;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f6:	ee07 3a90 	vmov	s15, r3
 80010fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001102:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001280 <_ZN4LSM612scaleVectorsEv+0x198>
 8001106:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800110a:	edc7 7a07 	vstr	s15, [r7, #28]
	   float a_y = this->a.y*2.0f/32678.0f;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001120:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001280 <_ZN4LSM612scaleVectorsEv+0x198>
 8001124:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001128:	edc7 7a06 	vstr	s15, [r7, #24]
	   float a_z = this->a.z*2.0f/32678.0f;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800113e:	eddf 6a50 	vldr	s13, [pc, #320]	; 8001280 <_ZN4LSM612scaleVectorsEv+0x198>
 8001142:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001146:	edc7 7a05 	vstr	s15, [r7, #20]
	   float alpha=atan2f(a_z,a_x)* 180.0f / 3.14 + 90.0f;
 800114a:	edd7 0a07 	vldr	s1, [r7, #28]
 800114e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001152:	f009 fbab 	bl	800a8ac <atan2f>
 8001156:	eef0 7a40 	vmov.f32	s15, s0
 800115a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001284 <_ZN4LSM612scaleVectorsEv+0x19c>
 800115e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001162:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001166:	ed9f 5b42 	vldr	d5, [pc, #264]	; 8001270 <_ZN4LSM612scaleVectorsEv+0x188>
 800116a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800116e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8001278 <_ZN4LSM612scaleVectorsEv+0x190>
 8001172:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001176:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800117a:	edc7 7a04 	vstr	s15, [r7, #16]
	   float gamma=atan2f(a_z,a_y)* 180.0f / 3.14 + 90.0f;
 800117e:	edd7 0a06 	vldr	s1, [r7, #24]
 8001182:	ed97 0a05 	vldr	s0, [r7, #20]
 8001186:	f009 fb91 	bl	800a8ac <atan2f>
 800118a:	eef0 7a40 	vmov.f32	s15, s0
 800118e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001284 <_ZN4LSM612scaleVectorsEv+0x19c>
 8001192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001196:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800119a:	ed9f 5b35 	vldr	d5, [pc, #212]	; 8001270 <_ZN4LSM612scaleVectorsEv+0x188>
 800119e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011a2:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001278 <_ZN4LSM612scaleVectorsEv+0x190>
 80011a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80011aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011ae:	edc7 7a03 	vstr	s15, [r7, #12]
	   float delta=atan2f(a_y,a_x)* 180.0f / 3.14 + 90.0f;
 80011b2:	edd7 0a07 	vldr	s1, [r7, #28]
 80011b6:	ed97 0a06 	vldr	s0, [r7, #24]
 80011ba:	f009 fb77 	bl	800a8ac <atan2f>
 80011be:	eef0 7a40 	vmov.f32	s15, s0
 80011c2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001284 <_ZN4LSM612scaleVectorsEv+0x19c>
 80011c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80011ce:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8001270 <_ZN4LSM612scaleVectorsEv+0x188>
 80011d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011d6:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8001278 <_ZN4LSM612scaleVectorsEv+0x190>
 80011da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80011de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011e2:	edc7 7a02 	vstr	s15, [r7, #8]

	   this->a_scaled.x=alpha;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	60da      	str	r2, [r3, #12]
	   this->a_scaled.y=gamma;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	611a      	str	r2, [r3, #16]
	   this->a_scaled.z=delta;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68ba      	ldr	r2, [r7, #8]
 80011f6:	615a      	str	r2, [r3, #20]

	   this->g_scaled.x = this->g.x*125.0f/32678.0f;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001206:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001288 <_ZN4LSM612scaleVectorsEv+0x1a0>
 800120a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800120e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001280 <_ZN4LSM612scaleVectorsEv+0x198>
 8001212:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	edc3 7a06 	vstr	s15, [r3, #24]
	   this->g_scaled.y = this->g.y*125.0f/32678.0f;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001222:	ee07 3a90 	vmov	s15, r3
 8001226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800122a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001288 <_ZN4LSM612scaleVectorsEv+0x1a0>
 800122e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001232:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001280 <_ZN4LSM612scaleVectorsEv+0x198>
 8001236:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	edc3 7a07 	vstr	s15, [r3, #28]
	   this->g_scaled.z = this->g.z*125.0f/32678.0f;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001288 <_ZN4LSM612scaleVectorsEv+0x1a0>
 8001252:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001256:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001280 <_ZN4LSM612scaleVectorsEv+0x198>
 800125a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001264:	bf00      	nop
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	f3af 8000 	nop.w
 8001270:	51eb851f 	.word	0x51eb851f
 8001274:	40091eb8 	.word	0x40091eb8
 8001278:	00000000 	.word	0x00000000
 800127c:	40568000 	.word	0x40568000
 8001280:	46ff4c00 	.word	0x46ff4c00
 8001284:	43340000 	.word	0x43340000
 8001288:	42fa0000 	.word	0x42fa0000

0800128c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800129c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <vApplicationGetIdleTaskMemory+0x30>)
 80012a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000204 	.word	0x20000204
 80012bc:	20000258 	.word	0x20000258

080012c0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4a07      	ldr	r2, [pc, #28]	; (80012ec <vApplicationGetTimerTaskMemory+0x2c>)
 80012d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	4a06      	ldr	r2, [pc, #24]	; (80012f0 <vApplicationGetTimerTaskMemory+0x30>)
 80012d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012de:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	20000458 	.word	0x20000458
 80012f0:	200004ac 	.word	0x200004ac

080012f4 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* DHT22 sensor callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == DHT22_1.pin)
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_GPIO_EXTI_Callback+0x24>)
 8001300:	891b      	ldrh	r3, [r3, #8]
 8001302:	88fa      	ldrh	r2, [r7, #6]
 8001304:	429a      	cmp	r2, r3
 8001306:	d102      	bne.n	800130e <HAL_GPIO_EXTI_Callback+0x1a>
		DHT22_1.pinChangeCallBack();
 8001308:	4803      	ldr	r0, [pc, #12]	; (8001318 <HAL_GPIO_EXTI_Callback+0x24>)
 800130a:	f7ff fbb2 	bl	8000a72 <_ZN5DHT2217pinChangeCallBackEv>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000e70 	.word	0x20000e70

0800131c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	if (rx_buffer[0] == STOP_VERTICAL) {
 8001324:	4b3e      	ldr	r3, [pc, #248]	; (8001420 <HAL_UART_RxCpltCallback+0x104>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b30      	cmp	r3, #48	; 0x30
 800132a:	d102      	bne.n	8001332 <HAL_UART_RxCpltCallback+0x16>
		SM_DIRECTION = SM_STOP;
 800132c:	4b3d      	ldr	r3, [pc, #244]	; (8001424 <HAL_UART_RxCpltCallback+0x108>)
 800132e:	2203      	movs	r2, #3
 8001330:	601a      	str	r2, [r3, #0]
	}
	if (rx_buffer[0] == UP) {
 8001332:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <HAL_UART_RxCpltCallback+0x104>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b31      	cmp	r3, #49	; 0x31
 8001338:	d102      	bne.n	8001340 <HAL_UART_RxCpltCallback+0x24>
		SM_DIRECTION = SM_RIGHT;
 800133a:	4b3a      	ldr	r3, [pc, #232]	; (8001424 <HAL_UART_RxCpltCallback+0x108>)
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]
	}
	if (rx_buffer[0] == DOWN) {
 8001340:	4b37      	ldr	r3, [pc, #220]	; (8001420 <HAL_UART_RxCpltCallback+0x104>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b32      	cmp	r3, #50	; 0x32
 8001346:	d102      	bne.n	800134e <HAL_UART_RxCpltCallback+0x32>
		SM_DIRECTION = SM_LEFT;
 8001348:	4b36      	ldr	r3, [pc, #216]	; (8001424 <HAL_UART_RxCpltCallback+0x108>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
	}
	if(rx_buffer[0]=='S' && rx_buffer[1]=='P')
 800134e:	4b34      	ldr	r3, [pc, #208]	; (8001420 <HAL_UART_RxCpltCallback+0x104>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b53      	cmp	r3, #83	; 0x53
 8001354:	d109      	bne.n	800136a <HAL_UART_RxCpltCallback+0x4e>
 8001356:	4b32      	ldr	r3, [pc, #200]	; (8001420 <HAL_UART_RxCpltCallback+0x104>)
 8001358:	785b      	ldrb	r3, [r3, #1]
 800135a:	2b50      	cmp	r3, #80	; 0x50
 800135c:	d105      	bne.n	800136a <HAL_UART_RxCpltCallback+0x4e>
	{
		DC1_DIRECTION=DC_OFF;
 800135e:	4b32      	ldr	r3, [pc, #200]	; (8001428 <HAL_UART_RxCpltCallback+0x10c>)
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
		DC2_DIRECTION=DC_OFF;
 8001364:	4b31      	ldr	r3, [pc, #196]	; (800142c <HAL_UART_RxCpltCallback+0x110>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
	}
	if(rx_buffer[0]=='L' && rx_buffer[1]!='P')
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_UART_RxCpltCallback+0x104>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b4c      	cmp	r3, #76	; 0x4c
 8001370:	d113      	bne.n	800139a <HAL_UART_RxCpltCallback+0x7e>
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_UART_RxCpltCallback+0x104>)
 8001374:	785b      	ldrb	r3, [r3, #1]
 8001376:	2b50      	cmp	r3, #80	; 0x50
 8001378:	d00f      	beq.n	800139a <HAL_UART_RxCpltCallback+0x7e>
		{
			DC1_DIRECTION=DC_ON;
 800137a:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <HAL_UART_RxCpltCallback+0x10c>)
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
			DC2_DIRECTION=DC_OFF;
 8001380:	4b2a      	ldr	r3, [pc, #168]	; (800142c <HAL_UART_RxCpltCallback+0x110>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
			DC1_VELOCITY=rx_buffer[1]-'0';
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <HAL_UART_RxCpltCallback+0x104>)
 8001388:	785b      	ldrb	r3, [r3, #1]
 800138a:	3b30      	subs	r3, #48	; 0x30
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <HAL_UART_RxCpltCallback+0x114>)
 8001396:	edc3 7a00 	vstr	s15, [r3]
		}
	if(rx_buffer[0]=='R' && rx_buffer[1]!='P')
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <HAL_UART_RxCpltCallback+0x104>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b52      	cmp	r3, #82	; 0x52
 80013a0:	d113      	bne.n	80013ca <HAL_UART_RxCpltCallback+0xae>
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <HAL_UART_RxCpltCallback+0x104>)
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	2b50      	cmp	r3, #80	; 0x50
 80013a8:	d00f      	beq.n	80013ca <HAL_UART_RxCpltCallback+0xae>
		{
			DC1_DIRECTION=DC_OFF;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <HAL_UART_RxCpltCallback+0x10c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
			DC2_DIRECTION=DC_ON;
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <HAL_UART_RxCpltCallback+0x110>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
			DC2_VELOCITY=rx_buffer[1]-'0';
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <HAL_UART_RxCpltCallback+0x104>)
 80013b8:	785b      	ldrb	r3, [r3, #1]
 80013ba:	3b30      	subs	r3, #48	; 0x30
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_UART_RxCpltCallback+0x118>)
 80013c6:	edc3 7a00 	vstr	s15, [r3]
		}
	if(rx_buffer[0]=='S' && rx_buffer[1]!='P')
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_UART_RxCpltCallback+0x104>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b53      	cmp	r3, #83	; 0x53
 80013d0:	d11d      	bne.n	800140e <HAL_UART_RxCpltCallback+0xf2>
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <HAL_UART_RxCpltCallback+0x104>)
 80013d4:	785b      	ldrb	r3, [r3, #1]
 80013d6:	2b50      	cmp	r3, #80	; 0x50
 80013d8:	d019      	beq.n	800140e <HAL_UART_RxCpltCallback+0xf2>
		{
			DC1_DIRECTION=DC_ON;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <HAL_UART_RxCpltCallback+0x10c>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
			DC2_DIRECTION=DC_ON;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_UART_RxCpltCallback+0x110>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
			DC1_VELOCITY=rx_buffer[1]-'0';
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_UART_RxCpltCallback+0x104>)
 80013e8:	785b      	ldrb	r3, [r3, #1]
 80013ea:	3b30      	subs	r3, #48	; 0x30
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_UART_RxCpltCallback+0x114>)
 80013f6:	edc3 7a00 	vstr	s15, [r3]
			DC2_VELOCITY=rx_buffer[1]-'0';
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_UART_RxCpltCallback+0x104>)
 80013fc:	785b      	ldrb	r3, [r3, #1]
 80013fe:	3b30      	subs	r3, #48	; 0x30
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_UART_RxCpltCallback+0x118>)
 800140a:	edc3 7a00 	vstr	s15, [r3]
		}
	HAL_UART_Receive_IT(&huart3, (uint8_t*) &rx_buffer, 2);
 800140e:	2202      	movs	r2, #2
 8001410:	4903      	ldr	r1, [pc, #12]	; (8001420 <HAL_UART_RxCpltCallback+0x104>)
 8001412:	4809      	ldr	r0, [pc, #36]	; (8001438 <HAL_UART_RxCpltCallback+0x11c>)
 8001414:	f004 ff30 	bl	8006278 <HAL_UART_Receive_IT>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000f68 	.word	0x20000f68
 8001424:	20000000 	.word	0x20000000
 8001428:	20000f5c 	.word	0x20000f5c
 800142c:	20000f5d 	.word	0x20000f5d
 8001430:	20000f60 	.word	0x20000f60
 8001434:	20000f64 	.word	0x20000f64
 8001438:	200009dc 	.word	0x200009dc

0800143c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800143c:	b5b0      	push	{r4, r5, r7, lr}
 800143e:	b090      	sub	sp, #64	; 0x40
 8001440:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001442:	f001 f874 	bl	800252e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001446:	f000 f85f 	bl	8001508 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800144a:	f000 fa7f 	bl	800194c <_ZL12MX_GPIO_Initv>
	MX_USART3_UART_Init();
 800144e:	f000 fa17 	bl	8001880 <_ZL19MX_USART3_UART_Initv>
	MX_USB_OTG_FS_PCD_Init();
 8001452:	f000 fa49 	bl	80018e8 <_ZL22MX_USB_OTG_FS_PCD_Initv>
	MX_I2C1_Init();
 8001456:	f000 f8d7 	bl	8001608 <_ZL12MX_I2C1_Initv>
	MX_TIM2_Init();
 800145a:	f000 f923 	bl	80016a4 <_ZL12MX_TIM2_Initv>
	MX_TIM3_Init();
 800145e:	f000 f9b1 	bl	80017c4 <_ZL12MX_TIM3_Initv>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8001462:	4821      	ldr	r0, [pc, #132]	; (80014e8 <main+0xac>)
 8001464:	f003 fd5e 	bl	8004f24 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001468:	2100      	movs	r1, #0
 800146a:	4820      	ldr	r0, [pc, #128]	; (80014ec <main+0xb0>)
 800146c:	f003 fe22 	bl	80050b4 <HAL_TIM_PWM_Start>
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* USER CODE BEGIN RTOS_TIMERS */

	osTimerDef(Send_data, Send_data_via_UART);
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <main+0xb4>)
 8001472:	63bb      	str	r3, [r7, #56]	; 0x38
 8001474:	2300      	movs	r3, #0
 8001476:	63fb      	str	r3, [r7, #60]	; 0x3c
	Send_dataHandle = osTimerCreate(osTimer(Send_data), osTimerPeriodic, NULL);
 8001478:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800147c:	2200      	movs	r2, #0
 800147e:	2101      	movs	r1, #1
 8001480:	4618      	mov	r0, r3
 8001482:	f006 fcaf 	bl	8007de4 <osTimerCreate>
 8001486:	4603      	mov	r3, r0
 8001488:	4a1a      	ldr	r2, [pc, #104]	; (80014f4 <main+0xb8>)
 800148a:	6013      	str	r3, [r2, #0]
	osTimerStart(Send_dataHandle, 1000);
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <main+0xb8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001494:	4618      	mov	r0, r3
 8001496:	f006 fcd9 	bl	8007e4c <osTimerStart>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Motors */
	osThreadDef(Motors, Motors_control_method, osPriorityHigh, 0, 128);
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <main+0xbc>)
 800149c:	f107 041c 	add.w	r4, r7, #28
 80014a0:	461d      	mov	r5, r3
 80014a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	MotorsHandle = osThreadCreate(osThread(Motors), NULL);
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f006 fc34 	bl	8007d22 <osThreadCreate>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <main+0xc0>)
 80014be:	6013      	str	r3, [r2, #0]

	/* definition and creation of Sensors */
	osThreadDef(Sensors, Sensor_reading_method, osPriorityNormal, 0, 128);
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <main+0xc4>)
 80014c2:	463c      	mov	r4, r7
 80014c4:	461d      	mov	r5, r3
 80014c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SensorsHandle = osThreadCreate(osThread(Sensors), NULL);
 80014d2:	463b      	mov	r3, r7
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f006 fc23 	bl	8007d22 <osThreadCreate>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a09      	ldr	r2, [pc, #36]	; (8001504 <main+0xc8>)
 80014e0:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80014e2:	f006 fc17 	bl	8007d14 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80014e6:	e7fe      	b.n	80014e6 <main+0xaa>
 80014e8:	20000944 	.word	0x20000944
 80014ec:	200008f8 	.word	0x200008f8
 80014f0:	08001d61 	.word	0x08001d61
 80014f4:	20000e6c 	.word	0x20000e6c
 80014f8:	0800f300 	.word	0x0800f300
 80014fc:	20000e64 	.word	0x20000e64
 8001500:	0800f31c 	.word	0x0800f31c
 8001504:	20000e68 	.word	0x20000e68

08001508 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b094      	sub	sp, #80	; 0x50
 800150c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	2234      	movs	r2, #52	; 0x34
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f009 fb7c 	bl	800ac14 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800152c:	f002 fb46 	bl	8003bbc <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001530:	4b33      	ldr	r3, [pc, #204]	; (8001600 <_Z18SystemClock_Configv+0xf8>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a32      	ldr	r2, [pc, #200]	; (8001600 <_Z18SystemClock_Configv+0xf8>)
 8001536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153a:	6413      	str	r3, [r2, #64]	; 0x40
 800153c:	4b30      	ldr	r3, [pc, #192]	; (8001600 <_Z18SystemClock_Configv+0xf8>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001548:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <_Z18SystemClock_Configv+0xfc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001550:	4a2c      	ldr	r2, [pc, #176]	; (8001604 <_Z18SystemClock_Configv+0xfc>)
 8001552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <_Z18SystemClock_Configv+0xfc>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001564:	2301      	movs	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001568:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800156c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156e:	2302      	movs	r3, #2
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001576:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001578:	2304      	movs	r3, #4
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 800157c:	2360      	movs	r3, #96	; 0x60
 800157e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001580:	2302      	movs	r3, #2
 8001582:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001584:	2304      	movs	r3, #4
 8001586:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001588:	2302      	movs	r3, #2
 800158a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	4618      	mov	r0, r3
 8001592:	f002 fb73 	bl	8003c7c <HAL_RCC_OscConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf14      	ite	ne
 800159c:	2301      	movne	r3, #1
 800159e:	2300      	moveq	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <_Z18SystemClock_Configv+0xa2>
		Error_Handler();
 80015a6:	f000 fc27 	bl	8001df8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80015aa:	f002 fb17 	bl	8003bdc <HAL_PWREx_EnableOverDrive>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bf14      	ite	ne
 80015b4:	2301      	movne	r3, #1
 80015b6:	2300      	moveq	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <_Z18SystemClock_Configv+0xba>
		Error_Handler();
 80015be:	f000 fc1b 	bl	8001df8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80015c2:	230f      	movs	r3, #15
 80015c4:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c6:	2302      	movs	r3, #2
 80015c8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	2103      	movs	r1, #3
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 fdfa 	bl	80041d8 <HAL_RCC_ClockConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bf14      	ite	ne
 80015ea:	2301      	movne	r3, #1
 80015ec:	2300      	moveq	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <_Z18SystemClock_Configv+0xf0>
		Error_Handler();
 80015f4:	f000 fc00 	bl	8001df8 <Error_Handler>
	}
}
 80015f8:	bf00      	nop
 80015fa:	3750      	adds	r7, #80	; 0x50
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	40007000 	.word	0x40007000

08001608 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <_ZL12MX_I2C1_Initv+0x90>)
 800160e:	4a23      	ldr	r2, [pc, #140]	; (800169c <_ZL12MX_I2C1_Initv+0x94>)
 8001610:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20303E5D;
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <_ZL12MX_I2C1_Initv+0x90>)
 8001614:	4a22      	ldr	r2, [pc, #136]	; (80016a0 <_ZL12MX_I2C1_Initv+0x98>)
 8001616:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001618:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <_ZL12MX_I2C1_Initv+0x90>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161e:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <_ZL12MX_I2C1_Initv+0x90>)
 8001620:	2201      	movs	r2, #1
 8001622:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <_ZL12MX_I2C1_Initv+0x90>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <_ZL12MX_I2C1_Initv+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <_ZL12MX_I2C1_Initv+0x90>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <_ZL12MX_I2C1_Initv+0x90>)
 8001638:	2200      	movs	r2, #0
 800163a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <_ZL12MX_I2C1_Initv+0x90>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001642:	4815      	ldr	r0, [pc, #84]	; (8001698 <_ZL12MX_I2C1_Initv+0x90>)
 8001644:	f001 fb76 	bl	8002d34 <HAL_I2C_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	bf14      	ite	ne
 800164e:	2301      	movne	r3, #1
 8001650:	2300      	moveq	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <_ZL12MX_I2C1_Initv+0x54>
		Error_Handler();
 8001658:	f000 fbce 	bl	8001df8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800165c:	2100      	movs	r1, #0
 800165e:	480e      	ldr	r0, [pc, #56]	; (8001698 <_ZL12MX_I2C1_Initv+0x90>)
 8001660:	f002 f8cc 	bl	80037fc <HAL_I2CEx_ConfigAnalogFilter>
 8001664:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001666:	2b00      	cmp	r3, #0
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <_ZL12MX_I2C1_Initv+0x70>
		Error_Handler();
 8001674:	f000 fbc0 	bl	8001df8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001678:	2100      	movs	r1, #0
 800167a:	4807      	ldr	r0, [pc, #28]	; (8001698 <_ZL12MX_I2C1_Initv+0x90>)
 800167c:	f002 f909 	bl	8003892 <HAL_I2CEx_ConfigDigitalFilter>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	bf14      	ite	ne
 8001686:	2301      	movne	r3, #1
 8001688:	2300      	moveq	r3, #0
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <_ZL12MX_I2C1_Initv+0x8c>
		Error_Handler();
 8001690:	f000 fbb2 	bl	8001df8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200008ac 	.word	0x200008ac
 800169c:	40005400 	.word	0x40005400
 80016a0:	20303e5d 	.word	0x20303e5d

080016a4 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08e      	sub	sp, #56	; 0x38
 80016a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]
 80016d2:	615a      	str	r2, [r3, #20]
 80016d4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80016d6:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <_ZL12MX_TIM2_Initv+0x11c>)
 80016d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016dc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9600;
 80016de:	4b38      	ldr	r3, [pc, #224]	; (80017c0 <_ZL12MX_TIM2_Initv+0x11c>)
 80016e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016e4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e6:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <_ZL12MX_TIM2_Initv+0x11c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 99;
 80016ec:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <_ZL12MX_TIM2_Initv+0x11c>)
 80016ee:	2263      	movs	r2, #99	; 0x63
 80016f0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f2:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <_ZL12MX_TIM2_Initv+0x11c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <_ZL12MX_TIM2_Initv+0x11c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80016fe:	4830      	ldr	r0, [pc, #192]	; (80017c0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001700:	f003 fbb8 	bl	8004e74 <HAL_TIM_Base_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	bf14      	ite	ne
 800170a:	2301      	movne	r3, #1
 800170c:	2300      	moveq	r3, #0
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <_ZL12MX_TIM2_Initv+0x74>
		Error_Handler();
 8001714:	f000 fb70 	bl	8001df8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800171e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001722:	4619      	mov	r1, r3
 8001724:	4826      	ldr	r0, [pc, #152]	; (80017c0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001726:	f003 fff3 	bl	8005710 <HAL_TIM_ConfigClockSource>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	bf14      	ite	ne
 8001730:	2301      	movne	r3, #1
 8001732:	2300      	moveq	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <_ZL12MX_TIM2_Initv+0x9a>
		Error_Handler();
 800173a:	f000 fb5d 	bl	8001df8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800173e:	4820      	ldr	r0, [pc, #128]	; (80017c0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001740:	f003 fc60 	bl	8005004 <HAL_TIM_PWM_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	bf14      	ite	ne
 800174a:	2301      	movne	r3, #1
 800174c:	2300      	moveq	r3, #0
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <_ZL12MX_TIM2_Initv+0xb4>
		Error_Handler();
 8001754:	f000 fb50 	bl	8001df8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	4619      	mov	r1, r3
 8001766:	4816      	ldr	r0, [pc, #88]	; (80017c0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001768:	f004 fc8c 	bl	8006084 <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800176e:	2b00      	cmp	r3, #0
 8001770:	bf14      	ite	ne
 8001772:	2301      	movne	r3, #1
 8001774:	2300      	moveq	r3, #0
 8001776:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <_ZL12MX_TIM2_Initv+0xdc>
		Error_Handler();
 800177c:	f000 fb3c 	bl	8001df8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001780:	2360      	movs	r3, #96	; 0x60
 8001782:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8001790:	463b      	mov	r3, r7
 8001792:	2200      	movs	r2, #0
 8001794:	4619      	mov	r1, r3
 8001796:	480a      	ldr	r0, [pc, #40]	; (80017c0 <_ZL12MX_TIM2_Initv+0x11c>)
 8001798:	f003 fea6 	bl	80054e8 <HAL_TIM_PWM_ConfigChannel>
 800179c:	4603      	mov	r3, r0
			!= HAL_OK) {
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <_ZL12MX_TIM2_Initv+0x10c>
		Error_Handler();
 80017ac:	f000 fb24 	bl	8001df8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80017b0:	4803      	ldr	r0, [pc, #12]	; (80017c0 <_ZL12MX_TIM2_Initv+0x11c>)
 80017b2:	f000 fc2d 	bl	8002010 <HAL_TIM_MspPostInit>

}
 80017b6:	bf00      	nop
 80017b8:	3738      	adds	r7, #56	; 0x38
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200008f8 	.word	0x200008f8

080017c4 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80017e2:	4b25      	ldr	r3, [pc, #148]	; (8001878 <_ZL12MX_TIM3_Initv+0xb4>)
 80017e4:	4a25      	ldr	r2, [pc, #148]	; (800187c <_ZL12MX_TIM3_Initv+0xb8>)
 80017e6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80017e8:	4b23      	ldr	r3, [pc, #140]	; (8001878 <_ZL12MX_TIM3_Initv+0xb4>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <_ZL12MX_TIM3_Initv+0xb4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80017f4:	4b20      	ldr	r3, [pc, #128]	; (8001878 <_ZL12MX_TIM3_Initv+0xb4>)
 80017f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017fa:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <_ZL12MX_TIM3_Initv+0xb4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <_ZL12MX_TIM3_Initv+0xb4>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001808:	481b      	ldr	r0, [pc, #108]	; (8001878 <_ZL12MX_TIM3_Initv+0xb4>)
 800180a:	f003 fb33 	bl	8004e74 <HAL_TIM_Base_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf14      	ite	ne
 8001814:	2301      	movne	r3, #1
 8001816:	2300      	moveq	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <_ZL12MX_TIM3_Initv+0x5e>
		Error_Handler();
 800181e:	f000 faeb 	bl	8001df8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001826:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4619      	mov	r1, r3
 800182e:	4812      	ldr	r0, [pc, #72]	; (8001878 <_ZL12MX_TIM3_Initv+0xb4>)
 8001830:	f003 ff6e 	bl	8005710 <HAL_TIM_ConfigClockSource>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	bf14      	ite	ne
 800183a:	2301      	movne	r3, #1
 800183c:	2300      	moveq	r3, #0
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <_ZL12MX_TIM3_Initv+0x84>
		Error_Handler();
 8001844:	f000 fad8 	bl	8001df8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001848:	2300      	movs	r3, #0
 800184a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	4619      	mov	r1, r3
 8001854:	4808      	ldr	r0, [pc, #32]	; (8001878 <_ZL12MX_TIM3_Initv+0xb4>)
 8001856:	f004 fc15 	bl	8006084 <HAL_TIMEx_MasterConfigSynchronization>
 800185a:	4603      	mov	r3, r0
			!= HAL_OK) {
 800185c:	2b00      	cmp	r3, #0
 800185e:	bf14      	ite	ne
 8001860:	2301      	movne	r3, #1
 8001862:	2300      	moveq	r3, #0
 8001864:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <_ZL12MX_TIM3_Initv+0xaa>
		Error_Handler();
 800186a:	f000 fac5 	bl	8001df8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	3720      	adds	r7, #32
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000944 	.word	0x20000944
 800187c:	40000400 	.word	0x40000400

08001880 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001886:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <_ZL19MX_USART3_UART_Initv+0x64>)
 8001888:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <_ZL19MX_USART3_UART_Initv+0x60>)
 800188c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001890:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <_ZL19MX_USART3_UART_Initv+0x60>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80018a6:	220c      	movs	r2, #12
 80018a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80018be:	2200      	movs	r2, #0
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80018c4:	f004 fc8a 	bl	80061dc <HAL_UART_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	bf14      	ite	ne
 80018ce:	2301      	movne	r3, #1
 80018d0:	2300      	moveq	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 80018d8:	f000 fa8e 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200009dc 	.word	0x200009dc
 80018e4:	40004800 	.word	0x40004800

080018e8 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80018ec:	4b16      	ldr	r3, [pc, #88]	; (8001948 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80018ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80018f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80018f6:	2206      	movs	r2, #6
 80018f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80018fc:	2202      	movs	r2, #2
 80018fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001908:	2202      	movs	r2, #2
 800190a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800190e:	2201      	movs	r2, #1
 8001910:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800191a:	2200      	movs	r2, #0
 800191c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001920:	2201      	movs	r2, #1
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001926:	2200      	movs	r2, #0
 8001928:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800192a:	4807      	ldr	r0, [pc, #28]	; (8001948 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800192c:	f001 fffd 	bl	800392a <HAL_PCD_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	bf14      	ite	ne
 8001936:	2301      	movne	r3, #1
 8001938:	2300      	moveq	r3, #0
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 8001940:	f000 fa5a 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000a60 	.word	0x20000a60

0800194c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08c      	sub	sp, #48	; 0x30
 8001950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001962:	4ba9      	ldr	r3, [pc, #676]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4aa8      	ldr	r2, [pc, #672]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 8001968:	f043 0304 	orr.w	r3, r3, #4
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4ba6      	ldr	r3, [pc, #664]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	61bb      	str	r3, [r7, #24]
 8001978:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800197a:	4ba3      	ldr	r3, [pc, #652]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4aa2      	ldr	r2, [pc, #648]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 8001980:	f043 0320 	orr.w	r3, r3, #32
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4ba0      	ldr	r3, [pc, #640]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0320 	and.w	r3, r3, #32
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001992:	4b9d      	ldr	r3, [pc, #628]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a9c      	ldr	r2, [pc, #624]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 8001998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b9a      	ldr	r3, [pc, #616]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	4b97      	ldr	r3, [pc, #604]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a96      	ldr	r2, [pc, #600]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b94      	ldr	r3, [pc, #592]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c2:	4b91      	ldr	r3, [pc, #580]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a90      	ldr	r2, [pc, #576]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b8e      	ldr	r3, [pc, #568]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019da:	4b8b      	ldr	r3, [pc, #556]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a8a      	ldr	r2, [pc, #552]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 80019e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b88      	ldr	r3, [pc, #544]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f2:	4b85      	ldr	r3, [pc, #532]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a84      	ldr	r2, [pc, #528]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 80019f8:	f043 0308 	orr.w	r3, r3, #8
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b82      	ldr	r3, [pc, #520]	; (8001c08 <_ZL12MX_GPIO_Initv+0x2bc>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SM2_INIT_SEQUENCE_Pin|SM2_DIR_Pin|SM2_STEP_Pin, GPIO_PIN_RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f240 4105 	movw	r1, #1029	; 0x405
 8001a10:	487e      	ldr	r0, [pc, #504]	; (8001c0c <_ZL12MX_GPIO_Initv+0x2c0>)
 8001a12:	f001 f95d 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SM1_EN_GPIO_Port, SM1_EN_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2102      	movs	r1, #2
 8001a1a:	487d      	ldr	r0, [pc, #500]	; (8001c10 <_ZL12MX_GPIO_Initv+0x2c4>)
 8001a1c:	f001 f958 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SM1_STEP_Pin|SM1_DIR_Pin, GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2109      	movs	r1, #9
 8001a24:	487b      	ldr	r0, [pc, #492]	; (8001c14 <_ZL12MX_GPIO_Initv+0x2c8>)
 8001a26:	f001 f953 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001a30:	4879      	ldr	r0, [pc, #484]	; (8001c18 <_ZL12MX_GPIO_Initv+0x2cc>)
 8001a32:	f001 f94d 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DC1_ENABLE_Pin|DC2_ENABLE_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2143      	movs	r1, #67	; 0x43
 8001a3a:	4878      	ldr	r0, [pc, #480]	; (8001c1c <_ZL12MX_GPIO_Initv+0x2d0>)
 8001a3c:	f001 f948 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SM2_EN_GPIO_Port, SM2_EN_Pin, GPIO_PIN_RESET);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2102      	movs	r1, #2
 8001a44:	4876      	ldr	r0, [pc, #472]	; (8001c20 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001a46:	f001 f943 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a50:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	4619      	mov	r1, r3
 8001a60:	486c      	ldr	r0, [pc, #432]	; (8001c14 <_ZL12MX_GPIO_Initv+0x2c8>)
 8001a62:	f000 ff89 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pins : SM2_INIT_SEQUENCE_Pin SM2_DIR_Pin SM2_STEP_Pin */
  GPIO_InitStruct.Pin = SM2_INIT_SEQUENCE_Pin|SM2_DIR_Pin|SM2_STEP_Pin;
 8001a66:	f240 4305 	movw	r3, #1029	; 0x405
 8001a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4863      	ldr	r0, [pc, #396]	; (8001c0c <_ZL12MX_GPIO_Initv+0x2c0>)
 8001a80:	f000 ff7a 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pin : SM1_INIT_SEQUENCE_Pin */
  GPIO_InitStruct.Pin = SM1_INIT_SEQUENCE_Pin;
 8001a84:	2308      	movs	r3, #8
 8001a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SM1_INIT_SEQUENCE_GPIO_Port, &GPIO_InitStruct);
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	4619      	mov	r1, r3
 8001a96:	485d      	ldr	r0, [pc, #372]	; (8001c0c <_ZL12MX_GPIO_Initv+0x2c0>)
 8001a98:	f000 ff6e 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pin : SM1_EN_Pin */
  GPIO_InitStruct.Pin = SM1_EN_Pin;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SM1_EN_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 031c 	add.w	r3, r7, #28
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4857      	ldr	r0, [pc, #348]	; (8001c10 <_ZL12MX_GPIO_Initv+0x2c4>)
 8001ab4:	f000 ff60 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pins : SM1_STEP_Pin SM1_DIR_Pin */
  GPIO_InitStruct.Pin = SM1_STEP_Pin|SM1_DIR_Pin;
 8001ab8:	2309      	movs	r3, #9
 8001aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	4619      	mov	r1, r3
 8001ace:	4851      	ldr	r0, [pc, #324]	; (8001c14 <_ZL12MX_GPIO_Initv+0x2c8>)
 8001ad0:	f000 ff52 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ad4:	2332      	movs	r3, #50	; 0x32
 8001ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ae4:	230b      	movs	r3, #11
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	4619      	mov	r1, r3
 8001aee:	4849      	ldr	r0, [pc, #292]	; (8001c14 <_ZL12MX_GPIO_Initv+0x2c8>)
 8001af0:	f000 ff42 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001af4:	2386      	movs	r3, #134	; 0x86
 8001af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b04:	230b      	movs	r3, #11
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4845      	ldr	r0, [pc, #276]	; (8001c24 <_ZL12MX_GPIO_Initv+0x2d8>)
 8001b10:	f000 ff32 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 8001b14:	2308      	movs	r3, #8
 8001b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	4619      	mov	r1, r3
 8001b28:	483e      	ldr	r0, [pc, #248]	; (8001c24 <_ZL12MX_GPIO_Initv+0x2d8>)
 8001b2a:	f000 ff25 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b2e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b34:	2301      	movs	r3, #1
 8001b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b40:	f107 031c 	add.w	r3, r7, #28
 8001b44:	4619      	mov	r1, r3
 8001b46:	4834      	ldr	r0, [pc, #208]	; (8001c18 <_ZL12MX_GPIO_Initv+0x2cc>)
 8001b48:	f000 ff16 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC1_ENABLE_Pin DC2_ENABLE_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = DC1_ENABLE_Pin|DC2_ENABLE_Pin|USB_PowerSwitchOn_Pin;
 8001b4c:	2343      	movs	r3, #67	; 0x43
 8001b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	4619      	mov	r1, r3
 8001b62:	482e      	ldr	r0, [pc, #184]	; (8001c1c <_ZL12MX_GPIO_Initv+0x2d0>)
 8001b64:	f000 ff08 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b7a:	230b      	movs	r3, #11
 8001b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	4619      	mov	r1, r3
 8001b84:	4824      	ldr	r0, [pc, #144]	; (8001c18 <_ZL12MX_GPIO_Initv+0x2cc>)
 8001b86:	f000 fef7 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	481f      	ldr	r0, [pc, #124]	; (8001c1c <_ZL12MX_GPIO_Initv+0x2d0>)
 8001b9e:	f000 feeb 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pin : SM2_EN_Pin */
  GPIO_InitStruct.Pin = SM2_EN_Pin;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SM2_EN_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4819      	ldr	r0, [pc, #100]	; (8001c20 <_ZL12MX_GPIO_Initv+0x2d4>)
 8001bba:	f000 fedd 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001bbe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bd0:	230b      	movs	r3, #11
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bd4:	f107 031c 	add.w	r3, r7, #28
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4810      	ldr	r0, [pc, #64]	; (8001c1c <_ZL12MX_GPIO_Initv+0x2d0>)
 8001bdc:	f000 fecc 	bl	8002978 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2105      	movs	r1, #5
 8001be4:	2009      	movs	r0, #9
 8001be6:	f000 fdfe 	bl	80027e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001bea:	2009      	movs	r0, #9
 8001bec:	f000 fe17 	bl	800281e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2105      	movs	r1, #5
 8001bf4:	2028      	movs	r0, #40	; 0x28
 8001bf6:	f000 fdf6 	bl	80027e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bfa:	2028      	movs	r0, #40	; 0x28
 8001bfc:	f000 fe0f 	bl	800281e <HAL_NVIC_EnableIRQ>

}
 8001c00:	bf00      	nop
 8001c02:	3730      	adds	r7, #48	; 0x30
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40021400 	.word	0x40021400
 8001c10:	40021c00 	.word	0x40021c00
 8001c14:	40020800 	.word	0x40020800
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	40021800 	.word	0x40021800
 8001c20:	40020c00 	.word	0x40020c00
 8001c24:	40020000 	.word	0x40020000

08001c28 <_ZN10Step_MotorC1Ev>:

#define SM_RIGHT 1
#define SM_LEFT 0
#define SM_STOP 3

class Step_Motor
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <_Z21Motors_control_methodPKv>:
 * @brief  Function implementing the Motors thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Motors_control_method */
void Motors_control_method(void const *argument) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b09c      	sub	sp, #112	; 0x70
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	Step_Motor SM_1;
 8001c50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ffe7 	bl	8001c28 <_ZN10Step_MotorC1Ev>
	Step_Motor SM_2;
 8001c5a:	f107 0320 	add.w	r3, r7, #32
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff ffe2 	bl	8001c28 <_ZN10Step_MotorC1Ev>

	//SM_2.init(SM2_STEP_GPIO_Port, SM2_STEP_Pin,  SM2_EN_GPIO_Port, SM2_EN_Pin,
				//SM2_DIR_GPIO_Port, SM2_DIR_Pin, SM2_INIT_SEQUENCE_GPIO_Port, SM2_INIT_SEQUENCE_Pin);

	/* DC motors init */
	DC_1.init(DC1_ENABLE_GPIO_Port, DC1_ENABLE_Pin, &htim2);
 8001c64:	f107 0014 	add.w	r0, r7, #20
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <_Z21Motors_control_methodPKv+0x84>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4918      	ldr	r1, [pc, #96]	; (8001cd0 <_Z21Motors_control_methodPKv+0x88>)
 8001c6e:	f7fe fee9 	bl	8000a44 <_ZN8DC_Motor4initEP12GPIO_TypeDeftP17TIM_HandleTypeDef>
	DC_2.init(DC2_ENABLE_GPIO_Port, DC2_ENABLE_Pin, &htim4);
 8001c72:	f107 0008 	add.w	r0, r7, #8
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <_Z21Motors_control_methodPKv+0x8c>)
 8001c78:	2202      	movs	r2, #2
 8001c7a:	4915      	ldr	r1, [pc, #84]	; (8001cd0 <_Z21Motors_control_methodPKv+0x88>)
 8001c7c:	f7fe fee2 	bl	8000a44 <_ZN8DC_Motor4initEP12GPIO_TypeDeftP17TIM_HandleTypeDef>


	/* Start communication */
	HAL_UART_Receive_IT(&huart3, (uint8_t*) &rx_buffer, 2);
 8001c80:	2202      	movs	r2, #2
 8001c82:	4915      	ldr	r1, [pc, #84]	; (8001cd8 <_Z21Motors_control_methodPKv+0x90>)
 8001c84:	4815      	ldr	r0, [pc, #84]	; (8001cdc <_Z21Motors_control_methodPKv+0x94>)
 8001c86:	f004 faf7 	bl	8006278 <HAL_UART_Receive_IT>
	/* Infinite loop */
	for (;;) {
		//SM_1.run(SM_DIRECTION);
		//SM_2.run(SM_DIRECTION);

		DC_1.run(DC1_DIRECTION, DC1_VELOCITY);
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <_Z21Motors_control_methodPKv+0x98>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <_Z21Motors_control_methodPKv+0x9c>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fe9b 	bl	80009dc <_ZN8DC_Motor3runEif>
		DC_2.run(DC2_DIRECTION, DC2_VELOCITY);
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <_Z21Motors_control_methodPKv+0xa0>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <_Z21Motors_control_methodPKv+0xa4>)
 8001cae:	edd3 7a00 	vldr	s15, [r3]
 8001cb2:	f107 0308 	add.w	r3, r7, #8
 8001cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fe8d 	bl	80009dc <_ZN8DC_Motor3runEif>

		osDelay(1);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f006 f879 	bl	8007dba <osDelay>
		DC_1.run(DC1_DIRECTION, DC1_VELOCITY);
 8001cc8:	e7df      	b.n	8001c8a <_Z21Motors_control_methodPKv+0x42>
 8001cca:	bf00      	nop
 8001ccc:	200008f8 	.word	0x200008f8
 8001cd0:	40021800 	.word	0x40021800
 8001cd4:	20000990 	.word	0x20000990
 8001cd8:	20000f68 	.word	0x20000f68
 8001cdc:	200009dc 	.word	0x200009dc
 8001ce0:	20000f5c 	.word	0x20000f5c
 8001ce4:	20000f60 	.word	0x20000f60
 8001ce8:	20000f5d 	.word	0x20000f5d
 8001cec:	20000f64 	.word	0x20000f64

08001cf0 <_Z21Sensor_reading_methodPKv>:
 * @brief Function implementing the Sensors thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Sensor_reading_method */
void Sensor_reading_method(void const *argument) {
 8001cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf2:	b095      	sub	sp, #84	; 0x54
 8001cf4:	af12      	add	r7, sp, #72	; 0x48
 8001cf6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Sensor_reading_method */


	IMU_1.init(hi2c1, IMU_1.device_DS33, IMU_1.sa0_high);
 8001cf8:	4e14      	ldr	r6, [pc, #80]	; (8001d4c <_Z21Sensor_reading_methodPKv+0x5c>)
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	9311      	str	r3, [sp, #68]	; 0x44
 8001cfe:	2300      	movs	r3, #0
 8001d00:	9310      	str	r3, [sp, #64]	; 0x40
 8001d02:	466d      	mov	r5, sp
 8001d04:	f106 040c 	add.w	r4, r6, #12
 8001d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d18:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001d1c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001d20:	480b      	ldr	r0, [pc, #44]	; (8001d50 <_Z21Sensor_reading_methodPKv+0x60>)
 8001d22:	f7ff f898 	bl	8000e56 <_ZN4LSM64initE19__I2C_HandleTypeDefNS_10deviceTypeENS_8sa0StateE>
	DHT22_1.init(&htim3, 96, DHT22_GPIO_Port, DHT22_Pin);
 8001d26:	2308      	movs	r3, #8
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <_Z21Sensor_reading_methodPKv+0x64>)
 8001d2c:	2260      	movs	r2, #96	; 0x60
 8001d2e:	490a      	ldr	r1, [pc, #40]	; (8001d58 <_Z21Sensor_reading_methodPKv+0x68>)
 8001d30:	480a      	ldr	r0, [pc, #40]	; (8001d5c <_Z21Sensor_reading_methodPKv+0x6c>)
 8001d32:	f7fe ffab 	bl	8000c8c <_ZN5DHT224initEP17TIM_HandleTypeDeftP12GPIO_TypeDeft>
	/* Infinite loop */
	for (;;) {
		IMU_1.read();
 8001d36:	4806      	ldr	r0, [pc, #24]	; (8001d50 <_Z21Sensor_reading_methodPKv+0x60>)
 8001d38:	f7ff f9c3 	bl	80010c2 <_ZN4LSM64readEv>
		DHT22_1.read();
 8001d3c:	4807      	ldr	r0, [pc, #28]	; (8001d5c <_Z21Sensor_reading_methodPKv+0x6c>)
 8001d3e:	f7fe ffea 	bl	8000d16 <_ZN5DHT224readEv>
		osDelay(1);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f006 f839 	bl	8007dba <osDelay>
		IMU_1.read();
 8001d48:	e7f5      	b.n	8001d36 <_Z21Sensor_reading_methodPKv+0x46>
 8001d4a:	bf00      	nop
 8001d4c:	200008ac 	.word	0x200008ac
 8001d50:	20000ee4 	.word	0x20000ee4
 8001d54:	40020000 	.word	0x40020000
 8001d58:	20000944 	.word	0x20000944
 8001d5c:	20000e70 	.word	0x20000e70

08001d60 <_Z18Send_data_via_UARTPKv>:
	}
	/* USER CODE END Sensor_reading_method */
}

/* Send_data_via_UART function */
void Send_data_via_UART(void const *argument) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b0aa      	sub	sp, #168	; 0xa8
 8001d64:	af0e      	add	r7, sp, #56	; 0x38
 8001d66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Send_data_via_UART */
	char tx_buffer[100];
	int n = sprintf(tx_buffer,
			"[[%1.f,%1.f],[%0.1f,%0.1f,%0.1f,%0.1f,%0.1f,%0.1f]]",
			DHT22_1.temperature, DHT22_1.humidity, IMU_1.g_scaled.x,
 8001d68:	4b20      	ldr	r3, [pc, #128]	; (8001dec <_Z18Send_data_via_UARTPKv+0x8c>)
 8001d6a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
	int n = sprintf(tx_buffer,
 8001d6e:	eeb7 0ae7 	vcvt.f64.f32	d0, s15
			DHT22_1.temperature, DHT22_1.humidity, IMU_1.g_scaled.x,
 8001d72:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <_Z18Send_data_via_UARTPKv+0x8c>)
 8001d74:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
	int n = sprintf(tx_buffer,
 8001d78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			DHT22_1.temperature, DHT22_1.humidity, IMU_1.g_scaled.x,
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <_Z18Send_data_via_UARTPKv+0x90>)
 8001d7e:	edd3 6a06 	vldr	s13, [r3, #24]
	int n = sprintf(tx_buffer,
 8001d82:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			IMU_1.g_scaled.y, IMU_1.g_scaled.z, IMU_1.a_scaled.x,
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <_Z18Send_data_via_UARTPKv+0x90>)
 8001d88:	edd3 5a07 	vldr	s11, [r3, #28]
	int n = sprintf(tx_buffer,
 8001d8c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			IMU_1.g_scaled.y, IMU_1.g_scaled.z, IMU_1.a_scaled.x,
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <_Z18Send_data_via_UARTPKv+0x90>)
 8001d92:	edd3 4a08 	vldr	s9, [r3, #32]
	int n = sprintf(tx_buffer,
 8001d96:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			IMU_1.g_scaled.y, IMU_1.g_scaled.z, IMU_1.a_scaled.x,
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <_Z18Send_data_via_UARTPKv+0x90>)
 8001d9c:	edd3 3a03 	vldr	s7, [r3, #12]
	int n = sprintf(tx_buffer,
 8001da0:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
			IMU_1.a_scaled.y, IMU_1.a_scaled.z);
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <_Z18Send_data_via_UARTPKv+0x90>)
 8001da6:	edd3 2a04 	vldr	s5, [r3, #16]
	int n = sprintf(tx_buffer,
 8001daa:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
			IMU_1.a_scaled.y, IMU_1.a_scaled.z);
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <_Z18Send_data_via_UARTPKv+0x90>)
 8001db0:	edd3 1a05 	vldr	s3, [r3, #20]
	int n = sprintf(tx_buffer,
 8001db4:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
 8001db8:	f107 0008 	add.w	r0, r7, #8
 8001dbc:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 8001dc0:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 8001dc4:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001dc8:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001dcc:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001dd0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001dd4:	ed8d 7b00 	vstr	d7, [sp]
 8001dd8:	ec53 2b10 	vmov	r2, r3, d0
 8001ddc:	4905      	ldr	r1, [pc, #20]	; (8001df4 <_Z18Send_data_via_UARTPKv+0x94>)
 8001dde:	f009 fd71 	bl	800b8c4 <siprintf>
 8001de2:	66f8      	str	r0, [r7, #108]	; 0x6c
	//HAL_UART_Transmit(&huart3, (uint8_t*) tx_buffer, n, 5000);
	/* USER CODE END Send_data_via_UART */
}
 8001de4:	bf00      	nop
 8001de6:	3770      	adds	r7, #112	; 0x70
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000e70 	.word	0x20000e70
 8001df0:	20000ee4 	.word	0x20000ee4
 8001df4:	0800f338 	.word	0x0800f338

08001df8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dfc:	b672      	cpsid	i
}
 8001dfe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e00:	e7fe      	b.n	8001e00 <Error_Handler+0x8>
	...

08001e04 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d107      	bne.n	8001e24 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d102      	bne.n	8001e24 <_Z41__static_initialization_and_destruction_0ii+0x20>
LSM6 IMU_1;
 8001e1e:	4803      	ldr	r0, [pc, #12]	; (8001e2c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001e20:	f7ff f803 	bl	8000e2a <_ZN4LSM6C1Ev>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000ee4 	.word	0x20000ee4

08001e30 <_GLOBAL__sub_I_hi2c1>:
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff ffe3 	bl	8001e04 <_Z41__static_initialization_and_destruction_0ii>
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e68:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	210f      	movs	r1, #15
 8001e7a:	f06f 0001 	mvn.w	r0, #1
 8001e7e:	f000 fcb2 	bl	80027e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800

08001e90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b0ae      	sub	sp, #184	; 0xb8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2290      	movs	r2, #144	; 0x90
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f008 feaf 	bl	800ac14 <memset>
  if(hi2c->Instance==I2C1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a22      	ldr	r2, [pc, #136]	; (8001f44 <HAL_I2C_MspInit+0xb4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d13c      	bne.n	8001f3a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ec0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ec4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 fba8 	bl	8004624 <HAL_RCCEx_PeriphCLKConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001eda:	f7ff ff8d 	bl	8001df8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_I2C_MspInit+0xb8>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_I2C_MspInit+0xb8>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_I2C_MspInit+0xb8>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ef6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001efe:	2312      	movs	r3, #18
 8001f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f10:	2304      	movs	r3, #4
 8001f12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	480b      	ldr	r0, [pc, #44]	; (8001f4c <HAL_I2C_MspInit+0xbc>)
 8001f1e:	f000 fd2b 	bl	8002978 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_I2C_MspInit+0xb8>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <HAL_I2C_MspInit+0xb8>)
 8001f28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_I2C_MspInit+0xb8>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f3a:	bf00      	nop
 8001f3c:	37b8      	adds	r7, #184	; 0xb8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40005400 	.word	0x40005400
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020400 	.word	0x40020400

08001f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f60:	d114      	bne.n	8001f8c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f62:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_TIM_Base_MspInit+0x78>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <HAL_TIM_Base_MspInit+0x78>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_TIM_Base_MspInit+0x78>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2105      	movs	r1, #5
 8001f7e:	201c      	movs	r0, #28
 8001f80:	f000 fc31 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f84:	201c      	movs	r0, #28
 8001f86:	f000 fc4a 	bl	800281e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f8a:	e018      	b.n	8001fbe <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <HAL_TIM_Base_MspInit+0x7c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d113      	bne.n	8001fbe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <HAL_TIM_Base_MspInit+0x78>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <HAL_TIM_Base_MspInit+0x78>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_TIM_Base_MspInit+0x78>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2105      	movs	r1, #5
 8001fb2:	201d      	movs	r0, #29
 8001fb4:	f000 fc17 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fb8:	201d      	movs	r0, #29
 8001fba:	f000 fc30 	bl	800281e <HAL_NVIC_EnableIRQ>
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40000400 	.word	0x40000400

08001fd0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_TIM_PWM_MspInit+0x38>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10b      	bne.n	8001ffa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_TIM_PWM_MspInit+0x3c>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a09      	ldr	r2, [pc, #36]	; (800200c <HAL_TIM_PWM_MspInit+0x3c>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <HAL_TIM_PWM_MspInit+0x3c>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40000800 	.word	0x40000800
 800200c:	40023800 	.word	0x40023800

08002010 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002030:	d11c      	bne.n	800206c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <HAL_TIM_MspPostInit+0xa8>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a20      	ldr	r2, [pc, #128]	; (80020b8 <HAL_TIM_MspPostInit+0xa8>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <HAL_TIM_MspPostInit+0xa8>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800204a:	2301      	movs	r3, #1
 800204c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800205a:	2301      	movs	r3, #1
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	4815      	ldr	r0, [pc, #84]	; (80020bc <HAL_TIM_MspPostInit+0xac>)
 8002066:	f000 fc87 	bl	8002978 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800206a:	e021      	b.n	80020b0 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM4)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <HAL_TIM_MspPostInit+0xb0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d11c      	bne.n	80020b0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_TIM_MspPostInit+0xa8>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <HAL_TIM_MspPostInit+0xa8>)
 800207c:	f043 0308 	orr.w	r3, r3, #8
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_TIM_MspPostInit+0xa8>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800208e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020a0:	2302      	movs	r3, #2
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	4619      	mov	r1, r3
 80020aa:	4806      	ldr	r0, [pc, #24]	; (80020c4 <HAL_TIM_MspPostInit+0xb4>)
 80020ac:	f000 fc64 	bl	8002978 <HAL_GPIO_Init>
}
 80020b0:	bf00      	nop
 80020b2:	3728      	adds	r7, #40	; 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40020000 	.word	0x40020000
 80020c0:	40000800 	.word	0x40000800
 80020c4:	40020c00 	.word	0x40020c00

080020c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b0ae      	sub	sp, #184	; 0xb8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	2290      	movs	r2, #144	; 0x90
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f008 fd93 	bl	800ac14 <memset>
  if(huart->Instance==USART3)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a26      	ldr	r2, [pc, #152]	; (800218c <HAL_UART_MspInit+0xc4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d144      	bne.n	8002182 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020fe:	2300      	movs	r3, #0
 8002100:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	4618      	mov	r0, r3
 8002108:	f002 fa8c 	bl	8004624 <HAL_RCCEx_PeriphCLKConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002112:	f7ff fe71 	bl	8001df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <HAL_UART_MspInit+0xc8>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a1d      	ldr	r2, [pc, #116]	; (8002190 <HAL_UART_MspInit+0xc8>)
 800211c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <HAL_UART_MspInit+0xc8>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800212e:	4b18      	ldr	r3, [pc, #96]	; (8002190 <HAL_UART_MspInit+0xc8>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a17      	ldr	r2, [pc, #92]	; (8002190 <HAL_UART_MspInit+0xc8>)
 8002134:	f043 0308 	orr.w	r3, r3, #8
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <HAL_UART_MspInit+0xc8>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002146:	f44f 7340 	mov.w	r3, #768	; 0x300
 800214a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215a:	2303      	movs	r3, #3
 800215c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002160:	2307      	movs	r3, #7
 8002162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002166:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800216a:	4619      	mov	r1, r3
 800216c:	4809      	ldr	r0, [pc, #36]	; (8002194 <HAL_UART_MspInit+0xcc>)
 800216e:	f000 fc03 	bl	8002978 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2105      	movs	r1, #5
 8002176:	2027      	movs	r0, #39	; 0x27
 8002178:	f000 fb35 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800217c:	2027      	movs	r0, #39	; 0x27
 800217e:	f000 fb4e 	bl	800281e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002182:	bf00      	nop
 8002184:	37b8      	adds	r7, #184	; 0xb8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40004800 	.word	0x40004800
 8002190:	40023800 	.word	0x40023800
 8002194:	40020c00 	.word	0x40020c00

08002198 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b0ae      	sub	sp, #184	; 0xb8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2290      	movs	r2, #144	; 0x90
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f008 fd2b 	bl	800ac14 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021c6:	d159      	bne.n	800227c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80021c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021cc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 fa23 	bl	8004624 <HAL_RCCEx_PeriphCLKConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80021e4:	f7ff fe08 	bl	8001df8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e8:	4b26      	ldr	r3, [pc, #152]	; (8002284 <HAL_PCD_MspInit+0xec>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	4a25      	ldr	r2, [pc, #148]	; (8002284 <HAL_PCD_MspInit+0xec>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6313      	str	r3, [r2, #48]	; 0x30
 80021f4:	4b23      	ldr	r3, [pc, #140]	; (8002284 <HAL_PCD_MspInit+0xec>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002200:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002204:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002214:	2303      	movs	r3, #3
 8002216:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800221a:	230a      	movs	r3, #10
 800221c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002220:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002224:	4619      	mov	r1, r3
 8002226:	4818      	ldr	r0, [pc, #96]	; (8002288 <HAL_PCD_MspInit+0xf0>)
 8002228:	f000 fba6 	bl	8002978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800222c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002230:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002240:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002244:	4619      	mov	r1, r3
 8002246:	4810      	ldr	r0, [pc, #64]	; (8002288 <HAL_PCD_MspInit+0xf0>)
 8002248:	f000 fb96 	bl	8002978 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_PCD_MspInit+0xec>)
 800224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002250:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <HAL_PCD_MspInit+0xec>)
 8002252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002256:	6353      	str	r3, [r2, #52]	; 0x34
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_PCD_MspInit+0xec>)
 800225a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <HAL_PCD_MspInit+0xec>)
 8002266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002268:	4a06      	ldr	r2, [pc, #24]	; (8002284 <HAL_PCD_MspInit+0xec>)
 800226a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800226e:	6453      	str	r3, [r2, #68]	; 0x44
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <HAL_PCD_MspInit+0xec>)
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800227c:	bf00      	nop
 800227e:	37b8      	adds	r7, #184	; 0xb8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	40020000 	.word	0x40020000

0800228c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <NMI_Handler+0x4>

08002292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002296:	e7fe      	b.n	8002296 <HardFault_Handler+0x4>

08002298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800229c:	e7fe      	b.n	800229c <MemManage_Handler+0x4>

0800229e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a2:	e7fe      	b.n	80022a2 <BusFault_Handler+0x4>

080022a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <UsageFault_Handler+0x4>

080022aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022bc:	f000 f974 	bl	80025a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80022c0:	f007 f9ea 	bl	8009698 <xTaskGetSchedulerState>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d001      	beq.n	80022ce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80022ca:	f008 f875 	bl	800a3b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DHT22_Pin);
 80022d6:	2008      	movs	r0, #8
 80022d8:	f000 fd14 	bl	8002d04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}

080022e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <TIM2_IRQHandler+0x10>)
 80022e6:	f002 ffdf 	bl	80052a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200008f8 	.word	0x200008f8

080022f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <TIM3_IRQHandler+0x10>)
 80022fa:	f002 ffd5 	bl	80052a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000944 	.word	0x20000944

08002308 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <USART3_IRQHandler+0x10>)
 800230e:	f004 f801 	bl	8006314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200009dc 	.word	0x200009dc

0800231c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002320:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002324:	f000 fcee 	bl	8002d04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
	return 1;
 8002330:	2301      	movs	r3, #1
}
 8002332:	4618      	mov	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_kill>:

int _kill(int pid, int sig)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002346:	f008 fc2d 	bl	800aba4 <__errno>
 800234a:	4603      	mov	r3, r0
 800234c:	2216      	movs	r2, #22
 800234e:	601a      	str	r2, [r3, #0]
	return -1;
 8002350:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <_exit>:

void _exit (int status)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002364:	f04f 31ff 	mov.w	r1, #4294967295
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ffe7 	bl	800233c <_kill>
	while (1) {}		/* Make sure we hang here */
 800236e:	e7fe      	b.n	800236e <_exit+0x12>

08002370 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	e00a      	b.n	8002398 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002382:	f3af 8000 	nop.w
 8002386:	4601      	mov	r1, r0
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	60ba      	str	r2, [r7, #8]
 800238e:	b2ca      	uxtb	r2, r1
 8002390:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	3301      	adds	r3, #1
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	429a      	cmp	r2, r3
 800239e:	dbf0      	blt.n	8002382 <_read+0x12>
	}

return len;
 80023a0:	687b      	ldr	r3, [r7, #4]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e009      	b.n	80023d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	60ba      	str	r2, [r7, #8]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	3301      	adds	r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	dbf1      	blt.n	80023bc <_write+0x12>
	}
	return len;
 80023d8:	687b      	ldr	r3, [r7, #4]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <_close>:

int _close(int file)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
	return -1;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800240a:	605a      	str	r2, [r3, #4]
	return 0;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <_isatty>:

int _isatty(int file)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
	return 1;
 8002422:	2301      	movs	r3, #1
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
	return 0;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002454:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <_sbrk+0x5c>)
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <_sbrk+0x60>)
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002460:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <_sbrk+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <_sbrk+0x64>)
 800246a:	4a12      	ldr	r2, [pc, #72]	; (80024b4 <_sbrk+0x68>)
 800246c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	429a      	cmp	r2, r3
 800247a:	d207      	bcs.n	800248c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800247c:	f008 fb92 	bl	800aba4 <__errno>
 8002480:	4603      	mov	r3, r0
 8002482:	220c      	movs	r2, #12
 8002484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002486:	f04f 33ff 	mov.w	r3, #4294967295
 800248a:	e009      	b.n	80024a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <_sbrk+0x64>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <_sbrk+0x64>)
 800249c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800249e:	68fb      	ldr	r3, [r7, #12]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20080000 	.word	0x20080000
 80024ac:	00000400 	.word	0x00000400
 80024b0:	20000f6c 	.word	0x20000f6c
 80024b4:	20004e10 	.word	0x20004e10

080024b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <SystemInit+0x20>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <SystemInit+0x20>)
 80024c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002514 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024e0:	480d      	ldr	r0, [pc, #52]	; (8002518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024e2:	490e      	ldr	r1, [pc, #56]	; (800251c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024e4:	4a0e      	ldr	r2, [pc, #56]	; (8002520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e8:	e002      	b.n	80024f0 <LoopCopyDataInit>

080024ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ee:	3304      	adds	r3, #4

080024f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f4:	d3f9      	bcc.n	80024ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024f6:	4a0b      	ldr	r2, [pc, #44]	; (8002524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024f8:	4c0b      	ldr	r4, [pc, #44]	; (8002528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024fc:	e001      	b.n	8002502 <LoopFillZerobss>

080024fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002500:	3204      	adds	r2, #4

08002502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002504:	d3fb      	bcc.n	80024fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002506:	f7ff ffd7 	bl	80024b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800250a:	f008 fb51 	bl	800abb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800250e:	f7fe ff95 	bl	800143c <main>
  bx  lr    
 8002512:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002514:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800251c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002520:	0800f890 	.word	0x0800f890
  ldr r2, =_sbss
 8002524:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002528:	20004e0c 	.word	0x20004e0c

0800252c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800252c:	e7fe      	b.n	800252c <ADC_IRQHandler>

0800252e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002532:	2003      	movs	r0, #3
 8002534:	f000 f94c 	bl	80027d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002538:	200f      	movs	r0, #15
 800253a:	f000 f805 	bl	8002548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800253e:	f7ff fc7f 	bl	8001e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_InitTick+0x54>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_InitTick+0x58>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4619      	mov	r1, r3
 800255a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800255e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002562:	fbb2 f3f3 	udiv	r3, r2, r3
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f967 	bl	800283a <HAL_SYSTICK_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e00e      	b.n	8002594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b0f      	cmp	r3, #15
 800257a:	d80a      	bhi.n	8002592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800257c:	2200      	movs	r2, #0
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	f04f 30ff 	mov.w	r0, #4294967295
 8002584:	f000 f92f 	bl	80027e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002588:	4a06      	ldr	r2, [pc, #24]	; (80025a4 <HAL_InitTick+0x5c>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	e000      	b.n	8002594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000004 	.word	0x20000004
 80025a0:	2000000c 	.word	0x2000000c
 80025a4:	20000008 	.word	0x20000008

080025a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_IncTick+0x20>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_IncTick+0x24>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <HAL_IncTick+0x24>)
 80025ba:	6013      	str	r3, [r2, #0]
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	2000000c 	.word	0x2000000c
 80025cc:	20000f70 	.word	0x20000f70

080025d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_GetTick+0x14>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000f70 	.word	0x20000f70

080025e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f0:	f7ff ffee 	bl	80025d0 <HAL_GetTick>
 80025f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d005      	beq.n	800260e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002602:	4b0a      	ldr	r3, [pc, #40]	; (800262c <HAL_Delay+0x44>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4413      	add	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800260e:	bf00      	nop
 8002610:	f7ff ffde 	bl	80025d0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	429a      	cmp	r2, r3
 800261e:	d8f7      	bhi.n	8002610 <HAL_Delay+0x28>
  {
  }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	2000000c 	.word	0x2000000c

08002630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <__NVIC_SetPriorityGrouping+0x40>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800264c:	4013      	ands	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 800265a:	4313      	orrs	r3, r2
 800265c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800265e:	4a04      	ldr	r2, [pc, #16]	; (8002670 <__NVIC_SetPriorityGrouping+0x40>)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	60d3      	str	r3, [r2, #12]
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00
 8002674:	05fa0000 	.word	0x05fa0000

08002678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <__NVIC_GetPriorityGrouping+0x18>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	f003 0307 	and.w	r3, r3, #7
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	db0b      	blt.n	80026be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	4907      	ldr	r1, [pc, #28]	; (80026cc <__NVIC_EnableIRQ+0x38>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2001      	movs	r0, #1
 80026b6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000e100 	.word	0xe000e100

080026d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	db0a      	blt.n	80026fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	490c      	ldr	r1, [pc, #48]	; (800271c <__NVIC_SetPriority+0x4c>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	0112      	lsls	r2, r2, #4
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	440b      	add	r3, r1
 80026f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f8:	e00a      	b.n	8002710 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4908      	ldr	r1, [pc, #32]	; (8002720 <__NVIC_SetPriority+0x50>)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	3b04      	subs	r3, #4
 8002708:	0112      	lsls	r2, r2, #4
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	440b      	add	r3, r1
 800270e:	761a      	strb	r2, [r3, #24]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000e100 	.word	0xe000e100
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	; 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f1c3 0307 	rsb	r3, r3, #7
 800273e:	2b04      	cmp	r3, #4
 8002740:	bf28      	it	cs
 8002742:	2304      	movcs	r3, #4
 8002744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3304      	adds	r3, #4
 800274a:	2b06      	cmp	r3, #6
 800274c:	d902      	bls.n	8002754 <NVIC_EncodePriority+0x30>
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3b03      	subs	r3, #3
 8002752:	e000      	b.n	8002756 <NVIC_EncodePriority+0x32>
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	f04f 32ff 	mov.w	r2, #4294967295
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	401a      	ands	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	43d9      	mvns	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	4313      	orrs	r3, r2
         );
}
 800277e:	4618      	mov	r0, r3
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800279c:	d301      	bcc.n	80027a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800279e:	2301      	movs	r3, #1
 80027a0:	e00f      	b.n	80027c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <SysTick_Config+0x40>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027aa:	210f      	movs	r1, #15
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	f7ff ff8e 	bl	80026d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <SysTick_Config+0x40>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ba:	4b04      	ldr	r3, [pc, #16]	; (80027cc <SysTick_Config+0x40>)
 80027bc:	2207      	movs	r2, #7
 80027be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	e000e010 	.word	0xe000e010

080027d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ff29 	bl	8002630 <__NVIC_SetPriorityGrouping>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b086      	sub	sp, #24
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027f8:	f7ff ff3e 	bl	8002678 <__NVIC_GetPriorityGrouping>
 80027fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	6978      	ldr	r0, [r7, #20]
 8002804:	f7ff ff8e 	bl	8002724 <NVIC_EncodePriority>
 8002808:	4602      	mov	r2, r0
 800280a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff5d 	bl	80026d0 <__NVIC_SetPriority>
}
 8002816:	bf00      	nop
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff31 	bl	8002694 <__NVIC_EnableIRQ>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ffa2 	bl	800278c <SysTick_Config>
 8002848:	4603      	mov	r3, r0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002860:	f7ff feb6 	bl	80025d0 <HAL_GetTick>
 8002864:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d008      	beq.n	8002884 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e052      	b.n	800292a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0216 	bic.w	r2, r2, #22
 8002892:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d103      	bne.n	80028b4 <HAL_DMA_Abort+0x62>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0208 	bic.w	r2, r2, #8
 80028c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d4:	e013      	b.n	80028fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028d6:	f7ff fe7b 	bl	80025d0 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d90c      	bls.n	80028fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2220      	movs	r2, #32
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2203      	movs	r2, #3
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e015      	b.n	800292a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e4      	bne.n	80028d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	223f      	movs	r2, #63	; 0x3f
 8002912:	409a      	lsls	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d004      	beq.n	8002950 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e00c      	b.n	800296a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2205      	movs	r2, #5
 8002954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002978:	b480      	push	{r7}
 800297a:	b089      	sub	sp, #36	; 0x24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	e175      	b.n	8002c84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002998:	2201      	movs	r2, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	f040 8164 	bne.w	8002c7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d005      	beq.n	80029ce <HAL_GPIO_Init+0x56>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d130      	bne.n	8002a30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	2203      	movs	r2, #3
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a04:	2201      	movs	r2, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 0201 	and.w	r2, r3, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d017      	beq.n	8002a6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d123      	bne.n	8002ac0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	08da      	lsrs	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3208      	adds	r2, #8
 8002a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	220f      	movs	r2, #15
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	08da      	lsrs	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3208      	adds	r2, #8
 8002aba:	69b9      	ldr	r1, [r7, #24]
 8002abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0203 	and.w	r2, r3, #3
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80be 	beq.w	8002c7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b02:	4b66      	ldr	r3, [pc, #408]	; (8002c9c <HAL_GPIO_Init+0x324>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	4a65      	ldr	r2, [pc, #404]	; (8002c9c <HAL_GPIO_Init+0x324>)
 8002b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0e:	4b63      	ldr	r3, [pc, #396]	; (8002c9c <HAL_GPIO_Init+0x324>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b1a:	4a61      	ldr	r2, [pc, #388]	; (8002ca0 <HAL_GPIO_Init+0x328>)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	089b      	lsrs	r3, r3, #2
 8002b20:	3302      	adds	r3, #2
 8002b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	220f      	movs	r2, #15
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <HAL_GPIO_Init+0x32c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d037      	beq.n	8002bb6 <HAL_GPIO_Init+0x23e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a57      	ldr	r2, [pc, #348]	; (8002ca8 <HAL_GPIO_Init+0x330>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d031      	beq.n	8002bb2 <HAL_GPIO_Init+0x23a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a56      	ldr	r2, [pc, #344]	; (8002cac <HAL_GPIO_Init+0x334>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d02b      	beq.n	8002bae <HAL_GPIO_Init+0x236>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a55      	ldr	r2, [pc, #340]	; (8002cb0 <HAL_GPIO_Init+0x338>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d025      	beq.n	8002baa <HAL_GPIO_Init+0x232>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a54      	ldr	r2, [pc, #336]	; (8002cb4 <HAL_GPIO_Init+0x33c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d01f      	beq.n	8002ba6 <HAL_GPIO_Init+0x22e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a53      	ldr	r2, [pc, #332]	; (8002cb8 <HAL_GPIO_Init+0x340>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d019      	beq.n	8002ba2 <HAL_GPIO_Init+0x22a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <HAL_GPIO_Init+0x344>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d013      	beq.n	8002b9e <HAL_GPIO_Init+0x226>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a51      	ldr	r2, [pc, #324]	; (8002cc0 <HAL_GPIO_Init+0x348>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00d      	beq.n	8002b9a <HAL_GPIO_Init+0x222>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a50      	ldr	r2, [pc, #320]	; (8002cc4 <HAL_GPIO_Init+0x34c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <HAL_GPIO_Init+0x21e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4f      	ldr	r2, [pc, #316]	; (8002cc8 <HAL_GPIO_Init+0x350>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d101      	bne.n	8002b92 <HAL_GPIO_Init+0x21a>
 8002b8e:	2309      	movs	r3, #9
 8002b90:	e012      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002b92:	230a      	movs	r3, #10
 8002b94:	e010      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002b96:	2308      	movs	r3, #8
 8002b98:	e00e      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	e00c      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002b9e:	2306      	movs	r3, #6
 8002ba0:	e00a      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002ba2:	2305      	movs	r3, #5
 8002ba4:	e008      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	e006      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e004      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e002      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	f002 0203 	and.w	r2, r2, #3
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	4093      	lsls	r3, r2
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bc8:	4935      	ldr	r1, [pc, #212]	; (8002ca0 <HAL_GPIO_Init+0x328>)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ccc <HAL_GPIO_Init+0x354>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bfa:	4a34      	ldr	r2, [pc, #208]	; (8002ccc <HAL_GPIO_Init+0x354>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c00:	4b32      	ldr	r3, [pc, #200]	; (8002ccc <HAL_GPIO_Init+0x354>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c24:	4a29      	ldr	r2, [pc, #164]	; (8002ccc <HAL_GPIO_Init+0x354>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c2a:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <HAL_GPIO_Init+0x354>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4e:	4a1f      	ldr	r2, [pc, #124]	; (8002ccc <HAL_GPIO_Init+0x354>)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c54:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_GPIO_Init+0x354>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c78:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <HAL_GPIO_Init+0x354>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3301      	adds	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b0f      	cmp	r3, #15
 8002c88:	f67f ae86 	bls.w	8002998 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3724      	adds	r7, #36	; 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40013800 	.word	0x40013800
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40020400 	.word	0x40020400
 8002cac:	40020800 	.word	0x40020800
 8002cb0:	40020c00 	.word	0x40020c00
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40021400 	.word	0x40021400
 8002cbc:	40021800 	.word	0x40021800
 8002cc0:	40021c00 	.word	0x40021c00
 8002cc4:	40022000 	.word	0x40022000
 8002cc8:	40022400 	.word	0x40022400
 8002ccc:	40013c00 	.word	0x40013c00

08002cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	807b      	strh	r3, [r7, #2]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce0:	787b      	ldrb	r3, [r7, #1]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce6:	887a      	ldrh	r2, [r7, #2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002cec:	e003      	b.n	8002cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002cee:	887b      	ldrh	r3, [r7, #2]
 8002cf0:	041a      	lsls	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	619a      	str	r2, [r3, #24]
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d006      	beq.n	8002d28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d1a:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe fae6 	bl	80012f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40013c00 	.word	0x40013c00

08002d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e07f      	b.n	8002e46 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff f898 	bl	8001e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2224      	movs	r2, #36	; 0x24
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d107      	bne.n	8002dae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	e006      	b.n	8002dbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002dba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d104      	bne.n	8002dce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <HAL_I2C_Init+0x11c>)
 8002dda:	430b      	orrs	r3, r1
 8002ddc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69d9      	ldr	r1, [r3, #28]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1a      	ldr	r2, [r3, #32]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	02008000 	.word	0x02008000

08002e54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	4608      	mov	r0, r1
 8002e5e:	4611      	mov	r1, r2
 8002e60:	461a      	mov	r2, r3
 8002e62:	4603      	mov	r3, r0
 8002e64:	817b      	strh	r3, [r7, #10]
 8002e66:	460b      	mov	r3, r1
 8002e68:	813b      	strh	r3, [r7, #8]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	f040 80f9 	bne.w	800306e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_I2C_Mem_Write+0x34>
 8002e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0ed      	b.n	8003070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_I2C_Mem_Write+0x4e>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e0e6      	b.n	8003070 <HAL_I2C_Mem_Write+0x21c>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002eaa:	f7ff fb91 	bl	80025d0 <HAL_GetTick>
 8002eae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	2319      	movs	r3, #25
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 fac3 	bl	8003448 <I2C_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0d1      	b.n	8003070 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2221      	movs	r2, #33	; 0x21
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2240      	movs	r2, #64	; 0x40
 8002ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a3a      	ldr	r2, [r7, #32]
 8002ee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002eec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ef4:	88f8      	ldrh	r0, [r7, #6]
 8002ef6:	893a      	ldrh	r2, [r7, #8]
 8002ef8:	8979      	ldrh	r1, [r7, #10]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	4603      	mov	r3, r0
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f9d3 	bl	80032b0 <I2C_RequestMemoryWrite>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0a9      	b.n	8003070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2bff      	cmp	r3, #255	; 0xff
 8002f24:	d90e      	bls.n	8002f44 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	22ff      	movs	r2, #255	; 0xff
 8002f2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	8979      	ldrh	r1, [r7, #10]
 8002f34:	2300      	movs	r3, #0
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 fc2b 	bl	8003798 <I2C_TransferConfig>
 8002f42:	e00f      	b.n	8002f64 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	8979      	ldrh	r1, [r7, #10]
 8002f56:	2300      	movs	r3, #0
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fc1a 	bl	8003798 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 faad 	bl	80034c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e07b      	b.n	8003070 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d034      	beq.n	800301c <HAL_I2C_Mem_Write+0x1c8>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d130      	bne.n	800301c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2180      	movs	r1, #128	; 0x80
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 fa3f 	bl	8003448 <I2C_WaitOnFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e04d      	b.n	8003070 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2bff      	cmp	r3, #255	; 0xff
 8002fdc:	d90e      	bls.n	8002ffc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	22ff      	movs	r2, #255	; 0xff
 8002fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	8979      	ldrh	r1, [r7, #10]
 8002fec:	2300      	movs	r3, #0
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 fbcf 	bl	8003798 <I2C_TransferConfig>
 8002ffa:	e00f      	b.n	800301c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300a:	b2da      	uxtb	r2, r3
 800300c:	8979      	ldrh	r1, [r7, #10]
 800300e:	2300      	movs	r3, #0
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 fbbe 	bl	8003798 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d19e      	bne.n	8002f64 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fa8c 	bl	8003548 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e01a      	b.n	8003070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2220      	movs	r2, #32
 8003040:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <HAL_I2C_Mem_Write+0x224>)
 800304e:	400b      	ands	r3, r1
 8003050:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	e000      	b.n	8003070 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800306e:	2302      	movs	r3, #2
  }
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	fe00e800 	.word	0xfe00e800

0800307c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af02      	add	r7, sp, #8
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	4608      	mov	r0, r1
 8003086:	4611      	mov	r1, r2
 8003088:	461a      	mov	r2, r3
 800308a:	4603      	mov	r3, r0
 800308c:	817b      	strh	r3, [r7, #10]
 800308e:	460b      	mov	r3, r1
 8003090:	813b      	strh	r3, [r7, #8]
 8003092:	4613      	mov	r3, r2
 8003094:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b20      	cmp	r3, #32
 80030a0:	f040 80fd 	bne.w	800329e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_I2C_Mem_Read+0x34>
 80030aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d105      	bne.n	80030bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0f1      	b.n	80032a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_I2C_Mem_Read+0x4e>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e0ea      	b.n	80032a0 <HAL_I2C_Mem_Read+0x224>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030d2:	f7ff fa7d 	bl	80025d0 <HAL_GetTick>
 80030d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2319      	movs	r3, #25
 80030de:	2201      	movs	r2, #1
 80030e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f9af 	bl	8003448 <I2C_WaitOnFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0d5      	b.n	80032a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2222      	movs	r2, #34	; 0x22
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2240      	movs	r2, #64	; 0x40
 8003100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a3a      	ldr	r2, [r7, #32]
 800310e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003114:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800311c:	88f8      	ldrh	r0, [r7, #6]
 800311e:	893a      	ldrh	r2, [r7, #8]
 8003120:	8979      	ldrh	r1, [r7, #10]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	4603      	mov	r3, r0
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f913 	bl	8003358 <I2C_RequestMemoryRead>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0ad      	b.n	80032a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	2bff      	cmp	r3, #255	; 0xff
 800314c:	d90e      	bls.n	800316c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	22ff      	movs	r2, #255	; 0xff
 8003152:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003158:	b2da      	uxtb	r2, r3
 800315a:	8979      	ldrh	r1, [r7, #10]
 800315c:	4b52      	ldr	r3, [pc, #328]	; (80032a8 <HAL_I2C_Mem_Read+0x22c>)
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fb17 	bl	8003798 <I2C_TransferConfig>
 800316a:	e00f      	b.n	800318c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	b2da      	uxtb	r2, r3
 800317c:	8979      	ldrh	r1, [r7, #10]
 800317e:	4b4a      	ldr	r3, [pc, #296]	; (80032a8 <HAL_I2C_Mem_Read+0x22c>)
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 fb06 	bl	8003798 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	2200      	movs	r2, #0
 8003194:	2104      	movs	r1, #4
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f956 	bl	8003448 <I2C_WaitOnFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e07c      	b.n	80032a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d034      	beq.n	800324c <HAL_I2C_Mem_Read+0x1d0>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d130      	bne.n	800324c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	2200      	movs	r2, #0
 80031f2:	2180      	movs	r1, #128	; 0x80
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f927 	bl	8003448 <I2C_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e04d      	b.n	80032a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	2bff      	cmp	r3, #255	; 0xff
 800320c:	d90e      	bls.n	800322c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	22ff      	movs	r2, #255	; 0xff
 8003212:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003218:	b2da      	uxtb	r2, r3
 800321a:	8979      	ldrh	r1, [r7, #10]
 800321c:	2300      	movs	r3, #0
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fab7 	bl	8003798 <I2C_TransferConfig>
 800322a:	e00f      	b.n	800324c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323a:	b2da      	uxtb	r2, r3
 800323c:	8979      	ldrh	r1, [r7, #10]
 800323e:	2300      	movs	r3, #0
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 faa6 	bl	8003798 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d19a      	bne.n	800318c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f974 	bl	8003548 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e01a      	b.n	80032a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2220      	movs	r2, #32
 8003270:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_I2C_Mem_Read+0x230>)
 800327e:	400b      	ands	r3, r1
 8003280:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	e000      	b.n	80032a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800329e:	2302      	movs	r3, #2
  }
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	80002400 	.word	0x80002400
 80032ac:	fe00e800 	.word	0xfe00e800

080032b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	461a      	mov	r2, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	817b      	strh	r3, [r7, #10]
 80032c2:	460b      	mov	r3, r1
 80032c4:	813b      	strh	r3, [r7, #8]
 80032c6:	4613      	mov	r3, r2
 80032c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	8979      	ldrh	r1, [r7, #10]
 80032d0:	4b20      	ldr	r3, [pc, #128]	; (8003354 <I2C_RequestMemoryWrite+0xa4>)
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 fa5d 	bl	8003798 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	69b9      	ldr	r1, [r7, #24]
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f8f0 	bl	80034c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e02c      	b.n	800334c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d105      	bne.n	8003304 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032f8:	893b      	ldrh	r3, [r7, #8]
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	629a      	str	r2, [r3, #40]	; 0x28
 8003302:	e015      	b.n	8003330 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003304:	893b      	ldrh	r3, [r7, #8]
 8003306:	0a1b      	lsrs	r3, r3, #8
 8003308:	b29b      	uxth	r3, r3
 800330a:	b2da      	uxtb	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	69b9      	ldr	r1, [r7, #24]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f8d6 	bl	80034c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e012      	b.n	800334c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003326:	893b      	ldrh	r3, [r7, #8]
 8003328:	b2da      	uxtb	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2200      	movs	r2, #0
 8003338:	2180      	movs	r1, #128	; 0x80
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f884 	bl	8003448 <I2C_WaitOnFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	80002000 	.word	0x80002000

08003358 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	4608      	mov	r0, r1
 8003362:	4611      	mov	r1, r2
 8003364:	461a      	mov	r2, r3
 8003366:	4603      	mov	r3, r0
 8003368:	817b      	strh	r3, [r7, #10]
 800336a:	460b      	mov	r3, r1
 800336c:	813b      	strh	r3, [r7, #8]
 800336e:	4613      	mov	r3, r2
 8003370:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	8979      	ldrh	r1, [r7, #10]
 8003378:	4b20      	ldr	r3, [pc, #128]	; (80033fc <I2C_RequestMemoryRead+0xa4>)
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	2300      	movs	r3, #0
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fa0a 	bl	8003798 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	69b9      	ldr	r1, [r7, #24]
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f89d 	bl	80034c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e02c      	b.n	80033f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003398:	88fb      	ldrh	r3, [r7, #6]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d105      	bne.n	80033aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800339e:	893b      	ldrh	r3, [r7, #8]
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28
 80033a8:	e015      	b.n	80033d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033aa:	893b      	ldrh	r3, [r7, #8]
 80033ac:	0a1b      	lsrs	r3, r3, #8
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b8:	69fa      	ldr	r2, [r7, #28]
 80033ba:	69b9      	ldr	r1, [r7, #24]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f883 	bl	80034c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e012      	b.n	80033f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033cc:	893b      	ldrh	r3, [r7, #8]
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2200      	movs	r2, #0
 80033de:	2140      	movs	r1, #64	; 0x40
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f831 	bl	8003448 <I2C_WaitOnFlagUntilTimeout>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	80002000 	.word	0x80002000

08003400 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b02      	cmp	r3, #2
 8003414:	d103      	bne.n	800341e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2200      	movs	r2, #0
 800341c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d007      	beq.n	800343c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	619a      	str	r2, [r3, #24]
  }
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003458:	e022      	b.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d01e      	beq.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7ff f8b5 	bl	80025d0 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d113      	bne.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	f043 0220 	orr.w	r2, r3, #32
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e00f      	b.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4013      	ands	r3, r2
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d0cd      	beq.n	800345a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034d4:	e02c      	b.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f870 	bl	80035c0 <I2C_IsErrorOccurred>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e02a      	b.n	8003540 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f0:	d01e      	beq.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f2:	f7ff f86d 	bl	80025d0 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d302      	bcc.n	8003508 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d113      	bne.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	f043 0220 	orr.w	r2, r3, #32
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e007      	b.n	8003540 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b02      	cmp	r3, #2
 800353c:	d1cb      	bne.n	80034d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003554:	e028      	b.n	80035a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f830 	bl	80035c0 <I2C_IsErrorOccurred>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e026      	b.n	80035b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356a:	f7ff f831 	bl	80025d0 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	d302      	bcc.n	8003580 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d113      	bne.n	80035a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	f043 0220 	orr.w	r2, r3, #32
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e007      	b.n	80035b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b20      	cmp	r3, #32
 80035b4:	d1cf      	bne.n	8003556 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	; 0x28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	f003 0310 	and.w	r3, r3, #16
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d075      	beq.n	80036d8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2210      	movs	r2, #16
 80035f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035f4:	e056      	b.n	80036a4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fc:	d052      	beq.n	80036a4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7fe ffe7 	bl	80025d0 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <I2C_IsErrorOccurred+0x54>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d147      	bne.n	80036a4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800361e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003626:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003636:	d12e      	bne.n	8003696 <I2C_IsErrorOccurred+0xd6>
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800363e:	d02a      	beq.n	8003696 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	2b20      	cmp	r3, #32
 8003644:	d027      	beq.n	8003696 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003654:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003656:	f7fe ffbb 	bl	80025d0 <HAL_GetTick>
 800365a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800365c:	e01b      	b.n	8003696 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800365e:	f7fe ffb7 	bl	80025d0 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b19      	cmp	r3, #25
 800366a:	d914      	bls.n	8003696 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003670:	f043 0220 	orr.w	r2, r3, #32
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d1dc      	bne.n	800365e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d003      	beq.n	80036ba <I2C_IsErrorOccurred+0xfa>
 80036b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d09d      	beq.n	80035f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d103      	bne.n	80036ca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2220      	movs	r2, #32
 80036c8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	f043 0304 	orr.w	r3, r3, #4
 80036d0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00b      	beq.n	8003702 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00b      	beq.n	8003724 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	f043 0308 	orr.w	r3, r3, #8
 8003712:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800371c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	f043 0302 	orr.w	r3, r3, #2
 8003734:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800373e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800374a:	2b00      	cmp	r3, #0
 800374c:	d01c      	beq.n	8003788 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f7ff fe56 	bl	8003400 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6859      	ldr	r1, [r3, #4]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <I2C_IsErrorOccurred+0x1d4>)
 8003760:	400b      	ands	r3, r1
 8003762:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	431a      	orrs	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800378c:	4618      	mov	r0, r3
 800378e:	3728      	adds	r7, #40	; 0x28
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	fe00e800 	.word	0xfe00e800

08003798 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	607b      	str	r3, [r7, #4]
 80037a2:	460b      	mov	r3, r1
 80037a4:	817b      	strh	r3, [r7, #10]
 80037a6:	4613      	mov	r3, r2
 80037a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037aa:	897b      	ldrh	r3, [r7, #10]
 80037ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037b0:	7a7b      	ldrb	r3, [r7, #9]
 80037b2:	041b      	lsls	r3, r3, #16
 80037b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037b8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037c6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	0d5b      	lsrs	r3, r3, #21
 80037d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80037d6:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <I2C_TransferConfig+0x60>)
 80037d8:	430b      	orrs	r3, r1
 80037da:	43db      	mvns	r3, r3
 80037dc:	ea02 0103 	and.w	r1, r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037ea:	bf00      	nop
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	03ff63ff 	.word	0x03ff63ff

080037fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b20      	cmp	r3, #32
 8003810:	d138      	bne.n	8003884 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800381c:	2302      	movs	r3, #2
 800381e:	e032      	b.n	8003886 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2224      	movs	r2, #36	; 0x24
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800384e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6819      	ldr	r1, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	e000      	b.n	8003886 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003884:	2302      	movs	r3, #2
  }
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003892:	b480      	push	{r7}
 8003894:	b085      	sub	sp, #20
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d139      	bne.n	800391c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e033      	b.n	800391e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2224      	movs	r2, #36	; 0x24
 80038c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800392a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800392c:	b08f      	sub	sp, #60	; 0x3c
 800392e:	af0a      	add	r7, sp, #40	; 0x28
 8003930:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e116      	b.n	8003b6a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fe fc1e 	bl	8002198 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2203      	movs	r2, #3
 8003960:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d102      	bne.n	8003976 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f003 ff0a 	bl	8007794 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	687e      	ldr	r6, [r7, #4]
 8003988:	466d      	mov	r5, sp
 800398a:	f106 0410 	add.w	r4, r6, #16
 800398e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003996:	e894 0003 	ldmia.w	r4, {r0, r1}
 800399a:	e885 0003 	stmia.w	r5, {r0, r1}
 800399e:	1d33      	adds	r3, r6, #4
 80039a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039a2:	6838      	ldr	r0, [r7, #0]
 80039a4:	f003 fe9e 	bl	80076e4 <USB_CoreInit>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2202      	movs	r2, #2
 80039b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e0d7      	b.n	8003b6a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f003 fef8 	bl	80077b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039c6:	2300      	movs	r3, #0
 80039c8:	73fb      	strb	r3, [r7, #15]
 80039ca:	e04a      	b.n	8003a62 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039cc:	7bfa      	ldrb	r2, [r7, #15]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	333d      	adds	r3, #61	; 0x3d
 80039dc:	2201      	movs	r2, #1
 80039de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039e0:	7bfa      	ldrb	r2, [r7, #15]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	333c      	adds	r3, #60	; 0x3c
 80039f0:	7bfa      	ldrb	r2, [r7, #15]
 80039f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039f4:	7bfa      	ldrb	r2, [r7, #15]
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	b298      	uxth	r0, r3
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	3342      	adds	r3, #66	; 0x42
 8003a08:	4602      	mov	r2, r0
 8003a0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a0c:	7bfa      	ldrb	r2, [r7, #15]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	333f      	adds	r3, #63	; 0x3f
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a20:	7bfa      	ldrb	r2, [r7, #15]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	3344      	adds	r3, #68	; 0x44
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a34:	7bfa      	ldrb	r2, [r7, #15]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	3348      	adds	r3, #72	; 0x48
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3350      	adds	r3, #80	; 0x50
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d3af      	bcc.n	80039cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	73fb      	strb	r3, [r7, #15]
 8003a70:	e044      	b.n	8003afc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a72:	7bfa      	ldrb	r2, [r7, #15]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a88:	7bfa      	ldrb	r2, [r7, #15]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003a9a:	7bfa      	ldrb	r2, [r7, #15]
 8003a9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a9e:	7bfa      	ldrb	r2, [r7, #15]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003aca:	7bfa      	ldrb	r2, [r7, #15]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ae0:	7bfa      	ldrb	r2, [r7, #15]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	3301      	adds	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
 8003afc:	7bfa      	ldrb	r2, [r7, #15]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d3b5      	bcc.n	8003a72 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	687e      	ldr	r6, [r7, #4]
 8003b0e:	466d      	mov	r5, sp
 8003b10:	f106 0410 	add.w	r4, r6, #16
 8003b14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b20:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b24:	1d33      	adds	r3, r6, #4
 8003b26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b28:	6838      	ldr	r0, [r7, #0]
 8003b2a:	f003 fe91 	bl	8007850 <USB_DevInit>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e014      	b.n	8003b6a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d102      	bne.n	8003b5e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f80b 	bl	8003b74 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f004 f84b 	bl	8007bfe <USB_DevDisconnect>

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003b74 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ba2:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	10000003 	.word	0x10000003

08003bbc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a04      	ldr	r2, [pc, #16]	; (8003bd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bca:	6013      	str	r3, [r2, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40007000 	.word	0x40007000

08003bdc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003be6:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <HAL_PWREx_EnableOverDrive+0x98>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	4a22      	ldr	r2, [pc, #136]	; (8003c74 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf2:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bfe:	4b1e      	ldr	r3, [pc, #120]	; (8003c78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1d      	ldr	r2, [pc, #116]	; (8003c78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c08:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c0a:	f7fe fce1 	bl	80025d0 <HAL_GetTick>
 8003c0e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c10:	e009      	b.n	8003c26 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c12:	f7fe fcdd 	bl	80025d0 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c20:	d901      	bls.n	8003c26 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e022      	b.n	8003c6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c26:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c32:	d1ee      	bne.n	8003c12 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c34:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a0f      	ldr	r2, [pc, #60]	; (8003c78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c3e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c40:	f7fe fcc6 	bl	80025d0 <HAL_GetTick>
 8003c44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c46:	e009      	b.n	8003c5c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c48:	f7fe fcc2 	bl	80025d0 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c56:	d901      	bls.n	8003c5c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e007      	b.n	8003c6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c5c:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c68:	d1ee      	bne.n	8003c48 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40007000 	.word	0x40007000

08003c7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c84:	2300      	movs	r3, #0
 8003c86:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e29b      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 8087 	beq.w	8003dae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ca0:	4b96      	ldr	r3, [pc, #600]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d00c      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cac:	4b93      	ldr	r3, [pc, #588]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d112      	bne.n	8003cde <HAL_RCC_OscConfig+0x62>
 8003cb8:	4b90      	ldr	r3, [pc, #576]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc4:	d10b      	bne.n	8003cde <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc6:	4b8d      	ldr	r3, [pc, #564]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d06c      	beq.n	8003dac <HAL_RCC_OscConfig+0x130>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d168      	bne.n	8003dac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e275      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce6:	d106      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x7a>
 8003ce8:	4b84      	ldr	r3, [pc, #528]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a83      	ldr	r2, [pc, #524]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	e02e      	b.n	8003d54 <HAL_RCC_OscConfig+0xd8>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x9c>
 8003cfe:	4b7f      	ldr	r3, [pc, #508]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a7e      	ldr	r2, [pc, #504]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	4b7c      	ldr	r3, [pc, #496]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a7b      	ldr	r2, [pc, #492]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e01d      	b.n	8003d54 <HAL_RCC_OscConfig+0xd8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0xc0>
 8003d22:	4b76      	ldr	r3, [pc, #472]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a75      	ldr	r2, [pc, #468]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	4b73      	ldr	r3, [pc, #460]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a72      	ldr	r2, [pc, #456]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCC_OscConfig+0xd8>
 8003d3c:	4b6f      	ldr	r3, [pc, #444]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a6e      	ldr	r2, [pc, #440]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	4b6c      	ldr	r3, [pc, #432]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a6b      	ldr	r2, [pc, #428]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d013      	beq.n	8003d84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe fc38 	bl	80025d0 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fe fc34 	bl	80025d0 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	; 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e229      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d76:	4b61      	ldr	r3, [pc, #388]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0xe8>
 8003d82:	e014      	b.n	8003dae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fe fc24 	bl	80025d0 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d8c:	f7fe fc20 	bl	80025d0 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	; 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e215      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9e:	4b57      	ldr	r3, [pc, #348]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x110>
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d069      	beq.n	8003e8e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dba:	4b50      	ldr	r3, [pc, #320]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc6:	4b4d      	ldr	r3, [pc, #308]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d11c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x190>
 8003dd2:	4b4a      	ldr	r3, [pc, #296]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d116      	bne.n	8003e0c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dde:	4b47      	ldr	r3, [pc, #284]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_RCC_OscConfig+0x17a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d001      	beq.n	8003df6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e1e9      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df6:	4b41      	ldr	r3, [pc, #260]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	493d      	ldr	r1, [pc, #244]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0a:	e040      	b.n	8003e8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d023      	beq.n	8003e5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e14:	4b39      	ldr	r3, [pc, #228]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a38      	ldr	r2, [pc, #224]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7fe fbd6 	bl	80025d0 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e28:	f7fe fbd2 	bl	80025d0 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e1c7      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3a:	4b30      	ldr	r3, [pc, #192]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e46:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4929      	ldr	r1, [pc, #164]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]
 8003e5a:	e018      	b.n	8003e8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e5c:	4b27      	ldr	r3, [pc, #156]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a26      	ldr	r2, [pc, #152]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fe fbb2 	bl	80025d0 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e70:	f7fe fbae 	bl	80025d0 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e1a3      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e82:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d038      	beq.n	8003f0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d019      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea2:	4b16      	ldr	r3, [pc, #88]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea6:	4a15      	ldr	r2, [pc, #84]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eae:	f7fe fb8f 	bl	80025d0 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb6:	f7fe fb8b 	bl	80025d0 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e180      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f0      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x23a>
 8003ed4:	e01a      	b.n	8003f0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eda:	4a08      	ldr	r2, [pc, #32]	; (8003efc <HAL_RCC_OscConfig+0x280>)
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee2:	f7fe fb75 	bl	80025d0 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee8:	e00a      	b.n	8003f00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eea:	f7fe fb71 	bl	80025d0 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d903      	bls.n	8003f00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e166      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
 8003efc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f00:	4b92      	ldr	r3, [pc, #584]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1ee      	bne.n	8003eea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 80a4 	beq.w	8004062 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f1a:	4b8c      	ldr	r3, [pc, #560]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10d      	bne.n	8003f42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f26:	4b89      	ldr	r3, [pc, #548]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	4a88      	ldr	r2, [pc, #544]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6413      	str	r3, [r2, #64]	; 0x40
 8003f32:	4b86      	ldr	r3, [pc, #536]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	60bb      	str	r3, [r7, #8]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f42:	4b83      	ldr	r3, [pc, #524]	; (8004150 <HAL_RCC_OscConfig+0x4d4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d118      	bne.n	8003f80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f4e:	4b80      	ldr	r3, [pc, #512]	; (8004150 <HAL_RCC_OscConfig+0x4d4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a7f      	ldr	r2, [pc, #508]	; (8004150 <HAL_RCC_OscConfig+0x4d4>)
 8003f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f5a:	f7fe fb39 	bl	80025d0 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f62:	f7fe fb35 	bl	80025d0 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b64      	cmp	r3, #100	; 0x64
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e12a      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f74:	4b76      	ldr	r3, [pc, #472]	; (8004150 <HAL_RCC_OscConfig+0x4d4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d106      	bne.n	8003f96 <HAL_RCC_OscConfig+0x31a>
 8003f88:	4b70      	ldr	r3, [pc, #448]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	4a6f      	ldr	r2, [pc, #444]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	6713      	str	r3, [r2, #112]	; 0x70
 8003f94:	e02d      	b.n	8003ff2 <HAL_RCC_OscConfig+0x376>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x33c>
 8003f9e:	4b6b      	ldr	r3, [pc, #428]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa2:	4a6a      	ldr	r2, [pc, #424]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8003faa:	4b68      	ldr	r3, [pc, #416]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fae:	4a67      	ldr	r2, [pc, #412]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fb0:	f023 0304 	bic.w	r3, r3, #4
 8003fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb6:	e01c      	b.n	8003ff2 <HAL_RCC_OscConfig+0x376>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b05      	cmp	r3, #5
 8003fbe:	d10c      	bne.n	8003fda <HAL_RCC_OscConfig+0x35e>
 8003fc0:	4b62      	ldr	r3, [pc, #392]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	4a61      	ldr	r2, [pc, #388]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fc6:	f043 0304 	orr.w	r3, r3, #4
 8003fca:	6713      	str	r3, [r2, #112]	; 0x70
 8003fcc:	4b5f      	ldr	r3, [pc, #380]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	4a5e      	ldr	r2, [pc, #376]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd8:	e00b      	b.n	8003ff2 <HAL_RCC_OscConfig+0x376>
 8003fda:	4b5c      	ldr	r3, [pc, #368]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	4a5b      	ldr	r2, [pc, #364]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe6:	4b59      	ldr	r3, [pc, #356]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fea:	4a58      	ldr	r2, [pc, #352]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8003fec:	f023 0304 	bic.w	r3, r3, #4
 8003ff0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d015      	beq.n	8004026 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffa:	f7fe fae9 	bl	80025d0 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004000:	e00a      	b.n	8004018 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004002:	f7fe fae5 	bl	80025d0 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004010:	4293      	cmp	r3, r2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e0d8      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004018:	4b4c      	ldr	r3, [pc, #304]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0ee      	beq.n	8004002 <HAL_RCC_OscConfig+0x386>
 8004024:	e014      	b.n	8004050 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004026:	f7fe fad3 	bl	80025d0 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800402c:	e00a      	b.n	8004044 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800402e:	f7fe facf 	bl	80025d0 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f241 3288 	movw	r2, #5000	; 0x1388
 800403c:	4293      	cmp	r3, r2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e0c2      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004044:	4b41      	ldr	r3, [pc, #260]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1ee      	bne.n	800402e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004050:	7dfb      	ldrb	r3, [r7, #23]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d105      	bne.n	8004062 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004056:	4b3d      	ldr	r3, [pc, #244]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	4a3c      	ldr	r2, [pc, #240]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 800405c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004060:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80ae 	beq.w	80041c8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800406c:	4b37      	ldr	r3, [pc, #220]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 030c 	and.w	r3, r3, #12
 8004074:	2b08      	cmp	r3, #8
 8004076:	d06d      	beq.n	8004154 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d14b      	bne.n	8004118 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004080:	4b32      	ldr	r3, [pc, #200]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a31      	ldr	r2, [pc, #196]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8004086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800408a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fe faa0 	bl	80025d0 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004094:	f7fe fa9c 	bl	80025d0 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e091      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	4b29      	ldr	r3, [pc, #164]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69da      	ldr	r2, [r3, #28]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	019b      	lsls	r3, r3, #6
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	3b01      	subs	r3, #1
 80040cc:	041b      	lsls	r3, r3, #16
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	061b      	lsls	r3, r3, #24
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	071b      	lsls	r3, r3, #28
 80040de:	491b      	ldr	r1, [pc, #108]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e4:	4b19      	ldr	r3, [pc, #100]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a18      	ldr	r2, [pc, #96]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 80040ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7fe fa6e 	bl	80025d0 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fe fa6a 	bl	80025d0 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e05f      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0x47c>
 8004116:	e057      	b.n	80041c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004118:	4b0c      	ldr	r3, [pc, #48]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a0b      	ldr	r2, [pc, #44]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 800411e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004124:	f7fe fa54 	bl	80025d0 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412c:	f7fe fa50 	bl	80025d0 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e045      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413e:	4b03      	ldr	r3, [pc, #12]	; (800414c <HAL_RCC_OscConfig+0x4d0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x4b0>
 800414a:	e03d      	b.n	80041c8 <HAL_RCC_OscConfig+0x54c>
 800414c:	40023800 	.word	0x40023800
 8004150:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004154:	4b1f      	ldr	r3, [pc, #124]	; (80041d4 <HAL_RCC_OscConfig+0x558>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d030      	beq.n	80041c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800416c:	429a      	cmp	r2, r3
 800416e:	d129      	bne.n	80041c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417a:	429a      	cmp	r2, r3
 800417c:	d122      	bne.n	80041c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004184:	4013      	ands	r3, r2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800418a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800418c:	4293      	cmp	r3, r2
 800418e:	d119      	bne.n	80041c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	085b      	lsrs	r3, r3, #1
 800419c:	3b01      	subs	r3, #1
 800419e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d10f      	bne.n	80041c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40023800 	.word	0x40023800

080041d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0d0      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041f0:	4b6a      	ldr	r3, [pc, #424]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d910      	bls.n	8004220 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b67      	ldr	r3, [pc, #412]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 020f 	bic.w	r2, r3, #15
 8004206:	4965      	ldr	r1, [pc, #404]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	4313      	orrs	r3, r2
 800420c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	4b63      	ldr	r3, [pc, #396]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0b8      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d020      	beq.n	800426e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004238:	4b59      	ldr	r3, [pc, #356]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4a58      	ldr	r2, [pc, #352]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 800423e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004242:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004250:	4b53      	ldr	r3, [pc, #332]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4a52      	ldr	r2, [pc, #328]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004256:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800425a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800425c:	4b50      	ldr	r3, [pc, #320]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	494d      	ldr	r1, [pc, #308]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d040      	beq.n	80042fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004282:	4b47      	ldr	r3, [pc, #284]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d115      	bne.n	80042ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e07f      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d107      	bne.n	80042aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429a:	4b41      	ldr	r3, [pc, #260]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e073      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042aa:	4b3d      	ldr	r3, [pc, #244]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e06b      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ba:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f023 0203 	bic.w	r2, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	4936      	ldr	r1, [pc, #216]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042cc:	f7fe f980 	bl	80025d0 <HAL_GetTick>
 80042d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	e00a      	b.n	80042ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d4:	f7fe f97c 	bl	80025d0 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e053      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ea:	4b2d      	ldr	r3, [pc, #180]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 020c 	and.w	r2, r3, #12
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d1eb      	bne.n	80042d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042fc:	4b27      	ldr	r3, [pc, #156]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d210      	bcs.n	800432c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430a:	4b24      	ldr	r3, [pc, #144]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 020f 	bic.w	r2, r3, #15
 8004312:	4922      	ldr	r1, [pc, #136]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b20      	ldr	r3, [pc, #128]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e032      	b.n	8004392 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004338:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4916      	ldr	r1, [pc, #88]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004356:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	490e      	ldr	r1, [pc, #56]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004366:	4313      	orrs	r3, r2
 8004368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800436a:	f000 f821 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 800436e:	4602      	mov	r2, r0
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	490a      	ldr	r1, [pc, #40]	; (80043a4 <HAL_RCC_ClockConfig+0x1cc>)
 800437c:	5ccb      	ldrb	r3, [r1, r3]
 800437e:	fa22 f303 	lsr.w	r3, r2, r3
 8004382:	4a09      	ldr	r2, [pc, #36]	; (80043a8 <HAL_RCC_ClockConfig+0x1d0>)
 8004384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004386:	4b09      	ldr	r3, [pc, #36]	; (80043ac <HAL_RCC_ClockConfig+0x1d4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe f8dc 	bl	8002548 <HAL_InitTick>

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023c00 	.word	0x40023c00
 80043a0:	40023800 	.word	0x40023800
 80043a4:	0800f388 	.word	0x0800f388
 80043a8:	20000004 	.word	0x20000004
 80043ac:	20000008 	.word	0x20000008

080043b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b4:	b094      	sub	sp, #80	; 0x50
 80043b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	647b      	str	r3, [r7, #68]	; 0x44
 80043bc:	2300      	movs	r3, #0
 80043be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c0:	2300      	movs	r3, #0
 80043c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043c8:	4b79      	ldr	r3, [pc, #484]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 030c 	and.w	r3, r3, #12
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d00d      	beq.n	80043f0 <HAL_RCC_GetSysClockFreq+0x40>
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	f200 80e1 	bhi.w	800459c <HAL_RCC_GetSysClockFreq+0x1ec>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0x34>
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d003      	beq.n	80043ea <HAL_RCC_GetSysClockFreq+0x3a>
 80043e2:	e0db      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043e4:	4b73      	ldr	r3, [pc, #460]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80043e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043e8:	e0db      	b.n	80045a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ea:	4b73      	ldr	r3, [pc, #460]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80043ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043ee:	e0d8      	b.n	80045a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043f0:	4b6f      	ldr	r3, [pc, #444]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043fa:	4b6d      	ldr	r3, [pc, #436]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d063      	beq.n	80044ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004406:	4b6a      	ldr	r3, [pc, #424]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	099b      	lsrs	r3, r3, #6
 800440c:	2200      	movs	r2, #0
 800440e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004410:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004418:	633b      	str	r3, [r7, #48]	; 0x30
 800441a:	2300      	movs	r3, #0
 800441c:	637b      	str	r3, [r7, #52]	; 0x34
 800441e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004422:	4622      	mov	r2, r4
 8004424:	462b      	mov	r3, r5
 8004426:	f04f 0000 	mov.w	r0, #0
 800442a:	f04f 0100 	mov.w	r1, #0
 800442e:	0159      	lsls	r1, r3, #5
 8004430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004434:	0150      	lsls	r0, r2, #5
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4621      	mov	r1, r4
 800443c:	1a51      	subs	r1, r2, r1
 800443e:	6139      	str	r1, [r7, #16]
 8004440:	4629      	mov	r1, r5
 8004442:	eb63 0301 	sbc.w	r3, r3, r1
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004454:	4659      	mov	r1, fp
 8004456:	018b      	lsls	r3, r1, #6
 8004458:	4651      	mov	r1, sl
 800445a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800445e:	4651      	mov	r1, sl
 8004460:	018a      	lsls	r2, r1, #6
 8004462:	4651      	mov	r1, sl
 8004464:	ebb2 0801 	subs.w	r8, r2, r1
 8004468:	4659      	mov	r1, fp
 800446a:	eb63 0901 	sbc.w	r9, r3, r1
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800447a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800447e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004482:	4690      	mov	r8, r2
 8004484:	4699      	mov	r9, r3
 8004486:	4623      	mov	r3, r4
 8004488:	eb18 0303 	adds.w	r3, r8, r3
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	462b      	mov	r3, r5
 8004490:	eb49 0303 	adc.w	r3, r9, r3
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044a2:	4629      	mov	r1, r5
 80044a4:	024b      	lsls	r3, r1, #9
 80044a6:	4621      	mov	r1, r4
 80044a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044ac:	4621      	mov	r1, r4
 80044ae:	024a      	lsls	r2, r1, #9
 80044b0:	4610      	mov	r0, r2
 80044b2:	4619      	mov	r1, r3
 80044b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b6:	2200      	movs	r2, #0
 80044b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044c0:	f7fc f8d2 	bl	8000668 <__aeabi_uldivmod>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4613      	mov	r3, r2
 80044ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044cc:	e058      	b.n	8004580 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ce:	4b38      	ldr	r3, [pc, #224]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	099b      	lsrs	r3, r3, #6
 80044d4:	2200      	movs	r2, #0
 80044d6:	4618      	mov	r0, r3
 80044d8:	4611      	mov	r1, r2
 80044da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044de:	623b      	str	r3, [r7, #32]
 80044e0:	2300      	movs	r3, #0
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
 80044e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044e8:	4642      	mov	r2, r8
 80044ea:	464b      	mov	r3, r9
 80044ec:	f04f 0000 	mov.w	r0, #0
 80044f0:	f04f 0100 	mov.w	r1, #0
 80044f4:	0159      	lsls	r1, r3, #5
 80044f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044fa:	0150      	lsls	r0, r2, #5
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4641      	mov	r1, r8
 8004502:	ebb2 0a01 	subs.w	sl, r2, r1
 8004506:	4649      	mov	r1, r9
 8004508:	eb63 0b01 	sbc.w	fp, r3, r1
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004518:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800451c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004520:	ebb2 040a 	subs.w	r4, r2, sl
 8004524:	eb63 050b 	sbc.w	r5, r3, fp
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	00eb      	lsls	r3, r5, #3
 8004532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004536:	00e2      	lsls	r2, r4, #3
 8004538:	4614      	mov	r4, r2
 800453a:	461d      	mov	r5, r3
 800453c:	4643      	mov	r3, r8
 800453e:	18e3      	adds	r3, r4, r3
 8004540:	603b      	str	r3, [r7, #0]
 8004542:	464b      	mov	r3, r9
 8004544:	eb45 0303 	adc.w	r3, r5, r3
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004556:	4629      	mov	r1, r5
 8004558:	028b      	lsls	r3, r1, #10
 800455a:	4621      	mov	r1, r4
 800455c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004560:	4621      	mov	r1, r4
 8004562:	028a      	lsls	r2, r1, #10
 8004564:	4610      	mov	r0, r2
 8004566:	4619      	mov	r1, r3
 8004568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800456a:	2200      	movs	r2, #0
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	61fa      	str	r2, [r7, #28]
 8004570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004574:	f7fc f878 	bl	8000668 <__aeabi_uldivmod>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4613      	mov	r3, r2
 800457e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	0c1b      	lsrs	r3, r3, #16
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	3301      	adds	r3, #1
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004590:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004594:	fbb2 f3f3 	udiv	r3, r2, r3
 8004598:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800459a:	e002      	b.n	80045a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800459c:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800459e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3750      	adds	r7, #80	; 0x50
 80045a8:	46bd      	mov	sp, r7
 80045aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ae:	bf00      	nop
 80045b0:	40023800 	.word	0x40023800
 80045b4:	00f42400 	.word	0x00f42400
 80045b8:	007a1200 	.word	0x007a1200

080045bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c0:	4b03      	ldr	r3, [pc, #12]	; (80045d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045c2:	681b      	ldr	r3, [r3, #0]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000004 	.word	0x20000004

080045d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045d8:	f7ff fff0 	bl	80045bc <HAL_RCC_GetHCLKFreq>
 80045dc:	4602      	mov	r2, r0
 80045de:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	0a9b      	lsrs	r3, r3, #10
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	4903      	ldr	r1, [pc, #12]	; (80045f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ea:	5ccb      	ldrb	r3, [r1, r3]
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40023800 	.word	0x40023800
 80045f8:	0800f398 	.word	0x0800f398

080045fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004600:	f7ff ffdc 	bl	80045bc <HAL_RCC_GetHCLKFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	0b5b      	lsrs	r3, r3, #13
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	4903      	ldr	r1, [pc, #12]	; (8004620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004618:	4618      	mov	r0, r3
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40023800 	.word	0x40023800
 8004620:	0800f398 	.word	0x0800f398

08004624 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d012      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800464c:	4b69      	ldr	r3, [pc, #420]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4a68      	ldr	r2, [pc, #416]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004652:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004656:	6093      	str	r3, [r2, #8]
 8004658:	4b66      	ldr	r3, [pc, #408]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004660:	4964      	ldr	r1, [pc, #400]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004662:	4313      	orrs	r3, r2
 8004664:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800466e:	2301      	movs	r3, #1
 8004670:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d017      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800467e:	4b5d      	ldr	r3, [pc, #372]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004684:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468c:	4959      	ldr	r1, [pc, #356]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469c:	d101      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800469e:	2301      	movs	r3, #1
 80046a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80046aa:	2301      	movs	r3, #1
 80046ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d017      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046ba:	4b4e      	ldr	r3, [pc, #312]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	494a      	ldr	r1, [pc, #296]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d8:	d101      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80046da:	2301      	movs	r3, #1
 80046dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80046e6:	2301      	movs	r3, #1
 80046e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80046f6:	2301      	movs	r3, #1
 80046f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 808b 	beq.w	800481e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004708:	4b3a      	ldr	r3, [pc, #232]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	4a39      	ldr	r2, [pc, #228]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004712:	6413      	str	r3, [r2, #64]	; 0x40
 8004714:	4b37      	ldr	r3, [pc, #220]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004720:	4b35      	ldr	r3, [pc, #212]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a34      	ldr	r2, [pc, #208]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800472a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472c:	f7fd ff50 	bl	80025d0 <HAL_GetTick>
 8004730:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004734:	f7fd ff4c 	bl	80025d0 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	; 0x64
 8004740:	d901      	bls.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e38f      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004746:	4b2c      	ldr	r3, [pc, #176]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0f0      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004752:	4b28      	ldr	r3, [pc, #160]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d035      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	429a      	cmp	r2, r3
 800476e:	d02e      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004770:	4b20      	ldr	r3, [pc, #128]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004778:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800477a:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	4a1d      	ldr	r2, [pc, #116]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004784:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004786:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478a:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004790:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004792:	4a18      	ldr	r2, [pc, #96]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004798:	4b16      	ldr	r3, [pc, #88]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d114      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a4:	f7fd ff14 	bl	80025d0 <HAL_GetTick>
 80047a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047aa:	e00a      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ac:	f7fd ff10 	bl	80025d0 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e351      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c2:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0ee      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047da:	d111      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047e8:	4b04      	ldr	r3, [pc, #16]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047ea:	400b      	ands	r3, r1
 80047ec:	4901      	ldr	r1, [pc, #4]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	608b      	str	r3, [r1, #8]
 80047f2:	e00b      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80047f4:	40023800 	.word	0x40023800
 80047f8:	40007000 	.word	0x40007000
 80047fc:	0ffffcff 	.word	0x0ffffcff
 8004800:	4bac      	ldr	r3, [pc, #688]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4aab      	ldr	r2, [pc, #684]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004806:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800480a:	6093      	str	r3, [r2, #8]
 800480c:	4ba9      	ldr	r3, [pc, #676]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800480e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004818:	49a6      	ldr	r1, [pc, #664]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800481a:	4313      	orrs	r3, r2
 800481c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b00      	cmp	r3, #0
 8004828:	d010      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800482a:	4ba2      	ldr	r3, [pc, #648]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800482c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004830:	4aa0      	ldr	r2, [pc, #640]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004836:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800483a:	4b9e      	ldr	r3, [pc, #632]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	499b      	ldr	r1, [pc, #620]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004858:	4b96      	ldr	r3, [pc, #600]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004866:	4993      	ldr	r1, [pc, #588]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800487a:	4b8e      	ldr	r3, [pc, #568]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004880:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004888:	498a      	ldr	r1, [pc, #552]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800489c:	4b85      	ldr	r3, [pc, #532]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048aa:	4982      	ldr	r1, [pc, #520]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048be:	4b7d      	ldr	r3, [pc, #500]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048cc:	4979      	ldr	r1, [pc, #484]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048e0:	4b74      	ldr	r3, [pc, #464]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e6:	f023 0203 	bic.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	4971      	ldr	r1, [pc, #452]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004902:	4b6c      	ldr	r3, [pc, #432]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004908:	f023 020c 	bic.w	r2, r3, #12
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004910:	4968      	ldr	r1, [pc, #416]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004924:	4b63      	ldr	r3, [pc, #396]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004932:	4960      	ldr	r1, [pc, #384]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004946:	4b5b      	ldr	r3, [pc, #364]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004954:	4957      	ldr	r1, [pc, #348]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00a      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004968:	4b52      	ldr	r3, [pc, #328]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004976:	494f      	ldr	r1, [pc, #316]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800498a:	4b4a      	ldr	r3, [pc, #296]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004990:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004998:	4946      	ldr	r1, [pc, #280]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049ac:	4b41      	ldr	r3, [pc, #260]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ba:	493e      	ldr	r1, [pc, #248]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049ce:	4b39      	ldr	r3, [pc, #228]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049dc:	4935      	ldr	r1, [pc, #212]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049f0:	4b30      	ldr	r3, [pc, #192]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049fe:	492d      	ldr	r1, [pc, #180]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d011      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a12:	4b28      	ldr	r3, [pc, #160]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a18:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a20:	4924      	ldr	r1, [pc, #144]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a30:	d101      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a32:	2301      	movs	r3, #1
 8004a34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a42:	2301      	movs	r3, #1
 8004a44:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a52:	4b18      	ldr	r3, [pc, #96]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a58:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a60:	4914      	ldr	r1, [pc, #80]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00b      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a74:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a84:	490b      	ldr	r1, [pc, #44]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00f      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004a98:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa8:	4902      	ldr	r1, [pc, #8]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ab0:	e002      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004ab2:	bf00      	nop
 8004ab4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00b      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ac4:	4b8a      	ldr	r3, [pc, #552]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad4:	4986      	ldr	r1, [pc, #536]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00b      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ae8:	4b81      	ldr	r3, [pc, #516]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004af8:	497d      	ldr	r1, [pc, #500]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d006      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80d6 	beq.w	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b14:	4b76      	ldr	r3, [pc, #472]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a75      	ldr	r2, [pc, #468]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b20:	f7fd fd56 	bl	80025d0 <HAL_GetTick>
 8004b24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b28:	f7fd fd52 	bl	80025d0 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	; 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e195      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b3a:	4b6d      	ldr	r3, [pc, #436]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d021      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d11d      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b5a:	4b65      	ldr	r3, [pc, #404]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b60:	0c1b      	lsrs	r3, r3, #16
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b68:	4b61      	ldr	r3, [pc, #388]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b6e:	0e1b      	lsrs	r3, r3, #24
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	019a      	lsls	r2, r3, #6
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	041b      	lsls	r3, r3, #16
 8004b80:	431a      	orrs	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	061b      	lsls	r3, r3, #24
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	071b      	lsls	r3, r3, #28
 8004b8e:	4958      	ldr	r1, [pc, #352]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d004      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004baa:	d00a      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d02e      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc0:	d129      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bc2:	4b4b      	ldr	r3, [pc, #300]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc8:	0c1b      	lsrs	r3, r3, #16
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bd0:	4b47      	ldr	r3, [pc, #284]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd6:	0f1b      	lsrs	r3, r3, #28
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	019a      	lsls	r2, r3, #6
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	041b      	lsls	r3, r3, #16
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	061b      	lsls	r3, r3, #24
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	071b      	lsls	r3, r3, #28
 8004bf6:	493e      	ldr	r1, [pc, #248]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004bfe:	4b3c      	ldr	r3, [pc, #240]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c04:	f023 021f 	bic.w	r2, r3, #31
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	4938      	ldr	r1, [pc, #224]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d01d      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c22:	4b33      	ldr	r3, [pc, #204]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c28:	0e1b      	lsrs	r3, r3, #24
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c30:	4b2f      	ldr	r3, [pc, #188]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c36:	0f1b      	lsrs	r3, r3, #28
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	019a      	lsls	r2, r3, #6
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	041b      	lsls	r3, r3, #16
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	061b      	lsls	r3, r3, #24
 8004c50:	431a      	orrs	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	071b      	lsls	r3, r3, #28
 8004c56:	4926      	ldr	r1, [pc, #152]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d011      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	019a      	lsls	r2, r3, #6
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	041b      	lsls	r3, r3, #16
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	061b      	lsls	r3, r3, #24
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	071b      	lsls	r3, r3, #28
 8004c86:	491a      	ldr	r1, [pc, #104]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c8e:	4b18      	ldr	r3, [pc, #96]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c9a:	f7fd fc99 	bl	80025d0 <HAL_GetTick>
 8004c9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ca2:	f7fd fc95 	bl	80025d0 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b64      	cmp	r3, #100	; 0x64
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e0d8      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cb4:	4b0e      	ldr	r3, [pc, #56]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	f040 80ce 	bne.w	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004cc8:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a08      	ldr	r2, [pc, #32]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd4:	f7fd fc7c 	bl	80025d0 <HAL_GetTick>
 8004cd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cda:	e00b      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cdc:	f7fd fc78 	bl	80025d0 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b64      	cmp	r3, #100	; 0x64
 8004ce8:	d904      	bls.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e0bb      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004cee:	bf00      	nop
 8004cf0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cf4:	4b5e      	ldr	r3, [pc, #376]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d00:	d0ec      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d009      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d02e      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d12a      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d2a:	4b51      	ldr	r3, [pc, #324]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	0c1b      	lsrs	r3, r3, #16
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d38:	4b4d      	ldr	r3, [pc, #308]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	0f1b      	lsrs	r3, r3, #28
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	019a      	lsls	r2, r3, #6
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	041b      	lsls	r3, r3, #16
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	061b      	lsls	r3, r3, #24
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	071b      	lsls	r3, r3, #28
 8004d5e:	4944      	ldr	r1, [pc, #272]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d66:	4b42      	ldr	r3, [pc, #264]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d6c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d74:	3b01      	subs	r3, #1
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	493d      	ldr	r1, [pc, #244]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d022      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d94:	d11d      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d96:	4b36      	ldr	r3, [pc, #216]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	0e1b      	lsrs	r3, r3, #24
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004da4:	4b32      	ldr	r3, [pc, #200]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004daa:	0f1b      	lsrs	r3, r3, #28
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	019a      	lsls	r2, r3, #6
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	041b      	lsls	r3, r3, #16
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	061b      	lsls	r3, r3, #24
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	071b      	lsls	r3, r3, #28
 8004dca:	4929      	ldr	r1, [pc, #164]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d028      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dde:	4b24      	ldr	r3, [pc, #144]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de4:	0e1b      	lsrs	r3, r3, #24
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004dec:	4b20      	ldr	r3, [pc, #128]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df2:	0c1b      	lsrs	r3, r3, #16
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	019a      	lsls	r2, r3, #6
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	041b      	lsls	r3, r3, #16
 8004e04:	431a      	orrs	r2, r3
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	061b      	lsls	r3, r3, #24
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	071b      	lsls	r3, r3, #28
 8004e12:	4917      	ldr	r1, [pc, #92]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e1a:	4b15      	ldr	r3, [pc, #84]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	4911      	ldr	r1, [pc, #68]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e30:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a0e      	ldr	r2, [pc, #56]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e3c:	f7fd fbc8 	bl	80025d0 <HAL_GetTick>
 8004e40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e44:	f7fd fbc4 	bl	80025d0 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b64      	cmp	r3, #100	; 0x64
 8004e50:	d901      	bls.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e007      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e62:	d1ef      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800

08004e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e049      	b.n	8004f1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fd f858 	bl	8001f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	f000 fd28 	bl	8005908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d001      	beq.n	8004f3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e04c      	b.n	8004fd6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a26      	ldr	r2, [pc, #152]	; (8004fe4 <HAL_TIM_Base_Start+0xc0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d022      	beq.n	8004f94 <HAL_TIM_Base_Start+0x70>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f56:	d01d      	beq.n	8004f94 <HAL_TIM_Base_Start+0x70>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a22      	ldr	r2, [pc, #136]	; (8004fe8 <HAL_TIM_Base_Start+0xc4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d018      	beq.n	8004f94 <HAL_TIM_Base_Start+0x70>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a21      	ldr	r2, [pc, #132]	; (8004fec <HAL_TIM_Base_Start+0xc8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d013      	beq.n	8004f94 <HAL_TIM_Base_Start+0x70>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a1f      	ldr	r2, [pc, #124]	; (8004ff0 <HAL_TIM_Base_Start+0xcc>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00e      	beq.n	8004f94 <HAL_TIM_Base_Start+0x70>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1e      	ldr	r2, [pc, #120]	; (8004ff4 <HAL_TIM_Base_Start+0xd0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d009      	beq.n	8004f94 <HAL_TIM_Base_Start+0x70>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a1c      	ldr	r2, [pc, #112]	; (8004ff8 <HAL_TIM_Base_Start+0xd4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d004      	beq.n	8004f94 <HAL_TIM_Base_Start+0x70>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1b      	ldr	r2, [pc, #108]	; (8004ffc <HAL_TIM_Base_Start+0xd8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d115      	bne.n	8004fc0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	4b19      	ldr	r3, [pc, #100]	; (8005000 <HAL_TIM_Base_Start+0xdc>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b06      	cmp	r3, #6
 8004fa4:	d015      	beq.n	8004fd2 <HAL_TIM_Base_Start+0xae>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fac:	d011      	beq.n	8004fd2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0201 	orr.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fbe:	e008      	b.n	8004fd2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0201 	orr.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	e000      	b.n	8004fd4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40010000 	.word	0x40010000
 8004fe8:	40000400 	.word	0x40000400
 8004fec:	40000800 	.word	0x40000800
 8004ff0:	40000c00 	.word	0x40000c00
 8004ff4:	40010400 	.word	0x40010400
 8004ff8:	40014000 	.word	0x40014000
 8004ffc:	40001800 	.word	0x40001800
 8005000:	00010007 	.word	0x00010007

08005004 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e049      	b.n	80050aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fc ffd0 	bl	8001fd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f000 fc60 	bl	8005908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d109      	bne.n	80050d8 <HAL_TIM_PWM_Start+0x24>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	bf14      	ite	ne
 80050d0:	2301      	movne	r3, #1
 80050d2:	2300      	moveq	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	e03c      	b.n	8005152 <HAL_TIM_PWM_Start+0x9e>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d109      	bne.n	80050f2 <HAL_TIM_PWM_Start+0x3e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	bf14      	ite	ne
 80050ea:	2301      	movne	r3, #1
 80050ec:	2300      	moveq	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	e02f      	b.n	8005152 <HAL_TIM_PWM_Start+0x9e>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d109      	bne.n	800510c <HAL_TIM_PWM_Start+0x58>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b01      	cmp	r3, #1
 8005102:	bf14      	ite	ne
 8005104:	2301      	movne	r3, #1
 8005106:	2300      	moveq	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	e022      	b.n	8005152 <HAL_TIM_PWM_Start+0x9e>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b0c      	cmp	r3, #12
 8005110:	d109      	bne.n	8005126 <HAL_TIM_PWM_Start+0x72>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b01      	cmp	r3, #1
 800511c:	bf14      	ite	ne
 800511e:	2301      	movne	r3, #1
 8005120:	2300      	moveq	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	e015      	b.n	8005152 <HAL_TIM_PWM_Start+0x9e>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b10      	cmp	r3, #16
 800512a:	d109      	bne.n	8005140 <HAL_TIM_PWM_Start+0x8c>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	bf14      	ite	ne
 8005138:	2301      	movne	r3, #1
 800513a:	2300      	moveq	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	e008      	b.n	8005152 <HAL_TIM_PWM_Start+0x9e>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	bf14      	ite	ne
 800514c:	2301      	movne	r3, #1
 800514e:	2300      	moveq	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e092      	b.n	8005280 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d104      	bne.n	800516a <HAL_TIM_PWM_Start+0xb6>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005168:	e023      	b.n	80051b2 <HAL_TIM_PWM_Start+0xfe>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b04      	cmp	r3, #4
 800516e:	d104      	bne.n	800517a <HAL_TIM_PWM_Start+0xc6>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005178:	e01b      	b.n	80051b2 <HAL_TIM_PWM_Start+0xfe>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d104      	bne.n	800518a <HAL_TIM_PWM_Start+0xd6>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005188:	e013      	b.n	80051b2 <HAL_TIM_PWM_Start+0xfe>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b0c      	cmp	r3, #12
 800518e:	d104      	bne.n	800519a <HAL_TIM_PWM_Start+0xe6>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005198:	e00b      	b.n	80051b2 <HAL_TIM_PWM_Start+0xfe>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b10      	cmp	r3, #16
 800519e:	d104      	bne.n	80051aa <HAL_TIM_PWM_Start+0xf6>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051a8:	e003      	b.n	80051b2 <HAL_TIM_PWM_Start+0xfe>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2202      	movs	r2, #2
 80051ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2201      	movs	r2, #1
 80051b8:	6839      	ldr	r1, [r7, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 ff3c 	bl	8006038 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a30      	ldr	r2, [pc, #192]	; (8005288 <HAL_TIM_PWM_Start+0x1d4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <HAL_TIM_PWM_Start+0x120>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2f      	ldr	r2, [pc, #188]	; (800528c <HAL_TIM_PWM_Start+0x1d8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d101      	bne.n	80051d8 <HAL_TIM_PWM_Start+0x124>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <HAL_TIM_PWM_Start+0x126>
 80051d8:	2300      	movs	r3, #0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d007      	beq.n	80051ee <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a25      	ldr	r2, [pc, #148]	; (8005288 <HAL_TIM_PWM_Start+0x1d4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d022      	beq.n	800523e <HAL_TIM_PWM_Start+0x18a>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005200:	d01d      	beq.n	800523e <HAL_TIM_PWM_Start+0x18a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a22      	ldr	r2, [pc, #136]	; (8005290 <HAL_TIM_PWM_Start+0x1dc>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d018      	beq.n	800523e <HAL_TIM_PWM_Start+0x18a>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a20      	ldr	r2, [pc, #128]	; (8005294 <HAL_TIM_PWM_Start+0x1e0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d013      	beq.n	800523e <HAL_TIM_PWM_Start+0x18a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1f      	ldr	r2, [pc, #124]	; (8005298 <HAL_TIM_PWM_Start+0x1e4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00e      	beq.n	800523e <HAL_TIM_PWM_Start+0x18a>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a19      	ldr	r2, [pc, #100]	; (800528c <HAL_TIM_PWM_Start+0x1d8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d009      	beq.n	800523e <HAL_TIM_PWM_Start+0x18a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1b      	ldr	r2, [pc, #108]	; (800529c <HAL_TIM_PWM_Start+0x1e8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d004      	beq.n	800523e <HAL_TIM_PWM_Start+0x18a>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <HAL_TIM_PWM_Start+0x1ec>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d115      	bne.n	800526a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	4b17      	ldr	r3, [pc, #92]	; (80052a4 <HAL_TIM_PWM_Start+0x1f0>)
 8005246:	4013      	ands	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b06      	cmp	r3, #6
 800524e:	d015      	beq.n	800527c <HAL_TIM_PWM_Start+0x1c8>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005256:	d011      	beq.n	800527c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0201 	orr.w	r2, r2, #1
 8005266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005268:	e008      	b.n	800527c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0201 	orr.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	e000      	b.n	800527e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40010000 	.word	0x40010000
 800528c:	40010400 	.word	0x40010400
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40000c00 	.word	0x40000c00
 800529c:	40014000 	.word	0x40014000
 80052a0:	40001800 	.word	0x40001800
 80052a4:	00010007 	.word	0x00010007

080052a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d122      	bne.n	8005304 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d11b      	bne.n	8005304 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0202 	mvn.w	r2, #2
 80052d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 faee 	bl	80058cc <HAL_TIM_IC_CaptureCallback>
 80052f0:	e005      	b.n	80052fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fae0 	bl	80058b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 faf1 	bl	80058e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b04      	cmp	r3, #4
 8005310:	d122      	bne.n	8005358 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b04      	cmp	r3, #4
 800531e:	d11b      	bne.n	8005358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0204 	mvn.w	r2, #4
 8005328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fac4 	bl	80058cc <HAL_TIM_IC_CaptureCallback>
 8005344:	e005      	b.n	8005352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fab6 	bl	80058b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fac7 	bl	80058e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b08      	cmp	r3, #8
 8005364:	d122      	bne.n	80053ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b08      	cmp	r3, #8
 8005372:	d11b      	bne.n	80053ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0208 	mvn.w	r2, #8
 800537c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2204      	movs	r2, #4
 8005382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fa9a 	bl	80058cc <HAL_TIM_IC_CaptureCallback>
 8005398:	e005      	b.n	80053a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fa8c 	bl	80058b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fa9d 	bl	80058e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b10      	cmp	r3, #16
 80053b8:	d122      	bne.n	8005400 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d11b      	bne.n	8005400 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0210 	mvn.w	r2, #16
 80053d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2208      	movs	r2, #8
 80053d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fa70 	bl	80058cc <HAL_TIM_IC_CaptureCallback>
 80053ec:	e005      	b.n	80053fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fa62 	bl	80058b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fa73 	bl	80058e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b01      	cmp	r3, #1
 800540c:	d10e      	bne.n	800542c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b01      	cmp	r3, #1
 800541a:	d107      	bne.n	800542c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0201 	mvn.w	r2, #1
 8005424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fa3c 	bl	80058a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	2b80      	cmp	r3, #128	; 0x80
 8005438:	d10e      	bne.n	8005458 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005444:	2b80      	cmp	r3, #128	; 0x80
 8005446:	d107      	bne.n	8005458 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 feae 	bl	80061b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005466:	d10e      	bne.n	8005486 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b80      	cmp	r3, #128	; 0x80
 8005474:	d107      	bne.n	8005486 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800547e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fea1 	bl	80061c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005490:	2b40      	cmp	r3, #64	; 0x40
 8005492:	d10e      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549e:	2b40      	cmp	r3, #64	; 0x40
 80054a0:	d107      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fa21 	bl	80058f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d10e      	bne.n	80054de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	d107      	bne.n	80054de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f06f 0220 	mvn.w	r2, #32
 80054d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fe61 	bl	80061a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005502:	2302      	movs	r3, #2
 8005504:	e0ff      	b.n	8005706 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b14      	cmp	r3, #20
 8005512:	f200 80f0 	bhi.w	80056f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005516:	a201      	add	r2, pc, #4	; (adr r2, 800551c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551c:	08005571 	.word	0x08005571
 8005520:	080056f7 	.word	0x080056f7
 8005524:	080056f7 	.word	0x080056f7
 8005528:	080056f7 	.word	0x080056f7
 800552c:	080055b1 	.word	0x080055b1
 8005530:	080056f7 	.word	0x080056f7
 8005534:	080056f7 	.word	0x080056f7
 8005538:	080056f7 	.word	0x080056f7
 800553c:	080055f3 	.word	0x080055f3
 8005540:	080056f7 	.word	0x080056f7
 8005544:	080056f7 	.word	0x080056f7
 8005548:	080056f7 	.word	0x080056f7
 800554c:	08005633 	.word	0x08005633
 8005550:	080056f7 	.word	0x080056f7
 8005554:	080056f7 	.word	0x080056f7
 8005558:	080056f7 	.word	0x080056f7
 800555c:	08005675 	.word	0x08005675
 8005560:	080056f7 	.word	0x080056f7
 8005564:	080056f7 	.word	0x080056f7
 8005568:	080056f7 	.word	0x080056f7
 800556c:	080056b5 	.word	0x080056b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68b9      	ldr	r1, [r7, #8]
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fa66 	bl	8005a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0208 	orr.w	r2, r2, #8
 800558a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699a      	ldr	r2, [r3, #24]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0204 	bic.w	r2, r2, #4
 800559a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6999      	ldr	r1, [r3, #24]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	619a      	str	r2, [r3, #24]
      break;
 80055ae:	e0a5      	b.n	80056fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68b9      	ldr	r1, [r7, #8]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fab8 	bl	8005b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6999      	ldr	r1, [r3, #24]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	021a      	lsls	r2, r3, #8
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	619a      	str	r2, [r3, #24]
      break;
 80055f0:	e084      	b.n	80056fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 fb0f 	bl	8005c1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0208 	orr.w	r2, r2, #8
 800560c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0204 	bic.w	r2, r2, #4
 800561c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69d9      	ldr	r1, [r3, #28]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	691a      	ldr	r2, [r3, #16]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	61da      	str	r2, [r3, #28]
      break;
 8005630:	e064      	b.n	80056fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fb65 	bl	8005d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69da      	ldr	r2, [r3, #28]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800564c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800565c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69d9      	ldr	r1, [r3, #28]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	021a      	lsls	r2, r3, #8
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	61da      	str	r2, [r3, #28]
      break;
 8005672:	e043      	b.n	80056fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fb9c 	bl	8005db8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0208 	orr.w	r2, r2, #8
 800568e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0204 	bic.w	r2, r2, #4
 800569e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056b2:	e023      	b.n	80056fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fbce 	bl	8005e5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	021a      	lsls	r2, r3, #8
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056f4:	e002      	b.n	80056fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	75fb      	strb	r3, [r7, #23]
      break;
 80056fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005704:	7dfb      	ldrb	r3, [r7, #23]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop

08005710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_TIM_ConfigClockSource+0x1c>
 8005728:	2302      	movs	r3, #2
 800572a:	e0b4      	b.n	8005896 <HAL_TIM_ConfigClockSource+0x186>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	4b56      	ldr	r3, [pc, #344]	; (80058a0 <HAL_TIM_ConfigClockSource+0x190>)
 8005748:	4013      	ands	r3, r2
 800574a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005764:	d03e      	beq.n	80057e4 <HAL_TIM_ConfigClockSource+0xd4>
 8005766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576a:	f200 8087 	bhi.w	800587c <HAL_TIM_ConfigClockSource+0x16c>
 800576e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005772:	f000 8086 	beq.w	8005882 <HAL_TIM_ConfigClockSource+0x172>
 8005776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577a:	d87f      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x16c>
 800577c:	2b70      	cmp	r3, #112	; 0x70
 800577e:	d01a      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0xa6>
 8005780:	2b70      	cmp	r3, #112	; 0x70
 8005782:	d87b      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x16c>
 8005784:	2b60      	cmp	r3, #96	; 0x60
 8005786:	d050      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x11a>
 8005788:	2b60      	cmp	r3, #96	; 0x60
 800578a:	d877      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x16c>
 800578c:	2b50      	cmp	r3, #80	; 0x50
 800578e:	d03c      	beq.n	800580a <HAL_TIM_ConfigClockSource+0xfa>
 8005790:	2b50      	cmp	r3, #80	; 0x50
 8005792:	d873      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x16c>
 8005794:	2b40      	cmp	r3, #64	; 0x40
 8005796:	d058      	beq.n	800584a <HAL_TIM_ConfigClockSource+0x13a>
 8005798:	2b40      	cmp	r3, #64	; 0x40
 800579a:	d86f      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x16c>
 800579c:	2b30      	cmp	r3, #48	; 0x30
 800579e:	d064      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x15a>
 80057a0:	2b30      	cmp	r3, #48	; 0x30
 80057a2:	d86b      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x16c>
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d060      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x15a>
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d867      	bhi.n	800587c <HAL_TIM_ConfigClockSource+0x16c>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d05c      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x15a>
 80057b0:	2b10      	cmp	r3, #16
 80057b2:	d05a      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x15a>
 80057b4:	e062      	b.n	800587c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6818      	ldr	r0, [r3, #0]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	6899      	ldr	r1, [r3, #8]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f000 fc17 	bl	8005ff8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	609a      	str	r2, [r3, #8]
      break;
 80057e2:	e04f      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6818      	ldr	r0, [r3, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	6899      	ldr	r1, [r3, #8]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f000 fc00 	bl	8005ff8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005806:	609a      	str	r2, [r3, #8]
      break;
 8005808:	e03c      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	6859      	ldr	r1, [r3, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	461a      	mov	r2, r3
 8005818:	f000 fb74 	bl	8005f04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2150      	movs	r1, #80	; 0x50
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fbcd 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 8005828:	e02c      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6859      	ldr	r1, [r3, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	461a      	mov	r2, r3
 8005838:	f000 fb93 	bl	8005f62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2160      	movs	r1, #96	; 0x60
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fbbd 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 8005848:	e01c      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6859      	ldr	r1, [r3, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	461a      	mov	r2, r3
 8005858:	f000 fb54 	bl	8005f04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2140      	movs	r1, #64	; 0x40
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fbad 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 8005868:	e00c      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4619      	mov	r1, r3
 8005874:	4610      	mov	r0, r2
 8005876:	f000 fba4 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 800587a:	e003      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	73fb      	strb	r3, [r7, #15]
      break;
 8005880:	e000      	b.n	8005884 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005894:	7bfb      	ldrb	r3, [r7, #15]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	fffeff88 	.word	0xfffeff88

080058a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a40      	ldr	r2, [pc, #256]	; (8005a1c <TIM_Base_SetConfig+0x114>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d013      	beq.n	8005948 <TIM_Base_SetConfig+0x40>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005926:	d00f      	beq.n	8005948 <TIM_Base_SetConfig+0x40>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a3d      	ldr	r2, [pc, #244]	; (8005a20 <TIM_Base_SetConfig+0x118>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00b      	beq.n	8005948 <TIM_Base_SetConfig+0x40>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a3c      	ldr	r2, [pc, #240]	; (8005a24 <TIM_Base_SetConfig+0x11c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d007      	beq.n	8005948 <TIM_Base_SetConfig+0x40>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a3b      	ldr	r2, [pc, #236]	; (8005a28 <TIM_Base_SetConfig+0x120>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d003      	beq.n	8005948 <TIM_Base_SetConfig+0x40>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a3a      	ldr	r2, [pc, #232]	; (8005a2c <TIM_Base_SetConfig+0x124>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d108      	bne.n	800595a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a2f      	ldr	r2, [pc, #188]	; (8005a1c <TIM_Base_SetConfig+0x114>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d02b      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005968:	d027      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a2c      	ldr	r2, [pc, #176]	; (8005a20 <TIM_Base_SetConfig+0x118>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d023      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a2b      	ldr	r2, [pc, #172]	; (8005a24 <TIM_Base_SetConfig+0x11c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d01f      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a2a      	ldr	r2, [pc, #168]	; (8005a28 <TIM_Base_SetConfig+0x120>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d01b      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a29      	ldr	r2, [pc, #164]	; (8005a2c <TIM_Base_SetConfig+0x124>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d017      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a28      	ldr	r2, [pc, #160]	; (8005a30 <TIM_Base_SetConfig+0x128>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a27      	ldr	r2, [pc, #156]	; (8005a34 <TIM_Base_SetConfig+0x12c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00f      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a26      	ldr	r2, [pc, #152]	; (8005a38 <TIM_Base_SetConfig+0x130>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00b      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a25      	ldr	r2, [pc, #148]	; (8005a3c <TIM_Base_SetConfig+0x134>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d007      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a24      	ldr	r2, [pc, #144]	; (8005a40 <TIM_Base_SetConfig+0x138>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d003      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a23      	ldr	r2, [pc, #140]	; (8005a44 <TIM_Base_SetConfig+0x13c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d108      	bne.n	80059cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a0a      	ldr	r2, [pc, #40]	; (8005a1c <TIM_Base_SetConfig+0x114>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_Base_SetConfig+0xf8>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a0c      	ldr	r2, [pc, #48]	; (8005a2c <TIM_Base_SetConfig+0x124>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d103      	bne.n	8005a08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	615a      	str	r2, [r3, #20]
}
 8005a0e:	bf00      	nop
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40010000 	.word	0x40010000
 8005a20:	40000400 	.word	0x40000400
 8005a24:	40000800 	.word	0x40000800
 8005a28:	40000c00 	.word	0x40000c00
 8005a2c:	40010400 	.word	0x40010400
 8005a30:	40014000 	.word	0x40014000
 8005a34:	40014400 	.word	0x40014400
 8005a38:	40014800 	.word	0x40014800
 8005a3c:	40001800 	.word	0x40001800
 8005a40:	40001c00 	.word	0x40001c00
 8005a44:	40002000 	.word	0x40002000

08005a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f023 0201 	bic.w	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4b2b      	ldr	r3, [pc, #172]	; (8005b20 <TIM_OC1_SetConfig+0xd8>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0303 	bic.w	r3, r3, #3
 8005a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f023 0302 	bic.w	r3, r3, #2
 8005a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a21      	ldr	r2, [pc, #132]	; (8005b24 <TIM_OC1_SetConfig+0xdc>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d003      	beq.n	8005aac <TIM_OC1_SetConfig+0x64>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a20      	ldr	r2, [pc, #128]	; (8005b28 <TIM_OC1_SetConfig+0xe0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d10c      	bne.n	8005ac6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f023 0308 	bic.w	r3, r3, #8
 8005ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f023 0304 	bic.w	r3, r3, #4
 8005ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a16      	ldr	r2, [pc, #88]	; (8005b24 <TIM_OC1_SetConfig+0xdc>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <TIM_OC1_SetConfig+0x8e>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a15      	ldr	r2, [pc, #84]	; (8005b28 <TIM_OC1_SetConfig+0xe0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d111      	bne.n	8005afa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	621a      	str	r2, [r3, #32]
}
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	fffeff8f 	.word	0xfffeff8f
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40010400 	.word	0x40010400

08005b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f023 0210 	bic.w	r2, r3, #16
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4b2e      	ldr	r3, [pc, #184]	; (8005c10 <TIM_OC2_SetConfig+0xe4>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	021b      	lsls	r3, r3, #8
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0320 	bic.w	r3, r3, #32
 8005b76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a23      	ldr	r2, [pc, #140]	; (8005c14 <TIM_OC2_SetConfig+0xe8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_OC2_SetConfig+0x68>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a22      	ldr	r2, [pc, #136]	; (8005c18 <TIM_OC2_SetConfig+0xec>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d10d      	bne.n	8005bb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a18      	ldr	r2, [pc, #96]	; (8005c14 <TIM_OC2_SetConfig+0xe8>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d003      	beq.n	8005bc0 <TIM_OC2_SetConfig+0x94>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <TIM_OC2_SetConfig+0xec>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d113      	bne.n	8005be8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	feff8fff 	.word	0xfeff8fff
 8005c14:	40010000 	.word	0x40010000
 8005c18:	40010400 	.word	0x40010400

08005c1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4b2d      	ldr	r3, [pc, #180]	; (8005cfc <TIM_OC3_SetConfig+0xe0>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0303 	bic.w	r3, r3, #3
 8005c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a22      	ldr	r2, [pc, #136]	; (8005d00 <TIM_OC3_SetConfig+0xe4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d003      	beq.n	8005c82 <TIM_OC3_SetConfig+0x66>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a21      	ldr	r2, [pc, #132]	; (8005d04 <TIM_OC3_SetConfig+0xe8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d10d      	bne.n	8005c9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a17      	ldr	r2, [pc, #92]	; (8005d00 <TIM_OC3_SetConfig+0xe4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d003      	beq.n	8005cae <TIM_OC3_SetConfig+0x92>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a16      	ldr	r2, [pc, #88]	; (8005d04 <TIM_OC3_SetConfig+0xe8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d113      	bne.n	8005cd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	621a      	str	r2, [r3, #32]
}
 8005cf0:	bf00      	nop
 8005cf2:	371c      	adds	r7, #28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	fffeff8f 	.word	0xfffeff8f
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40010400 	.word	0x40010400

08005d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4b1e      	ldr	r3, [pc, #120]	; (8005dac <TIM_OC4_SetConfig+0xa4>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	031b      	lsls	r3, r3, #12
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a13      	ldr	r2, [pc, #76]	; (8005db0 <TIM_OC4_SetConfig+0xa8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_OC4_SetConfig+0x68>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a12      	ldr	r2, [pc, #72]	; (8005db4 <TIM_OC4_SetConfig+0xac>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d109      	bne.n	8005d84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	019b      	lsls	r3, r3, #6
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	feff8fff 	.word	0xfeff8fff
 8005db0:	40010000 	.word	0x40010000
 8005db4:	40010400 	.word	0x40010400

08005db8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4b1b      	ldr	r3, [pc, #108]	; (8005e50 <TIM_OC5_SetConfig+0x98>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005df8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	041b      	lsls	r3, r3, #16
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a12      	ldr	r2, [pc, #72]	; (8005e54 <TIM_OC5_SetConfig+0x9c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d003      	beq.n	8005e16 <TIM_OC5_SetConfig+0x5e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a11      	ldr	r2, [pc, #68]	; (8005e58 <TIM_OC5_SetConfig+0xa0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d109      	bne.n	8005e2a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	021b      	lsls	r3, r3, #8
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	621a      	str	r2, [r3, #32]
}
 8005e44:	bf00      	nop
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	fffeff8f 	.word	0xfffeff8f
 8005e54:	40010000 	.word	0x40010000
 8005e58:	40010400 	.word	0x40010400

08005e5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4b1c      	ldr	r3, [pc, #112]	; (8005ef8 <TIM_OC6_SetConfig+0x9c>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	051b      	lsls	r3, r3, #20
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a13      	ldr	r2, [pc, #76]	; (8005efc <TIM_OC6_SetConfig+0xa0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d003      	beq.n	8005ebc <TIM_OC6_SetConfig+0x60>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a12      	ldr	r2, [pc, #72]	; (8005f00 <TIM_OC6_SetConfig+0xa4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d109      	bne.n	8005ed0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	029b      	lsls	r3, r3, #10
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	621a      	str	r2, [r3, #32]
}
 8005eea:	bf00      	nop
 8005eec:	371c      	adds	r7, #28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	feff8fff 	.word	0xfeff8fff
 8005efc:	40010000 	.word	0x40010000
 8005f00:	40010400 	.word	0x40010400

08005f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	f023 0201 	bic.w	r2, r3, #1
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f023 030a 	bic.w	r3, r3, #10
 8005f40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	621a      	str	r2, [r3, #32]
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b087      	sub	sp, #28
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f023 0210 	bic.w	r2, r3, #16
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	031b      	lsls	r3, r3, #12
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f043 0307 	orr.w	r3, r3, #7
 8005fe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	609a      	str	r2, [r3, #8]
}
 8005fec:	bf00      	nop
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	021a      	lsls	r2, r3, #8
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	431a      	orrs	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4313      	orrs	r3, r2
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	609a      	str	r2, [r3, #8]
}
 800602c:	bf00      	nop
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	2201      	movs	r2, #1
 800604c:	fa02 f303 	lsl.w	r3, r2, r3
 8006050:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1a      	ldr	r2, [r3, #32]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	43db      	mvns	r3, r3
 800605a:	401a      	ands	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a1a      	ldr	r2, [r3, #32]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 031f 	and.w	r3, r3, #31
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	fa01 f303 	lsl.w	r3, r1, r3
 8006070:	431a      	orrs	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	621a      	str	r2, [r3, #32]
}
 8006076:	bf00      	nop
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
	...

08006084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006098:	2302      	movs	r3, #2
 800609a:	e06d      	b.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2202      	movs	r2, #2
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a30      	ldr	r2, [pc, #192]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d004      	beq.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a2f      	ldr	r2, [pc, #188]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d108      	bne.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a20      	ldr	r2, [pc, #128]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d022      	beq.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d01d      	beq.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1d      	ldr	r2, [pc, #116]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d018      	beq.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a1c      	ldr	r2, [pc, #112]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d013      	beq.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1a      	ldr	r2, [pc, #104]	; (8006194 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d00e      	beq.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a15      	ldr	r2, [pc, #84]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d009      	beq.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a16      	ldr	r2, [pc, #88]	; (8006198 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d004      	beq.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a15      	ldr	r2, [pc, #84]	; (800619c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d10c      	bne.n	8006166 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006152:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	4313      	orrs	r3, r2
 800615c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	40010000 	.word	0x40010000
 8006188:	40010400 	.word	0x40010400
 800618c:	40000400 	.word	0x40000400
 8006190:	40000800 	.word	0x40000800
 8006194:	40000c00 	.word	0x40000c00
 8006198:	40014000 	.word	0x40014000
 800619c:	40001800 	.word	0x40001800

080061a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e040      	b.n	8006270 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d106      	bne.n	8006204 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7fb ff62 	bl	80020c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2224      	movs	r2, #36	; 0x24
 8006208:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 0201 	bic.w	r2, r2, #1
 8006218:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fb84 	bl	8006928 <UART_SetConfig>
 8006220:	4603      	mov	r3, r0
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e022      	b.n	8006270 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fddc 	bl	8006df0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006256:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fe63 	bl	8006f34 <UART_CheckIdleState>
 800626e:	4603      	mov	r3, r0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08a      	sub	sp, #40	; 0x28
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	4613      	mov	r3, r2
 8006284:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800628a:	2b20      	cmp	r3, #32
 800628c:	d13d      	bne.n	800630a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <HAL_UART_Receive_IT+0x22>
 8006294:	88fb      	ldrh	r3, [r7, #6]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e036      	b.n	800630c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_UART_Receive_IT+0x34>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e02f      	b.n	800630c <HAL_UART_Receive_IT+0x94>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d018      	beq.n	80062fa <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	613b      	str	r3, [r7, #16]
   return(result);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	623b      	str	r3, [r7, #32]
 80062e8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	69f9      	ldr	r1, [r7, #28]
 80062ec:	6a3a      	ldr	r2, [r7, #32]
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e6      	bne.n	80062c8 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062fa:	88fb      	ldrh	r3, [r7, #6]
 80062fc:	461a      	mov	r2, r3
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 ff25 	bl	8007150 <UART_Start_Receive_IT>
 8006306:	4603      	mov	r3, r0
 8006308:	e000      	b.n	800630c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800630a:	2302      	movs	r3, #2
  }
}
 800630c:	4618      	mov	r0, r3
 800630e:	3728      	adds	r7, #40	; 0x28
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b0ba      	sub	sp, #232	; 0xe8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800633a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800633e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006342:	4013      	ands	r3, r2
 8006344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800634c:	2b00      	cmp	r3, #0
 800634e:	d115      	bne.n	800637c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006354:	f003 0320 	and.w	r3, r3, #32
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00f      	beq.n	800637c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800635c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b00      	cmp	r3, #0
 8006366:	d009      	beq.n	800637c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 82a4 	beq.w	80068ba <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	4798      	blx	r3
      }
      return;
 800637a:	e29e      	b.n	80068ba <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800637c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 8117 	beq.w	80065b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d106      	bne.n	80063a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006392:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006396:	4b85      	ldr	r3, [pc, #532]	; (80065ac <HAL_UART_IRQHandler+0x298>)
 8006398:	4013      	ands	r3, r2
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 810a 	beq.w	80065b4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d011      	beq.n	80063d0 <HAL_UART_IRQHandler+0xbc>
 80063ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00b      	beq.n	80063d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2201      	movs	r2, #1
 80063be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063c6:	f043 0201 	orr.w	r2, r3, #1
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d011      	beq.n	8006400 <HAL_UART_IRQHandler+0xec>
 80063dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00b      	beq.n	8006400 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2202      	movs	r2, #2
 80063ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063f6:	f043 0204 	orr.w	r2, r3, #4
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	d011      	beq.n	8006430 <HAL_UART_IRQHandler+0x11c>
 800640c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00b      	beq.n	8006430 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2204      	movs	r2, #4
 800641e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006426:	f043 0202 	orr.w	r2, r3, #2
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006434:	f003 0308 	and.w	r3, r3, #8
 8006438:	2b00      	cmp	r3, #0
 800643a:	d017      	beq.n	800646c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800643c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006440:	f003 0320 	and.w	r3, r3, #32
 8006444:	2b00      	cmp	r3, #0
 8006446:	d105      	bne.n	8006454 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800644c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2208      	movs	r2, #8
 800645a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006462:	f043 0208 	orr.w	r2, r3, #8
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800646c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006474:	2b00      	cmp	r3, #0
 8006476:	d012      	beq.n	800649e <HAL_UART_IRQHandler+0x18a>
 8006478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800647c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00c      	beq.n	800649e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800648c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006494:	f043 0220 	orr.w	r2, r3, #32
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 820a 	beq.w	80068be <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80064aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ae:	f003 0320 	and.w	r3, r3, #32
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00d      	beq.n	80064d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d007      	beq.n	80064d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e6:	2b40      	cmp	r3, #64	; 0x40
 80064e8:	d005      	beq.n	80064f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d04f      	beq.n	8006596 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fef4 	bl	80072e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006506:	2b40      	cmp	r3, #64	; 0x40
 8006508:	d141      	bne.n	800658e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3308      	adds	r3, #8
 8006510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006520:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3308      	adds	r3, #8
 8006532:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006536:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800653a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006542:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006546:	e841 2300 	strex	r3, r2, [r1]
 800654a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800654e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1d9      	bne.n	800650a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655a:	2b00      	cmp	r3, #0
 800655c:	d013      	beq.n	8006586 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006562:	4a13      	ldr	r2, [pc, #76]	; (80065b0 <HAL_UART_IRQHandler+0x29c>)
 8006564:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656a:	4618      	mov	r0, r3
 800656c:	f7fc f9e1 	bl	8002932 <HAL_DMA_Abort_IT>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d017      	beq.n	80065a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006580:	4610      	mov	r0, r2
 8006582:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006584:	e00f      	b.n	80065a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f9ae 	bl	80068e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800658c:	e00b      	b.n	80065a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f9aa 	bl	80068e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006594:	e007      	b.n	80065a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f9a6 	bl	80068e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80065a4:	e18b      	b.n	80068be <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a6:	bf00      	nop
    return;
 80065a8:	e189      	b.n	80068be <HAL_UART_IRQHandler+0x5aa>
 80065aa:	bf00      	nop
 80065ac:	04000120 	.word	0x04000120
 80065b0:	080073ab 	.word	0x080073ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	f040 8144 	bne.w	8006846 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c2:	f003 0310 	and.w	r3, r3, #16
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 813d 	beq.w	8006846 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d0:	f003 0310 	and.w	r3, r3, #16
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8136 	beq.w	8006846 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2210      	movs	r2, #16
 80065e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ec:	2b40      	cmp	r3, #64	; 0x40
 80065ee:	f040 80b2 	bne.w	8006756 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 815d 	beq.w	80068c2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800660e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006612:	429a      	cmp	r2, r3
 8006614:	f080 8155 	bcs.w	80068c2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800661e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800662c:	f000 8085 	beq.w	800673a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006638:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006644:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800664c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	461a      	mov	r2, r3
 8006656:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800665a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800665e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006666:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800666a:	e841 2300 	strex	r3, r2, [r1]
 800666e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1da      	bne.n	8006630 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3308      	adds	r3, #8
 8006680:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800668a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800668c:	f023 0301 	bic.w	r3, r3, #1
 8006690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3308      	adds	r3, #8
 800669a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800669e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e1      	bne.n	800667a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3308      	adds	r3, #8
 80066bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066c0:	e853 3f00 	ldrex	r3, [r3]
 80066c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3308      	adds	r3, #8
 80066d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e3      	bne.n	80066b6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2220      	movs	r2, #32
 80066f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006702:	e853 3f00 	ldrex	r3, [r3]
 8006706:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800670a:	f023 0310 	bic.w	r3, r3, #16
 800670e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800671c:	65bb      	str	r3, [r7, #88]	; 0x58
 800671e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006722:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800672a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e4      	bne.n	80066fa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006734:	4618      	mov	r0, r3
 8006736:	f7fc f88c 	bl	8002852 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006746:	b29b      	uxth	r3, r3
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	b29b      	uxth	r3, r3
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f8d4 	bl	80068fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006754:	e0b5      	b.n	80068c2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006762:	b29b      	uxth	r3, r3
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 80a7 	beq.w	80068c6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006778:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 80a2 	beq.w	80068c6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678a:	e853 3f00 	ldrex	r3, [r3]
 800678e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006792:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006796:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80067a4:	647b      	str	r3, [r7, #68]	; 0x44
 80067a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e4      	bne.n	8006782 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	3308      	adds	r3, #8
 80067be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	623b      	str	r3, [r7, #32]
   return(result);
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	f023 0301 	bic.w	r3, r3, #1
 80067ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3308      	adds	r3, #8
 80067d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80067dc:	633a      	str	r2, [r7, #48]	; 0x30
 80067de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067e4:	e841 2300 	strex	r3, r2, [r1]
 80067e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e3      	bne.n	80067b8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2220      	movs	r2, #32
 80067f4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	e853 3f00 	ldrex	r3, [r3]
 800680e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0310 	bic.w	r3, r3, #16
 8006816:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006824:	61fb      	str	r3, [r7, #28]
 8006826:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006828:	69b9      	ldr	r1, [r7, #24]
 800682a:	69fa      	ldr	r2, [r7, #28]
 800682c:	e841 2300 	strex	r3, r2, [r1]
 8006830:	617b      	str	r3, [r7, #20]
   return(result);
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1e4      	bne.n	8006802 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800683c:	4619      	mov	r1, r3
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f85c 	bl	80068fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006844:	e03f      	b.n	80068c6 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800684a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00e      	beq.n	8006870 <HAL_UART_IRQHandler+0x55c>
 8006852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d008      	beq.n	8006870 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006866:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f853 	bl	8006914 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800686e:	e02d      	b.n	80068cc <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00e      	beq.n	800689a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800687c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006884:	2b00      	cmp	r3, #0
 8006886:	d008      	beq.n	800689a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01c      	beq.n	80068ca <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	4798      	blx	r3
    }
    return;
 8006898:	e017      	b.n	80068ca <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800689a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800689e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d012      	beq.n	80068cc <HAL_UART_IRQHandler+0x5b8>
 80068a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00c      	beq.n	80068cc <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fd8f 	bl	80073d6 <UART_EndTransmit_IT>
    return;
 80068b8:	e008      	b.n	80068cc <HAL_UART_IRQHandler+0x5b8>
      return;
 80068ba:	bf00      	nop
 80068bc:	e006      	b.n	80068cc <HAL_UART_IRQHandler+0x5b8>
    return;
 80068be:	bf00      	nop
 80068c0:	e004      	b.n	80068cc <HAL_UART_IRQHandler+0x5b8>
      return;
 80068c2:	bf00      	nop
 80068c4:	e002      	b.n	80068cc <HAL_UART_IRQHandler+0x5b8>
      return;
 80068c6:	bf00      	nop
 80068c8:	e000      	b.n	80068cc <HAL_UART_IRQHandler+0x5b8>
    return;
 80068ca:	bf00      	nop
  }

}
 80068cc:	37e8      	adds	r7, #232	; 0xe8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop

080068d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006930:	2300      	movs	r3, #0
 8006932:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689a      	ldr	r2, [r3, #8]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	431a      	orrs	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	431a      	orrs	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	4313      	orrs	r3, r2
 800694a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	4ba6      	ldr	r3, [pc, #664]	; (8006bec <UART_SetConfig+0x2c4>)
 8006954:	4013      	ands	r3, r2
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6812      	ldr	r2, [r2, #0]
 800695a:	6979      	ldr	r1, [r7, #20]
 800695c:	430b      	orrs	r3, r1
 800695e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68da      	ldr	r2, [r3, #12]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	430a      	orrs	r2, r1
 8006998:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a94      	ldr	r2, [pc, #592]	; (8006bf0 <UART_SetConfig+0x2c8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d120      	bne.n	80069e6 <UART_SetConfig+0xbe>
 80069a4:	4b93      	ldr	r3, [pc, #588]	; (8006bf4 <UART_SetConfig+0x2cc>)
 80069a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069aa:	f003 0303 	and.w	r3, r3, #3
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d816      	bhi.n	80069e0 <UART_SetConfig+0xb8>
 80069b2:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <UART_SetConfig+0x90>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	080069c9 	.word	0x080069c9
 80069bc:	080069d5 	.word	0x080069d5
 80069c0:	080069cf 	.word	0x080069cf
 80069c4:	080069db 	.word	0x080069db
 80069c8:	2301      	movs	r3, #1
 80069ca:	77fb      	strb	r3, [r7, #31]
 80069cc:	e150      	b.n	8006c70 <UART_SetConfig+0x348>
 80069ce:	2302      	movs	r3, #2
 80069d0:	77fb      	strb	r3, [r7, #31]
 80069d2:	e14d      	b.n	8006c70 <UART_SetConfig+0x348>
 80069d4:	2304      	movs	r3, #4
 80069d6:	77fb      	strb	r3, [r7, #31]
 80069d8:	e14a      	b.n	8006c70 <UART_SetConfig+0x348>
 80069da:	2308      	movs	r3, #8
 80069dc:	77fb      	strb	r3, [r7, #31]
 80069de:	e147      	b.n	8006c70 <UART_SetConfig+0x348>
 80069e0:	2310      	movs	r3, #16
 80069e2:	77fb      	strb	r3, [r7, #31]
 80069e4:	e144      	b.n	8006c70 <UART_SetConfig+0x348>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a83      	ldr	r2, [pc, #524]	; (8006bf8 <UART_SetConfig+0x2d0>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d132      	bne.n	8006a56 <UART_SetConfig+0x12e>
 80069f0:	4b80      	ldr	r3, [pc, #512]	; (8006bf4 <UART_SetConfig+0x2cc>)
 80069f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f6:	f003 030c 	and.w	r3, r3, #12
 80069fa:	2b0c      	cmp	r3, #12
 80069fc:	d828      	bhi.n	8006a50 <UART_SetConfig+0x128>
 80069fe:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <UART_SetConfig+0xdc>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a39 	.word	0x08006a39
 8006a08:	08006a51 	.word	0x08006a51
 8006a0c:	08006a51 	.word	0x08006a51
 8006a10:	08006a51 	.word	0x08006a51
 8006a14:	08006a45 	.word	0x08006a45
 8006a18:	08006a51 	.word	0x08006a51
 8006a1c:	08006a51 	.word	0x08006a51
 8006a20:	08006a51 	.word	0x08006a51
 8006a24:	08006a3f 	.word	0x08006a3f
 8006a28:	08006a51 	.word	0x08006a51
 8006a2c:	08006a51 	.word	0x08006a51
 8006a30:	08006a51 	.word	0x08006a51
 8006a34:	08006a4b 	.word	0x08006a4b
 8006a38:	2300      	movs	r3, #0
 8006a3a:	77fb      	strb	r3, [r7, #31]
 8006a3c:	e118      	b.n	8006c70 <UART_SetConfig+0x348>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	77fb      	strb	r3, [r7, #31]
 8006a42:	e115      	b.n	8006c70 <UART_SetConfig+0x348>
 8006a44:	2304      	movs	r3, #4
 8006a46:	77fb      	strb	r3, [r7, #31]
 8006a48:	e112      	b.n	8006c70 <UART_SetConfig+0x348>
 8006a4a:	2308      	movs	r3, #8
 8006a4c:	77fb      	strb	r3, [r7, #31]
 8006a4e:	e10f      	b.n	8006c70 <UART_SetConfig+0x348>
 8006a50:	2310      	movs	r3, #16
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e10c      	b.n	8006c70 <UART_SetConfig+0x348>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a68      	ldr	r2, [pc, #416]	; (8006bfc <UART_SetConfig+0x2d4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d120      	bne.n	8006aa2 <UART_SetConfig+0x17a>
 8006a60:	4b64      	ldr	r3, [pc, #400]	; (8006bf4 <UART_SetConfig+0x2cc>)
 8006a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a6a:	2b30      	cmp	r3, #48	; 0x30
 8006a6c:	d013      	beq.n	8006a96 <UART_SetConfig+0x16e>
 8006a6e:	2b30      	cmp	r3, #48	; 0x30
 8006a70:	d814      	bhi.n	8006a9c <UART_SetConfig+0x174>
 8006a72:	2b20      	cmp	r3, #32
 8006a74:	d009      	beq.n	8006a8a <UART_SetConfig+0x162>
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	d810      	bhi.n	8006a9c <UART_SetConfig+0x174>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <UART_SetConfig+0x15c>
 8006a7e:	2b10      	cmp	r3, #16
 8006a80:	d006      	beq.n	8006a90 <UART_SetConfig+0x168>
 8006a82:	e00b      	b.n	8006a9c <UART_SetConfig+0x174>
 8006a84:	2300      	movs	r3, #0
 8006a86:	77fb      	strb	r3, [r7, #31]
 8006a88:	e0f2      	b.n	8006c70 <UART_SetConfig+0x348>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	77fb      	strb	r3, [r7, #31]
 8006a8e:	e0ef      	b.n	8006c70 <UART_SetConfig+0x348>
 8006a90:	2304      	movs	r3, #4
 8006a92:	77fb      	strb	r3, [r7, #31]
 8006a94:	e0ec      	b.n	8006c70 <UART_SetConfig+0x348>
 8006a96:	2308      	movs	r3, #8
 8006a98:	77fb      	strb	r3, [r7, #31]
 8006a9a:	e0e9      	b.n	8006c70 <UART_SetConfig+0x348>
 8006a9c:	2310      	movs	r3, #16
 8006a9e:	77fb      	strb	r3, [r7, #31]
 8006aa0:	e0e6      	b.n	8006c70 <UART_SetConfig+0x348>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a56      	ldr	r2, [pc, #344]	; (8006c00 <UART_SetConfig+0x2d8>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d120      	bne.n	8006aee <UART_SetConfig+0x1c6>
 8006aac:	4b51      	ldr	r3, [pc, #324]	; (8006bf4 <UART_SetConfig+0x2cc>)
 8006aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ab6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ab8:	d013      	beq.n	8006ae2 <UART_SetConfig+0x1ba>
 8006aba:	2bc0      	cmp	r3, #192	; 0xc0
 8006abc:	d814      	bhi.n	8006ae8 <UART_SetConfig+0x1c0>
 8006abe:	2b80      	cmp	r3, #128	; 0x80
 8006ac0:	d009      	beq.n	8006ad6 <UART_SetConfig+0x1ae>
 8006ac2:	2b80      	cmp	r3, #128	; 0x80
 8006ac4:	d810      	bhi.n	8006ae8 <UART_SetConfig+0x1c0>
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d002      	beq.n	8006ad0 <UART_SetConfig+0x1a8>
 8006aca:	2b40      	cmp	r3, #64	; 0x40
 8006acc:	d006      	beq.n	8006adc <UART_SetConfig+0x1b4>
 8006ace:	e00b      	b.n	8006ae8 <UART_SetConfig+0x1c0>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	77fb      	strb	r3, [r7, #31]
 8006ad4:	e0cc      	b.n	8006c70 <UART_SetConfig+0x348>
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	77fb      	strb	r3, [r7, #31]
 8006ada:	e0c9      	b.n	8006c70 <UART_SetConfig+0x348>
 8006adc:	2304      	movs	r3, #4
 8006ade:	77fb      	strb	r3, [r7, #31]
 8006ae0:	e0c6      	b.n	8006c70 <UART_SetConfig+0x348>
 8006ae2:	2308      	movs	r3, #8
 8006ae4:	77fb      	strb	r3, [r7, #31]
 8006ae6:	e0c3      	b.n	8006c70 <UART_SetConfig+0x348>
 8006ae8:	2310      	movs	r3, #16
 8006aea:	77fb      	strb	r3, [r7, #31]
 8006aec:	e0c0      	b.n	8006c70 <UART_SetConfig+0x348>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a44      	ldr	r2, [pc, #272]	; (8006c04 <UART_SetConfig+0x2dc>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d125      	bne.n	8006b44 <UART_SetConfig+0x21c>
 8006af8:	4b3e      	ldr	r3, [pc, #248]	; (8006bf4 <UART_SetConfig+0x2cc>)
 8006afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b06:	d017      	beq.n	8006b38 <UART_SetConfig+0x210>
 8006b08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b0c:	d817      	bhi.n	8006b3e <UART_SetConfig+0x216>
 8006b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b12:	d00b      	beq.n	8006b2c <UART_SetConfig+0x204>
 8006b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b18:	d811      	bhi.n	8006b3e <UART_SetConfig+0x216>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <UART_SetConfig+0x1fe>
 8006b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b22:	d006      	beq.n	8006b32 <UART_SetConfig+0x20a>
 8006b24:	e00b      	b.n	8006b3e <UART_SetConfig+0x216>
 8006b26:	2300      	movs	r3, #0
 8006b28:	77fb      	strb	r3, [r7, #31]
 8006b2a:	e0a1      	b.n	8006c70 <UART_SetConfig+0x348>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	77fb      	strb	r3, [r7, #31]
 8006b30:	e09e      	b.n	8006c70 <UART_SetConfig+0x348>
 8006b32:	2304      	movs	r3, #4
 8006b34:	77fb      	strb	r3, [r7, #31]
 8006b36:	e09b      	b.n	8006c70 <UART_SetConfig+0x348>
 8006b38:	2308      	movs	r3, #8
 8006b3a:	77fb      	strb	r3, [r7, #31]
 8006b3c:	e098      	b.n	8006c70 <UART_SetConfig+0x348>
 8006b3e:	2310      	movs	r3, #16
 8006b40:	77fb      	strb	r3, [r7, #31]
 8006b42:	e095      	b.n	8006c70 <UART_SetConfig+0x348>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a2f      	ldr	r2, [pc, #188]	; (8006c08 <UART_SetConfig+0x2e0>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d125      	bne.n	8006b9a <UART_SetConfig+0x272>
 8006b4e:	4b29      	ldr	r3, [pc, #164]	; (8006bf4 <UART_SetConfig+0x2cc>)
 8006b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b5c:	d017      	beq.n	8006b8e <UART_SetConfig+0x266>
 8006b5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b62:	d817      	bhi.n	8006b94 <UART_SetConfig+0x26c>
 8006b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b68:	d00b      	beq.n	8006b82 <UART_SetConfig+0x25a>
 8006b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b6e:	d811      	bhi.n	8006b94 <UART_SetConfig+0x26c>
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <UART_SetConfig+0x254>
 8006b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b78:	d006      	beq.n	8006b88 <UART_SetConfig+0x260>
 8006b7a:	e00b      	b.n	8006b94 <UART_SetConfig+0x26c>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	77fb      	strb	r3, [r7, #31]
 8006b80:	e076      	b.n	8006c70 <UART_SetConfig+0x348>
 8006b82:	2302      	movs	r3, #2
 8006b84:	77fb      	strb	r3, [r7, #31]
 8006b86:	e073      	b.n	8006c70 <UART_SetConfig+0x348>
 8006b88:	2304      	movs	r3, #4
 8006b8a:	77fb      	strb	r3, [r7, #31]
 8006b8c:	e070      	b.n	8006c70 <UART_SetConfig+0x348>
 8006b8e:	2308      	movs	r3, #8
 8006b90:	77fb      	strb	r3, [r7, #31]
 8006b92:	e06d      	b.n	8006c70 <UART_SetConfig+0x348>
 8006b94:	2310      	movs	r3, #16
 8006b96:	77fb      	strb	r3, [r7, #31]
 8006b98:	e06a      	b.n	8006c70 <UART_SetConfig+0x348>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a1b      	ldr	r2, [pc, #108]	; (8006c0c <UART_SetConfig+0x2e4>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d138      	bne.n	8006c16 <UART_SetConfig+0x2ee>
 8006ba4:	4b13      	ldr	r3, [pc, #76]	; (8006bf4 <UART_SetConfig+0x2cc>)
 8006ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006baa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006bae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bb2:	d017      	beq.n	8006be4 <UART_SetConfig+0x2bc>
 8006bb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bb8:	d82a      	bhi.n	8006c10 <UART_SetConfig+0x2e8>
 8006bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bbe:	d00b      	beq.n	8006bd8 <UART_SetConfig+0x2b0>
 8006bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc4:	d824      	bhi.n	8006c10 <UART_SetConfig+0x2e8>
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <UART_SetConfig+0x2aa>
 8006bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bce:	d006      	beq.n	8006bde <UART_SetConfig+0x2b6>
 8006bd0:	e01e      	b.n	8006c10 <UART_SetConfig+0x2e8>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	77fb      	strb	r3, [r7, #31]
 8006bd6:	e04b      	b.n	8006c70 <UART_SetConfig+0x348>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	77fb      	strb	r3, [r7, #31]
 8006bdc:	e048      	b.n	8006c70 <UART_SetConfig+0x348>
 8006bde:	2304      	movs	r3, #4
 8006be0:	77fb      	strb	r3, [r7, #31]
 8006be2:	e045      	b.n	8006c70 <UART_SetConfig+0x348>
 8006be4:	2308      	movs	r3, #8
 8006be6:	77fb      	strb	r3, [r7, #31]
 8006be8:	e042      	b.n	8006c70 <UART_SetConfig+0x348>
 8006bea:	bf00      	nop
 8006bec:	efff69f3 	.word	0xefff69f3
 8006bf0:	40011000 	.word	0x40011000
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	40004400 	.word	0x40004400
 8006bfc:	40004800 	.word	0x40004800
 8006c00:	40004c00 	.word	0x40004c00
 8006c04:	40005000 	.word	0x40005000
 8006c08:	40011400 	.word	0x40011400
 8006c0c:	40007800 	.word	0x40007800
 8006c10:	2310      	movs	r3, #16
 8006c12:	77fb      	strb	r3, [r7, #31]
 8006c14:	e02c      	b.n	8006c70 <UART_SetConfig+0x348>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a72      	ldr	r2, [pc, #456]	; (8006de4 <UART_SetConfig+0x4bc>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d125      	bne.n	8006c6c <UART_SetConfig+0x344>
 8006c20:	4b71      	ldr	r3, [pc, #452]	; (8006de8 <UART_SetConfig+0x4c0>)
 8006c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c2a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c2e:	d017      	beq.n	8006c60 <UART_SetConfig+0x338>
 8006c30:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c34:	d817      	bhi.n	8006c66 <UART_SetConfig+0x33e>
 8006c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c3a:	d00b      	beq.n	8006c54 <UART_SetConfig+0x32c>
 8006c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c40:	d811      	bhi.n	8006c66 <UART_SetConfig+0x33e>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <UART_SetConfig+0x326>
 8006c46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c4a:	d006      	beq.n	8006c5a <UART_SetConfig+0x332>
 8006c4c:	e00b      	b.n	8006c66 <UART_SetConfig+0x33e>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	77fb      	strb	r3, [r7, #31]
 8006c52:	e00d      	b.n	8006c70 <UART_SetConfig+0x348>
 8006c54:	2302      	movs	r3, #2
 8006c56:	77fb      	strb	r3, [r7, #31]
 8006c58:	e00a      	b.n	8006c70 <UART_SetConfig+0x348>
 8006c5a:	2304      	movs	r3, #4
 8006c5c:	77fb      	strb	r3, [r7, #31]
 8006c5e:	e007      	b.n	8006c70 <UART_SetConfig+0x348>
 8006c60:	2308      	movs	r3, #8
 8006c62:	77fb      	strb	r3, [r7, #31]
 8006c64:	e004      	b.n	8006c70 <UART_SetConfig+0x348>
 8006c66:	2310      	movs	r3, #16
 8006c68:	77fb      	strb	r3, [r7, #31]
 8006c6a:	e001      	b.n	8006c70 <UART_SetConfig+0x348>
 8006c6c:	2310      	movs	r3, #16
 8006c6e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c78:	d15b      	bne.n	8006d32 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006c7a:	7ffb      	ldrb	r3, [r7, #31]
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d828      	bhi.n	8006cd2 <UART_SetConfig+0x3aa>
 8006c80:	a201      	add	r2, pc, #4	; (adr r2, 8006c88 <UART_SetConfig+0x360>)
 8006c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c86:	bf00      	nop
 8006c88:	08006cad 	.word	0x08006cad
 8006c8c:	08006cb5 	.word	0x08006cb5
 8006c90:	08006cbd 	.word	0x08006cbd
 8006c94:	08006cd3 	.word	0x08006cd3
 8006c98:	08006cc3 	.word	0x08006cc3
 8006c9c:	08006cd3 	.word	0x08006cd3
 8006ca0:	08006cd3 	.word	0x08006cd3
 8006ca4:	08006cd3 	.word	0x08006cd3
 8006ca8:	08006ccb 	.word	0x08006ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cac:	f7fd fc92 	bl	80045d4 <HAL_RCC_GetPCLK1Freq>
 8006cb0:	61b8      	str	r0, [r7, #24]
        break;
 8006cb2:	e013      	b.n	8006cdc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cb4:	f7fd fca2 	bl	80045fc <HAL_RCC_GetPCLK2Freq>
 8006cb8:	61b8      	str	r0, [r7, #24]
        break;
 8006cba:	e00f      	b.n	8006cdc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cbc:	4b4b      	ldr	r3, [pc, #300]	; (8006dec <UART_SetConfig+0x4c4>)
 8006cbe:	61bb      	str	r3, [r7, #24]
        break;
 8006cc0:	e00c      	b.n	8006cdc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc2:	f7fd fb75 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8006cc6:	61b8      	str	r0, [r7, #24]
        break;
 8006cc8:	e008      	b.n	8006cdc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cce:	61bb      	str	r3, [r7, #24]
        break;
 8006cd0:	e004      	b.n	8006cdc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	77bb      	strb	r3, [r7, #30]
        break;
 8006cda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d074      	beq.n	8006dcc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	005a      	lsls	r2, r3, #1
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	085b      	lsrs	r3, r3, #1
 8006cec:	441a      	add	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2b0f      	cmp	r3, #15
 8006cfc:	d916      	bls.n	8006d2c <UART_SetConfig+0x404>
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d04:	d212      	bcs.n	8006d2c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	f023 030f 	bic.w	r3, r3, #15
 8006d0e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	085b      	lsrs	r3, r3, #1
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	f003 0307 	and.w	r3, r3, #7
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	89fb      	ldrh	r3, [r7, #14]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	89fa      	ldrh	r2, [r7, #14]
 8006d28:	60da      	str	r2, [r3, #12]
 8006d2a:	e04f      	b.n	8006dcc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	77bb      	strb	r3, [r7, #30]
 8006d30:	e04c      	b.n	8006dcc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d32:	7ffb      	ldrb	r3, [r7, #31]
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	d828      	bhi.n	8006d8a <UART_SetConfig+0x462>
 8006d38:	a201      	add	r2, pc, #4	; (adr r2, 8006d40 <UART_SetConfig+0x418>)
 8006d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3e:	bf00      	nop
 8006d40:	08006d65 	.word	0x08006d65
 8006d44:	08006d6d 	.word	0x08006d6d
 8006d48:	08006d75 	.word	0x08006d75
 8006d4c:	08006d8b 	.word	0x08006d8b
 8006d50:	08006d7b 	.word	0x08006d7b
 8006d54:	08006d8b 	.word	0x08006d8b
 8006d58:	08006d8b 	.word	0x08006d8b
 8006d5c:	08006d8b 	.word	0x08006d8b
 8006d60:	08006d83 	.word	0x08006d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d64:	f7fd fc36 	bl	80045d4 <HAL_RCC_GetPCLK1Freq>
 8006d68:	61b8      	str	r0, [r7, #24]
        break;
 8006d6a:	e013      	b.n	8006d94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d6c:	f7fd fc46 	bl	80045fc <HAL_RCC_GetPCLK2Freq>
 8006d70:	61b8      	str	r0, [r7, #24]
        break;
 8006d72:	e00f      	b.n	8006d94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d74:	4b1d      	ldr	r3, [pc, #116]	; (8006dec <UART_SetConfig+0x4c4>)
 8006d76:	61bb      	str	r3, [r7, #24]
        break;
 8006d78:	e00c      	b.n	8006d94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d7a:	f7fd fb19 	bl	80043b0 <HAL_RCC_GetSysClockFreq>
 8006d7e:	61b8      	str	r0, [r7, #24]
        break;
 8006d80:	e008      	b.n	8006d94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d86:	61bb      	str	r3, [r7, #24]
        break;
 8006d88:	e004      	b.n	8006d94 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	77bb      	strb	r3, [r7, #30]
        break;
 8006d92:	bf00      	nop
    }

    if (pclk != 0U)
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d018      	beq.n	8006dcc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	085a      	lsrs	r2, r3, #1
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	441a      	add	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	2b0f      	cmp	r3, #15
 8006db2:	d909      	bls.n	8006dc8 <UART_SetConfig+0x4a0>
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dba:	d205      	bcs.n	8006dc8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	60da      	str	r2, [r3, #12]
 8006dc6:	e001      	b.n	8006dcc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006dd8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3720      	adds	r7, #32
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	40007c00 	.word	0x40007c00
 8006de8:	40023800 	.word	0x40023800
 8006dec:	00f42400 	.word	0x00f42400

08006df0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00a      	beq.n	8006e5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	f003 0308 	and.w	r3, r3, #8
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	f003 0310 	and.w	r3, r3, #16
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	f003 0320 	and.w	r3, r3, #32
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d01a      	beq.n	8006f06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eee:	d10a      	bne.n	8006f06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	430a      	orrs	r2, r1
 8006f26:	605a      	str	r2, [r3, #4]
  }
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af02      	add	r7, sp, #8
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f44:	f7fb fb44 	bl	80025d0 <HAL_GetTick>
 8006f48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0308 	and.w	r3, r3, #8
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	d10e      	bne.n	8006f76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f82d 	bl	8006fc6 <UART_WaitOnFlagUntilTimeout>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e023      	b.n	8006fbe <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0304 	and.w	r3, r3, #4
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	d10e      	bne.n	8006fa2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f817 	bl	8006fc6 <UART_WaitOnFlagUntilTimeout>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e00d      	b.n	8006fbe <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2220      	movs	r2, #32
 8006fac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b09c      	sub	sp, #112	; 0x70
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	60f8      	str	r0, [r7, #12]
 8006fce:	60b9      	str	r1, [r7, #8]
 8006fd0:	603b      	str	r3, [r7, #0]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fd6:	e0a5      	b.n	8007124 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fde:	f000 80a1 	beq.w	8007124 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe2:	f7fb faf5 	bl	80025d0 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d302      	bcc.n	8006ff8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d13e      	bne.n	8007076 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007000:	e853 3f00 	ldrex	r3, [r3]
 8007004:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007008:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800700c:	667b      	str	r3, [r7, #100]	; 0x64
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007016:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007018:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800701c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1e6      	bne.n	8006ff8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3308      	adds	r3, #8
 8007030:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703c:	f023 0301 	bic.w	r3, r3, #1
 8007040:	663b      	str	r3, [r7, #96]	; 0x60
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3308      	adds	r3, #8
 8007048:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800704a:	64ba      	str	r2, [r7, #72]	; 0x48
 800704c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007052:	e841 2300 	strex	r3, r2, [r1]
 8007056:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1e5      	bne.n	800702a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2220      	movs	r2, #32
 8007062:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2220      	movs	r2, #32
 8007068:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e067      	b.n	8007146 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	2b00      	cmp	r3, #0
 8007082:	d04f      	beq.n	8007124 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800708e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007092:	d147      	bne.n	8007124 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800709c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070bc:	637b      	str	r3, [r7, #52]	; 0x34
 80070be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070c4:	e841 2300 	strex	r3, r2, [r1]
 80070c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e6      	bne.n	800709e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3308      	adds	r3, #8
 80070d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	613b      	str	r3, [r7, #16]
   return(result);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f023 0301 	bic.w	r3, r3, #1
 80070e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3308      	adds	r3, #8
 80070ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070f0:	623a      	str	r2, [r7, #32]
 80070f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	69f9      	ldr	r1, [r7, #28]
 80070f6:	6a3a      	ldr	r2, [r7, #32]
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e5      	bne.n	80070d0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2220      	movs	r2, #32
 8007108:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2220      	movs	r2, #32
 800710e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2220      	movs	r2, #32
 8007114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e010      	b.n	8007146 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	69da      	ldr	r2, [r3, #28]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	4013      	ands	r3, r2
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	429a      	cmp	r2, r3
 8007132:	bf0c      	ite	eq
 8007134:	2301      	moveq	r3, #1
 8007136:	2300      	movne	r3, #0
 8007138:	b2db      	uxtb	r3, r3
 800713a:	461a      	mov	r2, r3
 800713c:	79fb      	ldrb	r3, [r7, #7]
 800713e:	429a      	cmp	r2, r3
 8007140:	f43f af4a 	beq.w	8006fd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3770      	adds	r7, #112	; 0x70
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
	...

08007150 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007150:	b480      	push	{r7}
 8007152:	b097      	sub	sp, #92	; 0x5c
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	4613      	mov	r3, r2
 800715c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	88fa      	ldrh	r2, [r7, #6]
 8007168:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	88fa      	ldrh	r2, [r7, #6]
 8007170:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007182:	d10e      	bne.n	80071a2 <UART_Start_Receive_IT+0x52>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d105      	bne.n	8007198 <UART_Start_Receive_IT+0x48>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007192:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007196:	e02d      	b.n	80071f4 <UART_Start_Receive_IT+0xa4>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	22ff      	movs	r2, #255	; 0xff
 800719c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071a0:	e028      	b.n	80071f4 <UART_Start_Receive_IT+0xa4>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10d      	bne.n	80071c6 <UART_Start_Receive_IT+0x76>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d104      	bne.n	80071bc <UART_Start_Receive_IT+0x6c>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	22ff      	movs	r2, #255	; 0xff
 80071b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071ba:	e01b      	b.n	80071f4 <UART_Start_Receive_IT+0xa4>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	227f      	movs	r2, #127	; 0x7f
 80071c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071c4:	e016      	b.n	80071f4 <UART_Start_Receive_IT+0xa4>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071ce:	d10d      	bne.n	80071ec <UART_Start_Receive_IT+0x9c>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d104      	bne.n	80071e2 <UART_Start_Receive_IT+0x92>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	227f      	movs	r2, #127	; 0x7f
 80071dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071e0:	e008      	b.n	80071f4 <UART_Start_Receive_IT+0xa4>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	223f      	movs	r2, #63	; 0x3f
 80071e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071ea:	e003      	b.n	80071f4 <UART_Start_Receive_IT+0xa4>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2222      	movs	r2, #34	; 0x22
 8007200:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	f043 0301 	orr.w	r3, r3, #1
 8007218:	657b      	str	r3, [r7, #84]	; 0x54
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3308      	adds	r3, #8
 8007220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007222:	64ba      	str	r2, [r7, #72]	; 0x48
 8007224:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007226:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800722a:	e841 2300 	strex	r3, r2, [r1]
 800722e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1e5      	bne.n	8007202 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800723e:	d107      	bne.n	8007250 <UART_Start_Receive_IT+0x100>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d103      	bne.n	8007250 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4a24      	ldr	r2, [pc, #144]	; (80072dc <UART_Start_Receive_IT+0x18c>)
 800724c:	665a      	str	r2, [r3, #100]	; 0x64
 800724e:	e002      	b.n	8007256 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4a23      	ldr	r2, [pc, #140]	; (80072e0 <UART_Start_Receive_IT+0x190>)
 8007254:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d019      	beq.n	800729a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726e:	e853 3f00 	ldrex	r3, [r3]
 8007272:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800727a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	461a      	mov	r2, r3
 8007282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007284:	637b      	str	r3, [r7, #52]	; 0x34
 8007286:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007288:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800728a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800728c:	e841 2300 	strex	r3, r2, [r1]
 8007290:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e6      	bne.n	8007266 <UART_Start_Receive_IT+0x116>
 8007298:	e018      	b.n	80072cc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	e853 3f00 	ldrex	r3, [r3]
 80072a6:	613b      	str	r3, [r7, #16]
   return(result);
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f043 0320 	orr.w	r3, r3, #32
 80072ae:	653b      	str	r3, [r7, #80]	; 0x50
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	461a      	mov	r2, r3
 80072b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072b8:	623b      	str	r3, [r7, #32]
 80072ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072bc:	69f9      	ldr	r1, [r7, #28]
 80072be:	6a3a      	ldr	r2, [r7, #32]
 80072c0:	e841 2300 	strex	r3, r2, [r1]
 80072c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1e6      	bne.n	800729a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	375c      	adds	r7, #92	; 0x5c
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	08007587 	.word	0x08007587
 80072e0:	0800742b 	.word	0x0800742b

080072e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b095      	sub	sp, #84	; 0x54
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007300:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800730a:	643b      	str	r3, [r7, #64]	; 0x40
 800730c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007310:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007312:	e841 2300 	strex	r3, r2, [r1]
 8007316:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1e6      	bne.n	80072ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3308      	adds	r3, #8
 8007324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	e853 3f00 	ldrex	r3, [r3]
 800732c:	61fb      	str	r3, [r7, #28]
   return(result);
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	f023 0301 	bic.w	r3, r3, #1
 8007334:	64bb      	str	r3, [r7, #72]	; 0x48
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3308      	adds	r3, #8
 800733c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800733e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007340:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e5      	bne.n	800731e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007356:	2b01      	cmp	r3, #1
 8007358:	d118      	bne.n	800738c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	e853 3f00 	ldrex	r3, [r3]
 8007366:	60bb      	str	r3, [r7, #8]
   return(result);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f023 0310 	bic.w	r3, r3, #16
 800736e:	647b      	str	r3, [r7, #68]	; 0x44
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	461a      	mov	r2, r3
 8007376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	6979      	ldr	r1, [r7, #20]
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	e841 2300 	strex	r3, r2, [r1]
 8007384:	613b      	str	r3, [r7, #16]
   return(result);
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1e6      	bne.n	800735a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800739e:	bf00      	nop
 80073a0:	3754      	adds	r7, #84	; 0x54
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f7ff fa8d 	bl	80068e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b088      	sub	sp, #32
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	e853 3f00 	ldrex	r3, [r3]
 80073ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073f2:	61fb      	str	r3, [r7, #28]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	461a      	mov	r2, r3
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	6979      	ldr	r1, [r7, #20]
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	e841 2300 	strex	r3, r2, [r1]
 8007408:	613b      	str	r3, [r7, #16]
   return(result);
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1e6      	bne.n	80073de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2220      	movs	r2, #32
 8007414:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff fa59 	bl	80068d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007422:	bf00      	nop
 8007424:	3720      	adds	r7, #32
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b096      	sub	sp, #88	; 0x58
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007438:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007440:	2b22      	cmp	r3, #34	; 0x22
 8007442:	f040 8094 	bne.w	800756e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007450:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007454:	b2d9      	uxtb	r1, r3
 8007456:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800745a:	b2da      	uxtb	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007460:	400a      	ands	r2, r1
 8007462:	b2d2      	uxtb	r2, r2
 8007464:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746a:	1c5a      	adds	r2, r3, #1
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007476:	b29b      	uxth	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d177      	bne.n	800757e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800749c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074a2:	653b      	str	r3, [r7, #80]	; 0x50
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ac:	647b      	str	r3, [r7, #68]	; 0x44
 80074ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e6      	bne.n	800748e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3308      	adds	r3, #8
 80074c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	e853 3f00 	ldrex	r3, [r3]
 80074ce:	623b      	str	r3, [r7, #32]
   return(result);
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	f023 0301 	bic.w	r3, r3, #1
 80074d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3308      	adds	r3, #8
 80074de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074e0:	633a      	str	r2, [r7, #48]	; 0x30
 80074e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e8:	e841 2300 	strex	r3, r2, [r1]
 80074ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e5      	bne.n	80074c0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2220      	movs	r2, #32
 80074f8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007504:	2b01      	cmp	r3, #1
 8007506:	d12e      	bne.n	8007566 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	e853 3f00 	ldrex	r3, [r3]
 800751a:	60fb      	str	r3, [r7, #12]
   return(result);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f023 0310 	bic.w	r3, r3, #16
 8007522:	64bb      	str	r3, [r7, #72]	; 0x48
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	461a      	mov	r2, r3
 800752a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800752c:	61fb      	str	r3, [r7, #28]
 800752e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	69b9      	ldr	r1, [r7, #24]
 8007532:	69fa      	ldr	r2, [r7, #28]
 8007534:	e841 2300 	strex	r3, r2, [r1]
 8007538:	617b      	str	r3, [r7, #20]
   return(result);
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e6      	bne.n	800750e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f003 0310 	and.w	r3, r3, #16
 800754a:	2b10      	cmp	r3, #16
 800754c:	d103      	bne.n	8007556 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2210      	movs	r2, #16
 8007554:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff f9cc 	bl	80068fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007564:	e00b      	b.n	800757e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7f9 fed8 	bl	800131c <HAL_UART_RxCpltCallback>
}
 800756c:	e007      	b.n	800757e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	699a      	ldr	r2, [r3, #24]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f042 0208 	orr.w	r2, r2, #8
 800757c:	619a      	str	r2, [r3, #24]
}
 800757e:	bf00      	nop
 8007580:	3758      	adds	r7, #88	; 0x58
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b096      	sub	sp, #88	; 0x58
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007594:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800759c:	2b22      	cmp	r3, #34	; 0x22
 800759e:	f040 8094 	bne.w	80076ca <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80075b2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80075b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80075ba:	4013      	ands	r3, r2
 80075bc:	b29a      	uxth	r2, r3
 80075be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c6:	1c9a      	adds	r2, r3, #2
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	3b01      	subs	r3, #1
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d177      	bne.n	80076da <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007608:	643b      	str	r3, [r7, #64]	; 0x40
 800760a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800760e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e6      	bne.n	80075ea <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3308      	adds	r3, #8
 8007622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	61fb      	str	r3, [r7, #28]
   return(result);
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	f023 0301 	bic.w	r3, r3, #1
 8007632:	64bb      	str	r3, [r7, #72]	; 0x48
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3308      	adds	r3, #8
 800763a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800763c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800763e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e5      	bne.n	800761c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2220      	movs	r2, #32
 8007654:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007660:	2b01      	cmp	r3, #1
 8007662:	d12e      	bne.n	80076c2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	e853 3f00 	ldrex	r3, [r3]
 8007676:	60bb      	str	r3, [r7, #8]
   return(result);
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f023 0310 	bic.w	r3, r3, #16
 800767e:	647b      	str	r3, [r7, #68]	; 0x44
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	461a      	mov	r2, r3
 8007686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007688:	61bb      	str	r3, [r7, #24]
 800768a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768c:	6979      	ldr	r1, [r7, #20]
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	e841 2300 	strex	r3, r2, [r1]
 8007694:	613b      	str	r3, [r7, #16]
   return(result);
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e6      	bne.n	800766a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	f003 0310 	and.w	r3, r3, #16
 80076a6:	2b10      	cmp	r3, #16
 80076a8:	d103      	bne.n	80076b2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2210      	movs	r2, #16
 80076b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7ff f91e 	bl	80068fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076c0:	e00b      	b.n	80076da <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7f9 fe2a 	bl	800131c <HAL_UART_RxCpltCallback>
}
 80076c8:	e007      	b.n	80076da <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	699a      	ldr	r2, [r3, #24]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f042 0208 	orr.w	r2, r2, #8
 80076d8:	619a      	str	r2, [r3, #24]
}
 80076da:	bf00      	nop
 80076dc:	3758      	adds	r7, #88	; 0x58
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
	...

080076e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076e4:	b084      	sub	sp, #16
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	f107 001c 	add.w	r0, r7, #28
 80076f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d120      	bne.n	800773e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007700:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68da      	ldr	r2, [r3, #12]
 800770c:	4b20      	ldr	r3, [pc, #128]	; (8007790 <USB_CoreInit+0xac>)
 800770e:	4013      	ands	r3, r2
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007722:	2b01      	cmp	r3, #1
 8007724:	d105      	bne.n	8007732 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fa92 	bl	8007c5c <USB_CoreReset>
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]
 800773c:	e010      	b.n	8007760 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fa86 	bl	8007c5c <USB_CoreReset>
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007758:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	2b01      	cmp	r3, #1
 8007764:	d10b      	bne.n	800777e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f043 0206 	orr.w	r2, r3, #6
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f043 0220 	orr.w	r2, r3, #32
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800777e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800778a:	b004      	add	sp, #16
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	ffbdffbf 	.word	0xffbdffbf

08007794 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f023 0201 	bic.w	r2, r3, #1
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	460b      	mov	r3, r1
 80077c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077d2:	78fb      	ldrb	r3, [r7, #3]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d115      	bne.n	8007804 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80077e4:	2001      	movs	r0, #1
 80077e6:	f7fa feff 	bl	80025e8 <HAL_Delay>
      ms++;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3301      	adds	r3, #1
 80077ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fa25 	bl	8007c40 <USB_GetMode>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d01e      	beq.n	800783a <USB_SetCurrentMode+0x84>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b31      	cmp	r3, #49	; 0x31
 8007800:	d9f0      	bls.n	80077e4 <USB_SetCurrentMode+0x2e>
 8007802:	e01a      	b.n	800783a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d115      	bne.n	8007836 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007816:	2001      	movs	r0, #1
 8007818:	f7fa fee6 	bl	80025e8 <HAL_Delay>
      ms++;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3301      	adds	r3, #1
 8007820:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fa0c 	bl	8007c40 <USB_GetMode>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d005      	beq.n	800783a <USB_SetCurrentMode+0x84>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2b31      	cmp	r3, #49	; 0x31
 8007832:	d9f0      	bls.n	8007816 <USB_SetCurrentMode+0x60>
 8007834:	e001      	b.n	800783a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e005      	b.n	8007846 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2b32      	cmp	r3, #50	; 0x32
 800783e:	d101      	bne.n	8007844 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e000      	b.n	8007846 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007850:	b084      	sub	sp, #16
 8007852:	b580      	push	{r7, lr}
 8007854:	b086      	sub	sp, #24
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800785e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800786a:	2300      	movs	r3, #0
 800786c:	613b      	str	r3, [r7, #16]
 800786e:	e009      	b.n	8007884 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	3340      	adds	r3, #64	; 0x40
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	2200      	movs	r2, #0
 800787c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	3301      	adds	r3, #1
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	2b0e      	cmp	r3, #14
 8007888:	d9f2      	bls.n	8007870 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800788a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800788c:	2b00      	cmp	r3, #0
 800788e:	d11c      	bne.n	80078ca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800789e:	f043 0302 	orr.w	r3, r3, #2
 80078a2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	e005      	b.n	80078d6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078dc:	461a      	mov	r2, r3
 80078de:	2300      	movs	r3, #0
 80078e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078e8:	4619      	mov	r1, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f0:	461a      	mov	r2, r3
 80078f2:	680b      	ldr	r3, [r1, #0]
 80078f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d10c      	bne.n	8007916 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d104      	bne.n	800790c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007902:	2100      	movs	r1, #0
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f961 	bl	8007bcc <USB_SetDevSpeed>
 800790a:	e008      	b.n	800791e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800790c:	2101      	movs	r1, #1
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f95c 	bl	8007bcc <USB_SetDevSpeed>
 8007914:	e003      	b.n	800791e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007916:	2103      	movs	r1, #3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f957 	bl	8007bcc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800791e:	2110      	movs	r1, #16
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f8f3 	bl	8007b0c <USB_FlushTxFifo>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f91d 	bl	8007b70 <USB_FlushRxFifo>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007946:	461a      	mov	r2, r3
 8007948:	2300      	movs	r3, #0
 800794a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007952:	461a      	mov	r2, r3
 8007954:	2300      	movs	r3, #0
 8007956:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800795e:	461a      	mov	r2, r3
 8007960:	2300      	movs	r3, #0
 8007962:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007964:	2300      	movs	r3, #0
 8007966:	613b      	str	r3, [r7, #16]
 8007968:	e043      	b.n	80079f2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4413      	add	r3, r2
 8007972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800797c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007980:	d118      	bne.n	80079b4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10a      	bne.n	800799e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007994:	461a      	mov	r2, r3
 8007996:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800799a:	6013      	str	r3, [r2, #0]
 800799c:	e013      	b.n	80079c6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079aa:	461a      	mov	r2, r3
 80079ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80079b0:	6013      	str	r3, [r2, #0]
 80079b2:	e008      	b.n	80079c6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c0:	461a      	mov	r2, r3
 80079c2:	2300      	movs	r3, #0
 80079c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d2:	461a      	mov	r2, r3
 80079d4:	2300      	movs	r3, #0
 80079d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e4:	461a      	mov	r2, r3
 80079e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	3301      	adds	r3, #1
 80079f0:	613b      	str	r3, [r7, #16]
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d3b7      	bcc.n	800796a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079fa:	2300      	movs	r3, #0
 80079fc:	613b      	str	r3, [r7, #16]
 80079fe:	e043      	b.n	8007a88 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a16:	d118      	bne.n	8007a4a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10a      	bne.n	8007a34 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	e013      	b.n	8007a5c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a40:	461a      	mov	r2, r3
 8007a42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	e008      	b.n	8007a5c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a56:	461a      	mov	r2, r3
 8007a58:	2300      	movs	r3, #0
 8007a5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a68:	461a      	mov	r2, r3
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	3301      	adds	r3, #1
 8007a86:	613b      	str	r3, [r7, #16]
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d3b7      	bcc.n	8007a00 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aa2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007ab0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d105      	bne.n	8007ac4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	f043 0210 	orr.w	r2, r3, #16
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	699a      	ldr	r2, [r3, #24]
 8007ac8:	4b0e      	ldr	r3, [pc, #56]	; (8007b04 <USB_DevInit+0x2b4>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d005      	beq.n	8007ae2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	f043 0208 	orr.w	r2, r3, #8
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d105      	bne.n	8007af4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	699a      	ldr	r2, [r3, #24]
 8007aec:	4b06      	ldr	r3, [pc, #24]	; (8007b08 <USB_DevInit+0x2b8>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b00:	b004      	add	sp, #16
 8007b02:	4770      	bx	lr
 8007b04:	803c3800 	.word	0x803c3800
 8007b08:	40000004 	.word	0x40000004

08007b0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	4a12      	ldr	r2, [pc, #72]	; (8007b6c <USB_FlushTxFifo+0x60>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d901      	bls.n	8007b2a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e01a      	b.n	8007b60 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	daf3      	bge.n	8007b1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	019b      	lsls	r3, r3, #6
 8007b3a:	f043 0220 	orr.w	r2, r3, #32
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3301      	adds	r3, #1
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	4a08      	ldr	r2, [pc, #32]	; (8007b6c <USB_FlushTxFifo+0x60>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d901      	bls.n	8007b52 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e006      	b.n	8007b60 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	f003 0320 	and.w	r3, r3, #32
 8007b5a:	2b20      	cmp	r3, #32
 8007b5c:	d0f1      	beq.n	8007b42 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	00030d40 	.word	0x00030d40

08007b70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	4a11      	ldr	r2, [pc, #68]	; (8007bc8 <USB_FlushRxFifo+0x58>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d901      	bls.n	8007b8c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e017      	b.n	8007bbc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	daf3      	bge.n	8007b7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2210      	movs	r2, #16
 8007b9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	4a08      	ldr	r2, [pc, #32]	; (8007bc8 <USB_FlushRxFifo+0x58>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d901      	bls.n	8007bae <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e006      	b.n	8007bbc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	f003 0310 	and.w	r3, r3, #16
 8007bb6:	2b10      	cmp	r3, #16
 8007bb8:	d0f1      	beq.n	8007b9e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	00030d40 	.word	0x00030d40

08007bcc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	68f9      	ldr	r1, [r7, #12]
 8007be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bec:	4313      	orrs	r3, r2
 8007bee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c18:	f023 0303 	bic.w	r3, r3, #3
 8007c1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c2c:	f043 0302 	orr.w	r3, r3, #2
 8007c30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	f003 0301 	and.w	r3, r3, #1
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	4a13      	ldr	r2, [pc, #76]	; (8007cbc <USB_CoreReset+0x60>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d901      	bls.n	8007c78 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e01a      	b.n	8007cae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	daf3      	bge.n	8007c68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	f043 0201 	orr.w	r2, r3, #1
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	3301      	adds	r3, #1
 8007c94:	60fb      	str	r3, [r7, #12]
 8007c96:	4a09      	ldr	r2, [pc, #36]	; (8007cbc <USB_CoreReset+0x60>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d901      	bls.n	8007ca0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e006      	b.n	8007cae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d0f1      	beq.n	8007c90 <USB_CoreReset+0x34>

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	00030d40 	.word	0x00030d40

08007cc0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007cd2:	2b84      	cmp	r3, #132	; 0x84
 8007cd4:	d005      	beq.n	8007ce2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007cd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	4413      	add	r3, r2
 8007cde:	3303      	adds	r3, #3
 8007ce0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cf6:	f3ef 8305 	mrs	r3, IPSR
 8007cfa:	607b      	str	r3, [r7, #4]
  return(result);
 8007cfc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	bf14      	ite	ne
 8007d02:	2301      	movne	r3, #1
 8007d04:	2300      	moveq	r3, #0
 8007d06:	b2db      	uxtb	r3, r3
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007d18:	f001 f868 	bl	8008dec <vTaskStartScheduler>
  
  return osOK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d24:	b089      	sub	sp, #36	; 0x24
 8007d26:	af04      	add	r7, sp, #16
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d020      	beq.n	8007d76 <osThreadCreate+0x54>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d01c      	beq.n	8007d76 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685c      	ldr	r4, [r3, #4]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681d      	ldr	r5, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	691e      	ldr	r6, [r3, #16]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7ff ffb6 	bl	8007cc0 <makeFreeRtosPriority>
 8007d54:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d5e:	9202      	str	r2, [sp, #8]
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	9100      	str	r1, [sp, #0]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	4632      	mov	r2, r6
 8007d68:	4629      	mov	r1, r5
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f000 fe6c 	bl	8008a48 <xTaskCreateStatic>
 8007d70:	4603      	mov	r3, r0
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	e01c      	b.n	8007db0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685c      	ldr	r4, [r3, #4]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d82:	b29e      	uxth	r6, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7ff ff98 	bl	8007cc0 <makeFreeRtosPriority>
 8007d90:	4602      	mov	r2, r0
 8007d92:	f107 030c 	add.w	r3, r7, #12
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	9200      	str	r2, [sp, #0]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	4632      	mov	r2, r6
 8007d9e:	4629      	mov	r1, r5
 8007da0:	4620      	mov	r0, r4
 8007da2:	f000 feb4 	bl	8008b0e <xTaskCreate>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d001      	beq.n	8007db0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007dac:	2300      	movs	r3, #0
 8007dae:	e000      	b.n	8007db2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007db0:	68fb      	ldr	r3, [r7, #12]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007dba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <osDelay+0x16>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	e000      	b.n	8007dd2 <osDelay+0x18>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 ffd4 	bl	8008d80 <vTaskDelay>
  
  return osOK;
 8007dd8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
	...

08007de4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	460b      	mov	r3, r1
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d013      	beq.n	8007e22 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8007dfa:	7afb      	ldrb	r3, [r7, #11]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d101      	bne.n	8007e04 <osTimerCreate+0x20>
 8007e00:	2101      	movs	r1, #1
 8007e02:	e000      	b.n	8007e06 <osTimerCreate+0x22>
 8007e04:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8007e0e:	9201      	str	r2, [sp, #4]
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	460a      	mov	r2, r1
 8007e16:	2101      	movs	r1, #1
 8007e18:	480b      	ldr	r0, [pc, #44]	; (8007e48 <osTimerCreate+0x64>)
 8007e1a:	f001 fdb6 	bl	800998a <xTimerCreateStatic>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	e00e      	b.n	8007e40 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8007e22:	7afb      	ldrb	r3, [r7, #11]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d101      	bne.n	8007e2c <osTimerCreate+0x48>
 8007e28:	2201      	movs	r2, #1
 8007e2a:	e000      	b.n	8007e2e <osTimerCreate+0x4a>
 8007e2c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2101      	movs	r1, #1
 8007e38:	4803      	ldr	r0, [pc, #12]	; (8007e48 <osTimerCreate+0x64>)
 8007e3a:	f001 fd85 	bl	8009948 <xTimerCreate>
 8007e3e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	0800f36c 	.word	0x0800f36c

08007e4c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b088      	sub	sp, #32
 8007e50:	af02      	add	r7, sp, #8
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <osTimerStart+0x20>
    ticks = 1;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8007e6c:	f7ff ff40 	bl	8007cf0 <inHandlerMode>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d01a      	beq.n	8007eac <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8007e76:	f107 030c 	add.w	r3, r7, #12
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	9200      	str	r2, [sp, #0]
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	2109      	movs	r1, #9
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f001 fe00 	bl	8009a88 <xTimerGenericCommand>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d002      	beq.n	8007e94 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8007e8e:	23ff      	movs	r3, #255	; 0xff
 8007e90:	617b      	str	r3, [r7, #20]
 8007e92:	e018      	b.n	8007ec6 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d015      	beq.n	8007ec6 <osTimerStart+0x7a>
 8007e9a:	4b0d      	ldr	r3, [pc, #52]	; (8007ed0 <osTimerStart+0x84>)
 8007e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	e00c      	b.n	8007ec6 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8007eac:	2300      	movs	r3, #0
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	2104      	movs	r1, #4
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 fde6 	bl	8009a88 <xTimerGenericCommand>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d001      	beq.n	8007ec6 <osTimerStart+0x7a>
      result = osErrorOS;
 8007ec2:	23ff      	movs	r3, #255	; 0xff
 8007ec4:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8007ec6:	697b      	ldr	r3, [r7, #20]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	e000ed04 	.word	0xe000ed04

08007ed4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f103 0208 	add.w	r2, r3, #8
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8007eec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f103 0208 	add.w	r2, r3, #8
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f103 0208 	add.w	r2, r3, #8
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f22:	bf00      	nop
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b085      	sub	sp, #20
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	683a      	ldr	r2, [r7, #0]
 8007f52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	601a      	str	r2, [r3, #0]
}
 8007f6a:	bf00      	nop
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f76:	b480      	push	{r7}
 8007f78:	b085      	sub	sp, #20
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8c:	d103      	bne.n	8007f96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	e00c      	b.n	8007fb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	3308      	adds	r3, #8
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	e002      	b.n	8007fa4 <vListInsert+0x2e>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d2f6      	bcs.n	8007f9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	601a      	str	r2, [r3, #0]
}
 8007fdc:	bf00      	nop
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	6892      	ldr	r2, [r2, #8]
 8007ffe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	6852      	ldr	r2, [r2, #4]
 8008008:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	429a      	cmp	r2, r3
 8008012:	d103      	bne.n	800801c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689a      	ldr	r2, [r3, #8]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	1e5a      	subs	r2, r3, #1
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10c      	bne.n	800806a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	b672      	cpsid	i
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	b662      	cpsie	i
 8008064:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008066:	bf00      	nop
 8008068:	e7fe      	b.n	8008068 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800806a:	f002 f90f 	bl	800a28c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008076:	68f9      	ldr	r1, [r7, #12]
 8008078:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800807a:	fb01 f303 	mul.w	r3, r1, r3
 800807e:	441a      	add	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809a:	3b01      	subs	r3, #1
 800809c:	68f9      	ldr	r1, [r7, #12]
 800809e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080a0:	fb01 f303 	mul.w	r3, r1, r3
 80080a4:	441a      	add	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	22ff      	movs	r2, #255	; 0xff
 80080ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	22ff      	movs	r2, #255	; 0xff
 80080b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d114      	bne.n	80080ea <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d01a      	beq.n	80080fe <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	3310      	adds	r3, #16
 80080cc:	4618      	mov	r0, r3
 80080ce:	f001 f91f 	bl	8009310 <xTaskRemoveFromEventList>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d012      	beq.n	80080fe <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80080d8:	4b0c      	ldr	r3, [pc, #48]	; (800810c <xQueueGenericReset+0xd0>)
 80080da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080de:	601a      	str	r2, [r3, #0]
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	e009      	b.n	80080fe <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3310      	adds	r3, #16
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7ff fef0 	bl	8007ed4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	3324      	adds	r3, #36	; 0x24
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7ff feeb 	bl	8007ed4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80080fe:	f002 f8f9 	bl	800a2f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008102:	2301      	movs	r3, #1
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	e000ed04 	.word	0xe000ed04

08008110 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008110:	b580      	push	{r7, lr}
 8008112:	b08e      	sub	sp, #56	; 0x38
 8008114:	af02      	add	r7, sp, #8
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10c      	bne.n	800813e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	b672      	cpsid	i
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	b662      	cpsie	i
 8008138:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800813a:	bf00      	nop
 800813c:	e7fe      	b.n	800813c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10c      	bne.n	800815e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008148:	b672      	cpsid	i
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	b662      	cpsie	i
 8008158:	627b      	str	r3, [r7, #36]	; 0x24
}
 800815a:	bf00      	nop
 800815c:	e7fe      	b.n	800815c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d002      	beq.n	800816a <xQueueGenericCreateStatic+0x5a>
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <xQueueGenericCreateStatic+0x5e>
 800816a:	2301      	movs	r3, #1
 800816c:	e000      	b.n	8008170 <xQueueGenericCreateStatic+0x60>
 800816e:	2300      	movs	r3, #0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10c      	bne.n	800818e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	b672      	cpsid	i
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	b662      	cpsie	i
 8008188:	623b      	str	r3, [r7, #32]
}
 800818a:	bf00      	nop
 800818c:	e7fe      	b.n	800818c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d102      	bne.n	800819a <xQueueGenericCreateStatic+0x8a>
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <xQueueGenericCreateStatic+0x8e>
 800819a:	2301      	movs	r3, #1
 800819c:	e000      	b.n	80081a0 <xQueueGenericCreateStatic+0x90>
 800819e:	2300      	movs	r3, #0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10c      	bne.n	80081be <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a8:	b672      	cpsid	i
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	b662      	cpsie	i
 80081b8:	61fb      	str	r3, [r7, #28]
}
 80081ba:	bf00      	nop
 80081bc:	e7fe      	b.n	80081bc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80081be:	2348      	movs	r3, #72	; 0x48
 80081c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	2b48      	cmp	r3, #72	; 0x48
 80081c6:	d00c      	beq.n	80081e2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081cc:	b672      	cpsid	i
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	b662      	cpsie	i
 80081dc:	61bb      	str	r3, [r7, #24]
}
 80081de:	bf00      	nop
 80081e0:	e7fe      	b.n	80081e0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80081e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80081e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00d      	beq.n	800820a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80081fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	4613      	mov	r3, r2
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	68b9      	ldr	r1, [r7, #8]
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 f805 	bl	8008214 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800820a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800820c:	4618      	mov	r0, r3
 800820e:	3730      	adds	r7, #48	; 0x30
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
 8008220:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d103      	bne.n	8008230 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	e002      	b.n	8008236 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008242:	2101      	movs	r1, #1
 8008244:	69b8      	ldr	r0, [r7, #24]
 8008246:	f7ff fef9 	bl	800803c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800824a:	bf00      	nop
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
	...

08008254 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b08e      	sub	sp, #56	; 0x38
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
 8008260:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008262:	2300      	movs	r3, #0
 8008264:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10c      	bne.n	800828a <xQueueGenericSend+0x36>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	b672      	cpsid	i
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	b662      	cpsie	i
 8008284:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008286:	bf00      	nop
 8008288:	e7fe      	b.n	8008288 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d103      	bne.n	8008298 <xQueueGenericSend+0x44>
 8008290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <xQueueGenericSend+0x48>
 8008298:	2301      	movs	r3, #1
 800829a:	e000      	b.n	800829e <xQueueGenericSend+0x4a>
 800829c:	2300      	movs	r3, #0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10c      	bne.n	80082bc <xQueueGenericSend+0x68>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	b672      	cpsid	i
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	b662      	cpsie	i
 80082b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082b8:	bf00      	nop
 80082ba:	e7fe      	b.n	80082ba <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d103      	bne.n	80082ca <xQueueGenericSend+0x76>
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d101      	bne.n	80082ce <xQueueGenericSend+0x7a>
 80082ca:	2301      	movs	r3, #1
 80082cc:	e000      	b.n	80082d0 <xQueueGenericSend+0x7c>
 80082ce:	2300      	movs	r3, #0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10c      	bne.n	80082ee <xQueueGenericSend+0x9a>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	b672      	cpsid	i
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	b662      	cpsie	i
 80082e8:	623b      	str	r3, [r7, #32]
}
 80082ea:	bf00      	nop
 80082ec:	e7fe      	b.n	80082ec <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082ee:	f001 f9d3 	bl	8009698 <xTaskGetSchedulerState>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d102      	bne.n	80082fe <xQueueGenericSend+0xaa>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <xQueueGenericSend+0xae>
 80082fe:	2301      	movs	r3, #1
 8008300:	e000      	b.n	8008304 <xQueueGenericSend+0xb0>
 8008302:	2300      	movs	r3, #0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10c      	bne.n	8008322 <xQueueGenericSend+0xce>
	__asm volatile
 8008308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830c:	b672      	cpsid	i
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	b662      	cpsie	i
 800831c:	61fb      	str	r3, [r7, #28]
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008322:	f001 ffb3 	bl	800a28c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832e:	429a      	cmp	r2, r3
 8008330:	d302      	bcc.n	8008338 <xQueueGenericSend+0xe4>
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2b02      	cmp	r3, #2
 8008336:	d129      	bne.n	800838c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800833e:	f000 fa15 	bl	800876c <prvCopyDataToQueue>
 8008342:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	2b00      	cmp	r3, #0
 800834a:	d010      	beq.n	800836e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834e:	3324      	adds	r3, #36	; 0x24
 8008350:	4618      	mov	r0, r3
 8008352:	f000 ffdd 	bl	8009310 <xTaskRemoveFromEventList>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d013      	beq.n	8008384 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800835c:	4b3f      	ldr	r3, [pc, #252]	; (800845c <xQueueGenericSend+0x208>)
 800835e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	e00a      	b.n	8008384 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800836e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008370:	2b00      	cmp	r3, #0
 8008372:	d007      	beq.n	8008384 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008374:	4b39      	ldr	r3, [pc, #228]	; (800845c <xQueueGenericSend+0x208>)
 8008376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008384:	f001 ffb6 	bl	800a2f4 <vPortExitCritical>
				return pdPASS;
 8008388:	2301      	movs	r3, #1
 800838a:	e063      	b.n	8008454 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d103      	bne.n	800839a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008392:	f001 ffaf 	bl	800a2f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008396:	2300      	movs	r3, #0
 8008398:	e05c      	b.n	8008454 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800839a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839c:	2b00      	cmp	r3, #0
 800839e:	d106      	bne.n	80083ae <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083a0:	f107 0314 	add.w	r3, r7, #20
 80083a4:	4618      	mov	r0, r3
 80083a6:	f001 f817 	bl	80093d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083aa:	2301      	movs	r3, #1
 80083ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083ae:	f001 ffa1 	bl	800a2f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083b2:	f000 fd85 	bl	8008ec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083b6:	f001 ff69 	bl	800a28c <vPortEnterCritical>
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083c0:	b25b      	sxtb	r3, r3
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c6:	d103      	bne.n	80083d0 <xQueueGenericSend+0x17c>
 80083c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083d6:	b25b      	sxtb	r3, r3
 80083d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083dc:	d103      	bne.n	80083e6 <xQueueGenericSend+0x192>
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083e6:	f001 ff85 	bl	800a2f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083ea:	1d3a      	adds	r2, r7, #4
 80083ec:	f107 0314 	add.w	r3, r7, #20
 80083f0:	4611      	mov	r1, r2
 80083f2:	4618      	mov	r0, r3
 80083f4:	f001 f806 	bl	8009404 <xTaskCheckForTimeOut>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d124      	bne.n	8008448 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80083fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008400:	f000 faac 	bl	800895c <prvIsQueueFull>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d018      	beq.n	800843c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840c:	3310      	adds	r3, #16
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f000 ff28 	bl	8009268 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800841a:	f000 fa37 	bl	800888c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800841e:	f000 fd5d 	bl	8008edc <xTaskResumeAll>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	f47f af7c 	bne.w	8008322 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800842a:	4b0c      	ldr	r3, [pc, #48]	; (800845c <xQueueGenericSend+0x208>)
 800842c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	e772      	b.n	8008322 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800843c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800843e:	f000 fa25 	bl	800888c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008442:	f000 fd4b 	bl	8008edc <xTaskResumeAll>
 8008446:	e76c      	b.n	8008322 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800844a:	f000 fa1f 	bl	800888c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800844e:	f000 fd45 	bl	8008edc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008452:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008454:	4618      	mov	r0, r3
 8008456:	3738      	adds	r7, #56	; 0x38
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	e000ed04 	.word	0xe000ed04

08008460 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b08e      	sub	sp, #56	; 0x38
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10c      	bne.n	8008492 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847c:	b672      	cpsid	i
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	b662      	cpsie	i
 800848c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800848e:	bf00      	nop
 8008490:	e7fe      	b.n	8008490 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d103      	bne.n	80084a0 <xQueueGenericSendFromISR+0x40>
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849c:	2b00      	cmp	r3, #0
 800849e:	d101      	bne.n	80084a4 <xQueueGenericSendFromISR+0x44>
 80084a0:	2301      	movs	r3, #1
 80084a2:	e000      	b.n	80084a6 <xQueueGenericSendFromISR+0x46>
 80084a4:	2300      	movs	r3, #0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10c      	bne.n	80084c4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	b672      	cpsid	i
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	b662      	cpsie	i
 80084be:	623b      	str	r3, [r7, #32]
}
 80084c0:	bf00      	nop
 80084c2:	e7fe      	b.n	80084c2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d103      	bne.n	80084d2 <xQueueGenericSendFromISR+0x72>
 80084ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d101      	bne.n	80084d6 <xQueueGenericSendFromISR+0x76>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e000      	b.n	80084d8 <xQueueGenericSendFromISR+0x78>
 80084d6:	2300      	movs	r3, #0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10c      	bne.n	80084f6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	b672      	cpsid	i
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	b662      	cpsie	i
 80084f0:	61fb      	str	r3, [r7, #28]
}
 80084f2:	bf00      	nop
 80084f4:	e7fe      	b.n	80084f4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084f6:	f001 ffb1 	bl	800a45c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80084fa:	f3ef 8211 	mrs	r2, BASEPRI
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	b672      	cpsid	i
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	b662      	cpsie	i
 8008512:	61ba      	str	r2, [r7, #24]
 8008514:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008516:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008518:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800851e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008522:	429a      	cmp	r2, r3
 8008524:	d302      	bcc.n	800852c <xQueueGenericSendFromISR+0xcc>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2b02      	cmp	r3, #2
 800852a:	d12c      	bne.n	8008586 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	68b9      	ldr	r1, [r7, #8]
 800853a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800853c:	f000 f916 	bl	800876c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008540:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008548:	d112      	bne.n	8008570 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	2b00      	cmp	r3, #0
 8008550:	d016      	beq.n	8008580 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	3324      	adds	r3, #36	; 0x24
 8008556:	4618      	mov	r0, r3
 8008558:	f000 feda 	bl	8009310 <xTaskRemoveFromEventList>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00e      	beq.n	8008580 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00b      	beq.n	8008580 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	601a      	str	r2, [r3, #0]
 800856e:	e007      	b.n	8008580 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008570:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008574:	3301      	adds	r3, #1
 8008576:	b2db      	uxtb	r3, r3
 8008578:	b25a      	sxtb	r2, r3
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008580:	2301      	movs	r3, #1
 8008582:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008584:	e001      	b.n	800858a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008586:	2300      	movs	r3, #0
 8008588:	637b      	str	r3, [r7, #52]	; 0x34
 800858a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008594:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008598:	4618      	mov	r0, r3
 800859a:	3738      	adds	r7, #56	; 0x38
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b08c      	sub	sp, #48	; 0x30
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085ac:	2300      	movs	r3, #0
 80085ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10c      	bne.n	80085d4 <xQueueReceive+0x34>
	__asm volatile
 80085ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085be:	b672      	cpsid	i
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	b662      	cpsie	i
 80085ce:	623b      	str	r3, [r7, #32]
}
 80085d0:	bf00      	nop
 80085d2:	e7fe      	b.n	80085d2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d103      	bne.n	80085e2 <xQueueReceive+0x42>
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <xQueueReceive+0x46>
 80085e2:	2301      	movs	r3, #1
 80085e4:	e000      	b.n	80085e8 <xQueueReceive+0x48>
 80085e6:	2300      	movs	r3, #0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10c      	bne.n	8008606 <xQueueReceive+0x66>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	b672      	cpsid	i
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	b662      	cpsie	i
 8008600:	61fb      	str	r3, [r7, #28]
}
 8008602:	bf00      	nop
 8008604:	e7fe      	b.n	8008604 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008606:	f001 f847 	bl	8009698 <xTaskGetSchedulerState>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d102      	bne.n	8008616 <xQueueReceive+0x76>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <xQueueReceive+0x7a>
 8008616:	2301      	movs	r3, #1
 8008618:	e000      	b.n	800861c <xQueueReceive+0x7c>
 800861a:	2300      	movs	r3, #0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10c      	bne.n	800863a <xQueueReceive+0x9a>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008624:	b672      	cpsid	i
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	b662      	cpsie	i
 8008634:	61bb      	str	r3, [r7, #24]
}
 8008636:	bf00      	nop
 8008638:	e7fe      	b.n	8008638 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800863a:	f001 fe27 	bl	800a28c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800863e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008642:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	2b00      	cmp	r3, #0
 8008648:	d01f      	beq.n	800868a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800864a:	68b9      	ldr	r1, [r7, #8]
 800864c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800864e:	f000 f8f7 	bl	8008840 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	1e5a      	subs	r2, r3, #1
 8008656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008658:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00f      	beq.n	8008682 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008664:	3310      	adds	r3, #16
 8008666:	4618      	mov	r0, r3
 8008668:	f000 fe52 	bl	8009310 <xTaskRemoveFromEventList>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d007      	beq.n	8008682 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008672:	4b3d      	ldr	r3, [pc, #244]	; (8008768 <xQueueReceive+0x1c8>)
 8008674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008682:	f001 fe37 	bl	800a2f4 <vPortExitCritical>
				return pdPASS;
 8008686:	2301      	movs	r3, #1
 8008688:	e069      	b.n	800875e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d103      	bne.n	8008698 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008690:	f001 fe30 	bl	800a2f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008694:	2300      	movs	r3, #0
 8008696:	e062      	b.n	800875e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869a:	2b00      	cmp	r3, #0
 800869c:	d106      	bne.n	80086ac <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800869e:	f107 0310 	add.w	r3, r7, #16
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 fe98 	bl	80093d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086a8:	2301      	movs	r3, #1
 80086aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086ac:	f001 fe22 	bl	800a2f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086b0:	f000 fc06 	bl	8008ec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086b4:	f001 fdea 	bl	800a28c <vPortEnterCritical>
 80086b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086be:	b25b      	sxtb	r3, r3
 80086c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c4:	d103      	bne.n	80086ce <xQueueReceive+0x12e>
 80086c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086d4:	b25b      	sxtb	r3, r3
 80086d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086da:	d103      	bne.n	80086e4 <xQueueReceive+0x144>
 80086dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086e4:	f001 fe06 	bl	800a2f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086e8:	1d3a      	adds	r2, r7, #4
 80086ea:	f107 0310 	add.w	r3, r7, #16
 80086ee:	4611      	mov	r1, r2
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fe87 	bl	8009404 <xTaskCheckForTimeOut>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d123      	bne.n	8008744 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086fe:	f000 f917 	bl	8008930 <prvIsQueueEmpty>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d017      	beq.n	8008738 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870a:	3324      	adds	r3, #36	; 0x24
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	4611      	mov	r1, r2
 8008710:	4618      	mov	r0, r3
 8008712:	f000 fda9 	bl	8009268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008718:	f000 f8b8 	bl	800888c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800871c:	f000 fbde 	bl	8008edc <xTaskResumeAll>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d189      	bne.n	800863a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008726:	4b10      	ldr	r3, [pc, #64]	; (8008768 <xQueueReceive+0x1c8>)
 8008728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	e780      	b.n	800863a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800873a:	f000 f8a7 	bl	800888c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800873e:	f000 fbcd 	bl	8008edc <xTaskResumeAll>
 8008742:	e77a      	b.n	800863a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008746:	f000 f8a1 	bl	800888c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800874a:	f000 fbc7 	bl	8008edc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800874e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008750:	f000 f8ee 	bl	8008930 <prvIsQueueEmpty>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	f43f af6f 	beq.w	800863a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800875c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800875e:	4618      	mov	r0, r3
 8008760:	3730      	adds	r7, #48	; 0x30
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	e000ed04 	.word	0xe000ed04

0800876c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008778:	2300      	movs	r3, #0
 800877a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008780:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10d      	bne.n	80087a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d14d      	bne.n	800882e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	4618      	mov	r0, r3
 8008798:	f000 ff9c 	bl	80096d4 <xTaskPriorityDisinherit>
 800879c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	609a      	str	r2, [r3, #8]
 80087a4:	e043      	b.n	800882e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d119      	bne.n	80087e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6858      	ldr	r0, [r3, #4]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b4:	461a      	mov	r2, r3
 80087b6:	68b9      	ldr	r1, [r7, #8]
 80087b8:	f002 fa1e 	bl	800abf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c4:	441a      	add	r2, r3
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	685a      	ldr	r2, [r3, #4]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d32b      	bcc.n	800882e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	605a      	str	r2, [r3, #4]
 80087de:	e026      	b.n	800882e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	68d8      	ldr	r0, [r3, #12]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e8:	461a      	mov	r2, r3
 80087ea:	68b9      	ldr	r1, [r7, #8]
 80087ec:	f002 fa04 	bl	800abf8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	68da      	ldr	r2, [r3, #12]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f8:	425b      	negs	r3, r3
 80087fa:	441a      	add	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	68da      	ldr	r2, [r3, #12]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	429a      	cmp	r2, r3
 800880a:	d207      	bcs.n	800881c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	689a      	ldr	r2, [r3, #8]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008814:	425b      	negs	r3, r3
 8008816:	441a      	add	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b02      	cmp	r3, #2
 8008820:	d105      	bne.n	800882e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	3b01      	subs	r3, #1
 800882c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008836:	697b      	ldr	r3, [r7, #20]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884e:	2b00      	cmp	r3, #0
 8008850:	d018      	beq.n	8008884 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68da      	ldr	r2, [r3, #12]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885a:	441a      	add	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68da      	ldr	r2, [r3, #12]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	429a      	cmp	r2, r3
 800886a:	d303      	bcc.n	8008874 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	68d9      	ldr	r1, [r3, #12]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887c:	461a      	mov	r2, r3
 800887e:	6838      	ldr	r0, [r7, #0]
 8008880:	f002 f9ba 	bl	800abf8 <memcpy>
	}
}
 8008884:	bf00      	nop
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008894:	f001 fcfa 	bl	800a28c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800889e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088a0:	e011      	b.n	80088c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d012      	beq.n	80088d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	3324      	adds	r3, #36	; 0x24
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 fd2e 	bl	8009310 <xTaskRemoveFromEventList>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088ba:	f000 fe09 	bl	80094d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088be:	7bfb      	ldrb	r3, [r7, #15]
 80088c0:	3b01      	subs	r3, #1
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	dce9      	bgt.n	80088a2 <prvUnlockQueue+0x16>
 80088ce:	e000      	b.n	80088d2 <prvUnlockQueue+0x46>
					break;
 80088d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	22ff      	movs	r2, #255	; 0xff
 80088d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80088da:	f001 fd0b 	bl	800a2f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80088de:	f001 fcd5 	bl	800a28c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088ea:	e011      	b.n	8008910 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d012      	beq.n	800891a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	3310      	adds	r3, #16
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 fd09 	bl	8009310 <xTaskRemoveFromEventList>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008904:	f000 fde4 	bl	80094d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008908:	7bbb      	ldrb	r3, [r7, #14]
 800890a:	3b01      	subs	r3, #1
 800890c:	b2db      	uxtb	r3, r3
 800890e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008914:	2b00      	cmp	r3, #0
 8008916:	dce9      	bgt.n	80088ec <prvUnlockQueue+0x60>
 8008918:	e000      	b.n	800891c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800891a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	22ff      	movs	r2, #255	; 0xff
 8008920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008924:	f001 fce6 	bl	800a2f4 <vPortExitCritical>
}
 8008928:	bf00      	nop
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008938:	f001 fca8 	bl	800a28c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008940:	2b00      	cmp	r3, #0
 8008942:	d102      	bne.n	800894a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008944:	2301      	movs	r3, #1
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	e001      	b.n	800894e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800894a:	2300      	movs	r3, #0
 800894c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800894e:	f001 fcd1 	bl	800a2f4 <vPortExitCritical>

	return xReturn;
 8008952:	68fb      	ldr	r3, [r7, #12]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008964:	f001 fc92 	bl	800a28c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008970:	429a      	cmp	r2, r3
 8008972:	d102      	bne.n	800897a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008974:	2301      	movs	r3, #1
 8008976:	60fb      	str	r3, [r7, #12]
 8008978:	e001      	b.n	800897e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800897a:	2300      	movs	r3, #0
 800897c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800897e:	f001 fcb9 	bl	800a2f4 <vPortExitCritical>

	return xReturn;
 8008982:	68fb      	ldr	r3, [r7, #12]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008996:	2300      	movs	r3, #0
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	e014      	b.n	80089c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800899c:	4a0f      	ldr	r2, [pc, #60]	; (80089dc <vQueueAddToRegistry+0x50>)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10b      	bne.n	80089c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089a8:	490c      	ldr	r1, [pc, #48]	; (80089dc <vQueueAddToRegistry+0x50>)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089b2:	4a0a      	ldr	r2, [pc, #40]	; (80089dc <vQueueAddToRegistry+0x50>)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	00db      	lsls	r3, r3, #3
 80089b8:	4413      	add	r3, r2
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089be:	e006      	b.n	80089ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3301      	adds	r3, #1
 80089c4:	60fb      	str	r3, [r7, #12]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2b07      	cmp	r3, #7
 80089ca:	d9e7      	bls.n	800899c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089cc:	bf00      	nop
 80089ce:	bf00      	nop
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	20000f74 	.word	0x20000f74

080089e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80089f0:	f001 fc4c 	bl	800a28c <vPortEnterCritical>
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089fa:	b25b      	sxtb	r3, r3
 80089fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a00:	d103      	bne.n	8008a0a <vQueueWaitForMessageRestricted+0x2a>
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a10:	b25b      	sxtb	r3, r3
 8008a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a16:	d103      	bne.n	8008a20 <vQueueWaitForMessageRestricted+0x40>
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a20:	f001 fc68 	bl	800a2f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d106      	bne.n	8008a3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	3324      	adds	r3, #36	; 0x24
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	68b9      	ldr	r1, [r7, #8]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 fc3d 	bl	80092b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a3a:	6978      	ldr	r0, [r7, #20]
 8008a3c:	f7ff ff26 	bl	800888c <prvUnlockQueue>
	}
 8008a40:	bf00      	nop
 8008a42:	3718      	adds	r7, #24
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08e      	sub	sp, #56	; 0x38
 8008a4c:	af04      	add	r7, sp, #16
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
 8008a54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10c      	bne.n	8008a76 <xTaskCreateStatic+0x2e>
	__asm volatile
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	b672      	cpsid	i
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	b662      	cpsie	i
 8008a70:	623b      	str	r3, [r7, #32]
}
 8008a72:	bf00      	nop
 8008a74:	e7fe      	b.n	8008a74 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10c      	bne.n	8008a96 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	b672      	cpsid	i
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	b662      	cpsie	i
 8008a90:	61fb      	str	r3, [r7, #28]
}
 8008a92:	bf00      	nop
 8008a94:	e7fe      	b.n	8008a94 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a96:	2354      	movs	r3, #84	; 0x54
 8008a98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	2b54      	cmp	r3, #84	; 0x54
 8008a9e:	d00c      	beq.n	8008aba <xTaskCreateStatic+0x72>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	b672      	cpsid	i
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	b662      	cpsie	i
 8008ab4:	61bb      	str	r3, [r7, #24]
}
 8008ab6:	bf00      	nop
 8008ab8:	e7fe      	b.n	8008ab8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008aba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01e      	beq.n	8008b00 <xTaskCreateStatic+0xb8>
 8008ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d01b      	beq.n	8008b00 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ad0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ada:	2300      	movs	r3, #0
 8008adc:	9303      	str	r3, [sp, #12]
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	9302      	str	r3, [sp, #8]
 8008ae2:	f107 0314 	add.w	r3, r7, #20
 8008ae6:	9301      	str	r3, [sp, #4]
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	68b9      	ldr	r1, [r7, #8]
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 f850 	bl	8008b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008afa:	f000 f8d7 	bl	8008cac <prvAddNewTaskToReadyList>
 8008afe:	e001      	b.n	8008b04 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b04:	697b      	ldr	r3, [r7, #20]
	}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3728      	adds	r7, #40	; 0x28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b08c      	sub	sp, #48	; 0x30
 8008b12:	af04      	add	r7, sp, #16
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	603b      	str	r3, [r7, #0]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b1e:	88fb      	ldrh	r3, [r7, #6]
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4618      	mov	r0, r3
 8008b24:	f001 fcde 	bl	800a4e4 <pvPortMalloc>
 8008b28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00e      	beq.n	8008b4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b30:	2054      	movs	r0, #84	; 0x54
 8008b32:	f001 fcd7 	bl	800a4e4 <pvPortMalloc>
 8008b36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d003      	beq.n	8008b46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	631a      	str	r2, [r3, #48]	; 0x30
 8008b44:	e005      	b.n	8008b52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b46:	6978      	ldr	r0, [r7, #20]
 8008b48:	f001 fd96 	bl	800a678 <vPortFree>
 8008b4c:	e001      	b.n	8008b52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d017      	beq.n	8008b88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b60:	88fa      	ldrh	r2, [r7, #6]
 8008b62:	2300      	movs	r3, #0
 8008b64:	9303      	str	r3, [sp, #12]
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	9302      	str	r3, [sp, #8]
 8008b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6c:	9301      	str	r3, [sp, #4]
 8008b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	68b9      	ldr	r1, [r7, #8]
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 f80e 	bl	8008b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b7c:	69f8      	ldr	r0, [r7, #28]
 8008b7e:	f000 f895 	bl	8008cac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b82:	2301      	movs	r3, #1
 8008b84:	61bb      	str	r3, [r7, #24]
 8008b86:	e002      	b.n	8008b8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b88:	f04f 33ff 	mov.w	r3, #4294967295
 8008b8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b8e:	69bb      	ldr	r3, [r7, #24]
	}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3720      	adds	r7, #32
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b088      	sub	sp, #32
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
 8008ba4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008baa:	6879      	ldr	r1, [r7, #4]
 8008bac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008bb0:	440b      	add	r3, r1
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	f023 0307 	bic.w	r3, r3, #7
 8008bbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	f003 0307 	and.w	r3, r3, #7
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00c      	beq.n	8008be4 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	b672      	cpsid	i
 8008bd0:	f383 8811 	msr	BASEPRI, r3
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	b662      	cpsie	i
 8008bde:	617b      	str	r3, [r7, #20]
}
 8008be0:	bf00      	nop
 8008be2:	e7fe      	b.n	8008be2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d01f      	beq.n	8008c2a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bea:	2300      	movs	r3, #0
 8008bec:	61fb      	str	r3, [r7, #28]
 8008bee:	e012      	b.n	8008c16 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	7819      	ldrb	r1, [r3, #0]
 8008bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	3334      	adds	r3, #52	; 0x34
 8008c00:	460a      	mov	r2, r1
 8008c02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	4413      	add	r3, r2
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d006      	beq.n	8008c1e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	3301      	adds	r3, #1
 8008c14:	61fb      	str	r3, [r7, #28]
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	2b0f      	cmp	r3, #15
 8008c1a:	d9e9      	bls.n	8008bf0 <prvInitialiseNewTask+0x58>
 8008c1c:	e000      	b.n	8008c20 <prvInitialiseNewTask+0x88>
			{
				break;
 8008c1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c28:	e003      	b.n	8008c32 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c34:	2b06      	cmp	r3, #6
 8008c36:	d901      	bls.n	8008c3c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c38:	2306      	movs	r3, #6
 8008c3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c46:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c50:	3304      	adds	r3, #4
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff f95e 	bl	8007f14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5a:	3318      	adds	r3, #24
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7ff f959 	bl	8007f14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	f1c3 0207 	rsb	r2, r3, #7
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	68f9      	ldr	r1, [r7, #12]
 8008c8a:	69b8      	ldr	r0, [r7, #24]
 8008c8c:	f001 f9f0 	bl	800a070 <pxPortInitialiseStack>
 8008c90:	4602      	mov	r2, r0
 8008c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ca2:	bf00      	nop
 8008ca4:	3720      	adds	r7, #32
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
	...

08008cac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cb4:	f001 faea 	bl	800a28c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cb8:	4b2a      	ldr	r3, [pc, #168]	; (8008d64 <prvAddNewTaskToReadyList+0xb8>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	4a29      	ldr	r2, [pc, #164]	; (8008d64 <prvAddNewTaskToReadyList+0xb8>)
 8008cc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008cc2:	4b29      	ldr	r3, [pc, #164]	; (8008d68 <prvAddNewTaskToReadyList+0xbc>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d109      	bne.n	8008cde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008cca:	4a27      	ldr	r2, [pc, #156]	; (8008d68 <prvAddNewTaskToReadyList+0xbc>)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008cd0:	4b24      	ldr	r3, [pc, #144]	; (8008d64 <prvAddNewTaskToReadyList+0xb8>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d110      	bne.n	8008cfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008cd8:	f000 fc1e 	bl	8009518 <prvInitialiseTaskLists>
 8008cdc:	e00d      	b.n	8008cfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cde:	4b23      	ldr	r3, [pc, #140]	; (8008d6c <prvAddNewTaskToReadyList+0xc0>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d109      	bne.n	8008cfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ce6:	4b20      	ldr	r3, [pc, #128]	; (8008d68 <prvAddNewTaskToReadyList+0xbc>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d802      	bhi.n	8008cfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008cf4:	4a1c      	ldr	r2, [pc, #112]	; (8008d68 <prvAddNewTaskToReadyList+0xbc>)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008cfa:	4b1d      	ldr	r3, [pc, #116]	; (8008d70 <prvAddNewTaskToReadyList+0xc4>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	4a1b      	ldr	r2, [pc, #108]	; (8008d70 <prvAddNewTaskToReadyList+0xc4>)
 8008d02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	2201      	movs	r2, #1
 8008d0a:	409a      	lsls	r2, r3
 8008d0c:	4b19      	ldr	r3, [pc, #100]	; (8008d74 <prvAddNewTaskToReadyList+0xc8>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	4a18      	ldr	r2, [pc, #96]	; (8008d74 <prvAddNewTaskToReadyList+0xc8>)
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4a15      	ldr	r2, [pc, #84]	; (8008d78 <prvAddNewTaskToReadyList+0xcc>)
 8008d24:	441a      	add	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	f7ff f8fe 	bl	8007f2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d32:	f001 fadf 	bl	800a2f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d36:	4b0d      	ldr	r3, [pc, #52]	; (8008d6c <prvAddNewTaskToReadyList+0xc0>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00e      	beq.n	8008d5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d3e:	4b0a      	ldr	r3, [pc, #40]	; (8008d68 <prvAddNewTaskToReadyList+0xbc>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d207      	bcs.n	8008d5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d4c:	4b0b      	ldr	r3, [pc, #44]	; (8008d7c <prvAddNewTaskToReadyList+0xd0>)
 8008d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d5c:	bf00      	nop
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	200010b4 	.word	0x200010b4
 8008d68:	20000fb4 	.word	0x20000fb4
 8008d6c:	200010c0 	.word	0x200010c0
 8008d70:	200010d0 	.word	0x200010d0
 8008d74:	200010bc 	.word	0x200010bc
 8008d78:	20000fb8 	.word	0x20000fb8
 8008d7c:	e000ed04 	.word	0xe000ed04

08008d80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d019      	beq.n	8008dc6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d92:	4b14      	ldr	r3, [pc, #80]	; (8008de4 <vTaskDelay+0x64>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00c      	beq.n	8008db4 <vTaskDelay+0x34>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	b672      	cpsid	i
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	b662      	cpsie	i
 8008dae:	60bb      	str	r3, [r7, #8]
}
 8008db0:	bf00      	nop
 8008db2:	e7fe      	b.n	8008db2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008db4:	f000 f884 	bl	8008ec0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008db8:	2100      	movs	r1, #0
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fd14 	bl	80097e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008dc0:	f000 f88c 	bl	8008edc <xTaskResumeAll>
 8008dc4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d107      	bne.n	8008ddc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008dcc:	4b06      	ldr	r3, [pc, #24]	; (8008de8 <vTaskDelay+0x68>)
 8008dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ddc:	bf00      	nop
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	200010dc 	.word	0x200010dc
 8008de8:	e000ed04 	.word	0xe000ed04

08008dec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08a      	sub	sp, #40	; 0x28
 8008df0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008df2:	2300      	movs	r3, #0
 8008df4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008dfa:	463a      	mov	r2, r7
 8008dfc:	1d39      	adds	r1, r7, #4
 8008dfe:	f107 0308 	add.w	r3, r7, #8
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7f8 fa42 	bl	800128c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	9202      	str	r2, [sp, #8]
 8008e10:	9301      	str	r3, [sp, #4]
 8008e12:	2300      	movs	r3, #0
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	2300      	movs	r3, #0
 8008e18:	460a      	mov	r2, r1
 8008e1a:	4923      	ldr	r1, [pc, #140]	; (8008ea8 <vTaskStartScheduler+0xbc>)
 8008e1c:	4823      	ldr	r0, [pc, #140]	; (8008eac <vTaskStartScheduler+0xc0>)
 8008e1e:	f7ff fe13 	bl	8008a48 <xTaskCreateStatic>
 8008e22:	4603      	mov	r3, r0
 8008e24:	4a22      	ldr	r2, [pc, #136]	; (8008eb0 <vTaskStartScheduler+0xc4>)
 8008e26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e28:	4b21      	ldr	r3, [pc, #132]	; (8008eb0 <vTaskStartScheduler+0xc4>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d002      	beq.n	8008e36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e30:	2301      	movs	r3, #1
 8008e32:	617b      	str	r3, [r7, #20]
 8008e34:	e001      	b.n	8008e3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e36:	2300      	movs	r3, #0
 8008e38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d102      	bne.n	8008e46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e40:	f000 fd38 	bl	80098b4 <xTimerCreateTimerTask>
 8008e44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d118      	bne.n	8008e7e <vTaskStartScheduler+0x92>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	b672      	cpsid	i
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	b662      	cpsie	i
 8008e60:	613b      	str	r3, [r7, #16]
}
 8008e62:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e64:	4b13      	ldr	r3, [pc, #76]	; (8008eb4 <vTaskStartScheduler+0xc8>)
 8008e66:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e6c:	4b12      	ldr	r3, [pc, #72]	; (8008eb8 <vTaskStartScheduler+0xcc>)
 8008e6e:	2201      	movs	r2, #1
 8008e70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e72:	4b12      	ldr	r3, [pc, #72]	; (8008ebc <vTaskStartScheduler+0xd0>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e78:	f001 f98a 	bl	800a190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e7c:	e010      	b.n	8008ea0 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e84:	d10c      	bne.n	8008ea0 <vTaskStartScheduler+0xb4>
	__asm volatile
 8008e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8a:	b672      	cpsid	i
 8008e8c:	f383 8811 	msr	BASEPRI, r3
 8008e90:	f3bf 8f6f 	isb	sy
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	b662      	cpsie	i
 8008e9a:	60fb      	str	r3, [r7, #12]
}
 8008e9c:	bf00      	nop
 8008e9e:	e7fe      	b.n	8008e9e <vTaskStartScheduler+0xb2>
}
 8008ea0:	bf00      	nop
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	0800f370 	.word	0x0800f370
 8008eac:	080094e9 	.word	0x080094e9
 8008eb0:	200010d8 	.word	0x200010d8
 8008eb4:	200010d4 	.word	0x200010d4
 8008eb8:	200010c0 	.word	0x200010c0
 8008ebc:	200010b8 	.word	0x200010b8

08008ec0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008ec4:	4b04      	ldr	r3, [pc, #16]	; (8008ed8 <vTaskSuspendAll+0x18>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	4a03      	ldr	r2, [pc, #12]	; (8008ed8 <vTaskSuspendAll+0x18>)
 8008ecc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008ece:	bf00      	nop
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr
 8008ed8:	200010dc 	.word	0x200010dc

08008edc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008eea:	4b42      	ldr	r3, [pc, #264]	; (8008ff4 <xTaskResumeAll+0x118>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10c      	bne.n	8008f0c <xTaskResumeAll+0x30>
	__asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	b672      	cpsid	i
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	b662      	cpsie	i
 8008f06:	603b      	str	r3, [r7, #0]
}
 8008f08:	bf00      	nop
 8008f0a:	e7fe      	b.n	8008f0a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f0c:	f001 f9be 	bl	800a28c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f10:	4b38      	ldr	r3, [pc, #224]	; (8008ff4 <xTaskResumeAll+0x118>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3b01      	subs	r3, #1
 8008f16:	4a37      	ldr	r2, [pc, #220]	; (8008ff4 <xTaskResumeAll+0x118>)
 8008f18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f1a:	4b36      	ldr	r3, [pc, #216]	; (8008ff4 <xTaskResumeAll+0x118>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d161      	bne.n	8008fe6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f22:	4b35      	ldr	r3, [pc, #212]	; (8008ff8 <xTaskResumeAll+0x11c>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d05d      	beq.n	8008fe6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f2a:	e02e      	b.n	8008f8a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f2c:	4b33      	ldr	r3, [pc, #204]	; (8008ffc <xTaskResumeAll+0x120>)
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	3318      	adds	r3, #24
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff f855 	bl	8007fe8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3304      	adds	r3, #4
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff f850 	bl	8007fe8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	409a      	lsls	r2, r3
 8008f50:	4b2b      	ldr	r3, [pc, #172]	; (8009000 <xTaskResumeAll+0x124>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	4a2a      	ldr	r2, [pc, #168]	; (8009000 <xTaskResumeAll+0x124>)
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f5e:	4613      	mov	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	4413      	add	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4a27      	ldr	r2, [pc, #156]	; (8009004 <xTaskResumeAll+0x128>)
 8008f68:	441a      	add	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	4619      	mov	r1, r3
 8008f70:	4610      	mov	r0, r2
 8008f72:	f7fe ffdc 	bl	8007f2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f7a:	4b23      	ldr	r3, [pc, #140]	; (8009008 <xTaskResumeAll+0x12c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d302      	bcc.n	8008f8a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008f84:	4b21      	ldr	r3, [pc, #132]	; (800900c <xTaskResumeAll+0x130>)
 8008f86:	2201      	movs	r2, #1
 8008f88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f8a:	4b1c      	ldr	r3, [pc, #112]	; (8008ffc <xTaskResumeAll+0x120>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1cc      	bne.n	8008f2c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d001      	beq.n	8008f9c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f98:	f000 fb5e 	bl	8009658 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008f9c:	4b1c      	ldr	r3, [pc, #112]	; (8009010 <xTaskResumeAll+0x134>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d010      	beq.n	8008fca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008fa8:	f000 f846 	bl	8009038 <xTaskIncrementTick>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d002      	beq.n	8008fb8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008fb2:	4b16      	ldr	r3, [pc, #88]	; (800900c <xTaskResumeAll+0x130>)
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1f1      	bne.n	8008fa8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8008fc4:	4b12      	ldr	r3, [pc, #72]	; (8009010 <xTaskResumeAll+0x134>)
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008fca:	4b10      	ldr	r3, [pc, #64]	; (800900c <xTaskResumeAll+0x130>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d009      	beq.n	8008fe6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008fd6:	4b0f      	ldr	r3, [pc, #60]	; (8009014 <xTaskResumeAll+0x138>)
 8008fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fe6:	f001 f985 	bl	800a2f4 <vPortExitCritical>

	return xAlreadyYielded;
 8008fea:	68bb      	ldr	r3, [r7, #8]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	200010dc 	.word	0x200010dc
 8008ff8:	200010b4 	.word	0x200010b4
 8008ffc:	20001074 	.word	0x20001074
 8009000:	200010bc 	.word	0x200010bc
 8009004:	20000fb8 	.word	0x20000fb8
 8009008:	20000fb4 	.word	0x20000fb4
 800900c:	200010c8 	.word	0x200010c8
 8009010:	200010c4 	.word	0x200010c4
 8009014:	e000ed04 	.word	0xe000ed04

08009018 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800901e:	4b05      	ldr	r3, [pc, #20]	; (8009034 <xTaskGetTickCount+0x1c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009024:	687b      	ldr	r3, [r7, #4]
}
 8009026:	4618      	mov	r0, r3
 8009028:	370c      	adds	r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	200010b8 	.word	0x200010b8

08009038 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800903e:	2300      	movs	r3, #0
 8009040:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009042:	4b4f      	ldr	r3, [pc, #316]	; (8009180 <xTaskIncrementTick+0x148>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	f040 808a 	bne.w	8009160 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800904c:	4b4d      	ldr	r3, [pc, #308]	; (8009184 <xTaskIncrementTick+0x14c>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3301      	adds	r3, #1
 8009052:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009054:	4a4b      	ldr	r2, [pc, #300]	; (8009184 <xTaskIncrementTick+0x14c>)
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d122      	bne.n	80090a6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009060:	4b49      	ldr	r3, [pc, #292]	; (8009188 <xTaskIncrementTick+0x150>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00c      	beq.n	8009084 <xTaskIncrementTick+0x4c>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906e:	b672      	cpsid	i
 8009070:	f383 8811 	msr	BASEPRI, r3
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	b662      	cpsie	i
 800907e:	603b      	str	r3, [r7, #0]
}
 8009080:	bf00      	nop
 8009082:	e7fe      	b.n	8009082 <xTaskIncrementTick+0x4a>
 8009084:	4b40      	ldr	r3, [pc, #256]	; (8009188 <xTaskIncrementTick+0x150>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	60fb      	str	r3, [r7, #12]
 800908a:	4b40      	ldr	r3, [pc, #256]	; (800918c <xTaskIncrementTick+0x154>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a3e      	ldr	r2, [pc, #248]	; (8009188 <xTaskIncrementTick+0x150>)
 8009090:	6013      	str	r3, [r2, #0]
 8009092:	4a3e      	ldr	r2, [pc, #248]	; (800918c <xTaskIncrementTick+0x154>)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6013      	str	r3, [r2, #0]
 8009098:	4b3d      	ldr	r3, [pc, #244]	; (8009190 <xTaskIncrementTick+0x158>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3301      	adds	r3, #1
 800909e:	4a3c      	ldr	r2, [pc, #240]	; (8009190 <xTaskIncrementTick+0x158>)
 80090a0:	6013      	str	r3, [r2, #0]
 80090a2:	f000 fad9 	bl	8009658 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090a6:	4b3b      	ldr	r3, [pc, #236]	; (8009194 <xTaskIncrementTick+0x15c>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d348      	bcc.n	8009142 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090b0:	4b35      	ldr	r3, [pc, #212]	; (8009188 <xTaskIncrementTick+0x150>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d104      	bne.n	80090c4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ba:	4b36      	ldr	r3, [pc, #216]	; (8009194 <xTaskIncrementTick+0x15c>)
 80090bc:	f04f 32ff 	mov.w	r2, #4294967295
 80090c0:	601a      	str	r2, [r3, #0]
					break;
 80090c2:	e03e      	b.n	8009142 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090c4:	4b30      	ldr	r3, [pc, #192]	; (8009188 <xTaskIncrementTick+0x150>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d203      	bcs.n	80090e4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090dc:	4a2d      	ldr	r2, [pc, #180]	; (8009194 <xTaskIncrementTick+0x15c>)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80090e2:	e02e      	b.n	8009142 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	3304      	adds	r3, #4
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fe ff7d 	bl	8007fe8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d004      	beq.n	8009100 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	3318      	adds	r3, #24
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7fe ff74 	bl	8007fe8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009104:	2201      	movs	r2, #1
 8009106:	409a      	lsls	r2, r3
 8009108:	4b23      	ldr	r3, [pc, #140]	; (8009198 <xTaskIncrementTick+0x160>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4313      	orrs	r3, r2
 800910e:	4a22      	ldr	r2, [pc, #136]	; (8009198 <xTaskIncrementTick+0x160>)
 8009110:	6013      	str	r3, [r2, #0]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009116:	4613      	mov	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4a1f      	ldr	r2, [pc, #124]	; (800919c <xTaskIncrementTick+0x164>)
 8009120:	441a      	add	r2, r3
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	3304      	adds	r3, #4
 8009126:	4619      	mov	r1, r3
 8009128:	4610      	mov	r0, r2
 800912a:	f7fe ff00 	bl	8007f2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009132:	4b1b      	ldr	r3, [pc, #108]	; (80091a0 <xTaskIncrementTick+0x168>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009138:	429a      	cmp	r2, r3
 800913a:	d3b9      	bcc.n	80090b0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800913c:	2301      	movs	r3, #1
 800913e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009140:	e7b6      	b.n	80090b0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009142:	4b17      	ldr	r3, [pc, #92]	; (80091a0 <xTaskIncrementTick+0x168>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009148:	4914      	ldr	r1, [pc, #80]	; (800919c <xTaskIncrementTick+0x164>)
 800914a:	4613      	mov	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	440b      	add	r3, r1
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d907      	bls.n	800916a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800915a:	2301      	movs	r3, #1
 800915c:	617b      	str	r3, [r7, #20]
 800915e:	e004      	b.n	800916a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009160:	4b10      	ldr	r3, [pc, #64]	; (80091a4 <xTaskIncrementTick+0x16c>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3301      	adds	r3, #1
 8009166:	4a0f      	ldr	r2, [pc, #60]	; (80091a4 <xTaskIncrementTick+0x16c>)
 8009168:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800916a:	4b0f      	ldr	r3, [pc, #60]	; (80091a8 <xTaskIncrementTick+0x170>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8009172:	2301      	movs	r3, #1
 8009174:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009176:	697b      	ldr	r3, [r7, #20]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	200010dc 	.word	0x200010dc
 8009184:	200010b8 	.word	0x200010b8
 8009188:	2000106c 	.word	0x2000106c
 800918c:	20001070 	.word	0x20001070
 8009190:	200010cc 	.word	0x200010cc
 8009194:	200010d4 	.word	0x200010d4
 8009198:	200010bc 	.word	0x200010bc
 800919c:	20000fb8 	.word	0x20000fb8
 80091a0:	20000fb4 	.word	0x20000fb4
 80091a4:	200010c4 	.word	0x200010c4
 80091a8:	200010c8 	.word	0x200010c8

080091ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	b087      	sub	sp, #28
 80091b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091b2:	4b28      	ldr	r3, [pc, #160]	; (8009254 <vTaskSwitchContext+0xa8>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091ba:	4b27      	ldr	r3, [pc, #156]	; (8009258 <vTaskSwitchContext+0xac>)
 80091bc:	2201      	movs	r2, #1
 80091be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091c0:	e041      	b.n	8009246 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80091c2:	4b25      	ldr	r3, [pc, #148]	; (8009258 <vTaskSwitchContext+0xac>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c8:	4b24      	ldr	r3, [pc, #144]	; (800925c <vTaskSwitchContext+0xb0>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	fab3 f383 	clz	r3, r3
 80091d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80091d6:	7afb      	ldrb	r3, [r7, #11]
 80091d8:	f1c3 031f 	rsb	r3, r3, #31
 80091dc:	617b      	str	r3, [r7, #20]
 80091de:	4920      	ldr	r1, [pc, #128]	; (8009260 <vTaskSwitchContext+0xb4>)
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	4613      	mov	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	440b      	add	r3, r1
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10c      	bne.n	800920c <vTaskSwitchContext+0x60>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f6:	b672      	cpsid	i
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	b662      	cpsie	i
 8009206:	607b      	str	r3, [r7, #4]
}
 8009208:	bf00      	nop
 800920a:	e7fe      	b.n	800920a <vTaskSwitchContext+0x5e>
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	4613      	mov	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4a12      	ldr	r2, [pc, #72]	; (8009260 <vTaskSwitchContext+0xb4>)
 8009218:	4413      	add	r3, r2
 800921a:	613b      	str	r3, [r7, #16]
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	605a      	str	r2, [r3, #4]
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	685a      	ldr	r2, [r3, #4]
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	3308      	adds	r3, #8
 800922e:	429a      	cmp	r2, r3
 8009230:	d104      	bne.n	800923c <vTaskSwitchContext+0x90>
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	685a      	ldr	r2, [r3, #4]
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	605a      	str	r2, [r3, #4]
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	4a08      	ldr	r2, [pc, #32]	; (8009264 <vTaskSwitchContext+0xb8>)
 8009244:	6013      	str	r3, [r2, #0]
}
 8009246:	bf00      	nop
 8009248:	371c      	adds	r7, #28
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	200010dc 	.word	0x200010dc
 8009258:	200010c8 	.word	0x200010c8
 800925c:	200010bc 	.word	0x200010bc
 8009260:	20000fb8 	.word	0x20000fb8
 8009264:	20000fb4 	.word	0x20000fb4

08009268 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10c      	bne.n	8009292 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927c:	b672      	cpsid	i
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	b662      	cpsie	i
 800928c:	60fb      	str	r3, [r7, #12]
}
 800928e:	bf00      	nop
 8009290:	e7fe      	b.n	8009290 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009292:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <vTaskPlaceOnEventList+0x48>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3318      	adds	r3, #24
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7fe fe6b 	bl	8007f76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092a0:	2101      	movs	r1, #1
 80092a2:	6838      	ldr	r0, [r7, #0]
 80092a4:	f000 faa0 	bl	80097e8 <prvAddCurrentTaskToDelayedList>
}
 80092a8:	bf00      	nop
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	20000fb4 	.word	0x20000fb4

080092b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10c      	bne.n	80092e0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	b672      	cpsid	i
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	b662      	cpsie	i
 80092da:	617b      	str	r3, [r7, #20]
}
 80092dc:	bf00      	nop
 80092de:	e7fe      	b.n	80092de <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092e0:	4b0a      	ldr	r3, [pc, #40]	; (800930c <vTaskPlaceOnEventListRestricted+0x58>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3318      	adds	r3, #24
 80092e6:	4619      	mov	r1, r3
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f7fe fe20 	bl	8007f2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80092f4:	f04f 33ff 	mov.w	r3, #4294967295
 80092f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80092fa:	6879      	ldr	r1, [r7, #4]
 80092fc:	68b8      	ldr	r0, [r7, #8]
 80092fe:	f000 fa73 	bl	80097e8 <prvAddCurrentTaskToDelayedList>
	}
 8009302:	bf00      	nop
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	20000fb4 	.word	0x20000fb4

08009310 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10c      	bne.n	8009340 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932a:	b672      	cpsid	i
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	b662      	cpsie	i
 800933a:	60fb      	str	r3, [r7, #12]
}
 800933c:	bf00      	nop
 800933e:	e7fe      	b.n	800933e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	3318      	adds	r3, #24
 8009344:	4618      	mov	r0, r3
 8009346:	f7fe fe4f 	bl	8007fe8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800934a:	4b1d      	ldr	r3, [pc, #116]	; (80093c0 <xTaskRemoveFromEventList+0xb0>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d11c      	bne.n	800938c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	3304      	adds	r3, #4
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe fe46 	bl	8007fe8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009360:	2201      	movs	r2, #1
 8009362:	409a      	lsls	r2, r3
 8009364:	4b17      	ldr	r3, [pc, #92]	; (80093c4 <xTaskRemoveFromEventList+0xb4>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4313      	orrs	r3, r2
 800936a:	4a16      	ldr	r2, [pc, #88]	; (80093c4 <xTaskRemoveFromEventList+0xb4>)
 800936c:	6013      	str	r3, [r2, #0]
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009372:	4613      	mov	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4413      	add	r3, r2
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	4a13      	ldr	r2, [pc, #76]	; (80093c8 <xTaskRemoveFromEventList+0xb8>)
 800937c:	441a      	add	r2, r3
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	3304      	adds	r3, #4
 8009382:	4619      	mov	r1, r3
 8009384:	4610      	mov	r0, r2
 8009386:	f7fe fdd2 	bl	8007f2e <vListInsertEnd>
 800938a:	e005      	b.n	8009398 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	3318      	adds	r3, #24
 8009390:	4619      	mov	r1, r3
 8009392:	480e      	ldr	r0, [pc, #56]	; (80093cc <xTaskRemoveFromEventList+0xbc>)
 8009394:	f7fe fdcb 	bl	8007f2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939c:	4b0c      	ldr	r3, [pc, #48]	; (80093d0 <xTaskRemoveFromEventList+0xc0>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d905      	bls.n	80093b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093a6:	2301      	movs	r3, #1
 80093a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093aa:	4b0a      	ldr	r3, [pc, #40]	; (80093d4 <xTaskRemoveFromEventList+0xc4>)
 80093ac:	2201      	movs	r2, #1
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	e001      	b.n	80093b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80093b2:	2300      	movs	r3, #0
 80093b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093b6:	697b      	ldr	r3, [r7, #20]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3718      	adds	r7, #24
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	200010dc 	.word	0x200010dc
 80093c4:	200010bc 	.word	0x200010bc
 80093c8:	20000fb8 	.word	0x20000fb8
 80093cc:	20001074 	.word	0x20001074
 80093d0:	20000fb4 	.word	0x20000fb4
 80093d4:	200010c8 	.word	0x200010c8

080093d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093e0:	4b06      	ldr	r3, [pc, #24]	; (80093fc <vTaskInternalSetTimeOutState+0x24>)
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093e8:	4b05      	ldr	r3, [pc, #20]	; (8009400 <vTaskInternalSetTimeOutState+0x28>)
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	605a      	str	r2, [r3, #4]
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr
 80093fc:	200010cc 	.word	0x200010cc
 8009400:	200010b8 	.word	0x200010b8

08009404 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10c      	bne.n	800942e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009418:	b672      	cpsid	i
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	b662      	cpsie	i
 8009428:	613b      	str	r3, [r7, #16]
}
 800942a:	bf00      	nop
 800942c:	e7fe      	b.n	800942c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10c      	bne.n	800944e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009438:	b672      	cpsid	i
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	b662      	cpsie	i
 8009448:	60fb      	str	r3, [r7, #12]
}
 800944a:	bf00      	nop
 800944c:	e7fe      	b.n	800944c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800944e:	f000 ff1d 	bl	800a28c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009452:	4b1d      	ldr	r3, [pc, #116]	; (80094c8 <xTaskCheckForTimeOut+0xc4>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	69ba      	ldr	r2, [r7, #24]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946a:	d102      	bne.n	8009472 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800946c:	2300      	movs	r3, #0
 800946e:	61fb      	str	r3, [r7, #28]
 8009470:	e023      	b.n	80094ba <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	4b15      	ldr	r3, [pc, #84]	; (80094cc <xTaskCheckForTimeOut+0xc8>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	429a      	cmp	r2, r3
 800947c:	d007      	beq.n	800948e <xTaskCheckForTimeOut+0x8a>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	69ba      	ldr	r2, [r7, #24]
 8009484:	429a      	cmp	r2, r3
 8009486:	d302      	bcc.n	800948e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009488:	2301      	movs	r3, #1
 800948a:	61fb      	str	r3, [r7, #28]
 800948c:	e015      	b.n	80094ba <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	697a      	ldr	r2, [r7, #20]
 8009494:	429a      	cmp	r2, r3
 8009496:	d20b      	bcs.n	80094b0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	1ad2      	subs	r2, r2, r3
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7ff ff97 	bl	80093d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094aa:	2300      	movs	r3, #0
 80094ac:	61fb      	str	r3, [r7, #28]
 80094ae:	e004      	b.n	80094ba <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	2200      	movs	r2, #0
 80094b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094b6:	2301      	movs	r3, #1
 80094b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094ba:	f000 ff1b 	bl	800a2f4 <vPortExitCritical>

	return xReturn;
 80094be:	69fb      	ldr	r3, [r7, #28]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3720      	adds	r7, #32
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	200010b8 	.word	0x200010b8
 80094cc:	200010cc 	.word	0x200010cc

080094d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094d0:	b480      	push	{r7}
 80094d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094d4:	4b03      	ldr	r3, [pc, #12]	; (80094e4 <vTaskMissedYield+0x14>)
 80094d6:	2201      	movs	r2, #1
 80094d8:	601a      	str	r2, [r3, #0]
}
 80094da:	bf00      	nop
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	200010c8 	.word	0x200010c8

080094e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094f0:	f000 f852 	bl	8009598 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094f4:	4b06      	ldr	r3, [pc, #24]	; (8009510 <prvIdleTask+0x28>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d9f9      	bls.n	80094f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80094fc:	4b05      	ldr	r3, [pc, #20]	; (8009514 <prvIdleTask+0x2c>)
 80094fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800950c:	e7f0      	b.n	80094f0 <prvIdleTask+0x8>
 800950e:	bf00      	nop
 8009510:	20000fb8 	.word	0x20000fb8
 8009514:	e000ed04 	.word	0xe000ed04

08009518 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800951e:	2300      	movs	r3, #0
 8009520:	607b      	str	r3, [r7, #4]
 8009522:	e00c      	b.n	800953e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	4613      	mov	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4a12      	ldr	r2, [pc, #72]	; (8009578 <prvInitialiseTaskLists+0x60>)
 8009530:	4413      	add	r3, r2
 8009532:	4618      	mov	r0, r3
 8009534:	f7fe fcce 	bl	8007ed4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	3301      	adds	r3, #1
 800953c:	607b      	str	r3, [r7, #4]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b06      	cmp	r3, #6
 8009542:	d9ef      	bls.n	8009524 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009544:	480d      	ldr	r0, [pc, #52]	; (800957c <prvInitialiseTaskLists+0x64>)
 8009546:	f7fe fcc5 	bl	8007ed4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800954a:	480d      	ldr	r0, [pc, #52]	; (8009580 <prvInitialiseTaskLists+0x68>)
 800954c:	f7fe fcc2 	bl	8007ed4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009550:	480c      	ldr	r0, [pc, #48]	; (8009584 <prvInitialiseTaskLists+0x6c>)
 8009552:	f7fe fcbf 	bl	8007ed4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009556:	480c      	ldr	r0, [pc, #48]	; (8009588 <prvInitialiseTaskLists+0x70>)
 8009558:	f7fe fcbc 	bl	8007ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800955c:	480b      	ldr	r0, [pc, #44]	; (800958c <prvInitialiseTaskLists+0x74>)
 800955e:	f7fe fcb9 	bl	8007ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009562:	4b0b      	ldr	r3, [pc, #44]	; (8009590 <prvInitialiseTaskLists+0x78>)
 8009564:	4a05      	ldr	r2, [pc, #20]	; (800957c <prvInitialiseTaskLists+0x64>)
 8009566:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009568:	4b0a      	ldr	r3, [pc, #40]	; (8009594 <prvInitialiseTaskLists+0x7c>)
 800956a:	4a05      	ldr	r2, [pc, #20]	; (8009580 <prvInitialiseTaskLists+0x68>)
 800956c:	601a      	str	r2, [r3, #0]
}
 800956e:	bf00      	nop
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	20000fb8 	.word	0x20000fb8
 800957c:	20001044 	.word	0x20001044
 8009580:	20001058 	.word	0x20001058
 8009584:	20001074 	.word	0x20001074
 8009588:	20001088 	.word	0x20001088
 800958c:	200010a0 	.word	0x200010a0
 8009590:	2000106c 	.word	0x2000106c
 8009594:	20001070 	.word	0x20001070

08009598 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800959e:	e019      	b.n	80095d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80095a0:	f000 fe74 	bl	800a28c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a4:	4b10      	ldr	r3, [pc, #64]	; (80095e8 <prvCheckTasksWaitingTermination+0x50>)
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	3304      	adds	r3, #4
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fe fd19 	bl	8007fe8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095b6:	4b0d      	ldr	r3, [pc, #52]	; (80095ec <prvCheckTasksWaitingTermination+0x54>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	3b01      	subs	r3, #1
 80095bc:	4a0b      	ldr	r2, [pc, #44]	; (80095ec <prvCheckTasksWaitingTermination+0x54>)
 80095be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095c0:	4b0b      	ldr	r3, [pc, #44]	; (80095f0 <prvCheckTasksWaitingTermination+0x58>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3b01      	subs	r3, #1
 80095c6:	4a0a      	ldr	r2, [pc, #40]	; (80095f0 <prvCheckTasksWaitingTermination+0x58>)
 80095c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095ca:	f000 fe93 	bl	800a2f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f810 	bl	80095f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095d4:	4b06      	ldr	r3, [pc, #24]	; (80095f0 <prvCheckTasksWaitingTermination+0x58>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1e1      	bne.n	80095a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095dc:	bf00      	nop
 80095de:	bf00      	nop
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20001088 	.word	0x20001088
 80095ec:	200010b4 	.word	0x200010b4
 80095f0:	2000109c 	.word	0x2000109c

080095f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009602:	2b00      	cmp	r3, #0
 8009604:	d108      	bne.n	8009618 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800960a:	4618      	mov	r0, r3
 800960c:	f001 f834 	bl	800a678 <vPortFree>
				vPortFree( pxTCB );
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f001 f831 	bl	800a678 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009616:	e01a      	b.n	800964e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800961e:	2b01      	cmp	r3, #1
 8009620:	d103      	bne.n	800962a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f001 f828 	bl	800a678 <vPortFree>
	}
 8009628:	e011      	b.n	800964e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009630:	2b02      	cmp	r3, #2
 8009632:	d00c      	beq.n	800964e <prvDeleteTCB+0x5a>
	__asm volatile
 8009634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009638:	b672      	cpsid	i
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	b662      	cpsie	i
 8009648:	60fb      	str	r3, [r7, #12]
}
 800964a:	bf00      	nop
 800964c:	e7fe      	b.n	800964c <prvDeleteTCB+0x58>
	}
 800964e:	bf00      	nop
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
	...

08009658 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800965e:	4b0c      	ldr	r3, [pc, #48]	; (8009690 <prvResetNextTaskUnblockTime+0x38>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d104      	bne.n	8009672 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009668:	4b0a      	ldr	r3, [pc, #40]	; (8009694 <prvResetNextTaskUnblockTime+0x3c>)
 800966a:	f04f 32ff 	mov.w	r2, #4294967295
 800966e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009670:	e008      	b.n	8009684 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009672:	4b07      	ldr	r3, [pc, #28]	; (8009690 <prvResetNextTaskUnblockTime+0x38>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	4a04      	ldr	r2, [pc, #16]	; (8009694 <prvResetNextTaskUnblockTime+0x3c>)
 8009682:	6013      	str	r3, [r2, #0]
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	2000106c 	.word	0x2000106c
 8009694:	200010d4 	.word	0x200010d4

08009698 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800969e:	4b0b      	ldr	r3, [pc, #44]	; (80096cc <xTaskGetSchedulerState+0x34>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d102      	bne.n	80096ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096a6:	2301      	movs	r3, #1
 80096a8:	607b      	str	r3, [r7, #4]
 80096aa:	e008      	b.n	80096be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096ac:	4b08      	ldr	r3, [pc, #32]	; (80096d0 <xTaskGetSchedulerState+0x38>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d102      	bne.n	80096ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096b4:	2302      	movs	r3, #2
 80096b6:	607b      	str	r3, [r7, #4]
 80096b8:	e001      	b.n	80096be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096ba:	2300      	movs	r3, #0
 80096bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096be:	687b      	ldr	r3, [r7, #4]
	}
 80096c0:	4618      	mov	r0, r3
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	200010c0 	.word	0x200010c0
 80096d0:	200010dc 	.word	0x200010dc

080096d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80096e0:	2300      	movs	r3, #0
 80096e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d072      	beq.n	80097d0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096ea:	4b3c      	ldr	r3, [pc, #240]	; (80097dc <xTaskPriorityDisinherit+0x108>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d00c      	beq.n	800970e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80096f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f8:	b672      	cpsid	i
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	b662      	cpsie	i
 8009708:	60fb      	str	r3, [r7, #12]
}
 800970a:	bf00      	nop
 800970c:	e7fe      	b.n	800970c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10c      	bne.n	8009730 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	b672      	cpsid	i
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	b662      	cpsie	i
 800972a:	60bb      	str	r3, [r7, #8]
}
 800972c:	bf00      	nop
 800972e:	e7fe      	b.n	800972e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009734:	1e5a      	subs	r2, r3, #1
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009742:	429a      	cmp	r2, r3
 8009744:	d044      	beq.n	80097d0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800974a:	2b00      	cmp	r3, #0
 800974c:	d140      	bne.n	80097d0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	3304      	adds	r3, #4
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fc48 	bl	8007fe8 <uxListRemove>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d115      	bne.n	800978a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009762:	491f      	ldr	r1, [pc, #124]	; (80097e0 <xTaskPriorityDisinherit+0x10c>)
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	440b      	add	r3, r1
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10a      	bne.n	800978a <xTaskPriorityDisinherit+0xb6>
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009778:	2201      	movs	r2, #1
 800977a:	fa02 f303 	lsl.w	r3, r2, r3
 800977e:	43da      	mvns	r2, r3
 8009780:	4b18      	ldr	r3, [pc, #96]	; (80097e4 <xTaskPriorityDisinherit+0x110>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4013      	ands	r3, r2
 8009786:	4a17      	ldr	r2, [pc, #92]	; (80097e4 <xTaskPriorityDisinherit+0x110>)
 8009788:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009796:	f1c3 0207 	rsb	r2, r3, #7
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a2:	2201      	movs	r2, #1
 80097a4:	409a      	lsls	r2, r3
 80097a6:	4b0f      	ldr	r3, [pc, #60]	; (80097e4 <xTaskPriorityDisinherit+0x110>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	4a0d      	ldr	r2, [pc, #52]	; (80097e4 <xTaskPriorityDisinherit+0x110>)
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b4:	4613      	mov	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4a08      	ldr	r2, [pc, #32]	; (80097e0 <xTaskPriorityDisinherit+0x10c>)
 80097be:	441a      	add	r2, r3
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	3304      	adds	r3, #4
 80097c4:	4619      	mov	r1, r3
 80097c6:	4610      	mov	r0, r2
 80097c8:	f7fe fbb1 	bl	8007f2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80097cc:	2301      	movs	r3, #1
 80097ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097d0:	697b      	ldr	r3, [r7, #20]
	}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3718      	adds	r7, #24
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	20000fb4 	.word	0x20000fb4
 80097e0:	20000fb8 	.word	0x20000fb8
 80097e4:	200010bc 	.word	0x200010bc

080097e8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097f2:	4b29      	ldr	r3, [pc, #164]	; (8009898 <prvAddCurrentTaskToDelayedList+0xb0>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097f8:	4b28      	ldr	r3, [pc, #160]	; (800989c <prvAddCurrentTaskToDelayedList+0xb4>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3304      	adds	r3, #4
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fe fbf2 	bl	8007fe8 <uxListRemove>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10b      	bne.n	8009822 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800980a:	4b24      	ldr	r3, [pc, #144]	; (800989c <prvAddCurrentTaskToDelayedList+0xb4>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009810:	2201      	movs	r2, #1
 8009812:	fa02 f303 	lsl.w	r3, r2, r3
 8009816:	43da      	mvns	r2, r3
 8009818:	4b21      	ldr	r3, [pc, #132]	; (80098a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4013      	ands	r3, r2
 800981e:	4a20      	ldr	r2, [pc, #128]	; (80098a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009820:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009828:	d10a      	bne.n	8009840 <prvAddCurrentTaskToDelayedList+0x58>
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d007      	beq.n	8009840 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009830:	4b1a      	ldr	r3, [pc, #104]	; (800989c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	3304      	adds	r3, #4
 8009836:	4619      	mov	r1, r3
 8009838:	481a      	ldr	r0, [pc, #104]	; (80098a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800983a:	f7fe fb78 	bl	8007f2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800983e:	e026      	b.n	800988e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4413      	add	r3, r2
 8009846:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009848:	4b14      	ldr	r3, [pc, #80]	; (800989c <prvAddCurrentTaskToDelayedList+0xb4>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	429a      	cmp	r2, r3
 8009856:	d209      	bcs.n	800986c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009858:	4b13      	ldr	r3, [pc, #76]	; (80098a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	4b0f      	ldr	r3, [pc, #60]	; (800989c <prvAddCurrentTaskToDelayedList+0xb4>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3304      	adds	r3, #4
 8009862:	4619      	mov	r1, r3
 8009864:	4610      	mov	r0, r2
 8009866:	f7fe fb86 	bl	8007f76 <vListInsert>
}
 800986a:	e010      	b.n	800988e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800986c:	4b0f      	ldr	r3, [pc, #60]	; (80098ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	4b0a      	ldr	r3, [pc, #40]	; (800989c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	3304      	adds	r3, #4
 8009876:	4619      	mov	r1, r3
 8009878:	4610      	mov	r0, r2
 800987a:	f7fe fb7c 	bl	8007f76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800987e:	4b0c      	ldr	r3, [pc, #48]	; (80098b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	429a      	cmp	r2, r3
 8009886:	d202      	bcs.n	800988e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009888:	4a09      	ldr	r2, [pc, #36]	; (80098b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	6013      	str	r3, [r2, #0]
}
 800988e:	bf00      	nop
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	200010b8 	.word	0x200010b8
 800989c:	20000fb4 	.word	0x20000fb4
 80098a0:	200010bc 	.word	0x200010bc
 80098a4:	200010a0 	.word	0x200010a0
 80098a8:	20001070 	.word	0x20001070
 80098ac:	2000106c 	.word	0x2000106c
 80098b0:	200010d4 	.word	0x200010d4

080098b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b08a      	sub	sp, #40	; 0x28
 80098b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80098ba:	2300      	movs	r3, #0
 80098bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80098be:	f000 fb97 	bl	8009ff0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80098c2:	4b1d      	ldr	r3, [pc, #116]	; (8009938 <xTimerCreateTimerTask+0x84>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d021      	beq.n	800990e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80098ca:	2300      	movs	r3, #0
 80098cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80098ce:	2300      	movs	r3, #0
 80098d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80098d2:	1d3a      	adds	r2, r7, #4
 80098d4:	f107 0108 	add.w	r1, r7, #8
 80098d8:	f107 030c 	add.w	r3, r7, #12
 80098dc:	4618      	mov	r0, r3
 80098de:	f7f7 fcef 	bl	80012c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80098e2:	6879      	ldr	r1, [r7, #4]
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	9202      	str	r2, [sp, #8]
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	2302      	movs	r3, #2
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	2300      	movs	r3, #0
 80098f2:	460a      	mov	r2, r1
 80098f4:	4911      	ldr	r1, [pc, #68]	; (800993c <xTimerCreateTimerTask+0x88>)
 80098f6:	4812      	ldr	r0, [pc, #72]	; (8009940 <xTimerCreateTimerTask+0x8c>)
 80098f8:	f7ff f8a6 	bl	8008a48 <xTaskCreateStatic>
 80098fc:	4603      	mov	r3, r0
 80098fe:	4a11      	ldr	r2, [pc, #68]	; (8009944 <xTimerCreateTimerTask+0x90>)
 8009900:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009902:	4b10      	ldr	r3, [pc, #64]	; (8009944 <xTimerCreateTimerTask+0x90>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800990a:	2301      	movs	r3, #1
 800990c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10c      	bne.n	800992e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009918:	b672      	cpsid	i
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	b662      	cpsie	i
 8009928:	613b      	str	r3, [r7, #16]
}
 800992a:	bf00      	nop
 800992c:	e7fe      	b.n	800992c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800992e:	697b      	ldr	r3, [r7, #20]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	20001110 	.word	0x20001110
 800993c:	0800f378 	.word	0x0800f378
 8009940:	08009bc5 	.word	0x08009bc5
 8009944:	20001114 	.word	0x20001114

08009948 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009948:	b580      	push	{r7, lr}
 800994a:	b088      	sub	sp, #32
 800994c:	af02      	add	r7, sp, #8
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009956:	2028      	movs	r0, #40	; 0x28
 8009958:	f000 fdc4 	bl	800a4e4 <pvPortMalloc>
 800995c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00d      	beq.n	8009980 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	9301      	str	r3, [sp, #4]
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	68b9      	ldr	r1, [r7, #8]
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 f847 	bl	8009a0e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009980:	697b      	ldr	r3, [r7, #20]
	}
 8009982:	4618      	mov	r0, r3
 8009984:	3718      	adds	r7, #24
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800998a:	b580      	push	{r7, lr}
 800998c:	b08a      	sub	sp, #40	; 0x28
 800998e:	af02      	add	r7, sp, #8
 8009990:	60f8      	str	r0, [r7, #12]
 8009992:	60b9      	str	r1, [r7, #8]
 8009994:	607a      	str	r2, [r7, #4]
 8009996:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009998:	2328      	movs	r3, #40	; 0x28
 800999a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	2b28      	cmp	r3, #40	; 0x28
 80099a0:	d00c      	beq.n	80099bc <xTimerCreateStatic+0x32>
	__asm volatile
 80099a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a6:	b672      	cpsid	i
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	b662      	cpsie	i
 80099b6:	61bb      	str	r3, [r7, #24]
}
 80099b8:	bf00      	nop
 80099ba:	e7fe      	b.n	80099ba <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80099bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80099be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10c      	bne.n	80099de <xTimerCreateStatic+0x54>
	__asm volatile
 80099c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c8:	b672      	cpsid	i
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	b662      	cpsie	i
 80099d8:	617b      	str	r3, [r7, #20]
}
 80099da:	bf00      	nop
 80099dc:	e7fe      	b.n	80099dc <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80099de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00d      	beq.n	8009a04 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	2202      	movs	r2, #2
 80099ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	9301      	str	r3, [sp, #4]
 80099f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	68b9      	ldr	r1, [r7, #8]
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f000 f805 	bl	8009a0e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009a04:	69fb      	ldr	r3, [r7, #28]
	}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3720      	adds	r7, #32
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b086      	sub	sp, #24
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	60f8      	str	r0, [r7, #12]
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	607a      	str	r2, [r7, #4]
 8009a1a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10c      	bne.n	8009a3c <prvInitialiseNewTimer+0x2e>
	__asm volatile
 8009a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a26:	b672      	cpsid	i
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	b662      	cpsie	i
 8009a36:	617b      	str	r3, [r7, #20]
}
 8009a38:	bf00      	nop
 8009a3a:	e7fe      	b.n	8009a3a <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d01e      	beq.n	8009a80 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009a42:	f000 fad5 	bl	8009ff0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	6a3a      	ldr	r2, [r7, #32]
 8009a5c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a60:	3304      	adds	r3, #4
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fe fa56 	bl	8007f14 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d008      	beq.n	8009a80 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a74:	f043 0304 	orr.w	r3, r3, #4
 8009a78:	b2da      	uxtb	r2, r3
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009a80:	bf00      	nop
 8009a82:	3718      	adds	r7, #24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b08a      	sub	sp, #40	; 0x28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
 8009a94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a96:	2300      	movs	r3, #0
 8009a98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10c      	bne.n	8009aba <xTimerGenericCommand+0x32>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa4:	b672      	cpsid	i
 8009aa6:	f383 8811 	msr	BASEPRI, r3
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	b662      	cpsie	i
 8009ab4:	623b      	str	r3, [r7, #32]
}
 8009ab6:	bf00      	nop
 8009ab8:	e7fe      	b.n	8009ab8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009aba:	4b1a      	ldr	r3, [pc, #104]	; (8009b24 <xTimerGenericCommand+0x9c>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d02a      	beq.n	8009b18 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2b05      	cmp	r3, #5
 8009ad2:	dc18      	bgt.n	8009b06 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ad4:	f7ff fde0 	bl	8009698 <xTaskGetSchedulerState>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d109      	bne.n	8009af2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ade:	4b11      	ldr	r3, [pc, #68]	; (8009b24 <xTimerGenericCommand+0x9c>)
 8009ae0:	6818      	ldr	r0, [r3, #0]
 8009ae2:	f107 0114 	add.w	r1, r7, #20
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aea:	f7fe fbb3 	bl	8008254 <xQueueGenericSend>
 8009aee:	6278      	str	r0, [r7, #36]	; 0x24
 8009af0:	e012      	b.n	8009b18 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009af2:	4b0c      	ldr	r3, [pc, #48]	; (8009b24 <xTimerGenericCommand+0x9c>)
 8009af4:	6818      	ldr	r0, [r3, #0]
 8009af6:	f107 0114 	add.w	r1, r7, #20
 8009afa:	2300      	movs	r3, #0
 8009afc:	2200      	movs	r2, #0
 8009afe:	f7fe fba9 	bl	8008254 <xQueueGenericSend>
 8009b02:	6278      	str	r0, [r7, #36]	; 0x24
 8009b04:	e008      	b.n	8009b18 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b06:	4b07      	ldr	r3, [pc, #28]	; (8009b24 <xTimerGenericCommand+0x9c>)
 8009b08:	6818      	ldr	r0, [r3, #0]
 8009b0a:	f107 0114 	add.w	r1, r7, #20
 8009b0e:	2300      	movs	r3, #0
 8009b10:	683a      	ldr	r2, [r7, #0]
 8009b12:	f7fe fca5 	bl	8008460 <xQueueGenericSendFromISR>
 8009b16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3728      	adds	r7, #40	; 0x28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	20001110 	.word	0x20001110

08009b28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b088      	sub	sp, #32
 8009b2c:	af02      	add	r7, sp, #8
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b32:	4b23      	ldr	r3, [pc, #140]	; (8009bc0 <prvProcessExpiredTimer+0x98>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	3304      	adds	r3, #4
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe fa51 	bl	8007fe8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b4c:	f003 0304 	and.w	r3, r3, #4
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d024      	beq.n	8009b9e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	699a      	ldr	r2, [r3, #24]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	18d1      	adds	r1, r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	6978      	ldr	r0, [r7, #20]
 8009b62:	f000 f8d3 	bl	8009d0c <prvInsertTimerInActiveList>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d021      	beq.n	8009bb0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	2300      	movs	r3, #0
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	2100      	movs	r1, #0
 8009b76:	6978      	ldr	r0, [r7, #20]
 8009b78:	f7ff ff86 	bl	8009a88 <xTimerGenericCommand>
 8009b7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d115      	bne.n	8009bb0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b88:	b672      	cpsid	i
 8009b8a:	f383 8811 	msr	BASEPRI, r3
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	b662      	cpsie	i
 8009b98:	60fb      	str	r3, [r7, #12]
}
 8009b9a:	bf00      	nop
 8009b9c:	e7fe      	b.n	8009b9c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ba4:	f023 0301 	bic.w	r3, r3, #1
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	6a1b      	ldr	r3, [r3, #32]
 8009bb4:	6978      	ldr	r0, [r7, #20]
 8009bb6:	4798      	blx	r3
}
 8009bb8:	bf00      	nop
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	20001108 	.word	0x20001108

08009bc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bcc:	f107 0308 	add.w	r3, r7, #8
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 f857 	bl	8009c84 <prvGetNextExpireTime>
 8009bd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f000 f803 	bl	8009be8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009be2:	f000 f8d5 	bl	8009d90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009be6:	e7f1      	b.n	8009bcc <prvTimerTask+0x8>

08009be8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bf2:	f7ff f965 	bl	8008ec0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bf6:	f107 0308 	add.w	r3, r7, #8
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 f866 	bl	8009ccc <prvSampleTimeNow>
 8009c00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d130      	bne.n	8009c6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10a      	bne.n	8009c24 <prvProcessTimerOrBlockTask+0x3c>
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d806      	bhi.n	8009c24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c16:	f7ff f961 	bl	8008edc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c1a:	68f9      	ldr	r1, [r7, #12]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7ff ff83 	bl	8009b28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c22:	e024      	b.n	8009c6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d008      	beq.n	8009c3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c2a:	4b13      	ldr	r3, [pc, #76]	; (8009c78 <prvProcessTimerOrBlockTask+0x90>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <prvProcessTimerOrBlockTask+0x50>
 8009c34:	2301      	movs	r3, #1
 8009c36:	e000      	b.n	8009c3a <prvProcessTimerOrBlockTask+0x52>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c3c:	4b0f      	ldr	r3, [pc, #60]	; (8009c7c <prvProcessTimerOrBlockTask+0x94>)
 8009c3e:	6818      	ldr	r0, [r3, #0]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	4619      	mov	r1, r3
 8009c4a:	f7fe fec9 	bl	80089e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c4e:	f7ff f945 	bl	8008edc <xTaskResumeAll>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10a      	bne.n	8009c6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c58:	4b09      	ldr	r3, [pc, #36]	; (8009c80 <prvProcessTimerOrBlockTask+0x98>)
 8009c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c5e:	601a      	str	r2, [r3, #0]
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	f3bf 8f6f 	isb	sy
}
 8009c68:	e001      	b.n	8009c6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c6a:	f7ff f937 	bl	8008edc <xTaskResumeAll>
}
 8009c6e:	bf00      	nop
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	2000110c 	.word	0x2000110c
 8009c7c:	20001110 	.word	0x20001110
 8009c80:	e000ed04 	.word	0xe000ed04

08009c84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c8c:	4b0e      	ldr	r3, [pc, #56]	; (8009cc8 <prvGetNextExpireTime+0x44>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d101      	bne.n	8009c9a <prvGetNextExpireTime+0x16>
 8009c96:	2201      	movs	r2, #1
 8009c98:	e000      	b.n	8009c9c <prvGetNextExpireTime+0x18>
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d105      	bne.n	8009cb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ca8:	4b07      	ldr	r3, [pc, #28]	; (8009cc8 <prvGetNextExpireTime+0x44>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	60fb      	str	r3, [r7, #12]
 8009cb2:	e001      	b.n	8009cb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3714      	adds	r7, #20
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	20001108 	.word	0x20001108

08009ccc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009cd4:	f7ff f9a0 	bl	8009018 <xTaskGetTickCount>
 8009cd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009cda:	4b0b      	ldr	r3, [pc, #44]	; (8009d08 <prvSampleTimeNow+0x3c>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d205      	bcs.n	8009cf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ce4:	f000 f91e 	bl	8009f24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	e002      	b.n	8009cf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009cf6:	4a04      	ldr	r2, [pc, #16]	; (8009d08 <prvSampleTimeNow+0x3c>)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20001118 	.word	0x20001118

08009d0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b086      	sub	sp, #24
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
 8009d18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d812      	bhi.n	8009d58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	1ad2      	subs	r2, r2, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d302      	bcc.n	8009d46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d40:	2301      	movs	r3, #1
 8009d42:	617b      	str	r3, [r7, #20]
 8009d44:	e01b      	b.n	8009d7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d46:	4b10      	ldr	r3, [pc, #64]	; (8009d88 <prvInsertTimerInActiveList+0x7c>)
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	3304      	adds	r3, #4
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4610      	mov	r0, r2
 8009d52:	f7fe f910 	bl	8007f76 <vListInsert>
 8009d56:	e012      	b.n	8009d7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d206      	bcs.n	8009d6e <prvInsertTimerInActiveList+0x62>
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d302      	bcc.n	8009d6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	617b      	str	r3, [r7, #20]
 8009d6c:	e007      	b.n	8009d7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d6e:	4b07      	ldr	r3, [pc, #28]	; (8009d8c <prvInsertTimerInActiveList+0x80>)
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3304      	adds	r3, #4
 8009d76:	4619      	mov	r1, r3
 8009d78:	4610      	mov	r0, r2
 8009d7a:	f7fe f8fc 	bl	8007f76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d7e:	697b      	ldr	r3, [r7, #20]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	2000110c 	.word	0x2000110c
 8009d8c:	20001108 	.word	0x20001108

08009d90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b08c      	sub	sp, #48	; 0x30
 8009d94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d96:	e0b2      	b.n	8009efe <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f2c0 80ae 	blt.w	8009efc <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	695b      	ldr	r3, [r3, #20]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d004      	beq.n	8009db6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dae:	3304      	adds	r3, #4
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fe f919 	bl	8007fe8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009db6:	1d3b      	adds	r3, r7, #4
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7ff ff87 	bl	8009ccc <prvSampleTimeNow>
 8009dbe:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2b09      	cmp	r3, #9
 8009dc4:	f200 809b 	bhi.w	8009efe <prvProcessReceivedCommands+0x16e>
 8009dc8:	a201      	add	r2, pc, #4	; (adr r2, 8009dd0 <prvProcessReceivedCommands+0x40>)
 8009dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dce:	bf00      	nop
 8009dd0:	08009df9 	.word	0x08009df9
 8009dd4:	08009df9 	.word	0x08009df9
 8009dd8:	08009df9 	.word	0x08009df9
 8009ddc:	08009e71 	.word	0x08009e71
 8009de0:	08009e85 	.word	0x08009e85
 8009de4:	08009ed3 	.word	0x08009ed3
 8009de8:	08009df9 	.word	0x08009df9
 8009dec:	08009df9 	.word	0x08009df9
 8009df0:	08009e71 	.word	0x08009e71
 8009df4:	08009e85 	.word	0x08009e85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009dfe:	f043 0301 	orr.w	r3, r3, #1
 8009e02:	b2da      	uxtb	r2, r3
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	699b      	ldr	r3, [r3, #24]
 8009e10:	18d1      	adds	r1, r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6a3a      	ldr	r2, [r7, #32]
 8009e16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e18:	f7ff ff78 	bl	8009d0c <prvInsertTimerInActiveList>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d06d      	beq.n	8009efe <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e30:	f003 0304 	and.w	r3, r3, #4
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d062      	beq.n	8009efe <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3c:	699b      	ldr	r3, [r3, #24]
 8009e3e:	441a      	add	r2, r3
 8009e40:	2300      	movs	r3, #0
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	2300      	movs	r3, #0
 8009e46:	2100      	movs	r1, #0
 8009e48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e4a:	f7ff fe1d 	bl	8009a88 <xTimerGenericCommand>
 8009e4e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d153      	bne.n	8009efe <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8009e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5a:	b672      	cpsid	i
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	b662      	cpsie	i
 8009e6a:	61bb      	str	r3, [r7, #24]
}
 8009e6c:	bf00      	nop
 8009e6e:	e7fe      	b.n	8009e6e <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e76:	f023 0301 	bic.w	r3, r3, #1
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8009e82:	e03c      	b.n	8009efe <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e8a:	f043 0301 	orr.w	r3, r3, #1
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10c      	bne.n	8009ebe <prvProcessReceivedCommands+0x12e>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea8:	b672      	cpsid	i
 8009eaa:	f383 8811 	msr	BASEPRI, r3
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	b662      	cpsie	i
 8009eb8:	617b      	str	r3, [r7, #20]
}
 8009eba:	bf00      	nop
 8009ebc:	e7fe      	b.n	8009ebc <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec0:	699a      	ldr	r2, [r3, #24]
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	18d1      	adds	r1, r2, r3
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	6a3a      	ldr	r2, [r7, #32]
 8009eca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ecc:	f7ff ff1e 	bl	8009d0c <prvInsertTimerInActiveList>
					break;
 8009ed0:	e015      	b.n	8009efe <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ed8:	f003 0302 	and.w	r3, r3, #2
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d103      	bne.n	8009ee8 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8009ee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ee2:	f000 fbc9 	bl	800a678 <vPortFree>
 8009ee6:	e00a      	b.n	8009efe <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009eee:	f023 0301 	bic.w	r3, r3, #1
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009efa:	e000      	b.n	8009efe <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009efc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009efe:	4b08      	ldr	r3, [pc, #32]	; (8009f20 <prvProcessReceivedCommands+0x190>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f107 0108 	add.w	r1, r7, #8
 8009f06:	2200      	movs	r2, #0
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fe fb49 	bl	80085a0 <xQueueReceive>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f47f af41 	bne.w	8009d98 <prvProcessReceivedCommands+0x8>
	}
}
 8009f16:	bf00      	nop
 8009f18:	bf00      	nop
 8009f1a:	3728      	adds	r7, #40	; 0x28
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	20001110 	.word	0x20001110

08009f24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b088      	sub	sp, #32
 8009f28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f2a:	e04a      	b.n	8009fc2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f2c:	4b2e      	ldr	r3, [pc, #184]	; (8009fe8 <prvSwitchTimerLists+0xc4>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f36:	4b2c      	ldr	r3, [pc, #176]	; (8009fe8 <prvSwitchTimerLists+0xc4>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	3304      	adds	r3, #4
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fe f84f 	bl	8007fe8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009f58:	f003 0304 	and.w	r3, r3, #4
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d030      	beq.n	8009fc2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	693a      	ldr	r2, [r7, #16]
 8009f66:	4413      	add	r3, r2
 8009f68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d90e      	bls.n	8009f90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f7e:	4b1a      	ldr	r3, [pc, #104]	; (8009fe8 <prvSwitchTimerLists+0xc4>)
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	3304      	adds	r3, #4
 8009f86:	4619      	mov	r1, r3
 8009f88:	4610      	mov	r0, r2
 8009f8a:	f7fd fff4 	bl	8007f76 <vListInsert>
 8009f8e:	e018      	b.n	8009fc2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f90:	2300      	movs	r3, #0
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	2300      	movs	r3, #0
 8009f96:	693a      	ldr	r2, [r7, #16]
 8009f98:	2100      	movs	r1, #0
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7ff fd74 	bl	8009a88 <xTimerGenericCommand>
 8009fa0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10c      	bne.n	8009fc2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fac:	b672      	cpsid	i
 8009fae:	f383 8811 	msr	BASEPRI, r3
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	b662      	cpsie	i
 8009fbc:	603b      	str	r3, [r7, #0]
}
 8009fbe:	bf00      	nop
 8009fc0:	e7fe      	b.n	8009fc0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fc2:	4b09      	ldr	r3, [pc, #36]	; (8009fe8 <prvSwitchTimerLists+0xc4>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1af      	bne.n	8009f2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009fcc:	4b06      	ldr	r3, [pc, #24]	; (8009fe8 <prvSwitchTimerLists+0xc4>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009fd2:	4b06      	ldr	r3, [pc, #24]	; (8009fec <prvSwitchTimerLists+0xc8>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a04      	ldr	r2, [pc, #16]	; (8009fe8 <prvSwitchTimerLists+0xc4>)
 8009fd8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009fda:	4a04      	ldr	r2, [pc, #16]	; (8009fec <prvSwitchTimerLists+0xc8>)
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	6013      	str	r3, [r2, #0]
}
 8009fe0:	bf00      	nop
 8009fe2:	3718      	adds	r7, #24
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	20001108 	.word	0x20001108
 8009fec:	2000110c 	.word	0x2000110c

08009ff0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009ff6:	f000 f949 	bl	800a28c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009ffa:	4b15      	ldr	r3, [pc, #84]	; (800a050 <prvCheckForValidListAndQueue+0x60>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d120      	bne.n	800a044 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a002:	4814      	ldr	r0, [pc, #80]	; (800a054 <prvCheckForValidListAndQueue+0x64>)
 800a004:	f7fd ff66 	bl	8007ed4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a008:	4813      	ldr	r0, [pc, #76]	; (800a058 <prvCheckForValidListAndQueue+0x68>)
 800a00a:	f7fd ff63 	bl	8007ed4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a00e:	4b13      	ldr	r3, [pc, #76]	; (800a05c <prvCheckForValidListAndQueue+0x6c>)
 800a010:	4a10      	ldr	r2, [pc, #64]	; (800a054 <prvCheckForValidListAndQueue+0x64>)
 800a012:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a014:	4b12      	ldr	r3, [pc, #72]	; (800a060 <prvCheckForValidListAndQueue+0x70>)
 800a016:	4a10      	ldr	r2, [pc, #64]	; (800a058 <prvCheckForValidListAndQueue+0x68>)
 800a018:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a01a:	2300      	movs	r3, #0
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	4b11      	ldr	r3, [pc, #68]	; (800a064 <prvCheckForValidListAndQueue+0x74>)
 800a020:	4a11      	ldr	r2, [pc, #68]	; (800a068 <prvCheckForValidListAndQueue+0x78>)
 800a022:	210c      	movs	r1, #12
 800a024:	200a      	movs	r0, #10
 800a026:	f7fe f873 	bl	8008110 <xQueueGenericCreateStatic>
 800a02a:	4603      	mov	r3, r0
 800a02c:	4a08      	ldr	r2, [pc, #32]	; (800a050 <prvCheckForValidListAndQueue+0x60>)
 800a02e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a030:	4b07      	ldr	r3, [pc, #28]	; (800a050 <prvCheckForValidListAndQueue+0x60>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d005      	beq.n	800a044 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a038:	4b05      	ldr	r3, [pc, #20]	; (800a050 <prvCheckForValidListAndQueue+0x60>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	490b      	ldr	r1, [pc, #44]	; (800a06c <prvCheckForValidListAndQueue+0x7c>)
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe fca4 	bl	800898c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a044:	f000 f956 	bl	800a2f4 <vPortExitCritical>
}
 800a048:	bf00      	nop
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20001110 	.word	0x20001110
 800a054:	200010e0 	.word	0x200010e0
 800a058:	200010f4 	.word	0x200010f4
 800a05c:	20001108 	.word	0x20001108
 800a060:	2000110c 	.word	0x2000110c
 800a064:	20001194 	.word	0x20001194
 800a068:	2000111c 	.word	0x2000111c
 800a06c:	0800f380 	.word	0x0800f380

0800a070 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	3b04      	subs	r3, #4
 800a080:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	3b04      	subs	r3, #4
 800a08e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	f023 0201 	bic.w	r2, r3, #1
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	3b04      	subs	r3, #4
 800a09e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0a0:	4a0c      	ldr	r2, [pc, #48]	; (800a0d4 <pxPortInitialiseStack+0x64>)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3b14      	subs	r3, #20
 800a0aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	3b04      	subs	r3, #4
 800a0b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f06f 0202 	mvn.w	r2, #2
 800a0be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	3b20      	subs	r3, #32
 800a0c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr
 800a0d4:	0800a0d9 	.word	0x0800a0d9

0800a0d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a0e2:	4b14      	ldr	r3, [pc, #80]	; (800a134 <prvTaskExitError+0x5c>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ea:	d00c      	beq.n	800a106 <prvTaskExitError+0x2e>
	__asm volatile
 800a0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f0:	b672      	cpsid	i
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	b662      	cpsie	i
 800a100:	60fb      	str	r3, [r7, #12]
}
 800a102:	bf00      	nop
 800a104:	e7fe      	b.n	800a104 <prvTaskExitError+0x2c>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10a:	b672      	cpsid	i
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	b662      	cpsie	i
 800a11a:	60bb      	str	r3, [r7, #8]
}
 800a11c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a11e:	bf00      	nop
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d0fc      	beq.n	800a120 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a126:	bf00      	nop
 800a128:	bf00      	nop
 800a12a:	3714      	adds	r7, #20
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr
 800a134:	20000010 	.word	0x20000010
	...

0800a140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a140:	4b07      	ldr	r3, [pc, #28]	; (800a160 <pxCurrentTCBConst2>)
 800a142:	6819      	ldr	r1, [r3, #0]
 800a144:	6808      	ldr	r0, [r1, #0]
 800a146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14a:	f380 8809 	msr	PSP, r0
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f04f 0000 	mov.w	r0, #0
 800a156:	f380 8811 	msr	BASEPRI, r0
 800a15a:	4770      	bx	lr
 800a15c:	f3af 8000 	nop.w

0800a160 <pxCurrentTCBConst2>:
 800a160:	20000fb4 	.word	0x20000fb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a164:	bf00      	nop
 800a166:	bf00      	nop

0800a168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a168:	4808      	ldr	r0, [pc, #32]	; (800a18c <prvPortStartFirstTask+0x24>)
 800a16a:	6800      	ldr	r0, [r0, #0]
 800a16c:	6800      	ldr	r0, [r0, #0]
 800a16e:	f380 8808 	msr	MSP, r0
 800a172:	f04f 0000 	mov.w	r0, #0
 800a176:	f380 8814 	msr	CONTROL, r0
 800a17a:	b662      	cpsie	i
 800a17c:	b661      	cpsie	f
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	df00      	svc	0
 800a188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a18a:	bf00      	nop
 800a18c:	e000ed08 	.word	0xe000ed08

0800a190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a196:	4b37      	ldr	r3, [pc, #220]	; (800a274 <xPortStartScheduler+0xe4>)
 800a198:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	22ff      	movs	r2, #255	; 0xff
 800a1a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1b0:	78fb      	ldrb	r3, [r7, #3]
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	4b2f      	ldr	r3, [pc, #188]	; (800a278 <xPortStartScheduler+0xe8>)
 800a1bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a1be:	4b2f      	ldr	r3, [pc, #188]	; (800a27c <xPortStartScheduler+0xec>)
 800a1c0:	2207      	movs	r2, #7
 800a1c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1c4:	e009      	b.n	800a1da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a1c6:	4b2d      	ldr	r3, [pc, #180]	; (800a27c <xPortStartScheduler+0xec>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	4a2b      	ldr	r2, [pc, #172]	; (800a27c <xPortStartScheduler+0xec>)
 800a1ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a1d0:	78fb      	ldrb	r3, [r7, #3]
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1da:	78fb      	ldrb	r3, [r7, #3]
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1e2:	2b80      	cmp	r3, #128	; 0x80
 800a1e4:	d0ef      	beq.n	800a1c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a1e6:	4b25      	ldr	r3, [pc, #148]	; (800a27c <xPortStartScheduler+0xec>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f1c3 0307 	rsb	r3, r3, #7
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	d00c      	beq.n	800a20c <xPortStartScheduler+0x7c>
	__asm volatile
 800a1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f6:	b672      	cpsid	i
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	b662      	cpsie	i
 800a206:	60bb      	str	r3, [r7, #8]
}
 800a208:	bf00      	nop
 800a20a:	e7fe      	b.n	800a20a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a20c:	4b1b      	ldr	r3, [pc, #108]	; (800a27c <xPortStartScheduler+0xec>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	021b      	lsls	r3, r3, #8
 800a212:	4a1a      	ldr	r2, [pc, #104]	; (800a27c <xPortStartScheduler+0xec>)
 800a214:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a216:	4b19      	ldr	r3, [pc, #100]	; (800a27c <xPortStartScheduler+0xec>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a21e:	4a17      	ldr	r2, [pc, #92]	; (800a27c <xPortStartScheduler+0xec>)
 800a220:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	b2da      	uxtb	r2, r3
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a22a:	4b15      	ldr	r3, [pc, #84]	; (800a280 <xPortStartScheduler+0xf0>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a14      	ldr	r2, [pc, #80]	; (800a280 <xPortStartScheduler+0xf0>)
 800a230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a234:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a236:	4b12      	ldr	r3, [pc, #72]	; (800a280 <xPortStartScheduler+0xf0>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a11      	ldr	r2, [pc, #68]	; (800a280 <xPortStartScheduler+0xf0>)
 800a23c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a240:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a242:	f000 f8dd 	bl	800a400 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a246:	4b0f      	ldr	r3, [pc, #60]	; (800a284 <xPortStartScheduler+0xf4>)
 800a248:	2200      	movs	r2, #0
 800a24a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a24c:	f000 f8fc 	bl	800a448 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a250:	4b0d      	ldr	r3, [pc, #52]	; (800a288 <xPortStartScheduler+0xf8>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a0c      	ldr	r2, [pc, #48]	; (800a288 <xPortStartScheduler+0xf8>)
 800a256:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a25a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a25c:	f7ff ff84 	bl	800a168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a260:	f7fe ffa4 	bl	80091ac <vTaskSwitchContext>
	prvTaskExitError();
 800a264:	f7ff ff38 	bl	800a0d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	e000e400 	.word	0xe000e400
 800a278:	200011dc 	.word	0x200011dc
 800a27c:	200011e0 	.word	0x200011e0
 800a280:	e000ed20 	.word	0xe000ed20
 800a284:	20000010 	.word	0x20000010
 800a288:	e000ef34 	.word	0xe000ef34

0800a28c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
	__asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a296:	b672      	cpsid	i
 800a298:	f383 8811 	msr	BASEPRI, r3
 800a29c:	f3bf 8f6f 	isb	sy
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	b662      	cpsie	i
 800a2a6:	607b      	str	r3, [r7, #4]
}
 800a2a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a2aa:	4b10      	ldr	r3, [pc, #64]	; (800a2ec <vPortEnterCritical+0x60>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	4a0e      	ldr	r2, [pc, #56]	; (800a2ec <vPortEnterCritical+0x60>)
 800a2b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a2b4:	4b0d      	ldr	r3, [pc, #52]	; (800a2ec <vPortEnterCritical+0x60>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d111      	bne.n	800a2e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a2bc:	4b0c      	ldr	r3, [pc, #48]	; (800a2f0 <vPortEnterCritical+0x64>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00c      	beq.n	800a2e0 <vPortEnterCritical+0x54>
	__asm volatile
 800a2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ca:	b672      	cpsid	i
 800a2cc:	f383 8811 	msr	BASEPRI, r3
 800a2d0:	f3bf 8f6f 	isb	sy
 800a2d4:	f3bf 8f4f 	dsb	sy
 800a2d8:	b662      	cpsie	i
 800a2da:	603b      	str	r3, [r7, #0]
}
 800a2dc:	bf00      	nop
 800a2de:	e7fe      	b.n	800a2de <vPortEnterCritical+0x52>
	}
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	20000010 	.word	0x20000010
 800a2f0:	e000ed04 	.word	0xe000ed04

0800a2f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2fa:	4b13      	ldr	r3, [pc, #76]	; (800a348 <vPortExitCritical+0x54>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10c      	bne.n	800a31c <vPortExitCritical+0x28>
	__asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a306:	b672      	cpsid	i
 800a308:	f383 8811 	msr	BASEPRI, r3
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	f3bf 8f4f 	dsb	sy
 800a314:	b662      	cpsie	i
 800a316:	607b      	str	r3, [r7, #4]
}
 800a318:	bf00      	nop
 800a31a:	e7fe      	b.n	800a31a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a31c:	4b0a      	ldr	r3, [pc, #40]	; (800a348 <vPortExitCritical+0x54>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3b01      	subs	r3, #1
 800a322:	4a09      	ldr	r2, [pc, #36]	; (800a348 <vPortExitCritical+0x54>)
 800a324:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a326:	4b08      	ldr	r3, [pc, #32]	; (800a348 <vPortExitCritical+0x54>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d105      	bne.n	800a33a <vPortExitCritical+0x46>
 800a32e:	2300      	movs	r3, #0
 800a330:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	f383 8811 	msr	BASEPRI, r3
}
 800a338:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a33a:	bf00      	nop
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	20000010 	.word	0x20000010
 800a34c:	00000000 	.word	0x00000000

0800a350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a350:	f3ef 8009 	mrs	r0, PSP
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	4b15      	ldr	r3, [pc, #84]	; (800a3b0 <pxCurrentTCBConst>)
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	f01e 0f10 	tst.w	lr, #16
 800a360:	bf08      	it	eq
 800a362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36a:	6010      	str	r0, [r2, #0]
 800a36c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a370:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a374:	b672      	cpsid	i
 800a376:	f380 8811 	msr	BASEPRI, r0
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	b662      	cpsie	i
 800a384:	f7fe ff12 	bl	80091ac <vTaskSwitchContext>
 800a388:	f04f 0000 	mov.w	r0, #0
 800a38c:	f380 8811 	msr	BASEPRI, r0
 800a390:	bc09      	pop	{r0, r3}
 800a392:	6819      	ldr	r1, [r3, #0]
 800a394:	6808      	ldr	r0, [r1, #0]
 800a396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39a:	f01e 0f10 	tst.w	lr, #16
 800a39e:	bf08      	it	eq
 800a3a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a3a4:	f380 8809 	msr	PSP, r0
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop

0800a3b0 <pxCurrentTCBConst>:
 800a3b0:	20000fb4 	.word	0x20000fb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a3b4:	bf00      	nop
 800a3b6:	bf00      	nop

0800a3b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	b672      	cpsid	i
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	b662      	cpsie	i
 800a3d2:	607b      	str	r3, [r7, #4]
}
 800a3d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a3d6:	f7fe fe2f 	bl	8009038 <xTaskIncrementTick>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d003      	beq.n	800a3e8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a3e0:	4b06      	ldr	r3, [pc, #24]	; (800a3fc <xPortSysTickHandler+0x44>)
 800a3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e6:	601a      	str	r2, [r3, #0]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	f383 8811 	msr	BASEPRI, r3
}
 800a3f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3f4:	bf00      	nop
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	e000ed04 	.word	0xe000ed04

0800a400 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a400:	b480      	push	{r7}
 800a402:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a404:	4b0b      	ldr	r3, [pc, #44]	; (800a434 <vPortSetupTimerInterrupt+0x34>)
 800a406:	2200      	movs	r2, #0
 800a408:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a40a:	4b0b      	ldr	r3, [pc, #44]	; (800a438 <vPortSetupTimerInterrupt+0x38>)
 800a40c:	2200      	movs	r2, #0
 800a40e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a410:	4b0a      	ldr	r3, [pc, #40]	; (800a43c <vPortSetupTimerInterrupt+0x3c>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a0a      	ldr	r2, [pc, #40]	; (800a440 <vPortSetupTimerInterrupt+0x40>)
 800a416:	fba2 2303 	umull	r2, r3, r2, r3
 800a41a:	099b      	lsrs	r3, r3, #6
 800a41c:	4a09      	ldr	r2, [pc, #36]	; (800a444 <vPortSetupTimerInterrupt+0x44>)
 800a41e:	3b01      	subs	r3, #1
 800a420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a422:	4b04      	ldr	r3, [pc, #16]	; (800a434 <vPortSetupTimerInterrupt+0x34>)
 800a424:	2207      	movs	r2, #7
 800a426:	601a      	str	r2, [r3, #0]
}
 800a428:	bf00      	nop
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	e000e010 	.word	0xe000e010
 800a438:	e000e018 	.word	0xe000e018
 800a43c:	20000004 	.word	0x20000004
 800a440:	10624dd3 	.word	0x10624dd3
 800a444:	e000e014 	.word	0xe000e014

0800a448 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a448:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a458 <vPortEnableVFP+0x10>
 800a44c:	6801      	ldr	r1, [r0, #0]
 800a44e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a452:	6001      	str	r1, [r0, #0]
 800a454:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a456:	bf00      	nop
 800a458:	e000ed88 	.word	0xe000ed88

0800a45c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a462:	f3ef 8305 	mrs	r3, IPSR
 800a466:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b0f      	cmp	r3, #15
 800a46c:	d916      	bls.n	800a49c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a46e:	4a19      	ldr	r2, [pc, #100]	; (800a4d4 <vPortValidateInterruptPriority+0x78>)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	4413      	add	r3, r2
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a478:	4b17      	ldr	r3, [pc, #92]	; (800a4d8 <vPortValidateInterruptPriority+0x7c>)
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	7afa      	ldrb	r2, [r7, #11]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d20c      	bcs.n	800a49c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	b672      	cpsid	i
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	b662      	cpsie	i
 800a496:	607b      	str	r3, [r7, #4]
}
 800a498:	bf00      	nop
 800a49a:	e7fe      	b.n	800a49a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a49c:	4b0f      	ldr	r3, [pc, #60]	; (800a4dc <vPortValidateInterruptPriority+0x80>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a4a4:	4b0e      	ldr	r3, [pc, #56]	; (800a4e0 <vPortValidateInterruptPriority+0x84>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d90c      	bls.n	800a4c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b0:	b672      	cpsid	i
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	b662      	cpsie	i
 800a4c0:	603b      	str	r3, [r7, #0]
}
 800a4c2:	bf00      	nop
 800a4c4:	e7fe      	b.n	800a4c4 <vPortValidateInterruptPriority+0x68>
	}
 800a4c6:	bf00      	nop
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	e000e3f0 	.word	0xe000e3f0
 800a4d8:	200011dc 	.word	0x200011dc
 800a4dc:	e000ed0c 	.word	0xe000ed0c
 800a4e0:	200011e0 	.word	0x200011e0

0800a4e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b08a      	sub	sp, #40	; 0x28
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a4f0:	f7fe fce6 	bl	8008ec0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a4f4:	4b5b      	ldr	r3, [pc, #364]	; (800a664 <pvPortMalloc+0x180>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d101      	bne.n	800a500 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a4fc:	f000 f91a 	bl	800a734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a500:	4b59      	ldr	r3, [pc, #356]	; (800a668 <pvPortMalloc+0x184>)
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4013      	ands	r3, r2
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f040 8092 	bne.w	800a632 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d01f      	beq.n	800a554 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a514:	2208      	movs	r2, #8
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4413      	add	r3, r2
 800a51a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f003 0307 	and.w	r3, r3, #7
 800a522:	2b00      	cmp	r3, #0
 800a524:	d016      	beq.n	800a554 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f023 0307 	bic.w	r3, r3, #7
 800a52c:	3308      	adds	r3, #8
 800a52e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f003 0307 	and.w	r3, r3, #7
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00c      	beq.n	800a554 <pvPortMalloc+0x70>
	__asm volatile
 800a53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53e:	b672      	cpsid	i
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	b662      	cpsie	i
 800a54e:	617b      	str	r3, [r7, #20]
}
 800a550:	bf00      	nop
 800a552:	e7fe      	b.n	800a552 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d06b      	beq.n	800a632 <pvPortMalloc+0x14e>
 800a55a:	4b44      	ldr	r3, [pc, #272]	; (800a66c <pvPortMalloc+0x188>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	429a      	cmp	r2, r3
 800a562:	d866      	bhi.n	800a632 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a564:	4b42      	ldr	r3, [pc, #264]	; (800a670 <pvPortMalloc+0x18c>)
 800a566:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a568:	4b41      	ldr	r3, [pc, #260]	; (800a670 <pvPortMalloc+0x18c>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a56e:	e004      	b.n	800a57a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a572:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	429a      	cmp	r2, r3
 800a582:	d903      	bls.n	800a58c <pvPortMalloc+0xa8>
 800a584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1f1      	bne.n	800a570 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a58c:	4b35      	ldr	r3, [pc, #212]	; (800a664 <pvPortMalloc+0x180>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a592:	429a      	cmp	r2, r3
 800a594:	d04d      	beq.n	800a632 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a596:	6a3b      	ldr	r3, [r7, #32]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2208      	movs	r2, #8
 800a59c:	4413      	add	r3, r2
 800a59e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	6a3b      	ldr	r3, [r7, #32]
 800a5a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5aa:	685a      	ldr	r2, [r3, #4]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	1ad2      	subs	r2, r2, r3
 800a5b0:	2308      	movs	r3, #8
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d921      	bls.n	800a5fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4413      	add	r3, r2
 800a5be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	f003 0307 	and.w	r3, r3, #7
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00c      	beq.n	800a5e4 <pvPortMalloc+0x100>
	__asm volatile
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	b672      	cpsid	i
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	b662      	cpsie	i
 800a5de:	613b      	str	r3, [r7, #16]
}
 800a5e0:	bf00      	nop
 800a5e2:	e7fe      	b.n	800a5e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	1ad2      	subs	r2, r2, r3
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a5f6:	69b8      	ldr	r0, [r7, #24]
 800a5f8:	f000 f8fe 	bl	800a7f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a5fc:	4b1b      	ldr	r3, [pc, #108]	; (800a66c <pvPortMalloc+0x188>)
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	1ad3      	subs	r3, r2, r3
 800a606:	4a19      	ldr	r2, [pc, #100]	; (800a66c <pvPortMalloc+0x188>)
 800a608:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a60a:	4b18      	ldr	r3, [pc, #96]	; (800a66c <pvPortMalloc+0x188>)
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	4b19      	ldr	r3, [pc, #100]	; (800a674 <pvPortMalloc+0x190>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	429a      	cmp	r2, r3
 800a614:	d203      	bcs.n	800a61e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a616:	4b15      	ldr	r3, [pc, #84]	; (800a66c <pvPortMalloc+0x188>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a16      	ldr	r2, [pc, #88]	; (800a674 <pvPortMalloc+0x190>)
 800a61c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a620:	685a      	ldr	r2, [r3, #4]
 800a622:	4b11      	ldr	r3, [pc, #68]	; (800a668 <pvPortMalloc+0x184>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	431a      	orrs	r2, r3
 800a628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62e:	2200      	movs	r2, #0
 800a630:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a632:	f7fe fc53 	bl	8008edc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	f003 0307 	and.w	r3, r3, #7
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00c      	beq.n	800a65a <pvPortMalloc+0x176>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a644:	b672      	cpsid	i
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	b662      	cpsie	i
 800a654:	60fb      	str	r3, [r7, #12]
}
 800a656:	bf00      	nop
 800a658:	e7fe      	b.n	800a658 <pvPortMalloc+0x174>
	return pvReturn;
 800a65a:	69fb      	ldr	r3, [r7, #28]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3728      	adds	r7, #40	; 0x28
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	20004dec 	.word	0x20004dec
 800a668:	20004df8 	.word	0x20004df8
 800a66c:	20004df0 	.word	0x20004df0
 800a670:	20004de4 	.word	0x20004de4
 800a674:	20004df4 	.word	0x20004df4

0800a678 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d04c      	beq.n	800a724 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a68a:	2308      	movs	r3, #8
 800a68c:	425b      	negs	r3, r3
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	4413      	add	r3, r2
 800a692:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	4b23      	ldr	r3, [pc, #140]	; (800a72c <vPortFree+0xb4>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10c      	bne.n	800a6c0 <vPortFree+0x48>
	__asm volatile
 800a6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6aa:	b672      	cpsid	i
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	b662      	cpsie	i
 800a6ba:	60fb      	str	r3, [r7, #12]
}
 800a6bc:	bf00      	nop
 800a6be:	e7fe      	b.n	800a6be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00c      	beq.n	800a6e2 <vPortFree+0x6a>
	__asm volatile
 800a6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6cc:	b672      	cpsid	i
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	b662      	cpsie	i
 800a6dc:	60bb      	str	r3, [r7, #8]
}
 800a6de:	bf00      	nop
 800a6e0:	e7fe      	b.n	800a6e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	685a      	ldr	r2, [r3, #4]
 800a6e6:	4b11      	ldr	r3, [pc, #68]	; (800a72c <vPortFree+0xb4>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d019      	beq.n	800a724 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d115      	bne.n	800a724 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	4b0b      	ldr	r3, [pc, #44]	; (800a72c <vPortFree+0xb4>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	43db      	mvns	r3, r3
 800a702:	401a      	ands	r2, r3
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a708:	f7fe fbda 	bl	8008ec0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	685a      	ldr	r2, [r3, #4]
 800a710:	4b07      	ldr	r3, [pc, #28]	; (800a730 <vPortFree+0xb8>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4413      	add	r3, r2
 800a716:	4a06      	ldr	r2, [pc, #24]	; (800a730 <vPortFree+0xb8>)
 800a718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a71a:	6938      	ldr	r0, [r7, #16]
 800a71c:	f000 f86c 	bl	800a7f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a720:	f7fe fbdc 	bl	8008edc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a724:	bf00      	nop
 800a726:	3718      	adds	r7, #24
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	20004df8 	.word	0x20004df8
 800a730:	20004df0 	.word	0x20004df0

0800a734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a73a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a73e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a740:	4b27      	ldr	r3, [pc, #156]	; (800a7e0 <prvHeapInit+0xac>)
 800a742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f003 0307 	and.w	r3, r3, #7
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00c      	beq.n	800a768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	3307      	adds	r3, #7
 800a752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f023 0307 	bic.w	r3, r3, #7
 800a75a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a75c:	68ba      	ldr	r2, [r7, #8]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	4a1f      	ldr	r2, [pc, #124]	; (800a7e0 <prvHeapInit+0xac>)
 800a764:	4413      	add	r3, r2
 800a766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a76c:	4a1d      	ldr	r2, [pc, #116]	; (800a7e4 <prvHeapInit+0xb0>)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a772:	4b1c      	ldr	r3, [pc, #112]	; (800a7e4 <prvHeapInit+0xb0>)
 800a774:	2200      	movs	r2, #0
 800a776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	4413      	add	r3, r2
 800a77e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a780:	2208      	movs	r2, #8
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	1a9b      	subs	r3, r3, r2
 800a786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f023 0307 	bic.w	r3, r3, #7
 800a78e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	4a15      	ldr	r2, [pc, #84]	; (800a7e8 <prvHeapInit+0xb4>)
 800a794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a796:	4b14      	ldr	r3, [pc, #80]	; (800a7e8 <prvHeapInit+0xb4>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2200      	movs	r2, #0
 800a79c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a79e:	4b12      	ldr	r3, [pc, #72]	; (800a7e8 <prvHeapInit+0xb4>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	1ad2      	subs	r2, r2, r3
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a7b4:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <prvHeapInit+0xb4>)
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	4a0a      	ldr	r2, [pc, #40]	; (800a7ec <prvHeapInit+0xb8>)
 800a7c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	4a09      	ldr	r2, [pc, #36]	; (800a7f0 <prvHeapInit+0xbc>)
 800a7ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a7cc:	4b09      	ldr	r3, [pc, #36]	; (800a7f4 <prvHeapInit+0xc0>)
 800a7ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a7d2:	601a      	str	r2, [r3, #0]
}
 800a7d4:	bf00      	nop
 800a7d6:	3714      	adds	r7, #20
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	200011e4 	.word	0x200011e4
 800a7e4:	20004de4 	.word	0x20004de4
 800a7e8:	20004dec 	.word	0x20004dec
 800a7ec:	20004df4 	.word	0x20004df4
 800a7f0:	20004df0 	.word	0x20004df0
 800a7f4:	20004df8 	.word	0x20004df8

0800a7f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a800:	4b28      	ldr	r3, [pc, #160]	; (800a8a4 <prvInsertBlockIntoFreeList+0xac>)
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	e002      	b.n	800a80c <prvInsertBlockIntoFreeList+0x14>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	429a      	cmp	r2, r3
 800a814:	d8f7      	bhi.n	800a806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	4413      	add	r3, r2
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	429a      	cmp	r2, r3
 800a826:	d108      	bne.n	800a83a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	685a      	ldr	r2, [r3, #4]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	441a      	add	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	441a      	add	r2, r3
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d118      	bne.n	800a880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	4b15      	ldr	r3, [pc, #84]	; (800a8a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	429a      	cmp	r2, r3
 800a858:	d00d      	beq.n	800a876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685a      	ldr	r2, [r3, #4]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	441a      	add	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	601a      	str	r2, [r3, #0]
 800a874:	e008      	b.n	800a888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a876:	4b0c      	ldr	r3, [pc, #48]	; (800a8a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	601a      	str	r2, [r3, #0]
 800a87e:	e003      	b.n	800a888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d002      	beq.n	800a896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a896:	bf00      	nop
 800a898:	3714      	adds	r7, #20
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	20004de4 	.word	0x20004de4
 800a8a8:	20004dec 	.word	0x20004dec

0800a8ac <atan2f>:
 800a8ac:	f000 b800 	b.w	800a8b0 <__ieee754_atan2f>

0800a8b0 <__ieee754_atan2f>:
 800a8b0:	ee10 2a90 	vmov	r2, s1
 800a8b4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a8b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a8bc:	b510      	push	{r4, lr}
 800a8be:	eef0 7a40 	vmov.f32	s15, s0
 800a8c2:	dc06      	bgt.n	800a8d2 <__ieee754_atan2f+0x22>
 800a8c4:	ee10 0a10 	vmov	r0, s0
 800a8c8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a8cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a8d0:	dd04      	ble.n	800a8dc <__ieee754_atan2f+0x2c>
 800a8d2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a8d6:	eeb0 0a67 	vmov.f32	s0, s15
 800a8da:	bd10      	pop	{r4, pc}
 800a8dc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a8e0:	d103      	bne.n	800a8ea <__ieee754_atan2f+0x3a>
 800a8e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8e6:	f000 b881 	b.w	800a9ec <atanf>
 800a8ea:	1794      	asrs	r4, r2, #30
 800a8ec:	f004 0402 	and.w	r4, r4, #2
 800a8f0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a8f4:	b93b      	cbnz	r3, 800a906 <__ieee754_atan2f+0x56>
 800a8f6:	2c02      	cmp	r4, #2
 800a8f8:	d05c      	beq.n	800a9b4 <__ieee754_atan2f+0x104>
 800a8fa:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800a9c8 <__ieee754_atan2f+0x118>
 800a8fe:	2c03      	cmp	r4, #3
 800a900:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800a904:	e7e7      	b.n	800a8d6 <__ieee754_atan2f+0x26>
 800a906:	b939      	cbnz	r1, 800a918 <__ieee754_atan2f+0x68>
 800a908:	eddf 7a30 	vldr	s15, [pc, #192]	; 800a9cc <__ieee754_atan2f+0x11c>
 800a90c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800a9d0 <__ieee754_atan2f+0x120>
 800a910:	2800      	cmp	r0, #0
 800a912:	fe67 7a80 	vselge.f32	s15, s15, s0
 800a916:	e7de      	b.n	800a8d6 <__ieee754_atan2f+0x26>
 800a918:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a91c:	d110      	bne.n	800a940 <__ieee754_atan2f+0x90>
 800a91e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a922:	f104 34ff 	add.w	r4, r4, #4294967295
 800a926:	d107      	bne.n	800a938 <__ieee754_atan2f+0x88>
 800a928:	2c02      	cmp	r4, #2
 800a92a:	d846      	bhi.n	800a9ba <__ieee754_atan2f+0x10a>
 800a92c:	4b29      	ldr	r3, [pc, #164]	; (800a9d4 <__ieee754_atan2f+0x124>)
 800a92e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a932:	edd4 7a00 	vldr	s15, [r4]
 800a936:	e7ce      	b.n	800a8d6 <__ieee754_atan2f+0x26>
 800a938:	2c02      	cmp	r4, #2
 800a93a:	d841      	bhi.n	800a9c0 <__ieee754_atan2f+0x110>
 800a93c:	4b26      	ldr	r3, [pc, #152]	; (800a9d8 <__ieee754_atan2f+0x128>)
 800a93e:	e7f6      	b.n	800a92e <__ieee754_atan2f+0x7e>
 800a940:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a944:	d0e0      	beq.n	800a908 <__ieee754_atan2f+0x58>
 800a946:	1a5b      	subs	r3, r3, r1
 800a948:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a94c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a950:	da1a      	bge.n	800a988 <__ieee754_atan2f+0xd8>
 800a952:	2a00      	cmp	r2, #0
 800a954:	da01      	bge.n	800a95a <__ieee754_atan2f+0xaa>
 800a956:	313c      	adds	r1, #60	; 0x3c
 800a958:	db19      	blt.n	800a98e <__ieee754_atan2f+0xde>
 800a95a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a95e:	f000 f919 	bl	800ab94 <fabsf>
 800a962:	f000 f843 	bl	800a9ec <atanf>
 800a966:	eef0 7a40 	vmov.f32	s15, s0
 800a96a:	2c01      	cmp	r4, #1
 800a96c:	d012      	beq.n	800a994 <__ieee754_atan2f+0xe4>
 800a96e:	2c02      	cmp	r4, #2
 800a970:	d017      	beq.n	800a9a2 <__ieee754_atan2f+0xf2>
 800a972:	2c00      	cmp	r4, #0
 800a974:	d0af      	beq.n	800a8d6 <__ieee754_atan2f+0x26>
 800a976:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a9dc <__ieee754_atan2f+0x12c>
 800a97a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a97e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a9e0 <__ieee754_atan2f+0x130>
 800a982:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a986:	e7a6      	b.n	800a8d6 <__ieee754_atan2f+0x26>
 800a988:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a9cc <__ieee754_atan2f+0x11c>
 800a98c:	e7ed      	b.n	800a96a <__ieee754_atan2f+0xba>
 800a98e:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a9e4 <__ieee754_atan2f+0x134>
 800a992:	e7ea      	b.n	800a96a <__ieee754_atan2f+0xba>
 800a994:	ee17 3a90 	vmov	r3, s15
 800a998:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a99c:	ee07 3a90 	vmov	s15, r3
 800a9a0:	e799      	b.n	800a8d6 <__ieee754_atan2f+0x26>
 800a9a2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a9dc <__ieee754_atan2f+0x12c>
 800a9a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a9aa:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a9e0 <__ieee754_atan2f+0x130>
 800a9ae:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a9b2:	e790      	b.n	800a8d6 <__ieee754_atan2f+0x26>
 800a9b4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a9e0 <__ieee754_atan2f+0x130>
 800a9b8:	e78d      	b.n	800a8d6 <__ieee754_atan2f+0x26>
 800a9ba:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a9e8 <__ieee754_atan2f+0x138>
 800a9be:	e78a      	b.n	800a8d6 <__ieee754_atan2f+0x26>
 800a9c0:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a9e4 <__ieee754_atan2f+0x134>
 800a9c4:	e787      	b.n	800a8d6 <__ieee754_atan2f+0x26>
 800a9c6:	bf00      	nop
 800a9c8:	c0490fdb 	.word	0xc0490fdb
 800a9cc:	3fc90fdb 	.word	0x3fc90fdb
 800a9d0:	bfc90fdb 	.word	0xbfc90fdb
 800a9d4:	0800f3a0 	.word	0x0800f3a0
 800a9d8:	0800f3ac 	.word	0x0800f3ac
 800a9dc:	33bbbd2e 	.word	0x33bbbd2e
 800a9e0:	40490fdb 	.word	0x40490fdb
 800a9e4:	00000000 	.word	0x00000000
 800a9e8:	3f490fdb 	.word	0x3f490fdb

0800a9ec <atanf>:
 800a9ec:	b538      	push	{r3, r4, r5, lr}
 800a9ee:	ee10 5a10 	vmov	r5, s0
 800a9f2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a9f6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800a9fa:	eef0 7a40 	vmov.f32	s15, s0
 800a9fe:	db0f      	blt.n	800aa20 <atanf+0x34>
 800aa00:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800aa04:	dd04      	ble.n	800aa10 <atanf+0x24>
 800aa06:	ee70 7a00 	vadd.f32	s15, s0, s0
 800aa0a:	eeb0 0a67 	vmov.f32	s0, s15
 800aa0e:	bd38      	pop	{r3, r4, r5, pc}
 800aa10:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ab48 <atanf+0x15c>
 800aa14:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ab4c <atanf+0x160>
 800aa18:	2d00      	cmp	r5, #0
 800aa1a:	fe77 7a80 	vselgt.f32	s15, s15, s0
 800aa1e:	e7f4      	b.n	800aa0a <atanf+0x1e>
 800aa20:	4b4b      	ldr	r3, [pc, #300]	; (800ab50 <atanf+0x164>)
 800aa22:	429c      	cmp	r4, r3
 800aa24:	dc10      	bgt.n	800aa48 <atanf+0x5c>
 800aa26:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800aa2a:	da0a      	bge.n	800aa42 <atanf+0x56>
 800aa2c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ab54 <atanf+0x168>
 800aa30:	ee30 7a07 	vadd.f32	s14, s0, s14
 800aa34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa38:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800aa3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa40:	dce3      	bgt.n	800aa0a <atanf+0x1e>
 800aa42:	f04f 33ff 	mov.w	r3, #4294967295
 800aa46:	e013      	b.n	800aa70 <atanf+0x84>
 800aa48:	f000 f8a4 	bl	800ab94 <fabsf>
 800aa4c:	4b42      	ldr	r3, [pc, #264]	; (800ab58 <atanf+0x16c>)
 800aa4e:	429c      	cmp	r4, r3
 800aa50:	dc4f      	bgt.n	800aaf2 <atanf+0x106>
 800aa52:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800aa56:	429c      	cmp	r4, r3
 800aa58:	dc41      	bgt.n	800aade <atanf+0xf2>
 800aa5a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800aa5e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800aa62:	eea0 7a27 	vfma.f32	s14, s0, s15
 800aa66:	2300      	movs	r3, #0
 800aa68:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aa6c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800aa70:	1c5a      	adds	r2, r3, #1
 800aa72:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800aa76:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800ab5c <atanf+0x170>
 800aa7a:	eddf 5a39 	vldr	s11, [pc, #228]	; 800ab60 <atanf+0x174>
 800aa7e:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800ab64 <atanf+0x178>
 800aa82:	ee66 6a06 	vmul.f32	s13, s12, s12
 800aa86:	eee6 5a87 	vfma.f32	s11, s13, s14
 800aa8a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800ab68 <atanf+0x17c>
 800aa8e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800aa92:	eddf 5a36 	vldr	s11, [pc, #216]	; 800ab6c <atanf+0x180>
 800aa96:	eee7 5a26 	vfma.f32	s11, s14, s13
 800aa9a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800ab70 <atanf+0x184>
 800aa9e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800aaa2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ab74 <atanf+0x188>
 800aaa6:	eee7 5a26 	vfma.f32	s11, s14, s13
 800aaaa:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800ab78 <atanf+0x18c>
 800aaae:	eea6 5a87 	vfma.f32	s10, s13, s14
 800aab2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ab7c <atanf+0x190>
 800aab6:	eea5 7a26 	vfma.f32	s14, s10, s13
 800aaba:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800ab80 <atanf+0x194>
 800aabe:	eea7 5a26 	vfma.f32	s10, s14, s13
 800aac2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800ab84 <atanf+0x198>
 800aac6:	eea5 7a26 	vfma.f32	s14, s10, s13
 800aaca:	ee27 7a26 	vmul.f32	s14, s14, s13
 800aace:	eea5 7a86 	vfma.f32	s14, s11, s12
 800aad2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800aad6:	d121      	bne.n	800ab1c <atanf+0x130>
 800aad8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aadc:	e795      	b.n	800aa0a <atanf+0x1e>
 800aade:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800aae2:	ee30 7a67 	vsub.f32	s14, s0, s15
 800aae6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aaea:	2301      	movs	r3, #1
 800aaec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800aaf0:	e7be      	b.n	800aa70 <atanf+0x84>
 800aaf2:	4b25      	ldr	r3, [pc, #148]	; (800ab88 <atanf+0x19c>)
 800aaf4:	429c      	cmp	r4, r3
 800aaf6:	dc0b      	bgt.n	800ab10 <atanf+0x124>
 800aaf8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800aafc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab00:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ab04:	2302      	movs	r3, #2
 800ab06:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ab0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab0e:	e7af      	b.n	800aa70 <atanf+0x84>
 800ab10:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ab14:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ab18:	2303      	movs	r3, #3
 800ab1a:	e7a9      	b.n	800aa70 <atanf+0x84>
 800ab1c:	4a1b      	ldr	r2, [pc, #108]	; (800ab8c <atanf+0x1a0>)
 800ab1e:	491c      	ldr	r1, [pc, #112]	; (800ab90 <atanf+0x1a4>)
 800ab20:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ab24:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ab28:	ed93 0a00 	vldr	s0, [r3]
 800ab2c:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ab30:	ed92 0a00 	vldr	s0, [r2]
 800ab34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab38:	2d00      	cmp	r5, #0
 800ab3a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ab3e:	bfb8      	it	lt
 800ab40:	eef1 7a67 	vneglt.f32	s15, s15
 800ab44:	e761      	b.n	800aa0a <atanf+0x1e>
 800ab46:	bf00      	nop
 800ab48:	3fc90fdb 	.word	0x3fc90fdb
 800ab4c:	bfc90fdb 	.word	0xbfc90fdb
 800ab50:	3edfffff 	.word	0x3edfffff
 800ab54:	7149f2ca 	.word	0x7149f2ca
 800ab58:	3f97ffff 	.word	0x3f97ffff
 800ab5c:	3c8569d7 	.word	0x3c8569d7
 800ab60:	3d4bda59 	.word	0x3d4bda59
 800ab64:	bd6ef16b 	.word	0xbd6ef16b
 800ab68:	3d886b35 	.word	0x3d886b35
 800ab6c:	3dba2e6e 	.word	0x3dba2e6e
 800ab70:	3e124925 	.word	0x3e124925
 800ab74:	3eaaaaab 	.word	0x3eaaaaab
 800ab78:	bd15a221 	.word	0xbd15a221
 800ab7c:	bd9d8795 	.word	0xbd9d8795
 800ab80:	bde38e38 	.word	0xbde38e38
 800ab84:	be4ccccd 	.word	0xbe4ccccd
 800ab88:	401bffff 	.word	0x401bffff
 800ab8c:	0800f3b8 	.word	0x0800f3b8
 800ab90:	0800f3c8 	.word	0x0800f3c8

0800ab94 <fabsf>:
 800ab94:	ee10 3a10 	vmov	r3, s0
 800ab98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab9c:	ee00 3a10 	vmov	s0, r3
 800aba0:	4770      	bx	lr
	...

0800aba4 <__errno>:
 800aba4:	4b01      	ldr	r3, [pc, #4]	; (800abac <__errno+0x8>)
 800aba6:	6818      	ldr	r0, [r3, #0]
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	20000014 	.word	0x20000014

0800abb0 <__libc_init_array>:
 800abb0:	b570      	push	{r4, r5, r6, lr}
 800abb2:	4d0d      	ldr	r5, [pc, #52]	; (800abe8 <__libc_init_array+0x38>)
 800abb4:	4c0d      	ldr	r4, [pc, #52]	; (800abec <__libc_init_array+0x3c>)
 800abb6:	1b64      	subs	r4, r4, r5
 800abb8:	10a4      	asrs	r4, r4, #2
 800abba:	2600      	movs	r6, #0
 800abbc:	42a6      	cmp	r6, r4
 800abbe:	d109      	bne.n	800abd4 <__libc_init_array+0x24>
 800abc0:	4d0b      	ldr	r5, [pc, #44]	; (800abf0 <__libc_init_array+0x40>)
 800abc2:	4c0c      	ldr	r4, [pc, #48]	; (800abf4 <__libc_init_array+0x44>)
 800abc4:	f004 fb88 	bl	800f2d8 <_init>
 800abc8:	1b64      	subs	r4, r4, r5
 800abca:	10a4      	asrs	r4, r4, #2
 800abcc:	2600      	movs	r6, #0
 800abce:	42a6      	cmp	r6, r4
 800abd0:	d105      	bne.n	800abde <__libc_init_array+0x2e>
 800abd2:	bd70      	pop	{r4, r5, r6, pc}
 800abd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800abd8:	4798      	blx	r3
 800abda:	3601      	adds	r6, #1
 800abdc:	e7ee      	b.n	800abbc <__libc_init_array+0xc>
 800abde:	f855 3b04 	ldr.w	r3, [r5], #4
 800abe2:	4798      	blx	r3
 800abe4:	3601      	adds	r6, #1
 800abe6:	e7f2      	b.n	800abce <__libc_init_array+0x1e>
 800abe8:	0800f884 	.word	0x0800f884
 800abec:	0800f884 	.word	0x0800f884
 800abf0:	0800f884 	.word	0x0800f884
 800abf4:	0800f88c 	.word	0x0800f88c

0800abf8 <memcpy>:
 800abf8:	440a      	add	r2, r1
 800abfa:	4291      	cmp	r1, r2
 800abfc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac00:	d100      	bne.n	800ac04 <memcpy+0xc>
 800ac02:	4770      	bx	lr
 800ac04:	b510      	push	{r4, lr}
 800ac06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac0e:	4291      	cmp	r1, r2
 800ac10:	d1f9      	bne.n	800ac06 <memcpy+0xe>
 800ac12:	bd10      	pop	{r4, pc}

0800ac14 <memset>:
 800ac14:	4402      	add	r2, r0
 800ac16:	4603      	mov	r3, r0
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d100      	bne.n	800ac1e <memset+0xa>
 800ac1c:	4770      	bx	lr
 800ac1e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac22:	e7f9      	b.n	800ac18 <memset+0x4>

0800ac24 <__cvt>:
 800ac24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac26:	ed2d 8b02 	vpush	{d8}
 800ac2a:	eeb0 8b40 	vmov.f64	d8, d0
 800ac2e:	b085      	sub	sp, #20
 800ac30:	4617      	mov	r7, r2
 800ac32:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ac34:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ac36:	ee18 2a90 	vmov	r2, s17
 800ac3a:	f025 0520 	bic.w	r5, r5, #32
 800ac3e:	2a00      	cmp	r2, #0
 800ac40:	bfb6      	itet	lt
 800ac42:	222d      	movlt	r2, #45	; 0x2d
 800ac44:	2200      	movge	r2, #0
 800ac46:	eeb1 8b40 	vneglt.f64	d8, d0
 800ac4a:	2d46      	cmp	r5, #70	; 0x46
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	701a      	strb	r2, [r3, #0]
 800ac50:	d004      	beq.n	800ac5c <__cvt+0x38>
 800ac52:	2d45      	cmp	r5, #69	; 0x45
 800ac54:	d100      	bne.n	800ac58 <__cvt+0x34>
 800ac56:	3401      	adds	r4, #1
 800ac58:	2102      	movs	r1, #2
 800ac5a:	e000      	b.n	800ac5e <__cvt+0x3a>
 800ac5c:	2103      	movs	r1, #3
 800ac5e:	ab03      	add	r3, sp, #12
 800ac60:	9301      	str	r3, [sp, #4]
 800ac62:	ab02      	add	r3, sp, #8
 800ac64:	9300      	str	r3, [sp, #0]
 800ac66:	4622      	mov	r2, r4
 800ac68:	4633      	mov	r3, r6
 800ac6a:	eeb0 0b48 	vmov.f64	d0, d8
 800ac6e:	f001 fd2f 	bl	800c6d0 <_dtoa_r>
 800ac72:	2d47      	cmp	r5, #71	; 0x47
 800ac74:	d101      	bne.n	800ac7a <__cvt+0x56>
 800ac76:	07fb      	lsls	r3, r7, #31
 800ac78:	d51a      	bpl.n	800acb0 <__cvt+0x8c>
 800ac7a:	2d46      	cmp	r5, #70	; 0x46
 800ac7c:	eb00 0204 	add.w	r2, r0, r4
 800ac80:	d10c      	bne.n	800ac9c <__cvt+0x78>
 800ac82:	7803      	ldrb	r3, [r0, #0]
 800ac84:	2b30      	cmp	r3, #48	; 0x30
 800ac86:	d107      	bne.n	800ac98 <__cvt+0x74>
 800ac88:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ac8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac90:	bf1c      	itt	ne
 800ac92:	f1c4 0401 	rsbne	r4, r4, #1
 800ac96:	6034      	strne	r4, [r6, #0]
 800ac98:	6833      	ldr	r3, [r6, #0]
 800ac9a:	441a      	add	r2, r3
 800ac9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca4:	bf08      	it	eq
 800aca6:	9203      	streq	r2, [sp, #12]
 800aca8:	2130      	movs	r1, #48	; 0x30
 800acaa:	9b03      	ldr	r3, [sp, #12]
 800acac:	4293      	cmp	r3, r2
 800acae:	d307      	bcc.n	800acc0 <__cvt+0x9c>
 800acb0:	9b03      	ldr	r3, [sp, #12]
 800acb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acb4:	1a1b      	subs	r3, r3, r0
 800acb6:	6013      	str	r3, [r2, #0]
 800acb8:	b005      	add	sp, #20
 800acba:	ecbd 8b02 	vpop	{d8}
 800acbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acc0:	1c5c      	adds	r4, r3, #1
 800acc2:	9403      	str	r4, [sp, #12]
 800acc4:	7019      	strb	r1, [r3, #0]
 800acc6:	e7f0      	b.n	800acaa <__cvt+0x86>

0800acc8 <__exponent>:
 800acc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acca:	4603      	mov	r3, r0
 800accc:	2900      	cmp	r1, #0
 800acce:	bfb8      	it	lt
 800acd0:	4249      	neglt	r1, r1
 800acd2:	f803 2b02 	strb.w	r2, [r3], #2
 800acd6:	bfb4      	ite	lt
 800acd8:	222d      	movlt	r2, #45	; 0x2d
 800acda:	222b      	movge	r2, #43	; 0x2b
 800acdc:	2909      	cmp	r1, #9
 800acde:	7042      	strb	r2, [r0, #1]
 800ace0:	dd2a      	ble.n	800ad38 <__exponent+0x70>
 800ace2:	f10d 0407 	add.w	r4, sp, #7
 800ace6:	46a4      	mov	ip, r4
 800ace8:	270a      	movs	r7, #10
 800acea:	46a6      	mov	lr, r4
 800acec:	460a      	mov	r2, r1
 800acee:	fb91 f6f7 	sdiv	r6, r1, r7
 800acf2:	fb07 1516 	mls	r5, r7, r6, r1
 800acf6:	3530      	adds	r5, #48	; 0x30
 800acf8:	2a63      	cmp	r2, #99	; 0x63
 800acfa:	f104 34ff 	add.w	r4, r4, #4294967295
 800acfe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ad02:	4631      	mov	r1, r6
 800ad04:	dcf1      	bgt.n	800acea <__exponent+0x22>
 800ad06:	3130      	adds	r1, #48	; 0x30
 800ad08:	f1ae 0502 	sub.w	r5, lr, #2
 800ad0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ad10:	1c44      	adds	r4, r0, #1
 800ad12:	4629      	mov	r1, r5
 800ad14:	4561      	cmp	r1, ip
 800ad16:	d30a      	bcc.n	800ad2e <__exponent+0x66>
 800ad18:	f10d 0209 	add.w	r2, sp, #9
 800ad1c:	eba2 020e 	sub.w	r2, r2, lr
 800ad20:	4565      	cmp	r5, ip
 800ad22:	bf88      	it	hi
 800ad24:	2200      	movhi	r2, #0
 800ad26:	4413      	add	r3, r2
 800ad28:	1a18      	subs	r0, r3, r0
 800ad2a:	b003      	add	sp, #12
 800ad2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad32:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ad36:	e7ed      	b.n	800ad14 <__exponent+0x4c>
 800ad38:	2330      	movs	r3, #48	; 0x30
 800ad3a:	3130      	adds	r1, #48	; 0x30
 800ad3c:	7083      	strb	r3, [r0, #2]
 800ad3e:	70c1      	strb	r1, [r0, #3]
 800ad40:	1d03      	adds	r3, r0, #4
 800ad42:	e7f1      	b.n	800ad28 <__exponent+0x60>
 800ad44:	0000      	movs	r0, r0
	...

0800ad48 <_printf_float>:
 800ad48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad4c:	b08b      	sub	sp, #44	; 0x2c
 800ad4e:	460c      	mov	r4, r1
 800ad50:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ad54:	4616      	mov	r6, r2
 800ad56:	461f      	mov	r7, r3
 800ad58:	4605      	mov	r5, r0
 800ad5a:	f002 fd97 	bl	800d88c <_localeconv_r>
 800ad5e:	f8d0 b000 	ldr.w	fp, [r0]
 800ad62:	4658      	mov	r0, fp
 800ad64:	f7f5 fa6c 	bl	8000240 <strlen>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	9308      	str	r3, [sp, #32]
 800ad6c:	f8d8 3000 	ldr.w	r3, [r8]
 800ad70:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ad74:	6822      	ldr	r2, [r4, #0]
 800ad76:	3307      	adds	r3, #7
 800ad78:	f023 0307 	bic.w	r3, r3, #7
 800ad7c:	f103 0108 	add.w	r1, r3, #8
 800ad80:	f8c8 1000 	str.w	r1, [r8]
 800ad84:	4682      	mov	sl, r0
 800ad86:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad8a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800ad8e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800aff0 <_printf_float+0x2a8>
 800ad92:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800ad96:	eeb0 6bc0 	vabs.f64	d6, d0
 800ad9a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ad9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ada2:	dd24      	ble.n	800adee <_printf_float+0xa6>
 800ada4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ada8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adac:	d502      	bpl.n	800adb4 <_printf_float+0x6c>
 800adae:	232d      	movs	r3, #45	; 0x2d
 800adb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adb4:	4b90      	ldr	r3, [pc, #576]	; (800aff8 <_printf_float+0x2b0>)
 800adb6:	4891      	ldr	r0, [pc, #580]	; (800affc <_printf_float+0x2b4>)
 800adb8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800adbc:	bf94      	ite	ls
 800adbe:	4698      	movls	r8, r3
 800adc0:	4680      	movhi	r8, r0
 800adc2:	2303      	movs	r3, #3
 800adc4:	6123      	str	r3, [r4, #16]
 800adc6:	f022 0204 	bic.w	r2, r2, #4
 800adca:	2300      	movs	r3, #0
 800adcc:	6022      	str	r2, [r4, #0]
 800adce:	9304      	str	r3, [sp, #16]
 800add0:	9700      	str	r7, [sp, #0]
 800add2:	4633      	mov	r3, r6
 800add4:	aa09      	add	r2, sp, #36	; 0x24
 800add6:	4621      	mov	r1, r4
 800add8:	4628      	mov	r0, r5
 800adda:	f000 f9d3 	bl	800b184 <_printf_common>
 800adde:	3001      	adds	r0, #1
 800ade0:	f040 808a 	bne.w	800aef8 <_printf_float+0x1b0>
 800ade4:	f04f 30ff 	mov.w	r0, #4294967295
 800ade8:	b00b      	add	sp, #44	; 0x2c
 800adea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adee:	eeb4 0b40 	vcmp.f64	d0, d0
 800adf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf6:	d709      	bvc.n	800ae0c <_printf_float+0xc4>
 800adf8:	ee10 3a90 	vmov	r3, s1
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	bfbc      	itt	lt
 800ae00:	232d      	movlt	r3, #45	; 0x2d
 800ae02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ae06:	487e      	ldr	r0, [pc, #504]	; (800b000 <_printf_float+0x2b8>)
 800ae08:	4b7e      	ldr	r3, [pc, #504]	; (800b004 <_printf_float+0x2bc>)
 800ae0a:	e7d5      	b.n	800adb8 <_printf_float+0x70>
 800ae0c:	6863      	ldr	r3, [r4, #4]
 800ae0e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ae12:	9104      	str	r1, [sp, #16]
 800ae14:	1c59      	adds	r1, r3, #1
 800ae16:	d13c      	bne.n	800ae92 <_printf_float+0x14a>
 800ae18:	2306      	movs	r3, #6
 800ae1a:	6063      	str	r3, [r4, #4]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	9303      	str	r3, [sp, #12]
 800ae20:	ab08      	add	r3, sp, #32
 800ae22:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ae26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ae2a:	ab07      	add	r3, sp, #28
 800ae2c:	6861      	ldr	r1, [r4, #4]
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	6022      	str	r2, [r4, #0]
 800ae32:	f10d 031b 	add.w	r3, sp, #27
 800ae36:	4628      	mov	r0, r5
 800ae38:	f7ff fef4 	bl	800ac24 <__cvt>
 800ae3c:	9b04      	ldr	r3, [sp, #16]
 800ae3e:	9907      	ldr	r1, [sp, #28]
 800ae40:	2b47      	cmp	r3, #71	; 0x47
 800ae42:	4680      	mov	r8, r0
 800ae44:	d108      	bne.n	800ae58 <_printf_float+0x110>
 800ae46:	1cc8      	adds	r0, r1, #3
 800ae48:	db02      	blt.n	800ae50 <_printf_float+0x108>
 800ae4a:	6863      	ldr	r3, [r4, #4]
 800ae4c:	4299      	cmp	r1, r3
 800ae4e:	dd41      	ble.n	800aed4 <_printf_float+0x18c>
 800ae50:	f1a9 0902 	sub.w	r9, r9, #2
 800ae54:	fa5f f989 	uxtb.w	r9, r9
 800ae58:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ae5c:	d820      	bhi.n	800aea0 <_printf_float+0x158>
 800ae5e:	3901      	subs	r1, #1
 800ae60:	464a      	mov	r2, r9
 800ae62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ae66:	9107      	str	r1, [sp, #28]
 800ae68:	f7ff ff2e 	bl	800acc8 <__exponent>
 800ae6c:	9a08      	ldr	r2, [sp, #32]
 800ae6e:	9004      	str	r0, [sp, #16]
 800ae70:	1813      	adds	r3, r2, r0
 800ae72:	2a01      	cmp	r2, #1
 800ae74:	6123      	str	r3, [r4, #16]
 800ae76:	dc02      	bgt.n	800ae7e <_printf_float+0x136>
 800ae78:	6822      	ldr	r2, [r4, #0]
 800ae7a:	07d2      	lsls	r2, r2, #31
 800ae7c:	d501      	bpl.n	800ae82 <_printf_float+0x13a>
 800ae7e:	3301      	adds	r3, #1
 800ae80:	6123      	str	r3, [r4, #16]
 800ae82:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0a2      	beq.n	800add0 <_printf_float+0x88>
 800ae8a:	232d      	movs	r3, #45	; 0x2d
 800ae8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae90:	e79e      	b.n	800add0 <_printf_float+0x88>
 800ae92:	9904      	ldr	r1, [sp, #16]
 800ae94:	2947      	cmp	r1, #71	; 0x47
 800ae96:	d1c1      	bne.n	800ae1c <_printf_float+0xd4>
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1bf      	bne.n	800ae1c <_printf_float+0xd4>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e7bc      	b.n	800ae1a <_printf_float+0xd2>
 800aea0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800aea4:	d118      	bne.n	800aed8 <_printf_float+0x190>
 800aea6:	2900      	cmp	r1, #0
 800aea8:	6863      	ldr	r3, [r4, #4]
 800aeaa:	dd0b      	ble.n	800aec4 <_printf_float+0x17c>
 800aeac:	6121      	str	r1, [r4, #16]
 800aeae:	b913      	cbnz	r3, 800aeb6 <_printf_float+0x16e>
 800aeb0:	6822      	ldr	r2, [r4, #0]
 800aeb2:	07d0      	lsls	r0, r2, #31
 800aeb4:	d502      	bpl.n	800aebc <_printf_float+0x174>
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	440b      	add	r3, r1
 800aeba:	6123      	str	r3, [r4, #16]
 800aebc:	2300      	movs	r3, #0
 800aebe:	65a1      	str	r1, [r4, #88]	; 0x58
 800aec0:	9304      	str	r3, [sp, #16]
 800aec2:	e7de      	b.n	800ae82 <_printf_float+0x13a>
 800aec4:	b913      	cbnz	r3, 800aecc <_printf_float+0x184>
 800aec6:	6822      	ldr	r2, [r4, #0]
 800aec8:	07d2      	lsls	r2, r2, #31
 800aeca:	d501      	bpl.n	800aed0 <_printf_float+0x188>
 800aecc:	3302      	adds	r3, #2
 800aece:	e7f4      	b.n	800aeba <_printf_float+0x172>
 800aed0:	2301      	movs	r3, #1
 800aed2:	e7f2      	b.n	800aeba <_printf_float+0x172>
 800aed4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800aed8:	9b08      	ldr	r3, [sp, #32]
 800aeda:	4299      	cmp	r1, r3
 800aedc:	db05      	blt.n	800aeea <_printf_float+0x1a2>
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	6121      	str	r1, [r4, #16]
 800aee2:	07d8      	lsls	r0, r3, #31
 800aee4:	d5ea      	bpl.n	800aebc <_printf_float+0x174>
 800aee6:	1c4b      	adds	r3, r1, #1
 800aee8:	e7e7      	b.n	800aeba <_printf_float+0x172>
 800aeea:	2900      	cmp	r1, #0
 800aeec:	bfd4      	ite	le
 800aeee:	f1c1 0202 	rsble	r2, r1, #2
 800aef2:	2201      	movgt	r2, #1
 800aef4:	4413      	add	r3, r2
 800aef6:	e7e0      	b.n	800aeba <_printf_float+0x172>
 800aef8:	6823      	ldr	r3, [r4, #0]
 800aefa:	055a      	lsls	r2, r3, #21
 800aefc:	d407      	bmi.n	800af0e <_printf_float+0x1c6>
 800aefe:	6923      	ldr	r3, [r4, #16]
 800af00:	4642      	mov	r2, r8
 800af02:	4631      	mov	r1, r6
 800af04:	4628      	mov	r0, r5
 800af06:	47b8      	blx	r7
 800af08:	3001      	adds	r0, #1
 800af0a:	d12a      	bne.n	800af62 <_printf_float+0x21a>
 800af0c:	e76a      	b.n	800ade4 <_printf_float+0x9c>
 800af0e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800af12:	f240 80e2 	bls.w	800b0da <_printf_float+0x392>
 800af16:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800af1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800af1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af22:	d133      	bne.n	800af8c <_printf_float+0x244>
 800af24:	4a38      	ldr	r2, [pc, #224]	; (800b008 <_printf_float+0x2c0>)
 800af26:	2301      	movs	r3, #1
 800af28:	4631      	mov	r1, r6
 800af2a:	4628      	mov	r0, r5
 800af2c:	47b8      	blx	r7
 800af2e:	3001      	adds	r0, #1
 800af30:	f43f af58 	beq.w	800ade4 <_printf_float+0x9c>
 800af34:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800af38:	429a      	cmp	r2, r3
 800af3a:	db02      	blt.n	800af42 <_printf_float+0x1fa>
 800af3c:	6823      	ldr	r3, [r4, #0]
 800af3e:	07d8      	lsls	r0, r3, #31
 800af40:	d50f      	bpl.n	800af62 <_printf_float+0x21a>
 800af42:	4653      	mov	r3, sl
 800af44:	465a      	mov	r2, fp
 800af46:	4631      	mov	r1, r6
 800af48:	4628      	mov	r0, r5
 800af4a:	47b8      	blx	r7
 800af4c:	3001      	adds	r0, #1
 800af4e:	f43f af49 	beq.w	800ade4 <_printf_float+0x9c>
 800af52:	f04f 0800 	mov.w	r8, #0
 800af56:	f104 091a 	add.w	r9, r4, #26
 800af5a:	9b08      	ldr	r3, [sp, #32]
 800af5c:	3b01      	subs	r3, #1
 800af5e:	4543      	cmp	r3, r8
 800af60:	dc09      	bgt.n	800af76 <_printf_float+0x22e>
 800af62:	6823      	ldr	r3, [r4, #0]
 800af64:	079b      	lsls	r3, r3, #30
 800af66:	f100 8108 	bmi.w	800b17a <_printf_float+0x432>
 800af6a:	68e0      	ldr	r0, [r4, #12]
 800af6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af6e:	4298      	cmp	r0, r3
 800af70:	bfb8      	it	lt
 800af72:	4618      	movlt	r0, r3
 800af74:	e738      	b.n	800ade8 <_printf_float+0xa0>
 800af76:	2301      	movs	r3, #1
 800af78:	464a      	mov	r2, r9
 800af7a:	4631      	mov	r1, r6
 800af7c:	4628      	mov	r0, r5
 800af7e:	47b8      	blx	r7
 800af80:	3001      	adds	r0, #1
 800af82:	f43f af2f 	beq.w	800ade4 <_printf_float+0x9c>
 800af86:	f108 0801 	add.w	r8, r8, #1
 800af8a:	e7e6      	b.n	800af5a <_printf_float+0x212>
 800af8c:	9b07      	ldr	r3, [sp, #28]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	dc3c      	bgt.n	800b00c <_printf_float+0x2c4>
 800af92:	4a1d      	ldr	r2, [pc, #116]	; (800b008 <_printf_float+0x2c0>)
 800af94:	2301      	movs	r3, #1
 800af96:	4631      	mov	r1, r6
 800af98:	4628      	mov	r0, r5
 800af9a:	47b8      	blx	r7
 800af9c:	3001      	adds	r0, #1
 800af9e:	f43f af21 	beq.w	800ade4 <_printf_float+0x9c>
 800afa2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	d102      	bne.n	800afb0 <_printf_float+0x268>
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	07d9      	lsls	r1, r3, #31
 800afae:	d5d8      	bpl.n	800af62 <_printf_float+0x21a>
 800afb0:	4653      	mov	r3, sl
 800afb2:	465a      	mov	r2, fp
 800afb4:	4631      	mov	r1, r6
 800afb6:	4628      	mov	r0, r5
 800afb8:	47b8      	blx	r7
 800afba:	3001      	adds	r0, #1
 800afbc:	f43f af12 	beq.w	800ade4 <_printf_float+0x9c>
 800afc0:	f04f 0900 	mov.w	r9, #0
 800afc4:	f104 0a1a 	add.w	sl, r4, #26
 800afc8:	9b07      	ldr	r3, [sp, #28]
 800afca:	425b      	negs	r3, r3
 800afcc:	454b      	cmp	r3, r9
 800afce:	dc01      	bgt.n	800afd4 <_printf_float+0x28c>
 800afd0:	9b08      	ldr	r3, [sp, #32]
 800afd2:	e795      	b.n	800af00 <_printf_float+0x1b8>
 800afd4:	2301      	movs	r3, #1
 800afd6:	4652      	mov	r2, sl
 800afd8:	4631      	mov	r1, r6
 800afda:	4628      	mov	r0, r5
 800afdc:	47b8      	blx	r7
 800afde:	3001      	adds	r0, #1
 800afe0:	f43f af00 	beq.w	800ade4 <_printf_float+0x9c>
 800afe4:	f109 0901 	add.w	r9, r9, #1
 800afe8:	e7ee      	b.n	800afc8 <_printf_float+0x280>
 800afea:	bf00      	nop
 800afec:	f3af 8000 	nop.w
 800aff0:	ffffffff 	.word	0xffffffff
 800aff4:	7fefffff 	.word	0x7fefffff
 800aff8:	0800f3dc 	.word	0x0800f3dc
 800affc:	0800f3e0 	.word	0x0800f3e0
 800b000:	0800f3e8 	.word	0x0800f3e8
 800b004:	0800f3e4 	.word	0x0800f3e4
 800b008:	0800f3ec 	.word	0x0800f3ec
 800b00c:	9a08      	ldr	r2, [sp, #32]
 800b00e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b010:	429a      	cmp	r2, r3
 800b012:	bfa8      	it	ge
 800b014:	461a      	movge	r2, r3
 800b016:	2a00      	cmp	r2, #0
 800b018:	4691      	mov	r9, r2
 800b01a:	dc38      	bgt.n	800b08e <_printf_float+0x346>
 800b01c:	2300      	movs	r3, #0
 800b01e:	9305      	str	r3, [sp, #20]
 800b020:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b024:	f104 021a 	add.w	r2, r4, #26
 800b028:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b02a:	9905      	ldr	r1, [sp, #20]
 800b02c:	9304      	str	r3, [sp, #16]
 800b02e:	eba3 0309 	sub.w	r3, r3, r9
 800b032:	428b      	cmp	r3, r1
 800b034:	dc33      	bgt.n	800b09e <_printf_float+0x356>
 800b036:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	db3c      	blt.n	800b0b8 <_printf_float+0x370>
 800b03e:	6823      	ldr	r3, [r4, #0]
 800b040:	07da      	lsls	r2, r3, #31
 800b042:	d439      	bmi.n	800b0b8 <_printf_float+0x370>
 800b044:	9b08      	ldr	r3, [sp, #32]
 800b046:	9a04      	ldr	r2, [sp, #16]
 800b048:	9907      	ldr	r1, [sp, #28]
 800b04a:	1a9a      	subs	r2, r3, r2
 800b04c:	eba3 0901 	sub.w	r9, r3, r1
 800b050:	4591      	cmp	r9, r2
 800b052:	bfa8      	it	ge
 800b054:	4691      	movge	r9, r2
 800b056:	f1b9 0f00 	cmp.w	r9, #0
 800b05a:	dc35      	bgt.n	800b0c8 <_printf_float+0x380>
 800b05c:	f04f 0800 	mov.w	r8, #0
 800b060:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b064:	f104 0a1a 	add.w	sl, r4, #26
 800b068:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b06c:	1a9b      	subs	r3, r3, r2
 800b06e:	eba3 0309 	sub.w	r3, r3, r9
 800b072:	4543      	cmp	r3, r8
 800b074:	f77f af75 	ble.w	800af62 <_printf_float+0x21a>
 800b078:	2301      	movs	r3, #1
 800b07a:	4652      	mov	r2, sl
 800b07c:	4631      	mov	r1, r6
 800b07e:	4628      	mov	r0, r5
 800b080:	47b8      	blx	r7
 800b082:	3001      	adds	r0, #1
 800b084:	f43f aeae 	beq.w	800ade4 <_printf_float+0x9c>
 800b088:	f108 0801 	add.w	r8, r8, #1
 800b08c:	e7ec      	b.n	800b068 <_printf_float+0x320>
 800b08e:	4613      	mov	r3, r2
 800b090:	4631      	mov	r1, r6
 800b092:	4642      	mov	r2, r8
 800b094:	4628      	mov	r0, r5
 800b096:	47b8      	blx	r7
 800b098:	3001      	adds	r0, #1
 800b09a:	d1bf      	bne.n	800b01c <_printf_float+0x2d4>
 800b09c:	e6a2      	b.n	800ade4 <_printf_float+0x9c>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	4631      	mov	r1, r6
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	9204      	str	r2, [sp, #16]
 800b0a6:	47b8      	blx	r7
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	f43f ae9b 	beq.w	800ade4 <_printf_float+0x9c>
 800b0ae:	9b05      	ldr	r3, [sp, #20]
 800b0b0:	9a04      	ldr	r2, [sp, #16]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	9305      	str	r3, [sp, #20]
 800b0b6:	e7b7      	b.n	800b028 <_printf_float+0x2e0>
 800b0b8:	4653      	mov	r3, sl
 800b0ba:	465a      	mov	r2, fp
 800b0bc:	4631      	mov	r1, r6
 800b0be:	4628      	mov	r0, r5
 800b0c0:	47b8      	blx	r7
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	d1be      	bne.n	800b044 <_printf_float+0x2fc>
 800b0c6:	e68d      	b.n	800ade4 <_printf_float+0x9c>
 800b0c8:	9a04      	ldr	r2, [sp, #16]
 800b0ca:	464b      	mov	r3, r9
 800b0cc:	4442      	add	r2, r8
 800b0ce:	4631      	mov	r1, r6
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	47b8      	blx	r7
 800b0d4:	3001      	adds	r0, #1
 800b0d6:	d1c1      	bne.n	800b05c <_printf_float+0x314>
 800b0d8:	e684      	b.n	800ade4 <_printf_float+0x9c>
 800b0da:	9a08      	ldr	r2, [sp, #32]
 800b0dc:	2a01      	cmp	r2, #1
 800b0de:	dc01      	bgt.n	800b0e4 <_printf_float+0x39c>
 800b0e0:	07db      	lsls	r3, r3, #31
 800b0e2:	d537      	bpl.n	800b154 <_printf_float+0x40c>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	4642      	mov	r2, r8
 800b0e8:	4631      	mov	r1, r6
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	47b8      	blx	r7
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	f43f ae78 	beq.w	800ade4 <_printf_float+0x9c>
 800b0f4:	4653      	mov	r3, sl
 800b0f6:	465a      	mov	r2, fp
 800b0f8:	4631      	mov	r1, r6
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	47b8      	blx	r7
 800b0fe:	3001      	adds	r0, #1
 800b100:	f43f ae70 	beq.w	800ade4 <_printf_float+0x9c>
 800b104:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b108:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b110:	d01b      	beq.n	800b14a <_printf_float+0x402>
 800b112:	9b08      	ldr	r3, [sp, #32]
 800b114:	f108 0201 	add.w	r2, r8, #1
 800b118:	3b01      	subs	r3, #1
 800b11a:	4631      	mov	r1, r6
 800b11c:	4628      	mov	r0, r5
 800b11e:	47b8      	blx	r7
 800b120:	3001      	adds	r0, #1
 800b122:	d10e      	bne.n	800b142 <_printf_float+0x3fa>
 800b124:	e65e      	b.n	800ade4 <_printf_float+0x9c>
 800b126:	2301      	movs	r3, #1
 800b128:	464a      	mov	r2, r9
 800b12a:	4631      	mov	r1, r6
 800b12c:	4628      	mov	r0, r5
 800b12e:	47b8      	blx	r7
 800b130:	3001      	adds	r0, #1
 800b132:	f43f ae57 	beq.w	800ade4 <_printf_float+0x9c>
 800b136:	f108 0801 	add.w	r8, r8, #1
 800b13a:	9b08      	ldr	r3, [sp, #32]
 800b13c:	3b01      	subs	r3, #1
 800b13e:	4543      	cmp	r3, r8
 800b140:	dcf1      	bgt.n	800b126 <_printf_float+0x3de>
 800b142:	9b04      	ldr	r3, [sp, #16]
 800b144:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b148:	e6db      	b.n	800af02 <_printf_float+0x1ba>
 800b14a:	f04f 0800 	mov.w	r8, #0
 800b14e:	f104 091a 	add.w	r9, r4, #26
 800b152:	e7f2      	b.n	800b13a <_printf_float+0x3f2>
 800b154:	2301      	movs	r3, #1
 800b156:	4642      	mov	r2, r8
 800b158:	e7df      	b.n	800b11a <_printf_float+0x3d2>
 800b15a:	2301      	movs	r3, #1
 800b15c:	464a      	mov	r2, r9
 800b15e:	4631      	mov	r1, r6
 800b160:	4628      	mov	r0, r5
 800b162:	47b8      	blx	r7
 800b164:	3001      	adds	r0, #1
 800b166:	f43f ae3d 	beq.w	800ade4 <_printf_float+0x9c>
 800b16a:	f108 0801 	add.w	r8, r8, #1
 800b16e:	68e3      	ldr	r3, [r4, #12]
 800b170:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b172:	1a5b      	subs	r3, r3, r1
 800b174:	4543      	cmp	r3, r8
 800b176:	dcf0      	bgt.n	800b15a <_printf_float+0x412>
 800b178:	e6f7      	b.n	800af6a <_printf_float+0x222>
 800b17a:	f04f 0800 	mov.w	r8, #0
 800b17e:	f104 0919 	add.w	r9, r4, #25
 800b182:	e7f4      	b.n	800b16e <_printf_float+0x426>

0800b184 <_printf_common>:
 800b184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b188:	4616      	mov	r6, r2
 800b18a:	4699      	mov	r9, r3
 800b18c:	688a      	ldr	r2, [r1, #8]
 800b18e:	690b      	ldr	r3, [r1, #16]
 800b190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b194:	4293      	cmp	r3, r2
 800b196:	bfb8      	it	lt
 800b198:	4613      	movlt	r3, r2
 800b19a:	6033      	str	r3, [r6, #0]
 800b19c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1a0:	4607      	mov	r7, r0
 800b1a2:	460c      	mov	r4, r1
 800b1a4:	b10a      	cbz	r2, 800b1aa <_printf_common+0x26>
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	6033      	str	r3, [r6, #0]
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	0699      	lsls	r1, r3, #26
 800b1ae:	bf42      	ittt	mi
 800b1b0:	6833      	ldrmi	r3, [r6, #0]
 800b1b2:	3302      	addmi	r3, #2
 800b1b4:	6033      	strmi	r3, [r6, #0]
 800b1b6:	6825      	ldr	r5, [r4, #0]
 800b1b8:	f015 0506 	ands.w	r5, r5, #6
 800b1bc:	d106      	bne.n	800b1cc <_printf_common+0x48>
 800b1be:	f104 0a19 	add.w	sl, r4, #25
 800b1c2:	68e3      	ldr	r3, [r4, #12]
 800b1c4:	6832      	ldr	r2, [r6, #0]
 800b1c6:	1a9b      	subs	r3, r3, r2
 800b1c8:	42ab      	cmp	r3, r5
 800b1ca:	dc26      	bgt.n	800b21a <_printf_common+0x96>
 800b1cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b1d0:	1e13      	subs	r3, r2, #0
 800b1d2:	6822      	ldr	r2, [r4, #0]
 800b1d4:	bf18      	it	ne
 800b1d6:	2301      	movne	r3, #1
 800b1d8:	0692      	lsls	r2, r2, #26
 800b1da:	d42b      	bmi.n	800b234 <_printf_common+0xb0>
 800b1dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1e0:	4649      	mov	r1, r9
 800b1e2:	4638      	mov	r0, r7
 800b1e4:	47c0      	blx	r8
 800b1e6:	3001      	adds	r0, #1
 800b1e8:	d01e      	beq.n	800b228 <_printf_common+0xa4>
 800b1ea:	6823      	ldr	r3, [r4, #0]
 800b1ec:	68e5      	ldr	r5, [r4, #12]
 800b1ee:	6832      	ldr	r2, [r6, #0]
 800b1f0:	f003 0306 	and.w	r3, r3, #6
 800b1f4:	2b04      	cmp	r3, #4
 800b1f6:	bf08      	it	eq
 800b1f8:	1aad      	subeq	r5, r5, r2
 800b1fa:	68a3      	ldr	r3, [r4, #8]
 800b1fc:	6922      	ldr	r2, [r4, #16]
 800b1fe:	bf0c      	ite	eq
 800b200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b204:	2500      	movne	r5, #0
 800b206:	4293      	cmp	r3, r2
 800b208:	bfc4      	itt	gt
 800b20a:	1a9b      	subgt	r3, r3, r2
 800b20c:	18ed      	addgt	r5, r5, r3
 800b20e:	2600      	movs	r6, #0
 800b210:	341a      	adds	r4, #26
 800b212:	42b5      	cmp	r5, r6
 800b214:	d11a      	bne.n	800b24c <_printf_common+0xc8>
 800b216:	2000      	movs	r0, #0
 800b218:	e008      	b.n	800b22c <_printf_common+0xa8>
 800b21a:	2301      	movs	r3, #1
 800b21c:	4652      	mov	r2, sl
 800b21e:	4649      	mov	r1, r9
 800b220:	4638      	mov	r0, r7
 800b222:	47c0      	blx	r8
 800b224:	3001      	adds	r0, #1
 800b226:	d103      	bne.n	800b230 <_printf_common+0xac>
 800b228:	f04f 30ff 	mov.w	r0, #4294967295
 800b22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b230:	3501      	adds	r5, #1
 800b232:	e7c6      	b.n	800b1c2 <_printf_common+0x3e>
 800b234:	18e1      	adds	r1, r4, r3
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	2030      	movs	r0, #48	; 0x30
 800b23a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b23e:	4422      	add	r2, r4
 800b240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b248:	3302      	adds	r3, #2
 800b24a:	e7c7      	b.n	800b1dc <_printf_common+0x58>
 800b24c:	2301      	movs	r3, #1
 800b24e:	4622      	mov	r2, r4
 800b250:	4649      	mov	r1, r9
 800b252:	4638      	mov	r0, r7
 800b254:	47c0      	blx	r8
 800b256:	3001      	adds	r0, #1
 800b258:	d0e6      	beq.n	800b228 <_printf_common+0xa4>
 800b25a:	3601      	adds	r6, #1
 800b25c:	e7d9      	b.n	800b212 <_printf_common+0x8e>
	...

0800b260 <_printf_i>:
 800b260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b264:	7e0f      	ldrb	r7, [r1, #24]
 800b266:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b268:	2f78      	cmp	r7, #120	; 0x78
 800b26a:	4691      	mov	r9, r2
 800b26c:	4680      	mov	r8, r0
 800b26e:	460c      	mov	r4, r1
 800b270:	469a      	mov	sl, r3
 800b272:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b276:	d807      	bhi.n	800b288 <_printf_i+0x28>
 800b278:	2f62      	cmp	r7, #98	; 0x62
 800b27a:	d80a      	bhi.n	800b292 <_printf_i+0x32>
 800b27c:	2f00      	cmp	r7, #0
 800b27e:	f000 80d8 	beq.w	800b432 <_printf_i+0x1d2>
 800b282:	2f58      	cmp	r7, #88	; 0x58
 800b284:	f000 80a3 	beq.w	800b3ce <_printf_i+0x16e>
 800b288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b28c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b290:	e03a      	b.n	800b308 <_printf_i+0xa8>
 800b292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b296:	2b15      	cmp	r3, #21
 800b298:	d8f6      	bhi.n	800b288 <_printf_i+0x28>
 800b29a:	a101      	add	r1, pc, #4	; (adr r1, 800b2a0 <_printf_i+0x40>)
 800b29c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2a0:	0800b2f9 	.word	0x0800b2f9
 800b2a4:	0800b30d 	.word	0x0800b30d
 800b2a8:	0800b289 	.word	0x0800b289
 800b2ac:	0800b289 	.word	0x0800b289
 800b2b0:	0800b289 	.word	0x0800b289
 800b2b4:	0800b289 	.word	0x0800b289
 800b2b8:	0800b30d 	.word	0x0800b30d
 800b2bc:	0800b289 	.word	0x0800b289
 800b2c0:	0800b289 	.word	0x0800b289
 800b2c4:	0800b289 	.word	0x0800b289
 800b2c8:	0800b289 	.word	0x0800b289
 800b2cc:	0800b419 	.word	0x0800b419
 800b2d0:	0800b33d 	.word	0x0800b33d
 800b2d4:	0800b3fb 	.word	0x0800b3fb
 800b2d8:	0800b289 	.word	0x0800b289
 800b2dc:	0800b289 	.word	0x0800b289
 800b2e0:	0800b43b 	.word	0x0800b43b
 800b2e4:	0800b289 	.word	0x0800b289
 800b2e8:	0800b33d 	.word	0x0800b33d
 800b2ec:	0800b289 	.word	0x0800b289
 800b2f0:	0800b289 	.word	0x0800b289
 800b2f4:	0800b403 	.word	0x0800b403
 800b2f8:	682b      	ldr	r3, [r5, #0]
 800b2fa:	1d1a      	adds	r2, r3, #4
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	602a      	str	r2, [r5, #0]
 800b300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b308:	2301      	movs	r3, #1
 800b30a:	e0a3      	b.n	800b454 <_printf_i+0x1f4>
 800b30c:	6820      	ldr	r0, [r4, #0]
 800b30e:	6829      	ldr	r1, [r5, #0]
 800b310:	0606      	lsls	r6, r0, #24
 800b312:	f101 0304 	add.w	r3, r1, #4
 800b316:	d50a      	bpl.n	800b32e <_printf_i+0xce>
 800b318:	680e      	ldr	r6, [r1, #0]
 800b31a:	602b      	str	r3, [r5, #0]
 800b31c:	2e00      	cmp	r6, #0
 800b31e:	da03      	bge.n	800b328 <_printf_i+0xc8>
 800b320:	232d      	movs	r3, #45	; 0x2d
 800b322:	4276      	negs	r6, r6
 800b324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b328:	485e      	ldr	r0, [pc, #376]	; (800b4a4 <_printf_i+0x244>)
 800b32a:	230a      	movs	r3, #10
 800b32c:	e019      	b.n	800b362 <_printf_i+0x102>
 800b32e:	680e      	ldr	r6, [r1, #0]
 800b330:	602b      	str	r3, [r5, #0]
 800b332:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b336:	bf18      	it	ne
 800b338:	b236      	sxthne	r6, r6
 800b33a:	e7ef      	b.n	800b31c <_printf_i+0xbc>
 800b33c:	682b      	ldr	r3, [r5, #0]
 800b33e:	6820      	ldr	r0, [r4, #0]
 800b340:	1d19      	adds	r1, r3, #4
 800b342:	6029      	str	r1, [r5, #0]
 800b344:	0601      	lsls	r1, r0, #24
 800b346:	d501      	bpl.n	800b34c <_printf_i+0xec>
 800b348:	681e      	ldr	r6, [r3, #0]
 800b34a:	e002      	b.n	800b352 <_printf_i+0xf2>
 800b34c:	0646      	lsls	r6, r0, #25
 800b34e:	d5fb      	bpl.n	800b348 <_printf_i+0xe8>
 800b350:	881e      	ldrh	r6, [r3, #0]
 800b352:	4854      	ldr	r0, [pc, #336]	; (800b4a4 <_printf_i+0x244>)
 800b354:	2f6f      	cmp	r7, #111	; 0x6f
 800b356:	bf0c      	ite	eq
 800b358:	2308      	moveq	r3, #8
 800b35a:	230a      	movne	r3, #10
 800b35c:	2100      	movs	r1, #0
 800b35e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b362:	6865      	ldr	r5, [r4, #4]
 800b364:	60a5      	str	r5, [r4, #8]
 800b366:	2d00      	cmp	r5, #0
 800b368:	bfa2      	ittt	ge
 800b36a:	6821      	ldrge	r1, [r4, #0]
 800b36c:	f021 0104 	bicge.w	r1, r1, #4
 800b370:	6021      	strge	r1, [r4, #0]
 800b372:	b90e      	cbnz	r6, 800b378 <_printf_i+0x118>
 800b374:	2d00      	cmp	r5, #0
 800b376:	d04d      	beq.n	800b414 <_printf_i+0x1b4>
 800b378:	4615      	mov	r5, r2
 800b37a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b37e:	fb03 6711 	mls	r7, r3, r1, r6
 800b382:	5dc7      	ldrb	r7, [r0, r7]
 800b384:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b388:	4637      	mov	r7, r6
 800b38a:	42bb      	cmp	r3, r7
 800b38c:	460e      	mov	r6, r1
 800b38e:	d9f4      	bls.n	800b37a <_printf_i+0x11a>
 800b390:	2b08      	cmp	r3, #8
 800b392:	d10b      	bne.n	800b3ac <_printf_i+0x14c>
 800b394:	6823      	ldr	r3, [r4, #0]
 800b396:	07de      	lsls	r6, r3, #31
 800b398:	d508      	bpl.n	800b3ac <_printf_i+0x14c>
 800b39a:	6923      	ldr	r3, [r4, #16]
 800b39c:	6861      	ldr	r1, [r4, #4]
 800b39e:	4299      	cmp	r1, r3
 800b3a0:	bfde      	ittt	le
 800b3a2:	2330      	movle	r3, #48	; 0x30
 800b3a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b3a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b3ac:	1b52      	subs	r2, r2, r5
 800b3ae:	6122      	str	r2, [r4, #16]
 800b3b0:	f8cd a000 	str.w	sl, [sp]
 800b3b4:	464b      	mov	r3, r9
 800b3b6:	aa03      	add	r2, sp, #12
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	4640      	mov	r0, r8
 800b3bc:	f7ff fee2 	bl	800b184 <_printf_common>
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	d14c      	bne.n	800b45e <_printf_i+0x1fe>
 800b3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c8:	b004      	add	sp, #16
 800b3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ce:	4835      	ldr	r0, [pc, #212]	; (800b4a4 <_printf_i+0x244>)
 800b3d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b3d4:	6829      	ldr	r1, [r5, #0]
 800b3d6:	6823      	ldr	r3, [r4, #0]
 800b3d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b3dc:	6029      	str	r1, [r5, #0]
 800b3de:	061d      	lsls	r5, r3, #24
 800b3e0:	d514      	bpl.n	800b40c <_printf_i+0x1ac>
 800b3e2:	07df      	lsls	r7, r3, #31
 800b3e4:	bf44      	itt	mi
 800b3e6:	f043 0320 	orrmi.w	r3, r3, #32
 800b3ea:	6023      	strmi	r3, [r4, #0]
 800b3ec:	b91e      	cbnz	r6, 800b3f6 <_printf_i+0x196>
 800b3ee:	6823      	ldr	r3, [r4, #0]
 800b3f0:	f023 0320 	bic.w	r3, r3, #32
 800b3f4:	6023      	str	r3, [r4, #0]
 800b3f6:	2310      	movs	r3, #16
 800b3f8:	e7b0      	b.n	800b35c <_printf_i+0xfc>
 800b3fa:	6823      	ldr	r3, [r4, #0]
 800b3fc:	f043 0320 	orr.w	r3, r3, #32
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	2378      	movs	r3, #120	; 0x78
 800b404:	4828      	ldr	r0, [pc, #160]	; (800b4a8 <_printf_i+0x248>)
 800b406:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b40a:	e7e3      	b.n	800b3d4 <_printf_i+0x174>
 800b40c:	0659      	lsls	r1, r3, #25
 800b40e:	bf48      	it	mi
 800b410:	b2b6      	uxthmi	r6, r6
 800b412:	e7e6      	b.n	800b3e2 <_printf_i+0x182>
 800b414:	4615      	mov	r5, r2
 800b416:	e7bb      	b.n	800b390 <_printf_i+0x130>
 800b418:	682b      	ldr	r3, [r5, #0]
 800b41a:	6826      	ldr	r6, [r4, #0]
 800b41c:	6961      	ldr	r1, [r4, #20]
 800b41e:	1d18      	adds	r0, r3, #4
 800b420:	6028      	str	r0, [r5, #0]
 800b422:	0635      	lsls	r5, r6, #24
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	d501      	bpl.n	800b42c <_printf_i+0x1cc>
 800b428:	6019      	str	r1, [r3, #0]
 800b42a:	e002      	b.n	800b432 <_printf_i+0x1d2>
 800b42c:	0670      	lsls	r0, r6, #25
 800b42e:	d5fb      	bpl.n	800b428 <_printf_i+0x1c8>
 800b430:	8019      	strh	r1, [r3, #0]
 800b432:	2300      	movs	r3, #0
 800b434:	6123      	str	r3, [r4, #16]
 800b436:	4615      	mov	r5, r2
 800b438:	e7ba      	b.n	800b3b0 <_printf_i+0x150>
 800b43a:	682b      	ldr	r3, [r5, #0]
 800b43c:	1d1a      	adds	r2, r3, #4
 800b43e:	602a      	str	r2, [r5, #0]
 800b440:	681d      	ldr	r5, [r3, #0]
 800b442:	6862      	ldr	r2, [r4, #4]
 800b444:	2100      	movs	r1, #0
 800b446:	4628      	mov	r0, r5
 800b448:	f7f4 ff02 	bl	8000250 <memchr>
 800b44c:	b108      	cbz	r0, 800b452 <_printf_i+0x1f2>
 800b44e:	1b40      	subs	r0, r0, r5
 800b450:	6060      	str	r0, [r4, #4]
 800b452:	6863      	ldr	r3, [r4, #4]
 800b454:	6123      	str	r3, [r4, #16]
 800b456:	2300      	movs	r3, #0
 800b458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b45c:	e7a8      	b.n	800b3b0 <_printf_i+0x150>
 800b45e:	6923      	ldr	r3, [r4, #16]
 800b460:	462a      	mov	r2, r5
 800b462:	4649      	mov	r1, r9
 800b464:	4640      	mov	r0, r8
 800b466:	47d0      	blx	sl
 800b468:	3001      	adds	r0, #1
 800b46a:	d0ab      	beq.n	800b3c4 <_printf_i+0x164>
 800b46c:	6823      	ldr	r3, [r4, #0]
 800b46e:	079b      	lsls	r3, r3, #30
 800b470:	d413      	bmi.n	800b49a <_printf_i+0x23a>
 800b472:	68e0      	ldr	r0, [r4, #12]
 800b474:	9b03      	ldr	r3, [sp, #12]
 800b476:	4298      	cmp	r0, r3
 800b478:	bfb8      	it	lt
 800b47a:	4618      	movlt	r0, r3
 800b47c:	e7a4      	b.n	800b3c8 <_printf_i+0x168>
 800b47e:	2301      	movs	r3, #1
 800b480:	4632      	mov	r2, r6
 800b482:	4649      	mov	r1, r9
 800b484:	4640      	mov	r0, r8
 800b486:	47d0      	blx	sl
 800b488:	3001      	adds	r0, #1
 800b48a:	d09b      	beq.n	800b3c4 <_printf_i+0x164>
 800b48c:	3501      	adds	r5, #1
 800b48e:	68e3      	ldr	r3, [r4, #12]
 800b490:	9903      	ldr	r1, [sp, #12]
 800b492:	1a5b      	subs	r3, r3, r1
 800b494:	42ab      	cmp	r3, r5
 800b496:	dcf2      	bgt.n	800b47e <_printf_i+0x21e>
 800b498:	e7eb      	b.n	800b472 <_printf_i+0x212>
 800b49a:	2500      	movs	r5, #0
 800b49c:	f104 0619 	add.w	r6, r4, #25
 800b4a0:	e7f5      	b.n	800b48e <_printf_i+0x22e>
 800b4a2:	bf00      	nop
 800b4a4:	0800f3ee 	.word	0x0800f3ee
 800b4a8:	0800f3ff 	.word	0x0800f3ff

0800b4ac <_scanf_float>:
 800b4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b0:	b087      	sub	sp, #28
 800b4b2:	4617      	mov	r7, r2
 800b4b4:	9303      	str	r3, [sp, #12]
 800b4b6:	688b      	ldr	r3, [r1, #8]
 800b4b8:	1e5a      	subs	r2, r3, #1
 800b4ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b4be:	bf83      	ittte	hi
 800b4c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b4c4:	195b      	addhi	r3, r3, r5
 800b4c6:	9302      	strhi	r3, [sp, #8]
 800b4c8:	2300      	movls	r3, #0
 800b4ca:	bf86      	itte	hi
 800b4cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b4d0:	608b      	strhi	r3, [r1, #8]
 800b4d2:	9302      	strls	r3, [sp, #8]
 800b4d4:	680b      	ldr	r3, [r1, #0]
 800b4d6:	468b      	mov	fp, r1
 800b4d8:	2500      	movs	r5, #0
 800b4da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b4de:	f84b 3b1c 	str.w	r3, [fp], #28
 800b4e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b4e6:	4680      	mov	r8, r0
 800b4e8:	460c      	mov	r4, r1
 800b4ea:	465e      	mov	r6, fp
 800b4ec:	46aa      	mov	sl, r5
 800b4ee:	46a9      	mov	r9, r5
 800b4f0:	9501      	str	r5, [sp, #4]
 800b4f2:	68a2      	ldr	r2, [r4, #8]
 800b4f4:	b152      	cbz	r2, 800b50c <_scanf_float+0x60>
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	781b      	ldrb	r3, [r3, #0]
 800b4fa:	2b4e      	cmp	r3, #78	; 0x4e
 800b4fc:	d864      	bhi.n	800b5c8 <_scanf_float+0x11c>
 800b4fe:	2b40      	cmp	r3, #64	; 0x40
 800b500:	d83c      	bhi.n	800b57c <_scanf_float+0xd0>
 800b502:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b506:	b2c8      	uxtb	r0, r1
 800b508:	280e      	cmp	r0, #14
 800b50a:	d93a      	bls.n	800b582 <_scanf_float+0xd6>
 800b50c:	f1b9 0f00 	cmp.w	r9, #0
 800b510:	d003      	beq.n	800b51a <_scanf_float+0x6e>
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b518:	6023      	str	r3, [r4, #0]
 800b51a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b51e:	f1ba 0f01 	cmp.w	sl, #1
 800b522:	f200 8113 	bhi.w	800b74c <_scanf_float+0x2a0>
 800b526:	455e      	cmp	r6, fp
 800b528:	f200 8105 	bhi.w	800b736 <_scanf_float+0x28a>
 800b52c:	2501      	movs	r5, #1
 800b52e:	4628      	mov	r0, r5
 800b530:	b007      	add	sp, #28
 800b532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b536:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b53a:	2a0d      	cmp	r2, #13
 800b53c:	d8e6      	bhi.n	800b50c <_scanf_float+0x60>
 800b53e:	a101      	add	r1, pc, #4	; (adr r1, 800b544 <_scanf_float+0x98>)
 800b540:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b544:	0800b683 	.word	0x0800b683
 800b548:	0800b50d 	.word	0x0800b50d
 800b54c:	0800b50d 	.word	0x0800b50d
 800b550:	0800b50d 	.word	0x0800b50d
 800b554:	0800b6e3 	.word	0x0800b6e3
 800b558:	0800b6bb 	.word	0x0800b6bb
 800b55c:	0800b50d 	.word	0x0800b50d
 800b560:	0800b50d 	.word	0x0800b50d
 800b564:	0800b691 	.word	0x0800b691
 800b568:	0800b50d 	.word	0x0800b50d
 800b56c:	0800b50d 	.word	0x0800b50d
 800b570:	0800b50d 	.word	0x0800b50d
 800b574:	0800b50d 	.word	0x0800b50d
 800b578:	0800b649 	.word	0x0800b649
 800b57c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b580:	e7db      	b.n	800b53a <_scanf_float+0x8e>
 800b582:	290e      	cmp	r1, #14
 800b584:	d8c2      	bhi.n	800b50c <_scanf_float+0x60>
 800b586:	a001      	add	r0, pc, #4	; (adr r0, 800b58c <_scanf_float+0xe0>)
 800b588:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b58c:	0800b63b 	.word	0x0800b63b
 800b590:	0800b50d 	.word	0x0800b50d
 800b594:	0800b63b 	.word	0x0800b63b
 800b598:	0800b6cf 	.word	0x0800b6cf
 800b59c:	0800b50d 	.word	0x0800b50d
 800b5a0:	0800b5e9 	.word	0x0800b5e9
 800b5a4:	0800b625 	.word	0x0800b625
 800b5a8:	0800b625 	.word	0x0800b625
 800b5ac:	0800b625 	.word	0x0800b625
 800b5b0:	0800b625 	.word	0x0800b625
 800b5b4:	0800b625 	.word	0x0800b625
 800b5b8:	0800b625 	.word	0x0800b625
 800b5bc:	0800b625 	.word	0x0800b625
 800b5c0:	0800b625 	.word	0x0800b625
 800b5c4:	0800b625 	.word	0x0800b625
 800b5c8:	2b6e      	cmp	r3, #110	; 0x6e
 800b5ca:	d809      	bhi.n	800b5e0 <_scanf_float+0x134>
 800b5cc:	2b60      	cmp	r3, #96	; 0x60
 800b5ce:	d8b2      	bhi.n	800b536 <_scanf_float+0x8a>
 800b5d0:	2b54      	cmp	r3, #84	; 0x54
 800b5d2:	d077      	beq.n	800b6c4 <_scanf_float+0x218>
 800b5d4:	2b59      	cmp	r3, #89	; 0x59
 800b5d6:	d199      	bne.n	800b50c <_scanf_float+0x60>
 800b5d8:	2d07      	cmp	r5, #7
 800b5da:	d197      	bne.n	800b50c <_scanf_float+0x60>
 800b5dc:	2508      	movs	r5, #8
 800b5de:	e029      	b.n	800b634 <_scanf_float+0x188>
 800b5e0:	2b74      	cmp	r3, #116	; 0x74
 800b5e2:	d06f      	beq.n	800b6c4 <_scanf_float+0x218>
 800b5e4:	2b79      	cmp	r3, #121	; 0x79
 800b5e6:	e7f6      	b.n	800b5d6 <_scanf_float+0x12a>
 800b5e8:	6821      	ldr	r1, [r4, #0]
 800b5ea:	05c8      	lsls	r0, r1, #23
 800b5ec:	d51a      	bpl.n	800b624 <_scanf_float+0x178>
 800b5ee:	9b02      	ldr	r3, [sp, #8]
 800b5f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b5f4:	6021      	str	r1, [r4, #0]
 800b5f6:	f109 0901 	add.w	r9, r9, #1
 800b5fa:	b11b      	cbz	r3, 800b604 <_scanf_float+0x158>
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	3201      	adds	r2, #1
 800b600:	9302      	str	r3, [sp, #8]
 800b602:	60a2      	str	r2, [r4, #8]
 800b604:	68a3      	ldr	r3, [r4, #8]
 800b606:	3b01      	subs	r3, #1
 800b608:	60a3      	str	r3, [r4, #8]
 800b60a:	6923      	ldr	r3, [r4, #16]
 800b60c:	3301      	adds	r3, #1
 800b60e:	6123      	str	r3, [r4, #16]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	3b01      	subs	r3, #1
 800b614:	2b00      	cmp	r3, #0
 800b616:	607b      	str	r3, [r7, #4]
 800b618:	f340 8084 	ble.w	800b724 <_scanf_float+0x278>
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	3301      	adds	r3, #1
 800b620:	603b      	str	r3, [r7, #0]
 800b622:	e766      	b.n	800b4f2 <_scanf_float+0x46>
 800b624:	eb1a 0f05 	cmn.w	sl, r5
 800b628:	f47f af70 	bne.w	800b50c <_scanf_float+0x60>
 800b62c:	6822      	ldr	r2, [r4, #0]
 800b62e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b632:	6022      	str	r2, [r4, #0]
 800b634:	f806 3b01 	strb.w	r3, [r6], #1
 800b638:	e7e4      	b.n	800b604 <_scanf_float+0x158>
 800b63a:	6822      	ldr	r2, [r4, #0]
 800b63c:	0610      	lsls	r0, r2, #24
 800b63e:	f57f af65 	bpl.w	800b50c <_scanf_float+0x60>
 800b642:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b646:	e7f4      	b.n	800b632 <_scanf_float+0x186>
 800b648:	f1ba 0f00 	cmp.w	sl, #0
 800b64c:	d10e      	bne.n	800b66c <_scanf_float+0x1c0>
 800b64e:	f1b9 0f00 	cmp.w	r9, #0
 800b652:	d10e      	bne.n	800b672 <_scanf_float+0x1c6>
 800b654:	6822      	ldr	r2, [r4, #0]
 800b656:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b65a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b65e:	d108      	bne.n	800b672 <_scanf_float+0x1c6>
 800b660:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b664:	6022      	str	r2, [r4, #0]
 800b666:	f04f 0a01 	mov.w	sl, #1
 800b66a:	e7e3      	b.n	800b634 <_scanf_float+0x188>
 800b66c:	f1ba 0f02 	cmp.w	sl, #2
 800b670:	d055      	beq.n	800b71e <_scanf_float+0x272>
 800b672:	2d01      	cmp	r5, #1
 800b674:	d002      	beq.n	800b67c <_scanf_float+0x1d0>
 800b676:	2d04      	cmp	r5, #4
 800b678:	f47f af48 	bne.w	800b50c <_scanf_float+0x60>
 800b67c:	3501      	adds	r5, #1
 800b67e:	b2ed      	uxtb	r5, r5
 800b680:	e7d8      	b.n	800b634 <_scanf_float+0x188>
 800b682:	f1ba 0f01 	cmp.w	sl, #1
 800b686:	f47f af41 	bne.w	800b50c <_scanf_float+0x60>
 800b68a:	f04f 0a02 	mov.w	sl, #2
 800b68e:	e7d1      	b.n	800b634 <_scanf_float+0x188>
 800b690:	b97d      	cbnz	r5, 800b6b2 <_scanf_float+0x206>
 800b692:	f1b9 0f00 	cmp.w	r9, #0
 800b696:	f47f af3c 	bne.w	800b512 <_scanf_float+0x66>
 800b69a:	6822      	ldr	r2, [r4, #0]
 800b69c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b6a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b6a4:	f47f af39 	bne.w	800b51a <_scanf_float+0x6e>
 800b6a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b6ac:	6022      	str	r2, [r4, #0]
 800b6ae:	2501      	movs	r5, #1
 800b6b0:	e7c0      	b.n	800b634 <_scanf_float+0x188>
 800b6b2:	2d03      	cmp	r5, #3
 800b6b4:	d0e2      	beq.n	800b67c <_scanf_float+0x1d0>
 800b6b6:	2d05      	cmp	r5, #5
 800b6b8:	e7de      	b.n	800b678 <_scanf_float+0x1cc>
 800b6ba:	2d02      	cmp	r5, #2
 800b6bc:	f47f af26 	bne.w	800b50c <_scanf_float+0x60>
 800b6c0:	2503      	movs	r5, #3
 800b6c2:	e7b7      	b.n	800b634 <_scanf_float+0x188>
 800b6c4:	2d06      	cmp	r5, #6
 800b6c6:	f47f af21 	bne.w	800b50c <_scanf_float+0x60>
 800b6ca:	2507      	movs	r5, #7
 800b6cc:	e7b2      	b.n	800b634 <_scanf_float+0x188>
 800b6ce:	6822      	ldr	r2, [r4, #0]
 800b6d0:	0591      	lsls	r1, r2, #22
 800b6d2:	f57f af1b 	bpl.w	800b50c <_scanf_float+0x60>
 800b6d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b6da:	6022      	str	r2, [r4, #0]
 800b6dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800b6e0:	e7a8      	b.n	800b634 <_scanf_float+0x188>
 800b6e2:	6822      	ldr	r2, [r4, #0]
 800b6e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b6e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b6ec:	d006      	beq.n	800b6fc <_scanf_float+0x250>
 800b6ee:	0550      	lsls	r0, r2, #21
 800b6f0:	f57f af0c 	bpl.w	800b50c <_scanf_float+0x60>
 800b6f4:	f1b9 0f00 	cmp.w	r9, #0
 800b6f8:	f43f af0f 	beq.w	800b51a <_scanf_float+0x6e>
 800b6fc:	0591      	lsls	r1, r2, #22
 800b6fe:	bf58      	it	pl
 800b700:	9901      	ldrpl	r1, [sp, #4]
 800b702:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b706:	bf58      	it	pl
 800b708:	eba9 0101 	subpl.w	r1, r9, r1
 800b70c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b710:	bf58      	it	pl
 800b712:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b716:	6022      	str	r2, [r4, #0]
 800b718:	f04f 0900 	mov.w	r9, #0
 800b71c:	e78a      	b.n	800b634 <_scanf_float+0x188>
 800b71e:	f04f 0a03 	mov.w	sl, #3
 800b722:	e787      	b.n	800b634 <_scanf_float+0x188>
 800b724:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b728:	4639      	mov	r1, r7
 800b72a:	4640      	mov	r0, r8
 800b72c:	4798      	blx	r3
 800b72e:	2800      	cmp	r0, #0
 800b730:	f43f aedf 	beq.w	800b4f2 <_scanf_float+0x46>
 800b734:	e6ea      	b.n	800b50c <_scanf_float+0x60>
 800b736:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b73a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b73e:	463a      	mov	r2, r7
 800b740:	4640      	mov	r0, r8
 800b742:	4798      	blx	r3
 800b744:	6923      	ldr	r3, [r4, #16]
 800b746:	3b01      	subs	r3, #1
 800b748:	6123      	str	r3, [r4, #16]
 800b74a:	e6ec      	b.n	800b526 <_scanf_float+0x7a>
 800b74c:	1e6b      	subs	r3, r5, #1
 800b74e:	2b06      	cmp	r3, #6
 800b750:	d825      	bhi.n	800b79e <_scanf_float+0x2f2>
 800b752:	2d02      	cmp	r5, #2
 800b754:	d836      	bhi.n	800b7c4 <_scanf_float+0x318>
 800b756:	455e      	cmp	r6, fp
 800b758:	f67f aee8 	bls.w	800b52c <_scanf_float+0x80>
 800b75c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b760:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b764:	463a      	mov	r2, r7
 800b766:	4640      	mov	r0, r8
 800b768:	4798      	blx	r3
 800b76a:	6923      	ldr	r3, [r4, #16]
 800b76c:	3b01      	subs	r3, #1
 800b76e:	6123      	str	r3, [r4, #16]
 800b770:	e7f1      	b.n	800b756 <_scanf_float+0x2aa>
 800b772:	9802      	ldr	r0, [sp, #8]
 800b774:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b778:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b77c:	9002      	str	r0, [sp, #8]
 800b77e:	463a      	mov	r2, r7
 800b780:	4640      	mov	r0, r8
 800b782:	4798      	blx	r3
 800b784:	6923      	ldr	r3, [r4, #16]
 800b786:	3b01      	subs	r3, #1
 800b788:	6123      	str	r3, [r4, #16]
 800b78a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b78e:	fa5f fa8a 	uxtb.w	sl, sl
 800b792:	f1ba 0f02 	cmp.w	sl, #2
 800b796:	d1ec      	bne.n	800b772 <_scanf_float+0x2c6>
 800b798:	3d03      	subs	r5, #3
 800b79a:	b2ed      	uxtb	r5, r5
 800b79c:	1b76      	subs	r6, r6, r5
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	05da      	lsls	r2, r3, #23
 800b7a2:	d52f      	bpl.n	800b804 <_scanf_float+0x358>
 800b7a4:	055b      	lsls	r3, r3, #21
 800b7a6:	d510      	bpl.n	800b7ca <_scanf_float+0x31e>
 800b7a8:	455e      	cmp	r6, fp
 800b7aa:	f67f aebf 	bls.w	800b52c <_scanf_float+0x80>
 800b7ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b7b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b7b6:	463a      	mov	r2, r7
 800b7b8:	4640      	mov	r0, r8
 800b7ba:	4798      	blx	r3
 800b7bc:	6923      	ldr	r3, [r4, #16]
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	6123      	str	r3, [r4, #16]
 800b7c2:	e7f1      	b.n	800b7a8 <_scanf_float+0x2fc>
 800b7c4:	46aa      	mov	sl, r5
 800b7c6:	9602      	str	r6, [sp, #8]
 800b7c8:	e7df      	b.n	800b78a <_scanf_float+0x2de>
 800b7ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b7ce:	6923      	ldr	r3, [r4, #16]
 800b7d0:	2965      	cmp	r1, #101	; 0x65
 800b7d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b7d6:	f106 35ff 	add.w	r5, r6, #4294967295
 800b7da:	6123      	str	r3, [r4, #16]
 800b7dc:	d00c      	beq.n	800b7f8 <_scanf_float+0x34c>
 800b7de:	2945      	cmp	r1, #69	; 0x45
 800b7e0:	d00a      	beq.n	800b7f8 <_scanf_float+0x34c>
 800b7e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b7e6:	463a      	mov	r2, r7
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	4798      	blx	r3
 800b7ec:	6923      	ldr	r3, [r4, #16]
 800b7ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	1eb5      	subs	r5, r6, #2
 800b7f6:	6123      	str	r3, [r4, #16]
 800b7f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b7fc:	463a      	mov	r2, r7
 800b7fe:	4640      	mov	r0, r8
 800b800:	4798      	blx	r3
 800b802:	462e      	mov	r6, r5
 800b804:	6825      	ldr	r5, [r4, #0]
 800b806:	f015 0510 	ands.w	r5, r5, #16
 800b80a:	d14e      	bne.n	800b8aa <_scanf_float+0x3fe>
 800b80c:	7035      	strb	r5, [r6, #0]
 800b80e:	6823      	ldr	r3, [r4, #0]
 800b810:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b818:	d119      	bne.n	800b84e <_scanf_float+0x3a2>
 800b81a:	9b01      	ldr	r3, [sp, #4]
 800b81c:	454b      	cmp	r3, r9
 800b81e:	eba3 0209 	sub.w	r2, r3, r9
 800b822:	d121      	bne.n	800b868 <_scanf_float+0x3bc>
 800b824:	2200      	movs	r2, #0
 800b826:	4659      	mov	r1, fp
 800b828:	4640      	mov	r0, r8
 800b82a:	f000 fe3b 	bl	800c4a4 <_strtod_r>
 800b82e:	6822      	ldr	r2, [r4, #0]
 800b830:	9b03      	ldr	r3, [sp, #12]
 800b832:	f012 0f02 	tst.w	r2, #2
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	d021      	beq.n	800b87e <_scanf_float+0x3d2>
 800b83a:	9903      	ldr	r1, [sp, #12]
 800b83c:	1d1a      	adds	r2, r3, #4
 800b83e:	600a      	str	r2, [r1, #0]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	ed83 0b00 	vstr	d0, [r3]
 800b846:	68e3      	ldr	r3, [r4, #12]
 800b848:	3301      	adds	r3, #1
 800b84a:	60e3      	str	r3, [r4, #12]
 800b84c:	e66f      	b.n	800b52e <_scanf_float+0x82>
 800b84e:	9b04      	ldr	r3, [sp, #16]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d0e7      	beq.n	800b824 <_scanf_float+0x378>
 800b854:	9905      	ldr	r1, [sp, #20]
 800b856:	230a      	movs	r3, #10
 800b858:	462a      	mov	r2, r5
 800b85a:	3101      	adds	r1, #1
 800b85c:	4640      	mov	r0, r8
 800b85e:	f000 fea9 	bl	800c5b4 <_strtol_r>
 800b862:	9b04      	ldr	r3, [sp, #16]
 800b864:	9e05      	ldr	r6, [sp, #20]
 800b866:	1ac2      	subs	r2, r0, r3
 800b868:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b86c:	429e      	cmp	r6, r3
 800b86e:	bf28      	it	cs
 800b870:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b874:	490e      	ldr	r1, [pc, #56]	; (800b8b0 <_scanf_float+0x404>)
 800b876:	4630      	mov	r0, r6
 800b878:	f000 f824 	bl	800b8c4 <siprintf>
 800b87c:	e7d2      	b.n	800b824 <_scanf_float+0x378>
 800b87e:	9903      	ldr	r1, [sp, #12]
 800b880:	f012 0f04 	tst.w	r2, #4
 800b884:	f103 0204 	add.w	r2, r3, #4
 800b888:	600a      	str	r2, [r1, #0]
 800b88a:	d1d9      	bne.n	800b840 <_scanf_float+0x394>
 800b88c:	eeb4 0b40 	vcmp.f64	d0, d0
 800b890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b894:	681e      	ldr	r6, [r3, #0]
 800b896:	d705      	bvc.n	800b8a4 <_scanf_float+0x3f8>
 800b898:	4806      	ldr	r0, [pc, #24]	; (800b8b4 <_scanf_float+0x408>)
 800b89a:	f000 f80d 	bl	800b8b8 <nanf>
 800b89e:	ed86 0a00 	vstr	s0, [r6]
 800b8a2:	e7d0      	b.n	800b846 <_scanf_float+0x39a>
 800b8a4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b8a8:	e7f9      	b.n	800b89e <_scanf_float+0x3f2>
 800b8aa:	2500      	movs	r5, #0
 800b8ac:	e63f      	b.n	800b52e <_scanf_float+0x82>
 800b8ae:	bf00      	nop
 800b8b0:	0800f410 	.word	0x0800f410
 800b8b4:	0800f818 	.word	0x0800f818

0800b8b8 <nanf>:
 800b8b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b8c0 <nanf+0x8>
 800b8bc:	4770      	bx	lr
 800b8be:	bf00      	nop
 800b8c0:	7fc00000 	.word	0x7fc00000

0800b8c4 <siprintf>:
 800b8c4:	b40e      	push	{r1, r2, r3}
 800b8c6:	b500      	push	{lr}
 800b8c8:	b09c      	sub	sp, #112	; 0x70
 800b8ca:	ab1d      	add	r3, sp, #116	; 0x74
 800b8cc:	9002      	str	r0, [sp, #8]
 800b8ce:	9006      	str	r0, [sp, #24]
 800b8d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b8d4:	4809      	ldr	r0, [pc, #36]	; (800b8fc <siprintf+0x38>)
 800b8d6:	9107      	str	r1, [sp, #28]
 800b8d8:	9104      	str	r1, [sp, #16]
 800b8da:	4909      	ldr	r1, [pc, #36]	; (800b900 <siprintf+0x3c>)
 800b8dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e0:	9105      	str	r1, [sp, #20]
 800b8e2:	6800      	ldr	r0, [r0, #0]
 800b8e4:	9301      	str	r3, [sp, #4]
 800b8e6:	a902      	add	r1, sp, #8
 800b8e8:	f002 fdfe 	bl	800e4e8 <_svfiprintf_r>
 800b8ec:	9b02      	ldr	r3, [sp, #8]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	701a      	strb	r2, [r3, #0]
 800b8f2:	b01c      	add	sp, #112	; 0x70
 800b8f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8f8:	b003      	add	sp, #12
 800b8fa:	4770      	bx	lr
 800b8fc:	20000014 	.word	0x20000014
 800b900:	ffff0208 	.word	0xffff0208

0800b904 <sulp>:
 800b904:	b570      	push	{r4, r5, r6, lr}
 800b906:	4604      	mov	r4, r0
 800b908:	460d      	mov	r5, r1
 800b90a:	4616      	mov	r6, r2
 800b90c:	ec45 4b10 	vmov	d0, r4, r5
 800b910:	f002 fb4c 	bl	800dfac <__ulp>
 800b914:	b17e      	cbz	r6, 800b936 <sulp+0x32>
 800b916:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b91a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b91e:	2b00      	cmp	r3, #0
 800b920:	dd09      	ble.n	800b936 <sulp+0x32>
 800b922:	051b      	lsls	r3, r3, #20
 800b924:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800b928:	2000      	movs	r0, #0
 800b92a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800b92e:	ec41 0b17 	vmov	d7, r0, r1
 800b932:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b936:	bd70      	pop	{r4, r5, r6, pc}

0800b938 <_strtod_l>:
 800b938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93c:	ed2d 8b0e 	vpush	{d8-d14}
 800b940:	b097      	sub	sp, #92	; 0x5c
 800b942:	461f      	mov	r7, r3
 800b944:	2300      	movs	r3, #0
 800b946:	9312      	str	r3, [sp, #72]	; 0x48
 800b948:	4ba1      	ldr	r3, [pc, #644]	; (800bbd0 <_strtod_l+0x298>)
 800b94a:	920d      	str	r2, [sp, #52]	; 0x34
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	9307      	str	r3, [sp, #28]
 800b950:	4604      	mov	r4, r0
 800b952:	4618      	mov	r0, r3
 800b954:	468b      	mov	fp, r1
 800b956:	f7f4 fc73 	bl	8000240 <strlen>
 800b95a:	f04f 0800 	mov.w	r8, #0
 800b95e:	4605      	mov	r5, r0
 800b960:	f04f 0900 	mov.w	r9, #0
 800b964:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800b968:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b96a:	7813      	ldrb	r3, [r2, #0]
 800b96c:	2b2b      	cmp	r3, #43	; 0x2b
 800b96e:	d04d      	beq.n	800ba0c <_strtod_l+0xd4>
 800b970:	d83a      	bhi.n	800b9e8 <_strtod_l+0xb0>
 800b972:	2b0d      	cmp	r3, #13
 800b974:	d833      	bhi.n	800b9de <_strtod_l+0xa6>
 800b976:	2b08      	cmp	r3, #8
 800b978:	d833      	bhi.n	800b9e2 <_strtod_l+0xaa>
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d03d      	beq.n	800b9fa <_strtod_l+0xc2>
 800b97e:	2300      	movs	r3, #0
 800b980:	9308      	str	r3, [sp, #32]
 800b982:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800b984:	7833      	ldrb	r3, [r6, #0]
 800b986:	2b30      	cmp	r3, #48	; 0x30
 800b988:	f040 80b0 	bne.w	800baec <_strtod_l+0x1b4>
 800b98c:	7873      	ldrb	r3, [r6, #1]
 800b98e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b992:	2b58      	cmp	r3, #88	; 0x58
 800b994:	d167      	bne.n	800ba66 <_strtod_l+0x12e>
 800b996:	9b08      	ldr	r3, [sp, #32]
 800b998:	9301      	str	r3, [sp, #4]
 800b99a:	ab12      	add	r3, sp, #72	; 0x48
 800b99c:	9702      	str	r7, [sp, #8]
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	4a8c      	ldr	r2, [pc, #560]	; (800bbd4 <_strtod_l+0x29c>)
 800b9a2:	ab13      	add	r3, sp, #76	; 0x4c
 800b9a4:	a911      	add	r1, sp, #68	; 0x44
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f001 fc68 	bl	800d27c <__gethex>
 800b9ac:	f010 0507 	ands.w	r5, r0, #7
 800b9b0:	4607      	mov	r7, r0
 800b9b2:	d005      	beq.n	800b9c0 <_strtod_l+0x88>
 800b9b4:	2d06      	cmp	r5, #6
 800b9b6:	d12b      	bne.n	800ba10 <_strtod_l+0xd8>
 800b9b8:	3601      	adds	r6, #1
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	9611      	str	r6, [sp, #68]	; 0x44
 800b9be:	9308      	str	r3, [sp, #32]
 800b9c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f040 854e 	bne.w	800c464 <_strtod_l+0xb2c>
 800b9c8:	9b08      	ldr	r3, [sp, #32]
 800b9ca:	b1e3      	cbz	r3, 800ba06 <_strtod_l+0xce>
 800b9cc:	ec49 8b17 	vmov	d7, r8, r9
 800b9d0:	eeb1 0b47 	vneg.f64	d0, d7
 800b9d4:	b017      	add	sp, #92	; 0x5c
 800b9d6:	ecbd 8b0e 	vpop	{d8-d14}
 800b9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9de:	2b20      	cmp	r3, #32
 800b9e0:	d1cd      	bne.n	800b97e <_strtod_l+0x46>
 800b9e2:	3201      	adds	r2, #1
 800b9e4:	9211      	str	r2, [sp, #68]	; 0x44
 800b9e6:	e7bf      	b.n	800b968 <_strtod_l+0x30>
 800b9e8:	2b2d      	cmp	r3, #45	; 0x2d
 800b9ea:	d1c8      	bne.n	800b97e <_strtod_l+0x46>
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	9308      	str	r3, [sp, #32]
 800b9f0:	1c53      	adds	r3, r2, #1
 800b9f2:	9311      	str	r3, [sp, #68]	; 0x44
 800b9f4:	7853      	ldrb	r3, [r2, #1]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1c3      	bne.n	800b982 <_strtod_l+0x4a>
 800b9fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9fc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f040 852d 	bne.w	800c460 <_strtod_l+0xb28>
 800ba06:	ec49 8b10 	vmov	d0, r8, r9
 800ba0a:	e7e3      	b.n	800b9d4 <_strtod_l+0x9c>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	e7ee      	b.n	800b9ee <_strtod_l+0xb6>
 800ba10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ba12:	b13a      	cbz	r2, 800ba24 <_strtod_l+0xec>
 800ba14:	2135      	movs	r1, #53	; 0x35
 800ba16:	a814      	add	r0, sp, #80	; 0x50
 800ba18:	f002 fbd0 	bl	800e1bc <__copybits>
 800ba1c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f001 ff92 	bl	800d948 <_Bfree>
 800ba24:	3d01      	subs	r5, #1
 800ba26:	2d04      	cmp	r5, #4
 800ba28:	d806      	bhi.n	800ba38 <_strtod_l+0x100>
 800ba2a:	e8df f005 	tbb	[pc, r5]
 800ba2e:	030a      	.short	0x030a
 800ba30:	1714      	.short	0x1714
 800ba32:	0a          	.byte	0x0a
 800ba33:	00          	.byte	0x00
 800ba34:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800ba38:	073f      	lsls	r7, r7, #28
 800ba3a:	d5c1      	bpl.n	800b9c0 <_strtod_l+0x88>
 800ba3c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800ba40:	e7be      	b.n	800b9c0 <_strtod_l+0x88>
 800ba42:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800ba46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba48:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ba4c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ba50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ba54:	e7f0      	b.n	800ba38 <_strtod_l+0x100>
 800ba56:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800bbd8 <_strtod_l+0x2a0>
 800ba5a:	e7ed      	b.n	800ba38 <_strtod_l+0x100>
 800ba5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ba60:	f04f 38ff 	mov.w	r8, #4294967295
 800ba64:	e7e8      	b.n	800ba38 <_strtod_l+0x100>
 800ba66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba68:	1c5a      	adds	r2, r3, #1
 800ba6a:	9211      	str	r2, [sp, #68]	; 0x44
 800ba6c:	785b      	ldrb	r3, [r3, #1]
 800ba6e:	2b30      	cmp	r3, #48	; 0x30
 800ba70:	d0f9      	beq.n	800ba66 <_strtod_l+0x12e>
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d0a4      	beq.n	800b9c0 <_strtod_l+0x88>
 800ba76:	2301      	movs	r3, #1
 800ba78:	f04f 0a00 	mov.w	sl, #0
 800ba7c:	9304      	str	r3, [sp, #16]
 800ba7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba80:	930a      	str	r3, [sp, #40]	; 0x28
 800ba82:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ba86:	f8cd a018 	str.w	sl, [sp, #24]
 800ba8a:	220a      	movs	r2, #10
 800ba8c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800ba8e:	7807      	ldrb	r7, [r0, #0]
 800ba90:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800ba94:	b2d9      	uxtb	r1, r3
 800ba96:	2909      	cmp	r1, #9
 800ba98:	d92a      	bls.n	800baf0 <_strtod_l+0x1b8>
 800ba9a:	9907      	ldr	r1, [sp, #28]
 800ba9c:	462a      	mov	r2, r5
 800ba9e:	f002 fe3b 	bl	800e718 <strncmp>
 800baa2:	2800      	cmp	r0, #0
 800baa4:	d033      	beq.n	800bb0e <_strtod_l+0x1d6>
 800baa6:	2000      	movs	r0, #0
 800baa8:	9b06      	ldr	r3, [sp, #24]
 800baaa:	463a      	mov	r2, r7
 800baac:	4601      	mov	r1, r0
 800baae:	4607      	mov	r7, r0
 800bab0:	2a65      	cmp	r2, #101	; 0x65
 800bab2:	d001      	beq.n	800bab8 <_strtod_l+0x180>
 800bab4:	2a45      	cmp	r2, #69	; 0x45
 800bab6:	d117      	bne.n	800bae8 <_strtod_l+0x1b0>
 800bab8:	b91b      	cbnz	r3, 800bac2 <_strtod_l+0x18a>
 800baba:	9b04      	ldr	r3, [sp, #16]
 800babc:	4303      	orrs	r3, r0
 800babe:	d09c      	beq.n	800b9fa <_strtod_l+0xc2>
 800bac0:	2300      	movs	r3, #0
 800bac2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800bac6:	f10b 0201 	add.w	r2, fp, #1
 800baca:	9211      	str	r2, [sp, #68]	; 0x44
 800bacc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800bad0:	2a2b      	cmp	r2, #43	; 0x2b
 800bad2:	d071      	beq.n	800bbb8 <_strtod_l+0x280>
 800bad4:	2a2d      	cmp	r2, #45	; 0x2d
 800bad6:	d077      	beq.n	800bbc8 <_strtod_l+0x290>
 800bad8:	f04f 0e00 	mov.w	lr, #0
 800badc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800bae0:	2d09      	cmp	r5, #9
 800bae2:	d97f      	bls.n	800bbe4 <_strtod_l+0x2ac>
 800bae4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800bae8:	2500      	movs	r5, #0
 800baea:	e09b      	b.n	800bc24 <_strtod_l+0x2ec>
 800baec:	2300      	movs	r3, #0
 800baee:	e7c3      	b.n	800ba78 <_strtod_l+0x140>
 800baf0:	9906      	ldr	r1, [sp, #24]
 800baf2:	2908      	cmp	r1, #8
 800baf4:	bfdd      	ittte	le
 800baf6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800baf8:	fb02 3301 	mlale	r3, r2, r1, r3
 800bafc:	9309      	strle	r3, [sp, #36]	; 0x24
 800bafe:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800bb02:	9b06      	ldr	r3, [sp, #24]
 800bb04:	3001      	adds	r0, #1
 800bb06:	3301      	adds	r3, #1
 800bb08:	9306      	str	r3, [sp, #24]
 800bb0a:	9011      	str	r0, [sp, #68]	; 0x44
 800bb0c:	e7be      	b.n	800ba8c <_strtod_l+0x154>
 800bb0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb10:	195a      	adds	r2, r3, r5
 800bb12:	9211      	str	r2, [sp, #68]	; 0x44
 800bb14:	5d5a      	ldrb	r2, [r3, r5]
 800bb16:	9b06      	ldr	r3, [sp, #24]
 800bb18:	b3a3      	cbz	r3, 800bb84 <_strtod_l+0x24c>
 800bb1a:	4607      	mov	r7, r0
 800bb1c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bb20:	2909      	cmp	r1, #9
 800bb22:	d912      	bls.n	800bb4a <_strtod_l+0x212>
 800bb24:	2101      	movs	r1, #1
 800bb26:	e7c3      	b.n	800bab0 <_strtod_l+0x178>
 800bb28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb2a:	1c5a      	adds	r2, r3, #1
 800bb2c:	9211      	str	r2, [sp, #68]	; 0x44
 800bb2e:	785a      	ldrb	r2, [r3, #1]
 800bb30:	3001      	adds	r0, #1
 800bb32:	2a30      	cmp	r2, #48	; 0x30
 800bb34:	d0f8      	beq.n	800bb28 <_strtod_l+0x1f0>
 800bb36:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bb3a:	2b08      	cmp	r3, #8
 800bb3c:	f200 8497 	bhi.w	800c46e <_strtod_l+0xb36>
 800bb40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb42:	930a      	str	r3, [sp, #40]	; 0x28
 800bb44:	4607      	mov	r7, r0
 800bb46:	2000      	movs	r0, #0
 800bb48:	4603      	mov	r3, r0
 800bb4a:	3a30      	subs	r2, #48	; 0x30
 800bb4c:	f100 0101 	add.w	r1, r0, #1
 800bb50:	d012      	beq.n	800bb78 <_strtod_l+0x240>
 800bb52:	440f      	add	r7, r1
 800bb54:	eb00 0c03 	add.w	ip, r0, r3
 800bb58:	4619      	mov	r1, r3
 800bb5a:	250a      	movs	r5, #10
 800bb5c:	4561      	cmp	r1, ip
 800bb5e:	d113      	bne.n	800bb88 <_strtod_l+0x250>
 800bb60:	1819      	adds	r1, r3, r0
 800bb62:	2908      	cmp	r1, #8
 800bb64:	f103 0301 	add.w	r3, r3, #1
 800bb68:	4403      	add	r3, r0
 800bb6a:	dc1c      	bgt.n	800bba6 <_strtod_l+0x26e>
 800bb6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb6e:	210a      	movs	r1, #10
 800bb70:	fb01 2200 	mla	r2, r1, r0, r2
 800bb74:	9209      	str	r2, [sp, #36]	; 0x24
 800bb76:	2100      	movs	r1, #0
 800bb78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bb7a:	1c50      	adds	r0, r2, #1
 800bb7c:	9011      	str	r0, [sp, #68]	; 0x44
 800bb7e:	7852      	ldrb	r2, [r2, #1]
 800bb80:	4608      	mov	r0, r1
 800bb82:	e7cb      	b.n	800bb1c <_strtod_l+0x1e4>
 800bb84:	9806      	ldr	r0, [sp, #24]
 800bb86:	e7d4      	b.n	800bb32 <_strtod_l+0x1fa>
 800bb88:	2908      	cmp	r1, #8
 800bb8a:	dc04      	bgt.n	800bb96 <_strtod_l+0x25e>
 800bb8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bb8e:	436e      	muls	r6, r5
 800bb90:	9609      	str	r6, [sp, #36]	; 0x24
 800bb92:	3101      	adds	r1, #1
 800bb94:	e7e2      	b.n	800bb5c <_strtod_l+0x224>
 800bb96:	f101 0e01 	add.w	lr, r1, #1
 800bb9a:	f1be 0f10 	cmp.w	lr, #16
 800bb9e:	bfd8      	it	le
 800bba0:	fb05 fa0a 	mulle.w	sl, r5, sl
 800bba4:	e7f5      	b.n	800bb92 <_strtod_l+0x25a>
 800bba6:	2b10      	cmp	r3, #16
 800bba8:	bfdc      	itt	le
 800bbaa:	210a      	movle	r1, #10
 800bbac:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800bbb0:	e7e1      	b.n	800bb76 <_strtod_l+0x23e>
 800bbb2:	2700      	movs	r7, #0
 800bbb4:	2101      	movs	r1, #1
 800bbb6:	e780      	b.n	800baba <_strtod_l+0x182>
 800bbb8:	f04f 0e00 	mov.w	lr, #0
 800bbbc:	f10b 0202 	add.w	r2, fp, #2
 800bbc0:	9211      	str	r2, [sp, #68]	; 0x44
 800bbc2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800bbc6:	e789      	b.n	800badc <_strtod_l+0x1a4>
 800bbc8:	f04f 0e01 	mov.w	lr, #1
 800bbcc:	e7f6      	b.n	800bbbc <_strtod_l+0x284>
 800bbce:	bf00      	nop
 800bbd0:	0800f660 	.word	0x0800f660
 800bbd4:	0800f418 	.word	0x0800f418
 800bbd8:	7ff00000 	.word	0x7ff00000
 800bbdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bbde:	1c55      	adds	r5, r2, #1
 800bbe0:	9511      	str	r5, [sp, #68]	; 0x44
 800bbe2:	7852      	ldrb	r2, [r2, #1]
 800bbe4:	2a30      	cmp	r2, #48	; 0x30
 800bbe6:	d0f9      	beq.n	800bbdc <_strtod_l+0x2a4>
 800bbe8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800bbec:	2d08      	cmp	r5, #8
 800bbee:	f63f af7b 	bhi.w	800bae8 <_strtod_l+0x1b0>
 800bbf2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800bbf6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bbf8:	9207      	str	r2, [sp, #28]
 800bbfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bbfc:	1c55      	adds	r5, r2, #1
 800bbfe:	9511      	str	r5, [sp, #68]	; 0x44
 800bc00:	7852      	ldrb	r2, [r2, #1]
 800bc02:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bc06:	2e09      	cmp	r6, #9
 800bc08:	d937      	bls.n	800bc7a <_strtod_l+0x342>
 800bc0a:	9e07      	ldr	r6, [sp, #28]
 800bc0c:	1bad      	subs	r5, r5, r6
 800bc0e:	2d08      	cmp	r5, #8
 800bc10:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800bc14:	dc02      	bgt.n	800bc1c <_strtod_l+0x2e4>
 800bc16:	4565      	cmp	r5, ip
 800bc18:	bfa8      	it	ge
 800bc1a:	4665      	movge	r5, ip
 800bc1c:	f1be 0f00 	cmp.w	lr, #0
 800bc20:	d000      	beq.n	800bc24 <_strtod_l+0x2ec>
 800bc22:	426d      	negs	r5, r5
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d14d      	bne.n	800bcc4 <_strtod_l+0x38c>
 800bc28:	9b04      	ldr	r3, [sp, #16]
 800bc2a:	4303      	orrs	r3, r0
 800bc2c:	f47f aec8 	bne.w	800b9c0 <_strtod_l+0x88>
 800bc30:	2900      	cmp	r1, #0
 800bc32:	f47f aee2 	bne.w	800b9fa <_strtod_l+0xc2>
 800bc36:	2a69      	cmp	r2, #105	; 0x69
 800bc38:	d027      	beq.n	800bc8a <_strtod_l+0x352>
 800bc3a:	dc24      	bgt.n	800bc86 <_strtod_l+0x34e>
 800bc3c:	2a49      	cmp	r2, #73	; 0x49
 800bc3e:	d024      	beq.n	800bc8a <_strtod_l+0x352>
 800bc40:	2a4e      	cmp	r2, #78	; 0x4e
 800bc42:	f47f aeda 	bne.w	800b9fa <_strtod_l+0xc2>
 800bc46:	4996      	ldr	r1, [pc, #600]	; (800bea0 <_strtod_l+0x568>)
 800bc48:	a811      	add	r0, sp, #68	; 0x44
 800bc4a:	f001 fd6f 	bl	800d72c <__match>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	f43f aed3 	beq.w	800b9fa <_strtod_l+0xc2>
 800bc54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	2b28      	cmp	r3, #40	; 0x28
 800bc5a:	d12d      	bne.n	800bcb8 <_strtod_l+0x380>
 800bc5c:	4991      	ldr	r1, [pc, #580]	; (800bea4 <_strtod_l+0x56c>)
 800bc5e:	aa14      	add	r2, sp, #80	; 0x50
 800bc60:	a811      	add	r0, sp, #68	; 0x44
 800bc62:	f001 fd77 	bl	800d754 <__hexnan>
 800bc66:	2805      	cmp	r0, #5
 800bc68:	d126      	bne.n	800bcb8 <_strtod_l+0x380>
 800bc6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc6c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800bc70:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bc74:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bc78:	e6a2      	b.n	800b9c0 <_strtod_l+0x88>
 800bc7a:	250a      	movs	r5, #10
 800bc7c:	fb05 250c 	mla	r5, r5, ip, r2
 800bc80:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800bc84:	e7b9      	b.n	800bbfa <_strtod_l+0x2c2>
 800bc86:	2a6e      	cmp	r2, #110	; 0x6e
 800bc88:	e7db      	b.n	800bc42 <_strtod_l+0x30a>
 800bc8a:	4987      	ldr	r1, [pc, #540]	; (800bea8 <_strtod_l+0x570>)
 800bc8c:	a811      	add	r0, sp, #68	; 0x44
 800bc8e:	f001 fd4d 	bl	800d72c <__match>
 800bc92:	2800      	cmp	r0, #0
 800bc94:	f43f aeb1 	beq.w	800b9fa <_strtod_l+0xc2>
 800bc98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc9a:	4984      	ldr	r1, [pc, #528]	; (800beac <_strtod_l+0x574>)
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	a811      	add	r0, sp, #68	; 0x44
 800bca0:	9311      	str	r3, [sp, #68]	; 0x44
 800bca2:	f001 fd43 	bl	800d72c <__match>
 800bca6:	b910      	cbnz	r0, 800bcae <_strtod_l+0x376>
 800bca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bcaa:	3301      	adds	r3, #1
 800bcac:	9311      	str	r3, [sp, #68]	; 0x44
 800bcae:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800bec0 <_strtod_l+0x588>
 800bcb2:	f04f 0800 	mov.w	r8, #0
 800bcb6:	e683      	b.n	800b9c0 <_strtod_l+0x88>
 800bcb8:	487d      	ldr	r0, [pc, #500]	; (800beb0 <_strtod_l+0x578>)
 800bcba:	f002 fd15 	bl	800e6e8 <nan>
 800bcbe:	ec59 8b10 	vmov	r8, r9, d0
 800bcc2:	e67d      	b.n	800b9c0 <_strtod_l+0x88>
 800bcc4:	1bea      	subs	r2, r5, r7
 800bcc6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800bcca:	9207      	str	r2, [sp, #28]
 800bccc:	9a06      	ldr	r2, [sp, #24]
 800bcce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bcd2:	2a00      	cmp	r2, #0
 800bcd4:	bf08      	it	eq
 800bcd6:	461a      	moveq	r2, r3
 800bcd8:	2b10      	cmp	r3, #16
 800bcda:	9206      	str	r2, [sp, #24]
 800bcdc:	461a      	mov	r2, r3
 800bcde:	bfa8      	it	ge
 800bce0:	2210      	movge	r2, #16
 800bce2:	2b09      	cmp	r3, #9
 800bce4:	ec59 8b17 	vmov	r8, r9, d7
 800bce8:	dd0c      	ble.n	800bd04 <_strtod_l+0x3cc>
 800bcea:	4972      	ldr	r1, [pc, #456]	; (800beb4 <_strtod_l+0x57c>)
 800bcec:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800bcf0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800bcf4:	ee06 aa90 	vmov	s13, sl
 800bcf8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800bcfc:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bd00:	ec59 8b16 	vmov	r8, r9, d6
 800bd04:	2b0f      	cmp	r3, #15
 800bd06:	dc36      	bgt.n	800bd76 <_strtod_l+0x43e>
 800bd08:	9907      	ldr	r1, [sp, #28]
 800bd0a:	2900      	cmp	r1, #0
 800bd0c:	f43f ae58 	beq.w	800b9c0 <_strtod_l+0x88>
 800bd10:	dd23      	ble.n	800bd5a <_strtod_l+0x422>
 800bd12:	2916      	cmp	r1, #22
 800bd14:	dc0b      	bgt.n	800bd2e <_strtod_l+0x3f6>
 800bd16:	4b67      	ldr	r3, [pc, #412]	; (800beb4 <_strtod_l+0x57c>)
 800bd18:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800bd1c:	ed93 7b00 	vldr	d7, [r3]
 800bd20:	ec49 8b16 	vmov	d6, r8, r9
 800bd24:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bd28:	ec59 8b17 	vmov	r8, r9, d7
 800bd2c:	e648      	b.n	800b9c0 <_strtod_l+0x88>
 800bd2e:	9807      	ldr	r0, [sp, #28]
 800bd30:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800bd34:	4281      	cmp	r1, r0
 800bd36:	db1e      	blt.n	800bd76 <_strtod_l+0x43e>
 800bd38:	4a5e      	ldr	r2, [pc, #376]	; (800beb4 <_strtod_l+0x57c>)
 800bd3a:	f1c3 030f 	rsb	r3, r3, #15
 800bd3e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800bd42:	ed91 7b00 	vldr	d7, [r1]
 800bd46:	ec49 8b16 	vmov	d6, r8, r9
 800bd4a:	1ac3      	subs	r3, r0, r3
 800bd4c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bd50:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bd54:	ed92 6b00 	vldr	d6, [r2]
 800bd58:	e7e4      	b.n	800bd24 <_strtod_l+0x3ec>
 800bd5a:	9907      	ldr	r1, [sp, #28]
 800bd5c:	3116      	adds	r1, #22
 800bd5e:	db0a      	blt.n	800bd76 <_strtod_l+0x43e>
 800bd60:	4b54      	ldr	r3, [pc, #336]	; (800beb4 <_strtod_l+0x57c>)
 800bd62:	1b7d      	subs	r5, r7, r5
 800bd64:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bd68:	ed95 7b00 	vldr	d7, [r5]
 800bd6c:	ec49 8b16 	vmov	d6, r8, r9
 800bd70:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bd74:	e7d8      	b.n	800bd28 <_strtod_l+0x3f0>
 800bd76:	9907      	ldr	r1, [sp, #28]
 800bd78:	1a9a      	subs	r2, r3, r2
 800bd7a:	440a      	add	r2, r1
 800bd7c:	2a00      	cmp	r2, #0
 800bd7e:	dd6f      	ble.n	800be60 <_strtod_l+0x528>
 800bd80:	f012 000f 	ands.w	r0, r2, #15
 800bd84:	d00a      	beq.n	800bd9c <_strtod_l+0x464>
 800bd86:	494b      	ldr	r1, [pc, #300]	; (800beb4 <_strtod_l+0x57c>)
 800bd88:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bd8c:	ed91 7b00 	vldr	d7, [r1]
 800bd90:	ec49 8b16 	vmov	d6, r8, r9
 800bd94:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bd98:	ec59 8b17 	vmov	r8, r9, d7
 800bd9c:	f032 020f 	bics.w	r2, r2, #15
 800bda0:	d04f      	beq.n	800be42 <_strtod_l+0x50a>
 800bda2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800bda6:	dd22      	ble.n	800bdee <_strtod_l+0x4b6>
 800bda8:	2500      	movs	r5, #0
 800bdaa:	462e      	mov	r6, r5
 800bdac:	9506      	str	r5, [sp, #24]
 800bdae:	462f      	mov	r7, r5
 800bdb0:	2322      	movs	r3, #34	; 0x22
 800bdb2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800bec0 <_strtod_l+0x588>
 800bdb6:	6023      	str	r3, [r4, #0]
 800bdb8:	f04f 0800 	mov.w	r8, #0
 800bdbc:	9b06      	ldr	r3, [sp, #24]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	f43f adfe 	beq.w	800b9c0 <_strtod_l+0x88>
 800bdc4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f001 fdbe 	bl	800d948 <_Bfree>
 800bdcc:	4639      	mov	r1, r7
 800bdce:	4620      	mov	r0, r4
 800bdd0:	f001 fdba 	bl	800d948 <_Bfree>
 800bdd4:	4631      	mov	r1, r6
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f001 fdb6 	bl	800d948 <_Bfree>
 800bddc:	9906      	ldr	r1, [sp, #24]
 800bdde:	4620      	mov	r0, r4
 800bde0:	f001 fdb2 	bl	800d948 <_Bfree>
 800bde4:	4629      	mov	r1, r5
 800bde6:	4620      	mov	r0, r4
 800bde8:	f001 fdae 	bl	800d948 <_Bfree>
 800bdec:	e5e8      	b.n	800b9c0 <_strtod_l+0x88>
 800bdee:	2000      	movs	r0, #0
 800bdf0:	ec49 8b17 	vmov	d7, r8, r9
 800bdf4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800beb8 <_strtod_l+0x580>
 800bdf8:	1112      	asrs	r2, r2, #4
 800bdfa:	4601      	mov	r1, r0
 800bdfc:	2a01      	cmp	r2, #1
 800bdfe:	dc23      	bgt.n	800be48 <_strtod_l+0x510>
 800be00:	b108      	cbz	r0, 800be06 <_strtod_l+0x4ce>
 800be02:	ec59 8b17 	vmov	r8, r9, d7
 800be06:	4a2c      	ldr	r2, [pc, #176]	; (800beb8 <_strtod_l+0x580>)
 800be08:	482c      	ldr	r0, [pc, #176]	; (800bebc <_strtod_l+0x584>)
 800be0a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800be0e:	ed92 7b00 	vldr	d7, [r2]
 800be12:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800be16:	ec49 8b16 	vmov	d6, r8, r9
 800be1a:	4a29      	ldr	r2, [pc, #164]	; (800bec0 <_strtod_l+0x588>)
 800be1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800be20:	ee17 1a90 	vmov	r1, s15
 800be24:	400a      	ands	r2, r1
 800be26:	4282      	cmp	r2, r0
 800be28:	ec59 8b17 	vmov	r8, r9, d7
 800be2c:	d8bc      	bhi.n	800bda8 <_strtod_l+0x470>
 800be2e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800be32:	4282      	cmp	r2, r0
 800be34:	bf86      	itte	hi
 800be36:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800bec4 <_strtod_l+0x58c>
 800be3a:	f04f 38ff 	movhi.w	r8, #4294967295
 800be3e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800be42:	2200      	movs	r2, #0
 800be44:	9204      	str	r2, [sp, #16]
 800be46:	e078      	b.n	800bf3a <_strtod_l+0x602>
 800be48:	07d6      	lsls	r6, r2, #31
 800be4a:	d504      	bpl.n	800be56 <_strtod_l+0x51e>
 800be4c:	ed9c 6b00 	vldr	d6, [ip]
 800be50:	2001      	movs	r0, #1
 800be52:	ee27 7b06 	vmul.f64	d7, d7, d6
 800be56:	3101      	adds	r1, #1
 800be58:	1052      	asrs	r2, r2, #1
 800be5a:	f10c 0c08 	add.w	ip, ip, #8
 800be5e:	e7cd      	b.n	800bdfc <_strtod_l+0x4c4>
 800be60:	d0ef      	beq.n	800be42 <_strtod_l+0x50a>
 800be62:	4252      	negs	r2, r2
 800be64:	f012 000f 	ands.w	r0, r2, #15
 800be68:	d00a      	beq.n	800be80 <_strtod_l+0x548>
 800be6a:	4912      	ldr	r1, [pc, #72]	; (800beb4 <_strtod_l+0x57c>)
 800be6c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800be70:	ed91 7b00 	vldr	d7, [r1]
 800be74:	ec49 8b16 	vmov	d6, r8, r9
 800be78:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800be7c:	ec59 8b17 	vmov	r8, r9, d7
 800be80:	1112      	asrs	r2, r2, #4
 800be82:	d0de      	beq.n	800be42 <_strtod_l+0x50a>
 800be84:	2a1f      	cmp	r2, #31
 800be86:	dd1f      	ble.n	800bec8 <_strtod_l+0x590>
 800be88:	2500      	movs	r5, #0
 800be8a:	462e      	mov	r6, r5
 800be8c:	9506      	str	r5, [sp, #24]
 800be8e:	462f      	mov	r7, r5
 800be90:	2322      	movs	r3, #34	; 0x22
 800be92:	f04f 0800 	mov.w	r8, #0
 800be96:	f04f 0900 	mov.w	r9, #0
 800be9a:	6023      	str	r3, [r4, #0]
 800be9c:	e78e      	b.n	800bdbc <_strtod_l+0x484>
 800be9e:	bf00      	nop
 800bea0:	0800f3e9 	.word	0x0800f3e9
 800bea4:	0800f42c 	.word	0x0800f42c
 800bea8:	0800f3e1 	.word	0x0800f3e1
 800beac:	0800f56c 	.word	0x0800f56c
 800beb0:	0800f818 	.word	0x0800f818
 800beb4:	0800f6f8 	.word	0x0800f6f8
 800beb8:	0800f6d0 	.word	0x0800f6d0
 800bebc:	7ca00000 	.word	0x7ca00000
 800bec0:	7ff00000 	.word	0x7ff00000
 800bec4:	7fefffff 	.word	0x7fefffff
 800bec8:	f012 0110 	ands.w	r1, r2, #16
 800becc:	bf18      	it	ne
 800bece:	216a      	movne	r1, #106	; 0x6a
 800bed0:	9104      	str	r1, [sp, #16]
 800bed2:	ec49 8b17 	vmov	d7, r8, r9
 800bed6:	49be      	ldr	r1, [pc, #760]	; (800c1d0 <_strtod_l+0x898>)
 800bed8:	2000      	movs	r0, #0
 800beda:	07d6      	lsls	r6, r2, #31
 800bedc:	d504      	bpl.n	800bee8 <_strtod_l+0x5b0>
 800bede:	ed91 6b00 	vldr	d6, [r1]
 800bee2:	2001      	movs	r0, #1
 800bee4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bee8:	1052      	asrs	r2, r2, #1
 800beea:	f101 0108 	add.w	r1, r1, #8
 800beee:	d1f4      	bne.n	800beda <_strtod_l+0x5a2>
 800bef0:	b108      	cbz	r0, 800bef6 <_strtod_l+0x5be>
 800bef2:	ec59 8b17 	vmov	r8, r9, d7
 800bef6:	9a04      	ldr	r2, [sp, #16]
 800bef8:	b1c2      	cbz	r2, 800bf2c <_strtod_l+0x5f4>
 800befa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800befe:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800bf02:	2a00      	cmp	r2, #0
 800bf04:	4648      	mov	r0, r9
 800bf06:	dd11      	ble.n	800bf2c <_strtod_l+0x5f4>
 800bf08:	2a1f      	cmp	r2, #31
 800bf0a:	f340 812e 	ble.w	800c16a <_strtod_l+0x832>
 800bf0e:	2a34      	cmp	r2, #52	; 0x34
 800bf10:	bfde      	ittt	le
 800bf12:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800bf16:	f04f 32ff 	movle.w	r2, #4294967295
 800bf1a:	fa02 f101 	lslle.w	r1, r2, r1
 800bf1e:	f04f 0800 	mov.w	r8, #0
 800bf22:	bfcc      	ite	gt
 800bf24:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bf28:	ea01 0900 	andle.w	r9, r1, r0
 800bf2c:	ec49 8b17 	vmov	d7, r8, r9
 800bf30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bf34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf38:	d0a6      	beq.n	800be88 <_strtod_l+0x550>
 800bf3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf3c:	9200      	str	r2, [sp, #0]
 800bf3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bf40:	9a06      	ldr	r2, [sp, #24]
 800bf42:	4620      	mov	r0, r4
 800bf44:	f001 fd68 	bl	800da18 <__s2b>
 800bf48:	9006      	str	r0, [sp, #24]
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	f43f af2c 	beq.w	800bda8 <_strtod_l+0x470>
 800bf50:	9b07      	ldr	r3, [sp, #28]
 800bf52:	1b7d      	subs	r5, r7, r5
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	bfb4      	ite	lt
 800bf58:	462b      	movlt	r3, r5
 800bf5a:	2300      	movge	r3, #0
 800bf5c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf5e:	9b07      	ldr	r3, [sp, #28]
 800bf60:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800c1b0 <_strtod_l+0x878>
 800bf64:	ed9f ab94 	vldr	d10, [pc, #592]	; 800c1b8 <_strtod_l+0x880>
 800bf68:	ed9f bb95 	vldr	d11, [pc, #596]	; 800c1c0 <_strtod_l+0x888>
 800bf6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bf70:	2500      	movs	r5, #0
 800bf72:	930c      	str	r3, [sp, #48]	; 0x30
 800bf74:	462e      	mov	r6, r5
 800bf76:	9b06      	ldr	r3, [sp, #24]
 800bf78:	4620      	mov	r0, r4
 800bf7a:	6859      	ldr	r1, [r3, #4]
 800bf7c:	f001 fca4 	bl	800d8c8 <_Balloc>
 800bf80:	4607      	mov	r7, r0
 800bf82:	2800      	cmp	r0, #0
 800bf84:	f43f af14 	beq.w	800bdb0 <_strtod_l+0x478>
 800bf88:	9b06      	ldr	r3, [sp, #24]
 800bf8a:	691a      	ldr	r2, [r3, #16]
 800bf8c:	3202      	adds	r2, #2
 800bf8e:	f103 010c 	add.w	r1, r3, #12
 800bf92:	0092      	lsls	r2, r2, #2
 800bf94:	300c      	adds	r0, #12
 800bf96:	f7fe fe2f 	bl	800abf8 <memcpy>
 800bf9a:	ec49 8b10 	vmov	d0, r8, r9
 800bf9e:	aa14      	add	r2, sp, #80	; 0x50
 800bfa0:	a913      	add	r1, sp, #76	; 0x4c
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f002 f87e 	bl	800e0a4 <__d2b>
 800bfa8:	ec49 8b18 	vmov	d8, r8, r9
 800bfac:	9012      	str	r0, [sp, #72]	; 0x48
 800bfae:	2800      	cmp	r0, #0
 800bfb0:	f43f aefe 	beq.w	800bdb0 <_strtod_l+0x478>
 800bfb4:	2101      	movs	r1, #1
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f001 fdc8 	bl	800db4c <__i2b>
 800bfbc:	4606      	mov	r6, r0
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	f43f aef6 	beq.w	800bdb0 <_strtod_l+0x478>
 800bfc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bfc6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	bfab      	itete	ge
 800bfcc:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800bfce:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800bfd0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800bfd4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800bfd8:	bfac      	ite	ge
 800bfda:	eb03 0b02 	addge.w	fp, r3, r2
 800bfde:	eba2 0a03 	sublt.w	sl, r2, r3
 800bfe2:	9a04      	ldr	r2, [sp, #16]
 800bfe4:	1a9b      	subs	r3, r3, r2
 800bfe6:	440b      	add	r3, r1
 800bfe8:	4a7a      	ldr	r2, [pc, #488]	; (800c1d4 <_strtod_l+0x89c>)
 800bfea:	3b01      	subs	r3, #1
 800bfec:	4293      	cmp	r3, r2
 800bfee:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800bff2:	f280 80cd 	bge.w	800c190 <_strtod_l+0x858>
 800bff6:	1ad2      	subs	r2, r2, r3
 800bff8:	2a1f      	cmp	r2, #31
 800bffa:	eba1 0102 	sub.w	r1, r1, r2
 800bffe:	f04f 0001 	mov.w	r0, #1
 800c002:	f300 80b9 	bgt.w	800c178 <_strtod_l+0x840>
 800c006:	fa00 f302 	lsl.w	r3, r0, r2
 800c00a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c00c:	2300      	movs	r3, #0
 800c00e:	930a      	str	r3, [sp, #40]	; 0x28
 800c010:	eb0b 0301 	add.w	r3, fp, r1
 800c014:	9a04      	ldr	r2, [sp, #16]
 800c016:	459b      	cmp	fp, r3
 800c018:	448a      	add	sl, r1
 800c01a:	4492      	add	sl, r2
 800c01c:	465a      	mov	r2, fp
 800c01e:	bfa8      	it	ge
 800c020:	461a      	movge	r2, r3
 800c022:	4552      	cmp	r2, sl
 800c024:	bfa8      	it	ge
 800c026:	4652      	movge	r2, sl
 800c028:	2a00      	cmp	r2, #0
 800c02a:	bfc2      	ittt	gt
 800c02c:	1a9b      	subgt	r3, r3, r2
 800c02e:	ebaa 0a02 	subgt.w	sl, sl, r2
 800c032:	ebab 0b02 	subgt.w	fp, fp, r2
 800c036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c038:	2a00      	cmp	r2, #0
 800c03a:	dd18      	ble.n	800c06e <_strtod_l+0x736>
 800c03c:	4631      	mov	r1, r6
 800c03e:	4620      	mov	r0, r4
 800c040:	930f      	str	r3, [sp, #60]	; 0x3c
 800c042:	f001 fe43 	bl	800dccc <__pow5mult>
 800c046:	4606      	mov	r6, r0
 800c048:	2800      	cmp	r0, #0
 800c04a:	f43f aeb1 	beq.w	800bdb0 <_strtod_l+0x478>
 800c04e:	4601      	mov	r1, r0
 800c050:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c052:	4620      	mov	r0, r4
 800c054:	f001 fd90 	bl	800db78 <__multiply>
 800c058:	900e      	str	r0, [sp, #56]	; 0x38
 800c05a:	2800      	cmp	r0, #0
 800c05c:	f43f aea8 	beq.w	800bdb0 <_strtod_l+0x478>
 800c060:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c062:	4620      	mov	r0, r4
 800c064:	f001 fc70 	bl	800d948 <_Bfree>
 800c068:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c06a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c06c:	9212      	str	r2, [sp, #72]	; 0x48
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f300 8093 	bgt.w	800c19a <_strtod_l+0x862>
 800c074:	9b07      	ldr	r3, [sp, #28]
 800c076:	2b00      	cmp	r3, #0
 800c078:	dd08      	ble.n	800c08c <_strtod_l+0x754>
 800c07a:	4639      	mov	r1, r7
 800c07c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c07e:	4620      	mov	r0, r4
 800c080:	f001 fe24 	bl	800dccc <__pow5mult>
 800c084:	4607      	mov	r7, r0
 800c086:	2800      	cmp	r0, #0
 800c088:	f43f ae92 	beq.w	800bdb0 <_strtod_l+0x478>
 800c08c:	f1ba 0f00 	cmp.w	sl, #0
 800c090:	dd08      	ble.n	800c0a4 <_strtod_l+0x76c>
 800c092:	4639      	mov	r1, r7
 800c094:	4652      	mov	r2, sl
 800c096:	4620      	mov	r0, r4
 800c098:	f001 fe72 	bl	800dd80 <__lshift>
 800c09c:	4607      	mov	r7, r0
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	f43f ae86 	beq.w	800bdb0 <_strtod_l+0x478>
 800c0a4:	f1bb 0f00 	cmp.w	fp, #0
 800c0a8:	dd08      	ble.n	800c0bc <_strtod_l+0x784>
 800c0aa:	4631      	mov	r1, r6
 800c0ac:	465a      	mov	r2, fp
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f001 fe66 	bl	800dd80 <__lshift>
 800c0b4:	4606      	mov	r6, r0
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	f43f ae7a 	beq.w	800bdb0 <_strtod_l+0x478>
 800c0bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c0be:	463a      	mov	r2, r7
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f001 fee9 	bl	800de98 <__mdiff>
 800c0c6:	4605      	mov	r5, r0
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	f43f ae71 	beq.w	800bdb0 <_strtod_l+0x478>
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800c0d4:	60c3      	str	r3, [r0, #12]
 800c0d6:	4631      	mov	r1, r6
 800c0d8:	f001 fec2 	bl	800de60 <__mcmp>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	da7d      	bge.n	800c1dc <_strtod_l+0x8a4>
 800c0e0:	ea5a 0308 	orrs.w	r3, sl, r8
 800c0e4:	f040 80a3 	bne.w	800c22e <_strtod_l+0x8f6>
 800c0e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	f040 809e 	bne.w	800c22e <_strtod_l+0x8f6>
 800c0f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c0f6:	0d1b      	lsrs	r3, r3, #20
 800c0f8:	051b      	lsls	r3, r3, #20
 800c0fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c0fe:	f240 8096 	bls.w	800c22e <_strtod_l+0x8f6>
 800c102:	696b      	ldr	r3, [r5, #20]
 800c104:	b91b      	cbnz	r3, 800c10e <_strtod_l+0x7d6>
 800c106:	692b      	ldr	r3, [r5, #16]
 800c108:	2b01      	cmp	r3, #1
 800c10a:	f340 8090 	ble.w	800c22e <_strtod_l+0x8f6>
 800c10e:	4629      	mov	r1, r5
 800c110:	2201      	movs	r2, #1
 800c112:	4620      	mov	r0, r4
 800c114:	f001 fe34 	bl	800dd80 <__lshift>
 800c118:	4631      	mov	r1, r6
 800c11a:	4605      	mov	r5, r0
 800c11c:	f001 fea0 	bl	800de60 <__mcmp>
 800c120:	2800      	cmp	r0, #0
 800c122:	f340 8084 	ble.w	800c22e <_strtod_l+0x8f6>
 800c126:	9904      	ldr	r1, [sp, #16]
 800c128:	4a2b      	ldr	r2, [pc, #172]	; (800c1d8 <_strtod_l+0x8a0>)
 800c12a:	464b      	mov	r3, r9
 800c12c:	2900      	cmp	r1, #0
 800c12e:	f000 809d 	beq.w	800c26c <_strtod_l+0x934>
 800c132:	ea02 0109 	and.w	r1, r2, r9
 800c136:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c13a:	f300 8097 	bgt.w	800c26c <_strtod_l+0x934>
 800c13e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c142:	f77f aea5 	ble.w	800be90 <_strtod_l+0x558>
 800c146:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c1c8 <_strtod_l+0x890>
 800c14a:	ec49 8b16 	vmov	d6, r8, r9
 800c14e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c152:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c156:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800c15a:	4313      	orrs	r3, r2
 800c15c:	bf08      	it	eq
 800c15e:	2322      	moveq	r3, #34	; 0x22
 800c160:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c164:	bf08      	it	eq
 800c166:	6023      	streq	r3, [r4, #0]
 800c168:	e62c      	b.n	800bdc4 <_strtod_l+0x48c>
 800c16a:	f04f 31ff 	mov.w	r1, #4294967295
 800c16e:	fa01 f202 	lsl.w	r2, r1, r2
 800c172:	ea02 0808 	and.w	r8, r2, r8
 800c176:	e6d9      	b.n	800bf2c <_strtod_l+0x5f4>
 800c178:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800c17c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c180:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800c184:	33e2      	adds	r3, #226	; 0xe2
 800c186:	fa00 f303 	lsl.w	r3, r0, r3
 800c18a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800c18e:	e73f      	b.n	800c010 <_strtod_l+0x6d8>
 800c190:	2200      	movs	r2, #0
 800c192:	2301      	movs	r3, #1
 800c194:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c198:	e73a      	b.n	800c010 <_strtod_l+0x6d8>
 800c19a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c19c:	461a      	mov	r2, r3
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f001 fdee 	bl	800dd80 <__lshift>
 800c1a4:	9012      	str	r0, [sp, #72]	; 0x48
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	f47f af64 	bne.w	800c074 <_strtod_l+0x73c>
 800c1ac:	e600      	b.n	800bdb0 <_strtod_l+0x478>
 800c1ae:	bf00      	nop
 800c1b0:	94a03595 	.word	0x94a03595
 800c1b4:	3fcfffff 	.word	0x3fcfffff
 800c1b8:	94a03595 	.word	0x94a03595
 800c1bc:	3fdfffff 	.word	0x3fdfffff
 800c1c0:	35afe535 	.word	0x35afe535
 800c1c4:	3fe00000 	.word	0x3fe00000
 800c1c8:	00000000 	.word	0x00000000
 800c1cc:	39500000 	.word	0x39500000
 800c1d0:	0800f440 	.word	0x0800f440
 800c1d4:	fffffc02 	.word	0xfffffc02
 800c1d8:	7ff00000 	.word	0x7ff00000
 800c1dc:	46cb      	mov	fp, r9
 800c1de:	d15f      	bne.n	800c2a0 <_strtod_l+0x968>
 800c1e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c1e4:	f1ba 0f00 	cmp.w	sl, #0
 800c1e8:	d02a      	beq.n	800c240 <_strtod_l+0x908>
 800c1ea:	4aa7      	ldr	r2, [pc, #668]	; (800c488 <_strtod_l+0xb50>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d12b      	bne.n	800c248 <_strtod_l+0x910>
 800c1f0:	9b04      	ldr	r3, [sp, #16]
 800c1f2:	4642      	mov	r2, r8
 800c1f4:	b1fb      	cbz	r3, 800c236 <_strtod_l+0x8fe>
 800c1f6:	4ba5      	ldr	r3, [pc, #660]	; (800c48c <_strtod_l+0xb54>)
 800c1f8:	ea09 0303 	and.w	r3, r9, r3
 800c1fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c200:	f04f 31ff 	mov.w	r1, #4294967295
 800c204:	d81a      	bhi.n	800c23c <_strtod_l+0x904>
 800c206:	0d1b      	lsrs	r3, r3, #20
 800c208:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c20c:	fa01 f303 	lsl.w	r3, r1, r3
 800c210:	429a      	cmp	r2, r3
 800c212:	d119      	bne.n	800c248 <_strtod_l+0x910>
 800c214:	4b9e      	ldr	r3, [pc, #632]	; (800c490 <_strtod_l+0xb58>)
 800c216:	459b      	cmp	fp, r3
 800c218:	d102      	bne.n	800c220 <_strtod_l+0x8e8>
 800c21a:	3201      	adds	r2, #1
 800c21c:	f43f adc8 	beq.w	800bdb0 <_strtod_l+0x478>
 800c220:	4b9a      	ldr	r3, [pc, #616]	; (800c48c <_strtod_l+0xb54>)
 800c222:	ea0b 0303 	and.w	r3, fp, r3
 800c226:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c22a:	f04f 0800 	mov.w	r8, #0
 800c22e:	9b04      	ldr	r3, [sp, #16]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d188      	bne.n	800c146 <_strtod_l+0x80e>
 800c234:	e5c6      	b.n	800bdc4 <_strtod_l+0x48c>
 800c236:	f04f 33ff 	mov.w	r3, #4294967295
 800c23a:	e7e9      	b.n	800c210 <_strtod_l+0x8d8>
 800c23c:	460b      	mov	r3, r1
 800c23e:	e7e7      	b.n	800c210 <_strtod_l+0x8d8>
 800c240:	ea53 0308 	orrs.w	r3, r3, r8
 800c244:	f43f af6f 	beq.w	800c126 <_strtod_l+0x7ee>
 800c248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c24a:	b1cb      	cbz	r3, 800c280 <_strtod_l+0x948>
 800c24c:	ea13 0f0b 	tst.w	r3, fp
 800c250:	d0ed      	beq.n	800c22e <_strtod_l+0x8f6>
 800c252:	9a04      	ldr	r2, [sp, #16]
 800c254:	4640      	mov	r0, r8
 800c256:	4649      	mov	r1, r9
 800c258:	f1ba 0f00 	cmp.w	sl, #0
 800c25c:	d014      	beq.n	800c288 <_strtod_l+0x950>
 800c25e:	f7ff fb51 	bl	800b904 <sulp>
 800c262:	ee38 7b00 	vadd.f64	d7, d8, d0
 800c266:	ec59 8b17 	vmov	r8, r9, d7
 800c26a:	e7e0      	b.n	800c22e <_strtod_l+0x8f6>
 800c26c:	4013      	ands	r3, r2
 800c26e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c272:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c276:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c27a:	f04f 38ff 	mov.w	r8, #4294967295
 800c27e:	e7d6      	b.n	800c22e <_strtod_l+0x8f6>
 800c280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c282:	ea13 0f08 	tst.w	r3, r8
 800c286:	e7e3      	b.n	800c250 <_strtod_l+0x918>
 800c288:	f7ff fb3c 	bl	800b904 <sulp>
 800c28c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800c290:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c298:	ec59 8b10 	vmov	r8, r9, d0
 800c29c:	d1c7      	bne.n	800c22e <_strtod_l+0x8f6>
 800c29e:	e5f7      	b.n	800be90 <_strtod_l+0x558>
 800c2a0:	4631      	mov	r1, r6
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	f001 ff5a 	bl	800e15c <__ratio>
 800c2a8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800c2ac:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2b4:	d865      	bhi.n	800c382 <_strtod_l+0xa4a>
 800c2b6:	f1ba 0f00 	cmp.w	sl, #0
 800c2ba:	d042      	beq.n	800c342 <_strtod_l+0xa0a>
 800c2bc:	4b75      	ldr	r3, [pc, #468]	; (800c494 <_strtod_l+0xb5c>)
 800c2be:	2200      	movs	r2, #0
 800c2c0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800c2c4:	4871      	ldr	r0, [pc, #452]	; (800c48c <_strtod_l+0xb54>)
 800c2c6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800c4a0 <_strtod_l+0xb68>
 800c2ca:	ea0b 0100 	and.w	r1, fp, r0
 800c2ce:	4561      	cmp	r1, ip
 800c2d0:	f040 808e 	bne.w	800c3f0 <_strtod_l+0xab8>
 800c2d4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800c2d8:	ec49 8b10 	vmov	d0, r8, r9
 800c2dc:	ec43 2b1c 	vmov	d12, r2, r3
 800c2e0:	910a      	str	r1, [sp, #40]	; 0x28
 800c2e2:	f001 fe63 	bl	800dfac <__ulp>
 800c2e6:	ec49 8b1e 	vmov	d14, r8, r9
 800c2ea:	4868      	ldr	r0, [pc, #416]	; (800c48c <_strtod_l+0xb54>)
 800c2ec:	eeac eb00 	vfma.f64	d14, d12, d0
 800c2f0:	ee1e 3a90 	vmov	r3, s29
 800c2f4:	4a68      	ldr	r2, [pc, #416]	; (800c498 <_strtod_l+0xb60>)
 800c2f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c2f8:	4018      	ands	r0, r3
 800c2fa:	4290      	cmp	r0, r2
 800c2fc:	ec59 8b1e 	vmov	r8, r9, d14
 800c300:	d94e      	bls.n	800c3a0 <_strtod_l+0xa68>
 800c302:	ee18 3a90 	vmov	r3, s17
 800c306:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d104      	bne.n	800c318 <_strtod_l+0x9e0>
 800c30e:	ee18 3a10 	vmov	r3, s16
 800c312:	3301      	adds	r3, #1
 800c314:	f43f ad4c 	beq.w	800bdb0 <_strtod_l+0x478>
 800c318:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800c490 <_strtod_l+0xb58>
 800c31c:	f04f 38ff 	mov.w	r8, #4294967295
 800c320:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c322:	4620      	mov	r0, r4
 800c324:	f001 fb10 	bl	800d948 <_Bfree>
 800c328:	4639      	mov	r1, r7
 800c32a:	4620      	mov	r0, r4
 800c32c:	f001 fb0c 	bl	800d948 <_Bfree>
 800c330:	4631      	mov	r1, r6
 800c332:	4620      	mov	r0, r4
 800c334:	f001 fb08 	bl	800d948 <_Bfree>
 800c338:	4629      	mov	r1, r5
 800c33a:	4620      	mov	r0, r4
 800c33c:	f001 fb04 	bl	800d948 <_Bfree>
 800c340:	e619      	b.n	800bf76 <_strtod_l+0x63e>
 800c342:	f1b8 0f00 	cmp.w	r8, #0
 800c346:	d112      	bne.n	800c36e <_strtod_l+0xa36>
 800c348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c34c:	b9b3      	cbnz	r3, 800c37c <_strtod_l+0xa44>
 800c34e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c352:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c35a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c35e:	bf58      	it	pl
 800c360:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800c364:	eeb1 7b4d 	vneg.f64	d7, d13
 800c368:	ec53 2b17 	vmov	r2, r3, d7
 800c36c:	e7aa      	b.n	800c2c4 <_strtod_l+0x98c>
 800c36e:	f1b8 0f01 	cmp.w	r8, #1
 800c372:	d103      	bne.n	800c37c <_strtod_l+0xa44>
 800c374:	f1b9 0f00 	cmp.w	r9, #0
 800c378:	f43f ad8a 	beq.w	800be90 <_strtod_l+0x558>
 800c37c:	4b47      	ldr	r3, [pc, #284]	; (800c49c <_strtod_l+0xb64>)
 800c37e:	2200      	movs	r2, #0
 800c380:	e79e      	b.n	800c2c0 <_strtod_l+0x988>
 800c382:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c386:	ee20 db0d 	vmul.f64	d13, d0, d13
 800c38a:	f1ba 0f00 	cmp.w	sl, #0
 800c38e:	d104      	bne.n	800c39a <_strtod_l+0xa62>
 800c390:	eeb1 7b4d 	vneg.f64	d7, d13
 800c394:	ec53 2b17 	vmov	r2, r3, d7
 800c398:	e794      	b.n	800c2c4 <_strtod_l+0x98c>
 800c39a:	eeb0 7b4d 	vmov.f64	d7, d13
 800c39e:	e7f9      	b.n	800c394 <_strtod_l+0xa5c>
 800c3a0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c3a4:	9b04      	ldr	r3, [sp, #16]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d1ba      	bne.n	800c320 <_strtod_l+0x9e8>
 800c3aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c3ae:	0d1b      	lsrs	r3, r3, #20
 800c3b0:	051b      	lsls	r3, r3, #20
 800c3b2:	4299      	cmp	r1, r3
 800c3b4:	d1b4      	bne.n	800c320 <_strtod_l+0x9e8>
 800c3b6:	ec51 0b1d 	vmov	r0, r1, d13
 800c3ba:	f7f4 f96d 	bl	8000698 <__aeabi_d2lz>
 800c3be:	f7f4 f925 	bl	800060c <__aeabi_l2d>
 800c3c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3c6:	ec41 0b17 	vmov	d7, r0, r1
 800c3ca:	ea43 0308 	orr.w	r3, r3, r8
 800c3ce:	ea53 030a 	orrs.w	r3, r3, sl
 800c3d2:	ee3d db47 	vsub.f64	d13, d13, d7
 800c3d6:	d03c      	beq.n	800c452 <_strtod_l+0xb1a>
 800c3d8:	eeb4 dbca 	vcmpe.f64	d13, d10
 800c3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3e0:	f53f acf0 	bmi.w	800bdc4 <_strtod_l+0x48c>
 800c3e4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800c3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ec:	dd98      	ble.n	800c320 <_strtod_l+0x9e8>
 800c3ee:	e4e9      	b.n	800bdc4 <_strtod_l+0x48c>
 800c3f0:	9804      	ldr	r0, [sp, #16]
 800c3f2:	b1f0      	cbz	r0, 800c432 <_strtod_l+0xafa>
 800c3f4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800c3f8:	d81b      	bhi.n	800c432 <_strtod_l+0xafa>
 800c3fa:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800c480 <_strtod_l+0xb48>
 800c3fe:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800c402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c406:	d811      	bhi.n	800c42c <_strtod_l+0xaf4>
 800c408:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800c40c:	ee1d 3a10 	vmov	r3, s26
 800c410:	2b01      	cmp	r3, #1
 800c412:	bf38      	it	cc
 800c414:	2301      	movcc	r3, #1
 800c416:	ee0d 3a10 	vmov	s26, r3
 800c41a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800c41e:	f1ba 0f00 	cmp.w	sl, #0
 800c422:	d113      	bne.n	800c44c <_strtod_l+0xb14>
 800c424:	eeb1 7b4d 	vneg.f64	d7, d13
 800c428:	ec53 2b17 	vmov	r2, r3, d7
 800c42c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800c430:	1a43      	subs	r3, r0, r1
 800c432:	eeb0 0b48 	vmov.f64	d0, d8
 800c436:	ec43 2b1c 	vmov	d12, r2, r3
 800c43a:	910a      	str	r1, [sp, #40]	; 0x28
 800c43c:	f001 fdb6 	bl	800dfac <__ulp>
 800c440:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c442:	eeac 8b00 	vfma.f64	d8, d12, d0
 800c446:	ec59 8b18 	vmov	r8, r9, d8
 800c44a:	e7ab      	b.n	800c3a4 <_strtod_l+0xa6c>
 800c44c:	eeb0 7b4d 	vmov.f64	d7, d13
 800c450:	e7ea      	b.n	800c428 <_strtod_l+0xaf0>
 800c452:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800c456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c45a:	f57f af61 	bpl.w	800c320 <_strtod_l+0x9e8>
 800c45e:	e4b1      	b.n	800bdc4 <_strtod_l+0x48c>
 800c460:	2300      	movs	r3, #0
 800c462:	9308      	str	r3, [sp, #32]
 800c464:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c466:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c468:	6013      	str	r3, [r2, #0]
 800c46a:	f7ff baad 	b.w	800b9c8 <_strtod_l+0x90>
 800c46e:	2a65      	cmp	r2, #101	; 0x65
 800c470:	f43f ab9f 	beq.w	800bbb2 <_strtod_l+0x27a>
 800c474:	2a45      	cmp	r2, #69	; 0x45
 800c476:	f43f ab9c 	beq.w	800bbb2 <_strtod_l+0x27a>
 800c47a:	2101      	movs	r1, #1
 800c47c:	f7ff bbd4 	b.w	800bc28 <_strtod_l+0x2f0>
 800c480:	ffc00000 	.word	0xffc00000
 800c484:	41dfffff 	.word	0x41dfffff
 800c488:	000fffff 	.word	0x000fffff
 800c48c:	7ff00000 	.word	0x7ff00000
 800c490:	7fefffff 	.word	0x7fefffff
 800c494:	3ff00000 	.word	0x3ff00000
 800c498:	7c9fffff 	.word	0x7c9fffff
 800c49c:	bff00000 	.word	0xbff00000
 800c4a0:	7fe00000 	.word	0x7fe00000

0800c4a4 <_strtod_r>:
 800c4a4:	4b01      	ldr	r3, [pc, #4]	; (800c4ac <_strtod_r+0x8>)
 800c4a6:	f7ff ba47 	b.w	800b938 <_strtod_l>
 800c4aa:	bf00      	nop
 800c4ac:	2000007c 	.word	0x2000007c

0800c4b0 <_strtol_l.constprop.0>:
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4b6:	d001      	beq.n	800c4bc <_strtol_l.constprop.0+0xc>
 800c4b8:	2b24      	cmp	r3, #36	; 0x24
 800c4ba:	d906      	bls.n	800c4ca <_strtol_l.constprop.0+0x1a>
 800c4bc:	f7fe fb72 	bl	800aba4 <__errno>
 800c4c0:	2316      	movs	r3, #22
 800c4c2:	6003      	str	r3, [r0, #0]
 800c4c4:	2000      	movs	r0, #0
 800c4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c5b0 <_strtol_l.constprop.0+0x100>
 800c4ce:	460d      	mov	r5, r1
 800c4d0:	462e      	mov	r6, r5
 800c4d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c4da:	f017 0708 	ands.w	r7, r7, #8
 800c4de:	d1f7      	bne.n	800c4d0 <_strtol_l.constprop.0+0x20>
 800c4e0:	2c2d      	cmp	r4, #45	; 0x2d
 800c4e2:	d132      	bne.n	800c54a <_strtol_l.constprop.0+0x9a>
 800c4e4:	782c      	ldrb	r4, [r5, #0]
 800c4e6:	2701      	movs	r7, #1
 800c4e8:	1cb5      	adds	r5, r6, #2
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d05b      	beq.n	800c5a6 <_strtol_l.constprop.0+0xf6>
 800c4ee:	2b10      	cmp	r3, #16
 800c4f0:	d109      	bne.n	800c506 <_strtol_l.constprop.0+0x56>
 800c4f2:	2c30      	cmp	r4, #48	; 0x30
 800c4f4:	d107      	bne.n	800c506 <_strtol_l.constprop.0+0x56>
 800c4f6:	782c      	ldrb	r4, [r5, #0]
 800c4f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c4fc:	2c58      	cmp	r4, #88	; 0x58
 800c4fe:	d14d      	bne.n	800c59c <_strtol_l.constprop.0+0xec>
 800c500:	786c      	ldrb	r4, [r5, #1]
 800c502:	2310      	movs	r3, #16
 800c504:	3502      	adds	r5, #2
 800c506:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c50a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c50e:	f04f 0c00 	mov.w	ip, #0
 800c512:	fbb8 f9f3 	udiv	r9, r8, r3
 800c516:	4666      	mov	r6, ip
 800c518:	fb03 8a19 	mls	sl, r3, r9, r8
 800c51c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c520:	f1be 0f09 	cmp.w	lr, #9
 800c524:	d816      	bhi.n	800c554 <_strtol_l.constprop.0+0xa4>
 800c526:	4674      	mov	r4, lr
 800c528:	42a3      	cmp	r3, r4
 800c52a:	dd24      	ble.n	800c576 <_strtol_l.constprop.0+0xc6>
 800c52c:	f1bc 0f00 	cmp.w	ip, #0
 800c530:	db1e      	blt.n	800c570 <_strtol_l.constprop.0+0xc0>
 800c532:	45b1      	cmp	r9, r6
 800c534:	d31c      	bcc.n	800c570 <_strtol_l.constprop.0+0xc0>
 800c536:	d101      	bne.n	800c53c <_strtol_l.constprop.0+0x8c>
 800c538:	45a2      	cmp	sl, r4
 800c53a:	db19      	blt.n	800c570 <_strtol_l.constprop.0+0xc0>
 800c53c:	fb06 4603 	mla	r6, r6, r3, r4
 800c540:	f04f 0c01 	mov.w	ip, #1
 800c544:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c548:	e7e8      	b.n	800c51c <_strtol_l.constprop.0+0x6c>
 800c54a:	2c2b      	cmp	r4, #43	; 0x2b
 800c54c:	bf04      	itt	eq
 800c54e:	782c      	ldrbeq	r4, [r5, #0]
 800c550:	1cb5      	addeq	r5, r6, #2
 800c552:	e7ca      	b.n	800c4ea <_strtol_l.constprop.0+0x3a>
 800c554:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c558:	f1be 0f19 	cmp.w	lr, #25
 800c55c:	d801      	bhi.n	800c562 <_strtol_l.constprop.0+0xb2>
 800c55e:	3c37      	subs	r4, #55	; 0x37
 800c560:	e7e2      	b.n	800c528 <_strtol_l.constprop.0+0x78>
 800c562:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c566:	f1be 0f19 	cmp.w	lr, #25
 800c56a:	d804      	bhi.n	800c576 <_strtol_l.constprop.0+0xc6>
 800c56c:	3c57      	subs	r4, #87	; 0x57
 800c56e:	e7db      	b.n	800c528 <_strtol_l.constprop.0+0x78>
 800c570:	f04f 3cff 	mov.w	ip, #4294967295
 800c574:	e7e6      	b.n	800c544 <_strtol_l.constprop.0+0x94>
 800c576:	f1bc 0f00 	cmp.w	ip, #0
 800c57a:	da05      	bge.n	800c588 <_strtol_l.constprop.0+0xd8>
 800c57c:	2322      	movs	r3, #34	; 0x22
 800c57e:	6003      	str	r3, [r0, #0]
 800c580:	4646      	mov	r6, r8
 800c582:	b942      	cbnz	r2, 800c596 <_strtol_l.constprop.0+0xe6>
 800c584:	4630      	mov	r0, r6
 800c586:	e79e      	b.n	800c4c6 <_strtol_l.constprop.0+0x16>
 800c588:	b107      	cbz	r7, 800c58c <_strtol_l.constprop.0+0xdc>
 800c58a:	4276      	negs	r6, r6
 800c58c:	2a00      	cmp	r2, #0
 800c58e:	d0f9      	beq.n	800c584 <_strtol_l.constprop.0+0xd4>
 800c590:	f1bc 0f00 	cmp.w	ip, #0
 800c594:	d000      	beq.n	800c598 <_strtol_l.constprop.0+0xe8>
 800c596:	1e69      	subs	r1, r5, #1
 800c598:	6011      	str	r1, [r2, #0]
 800c59a:	e7f3      	b.n	800c584 <_strtol_l.constprop.0+0xd4>
 800c59c:	2430      	movs	r4, #48	; 0x30
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d1b1      	bne.n	800c506 <_strtol_l.constprop.0+0x56>
 800c5a2:	2308      	movs	r3, #8
 800c5a4:	e7af      	b.n	800c506 <_strtol_l.constprop.0+0x56>
 800c5a6:	2c30      	cmp	r4, #48	; 0x30
 800c5a8:	d0a5      	beq.n	800c4f6 <_strtol_l.constprop.0+0x46>
 800c5aa:	230a      	movs	r3, #10
 800c5ac:	e7ab      	b.n	800c506 <_strtol_l.constprop.0+0x56>
 800c5ae:	bf00      	nop
 800c5b0:	0800f469 	.word	0x0800f469

0800c5b4 <_strtol_r>:
 800c5b4:	f7ff bf7c 	b.w	800c4b0 <_strtol_l.constprop.0>

0800c5b8 <quorem>:
 800c5b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5bc:	6903      	ldr	r3, [r0, #16]
 800c5be:	690c      	ldr	r4, [r1, #16]
 800c5c0:	42a3      	cmp	r3, r4
 800c5c2:	4607      	mov	r7, r0
 800c5c4:	f2c0 8081 	blt.w	800c6ca <quorem+0x112>
 800c5c8:	3c01      	subs	r4, #1
 800c5ca:	f101 0814 	add.w	r8, r1, #20
 800c5ce:	f100 0514 	add.w	r5, r0, #20
 800c5d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5d6:	9301      	str	r3, [sp, #4]
 800c5d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c5e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5f0:	d331      	bcc.n	800c656 <quorem+0x9e>
 800c5f2:	f04f 0e00 	mov.w	lr, #0
 800c5f6:	4640      	mov	r0, r8
 800c5f8:	46ac      	mov	ip, r5
 800c5fa:	46f2      	mov	sl, lr
 800c5fc:	f850 2b04 	ldr.w	r2, [r0], #4
 800c600:	b293      	uxth	r3, r2
 800c602:	fb06 e303 	mla	r3, r6, r3, lr
 800c606:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	ebaa 0303 	sub.w	r3, sl, r3
 800c610:	f8dc a000 	ldr.w	sl, [ip]
 800c614:	0c12      	lsrs	r2, r2, #16
 800c616:	fa13 f38a 	uxtah	r3, r3, sl
 800c61a:	fb06 e202 	mla	r2, r6, r2, lr
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	9b00      	ldr	r3, [sp, #0]
 800c622:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c626:	b292      	uxth	r2, r2
 800c628:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c62c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c630:	f8bd 3000 	ldrh.w	r3, [sp]
 800c634:	4581      	cmp	r9, r0
 800c636:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c63a:	f84c 3b04 	str.w	r3, [ip], #4
 800c63e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c642:	d2db      	bcs.n	800c5fc <quorem+0x44>
 800c644:	f855 300b 	ldr.w	r3, [r5, fp]
 800c648:	b92b      	cbnz	r3, 800c656 <quorem+0x9e>
 800c64a:	9b01      	ldr	r3, [sp, #4]
 800c64c:	3b04      	subs	r3, #4
 800c64e:	429d      	cmp	r5, r3
 800c650:	461a      	mov	r2, r3
 800c652:	d32e      	bcc.n	800c6b2 <quorem+0xfa>
 800c654:	613c      	str	r4, [r7, #16]
 800c656:	4638      	mov	r0, r7
 800c658:	f001 fc02 	bl	800de60 <__mcmp>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	db24      	blt.n	800c6aa <quorem+0xf2>
 800c660:	3601      	adds	r6, #1
 800c662:	4628      	mov	r0, r5
 800c664:	f04f 0c00 	mov.w	ip, #0
 800c668:	f858 2b04 	ldr.w	r2, [r8], #4
 800c66c:	f8d0 e000 	ldr.w	lr, [r0]
 800c670:	b293      	uxth	r3, r2
 800c672:	ebac 0303 	sub.w	r3, ip, r3
 800c676:	0c12      	lsrs	r2, r2, #16
 800c678:	fa13 f38e 	uxtah	r3, r3, lr
 800c67c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c680:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c684:	b29b      	uxth	r3, r3
 800c686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c68a:	45c1      	cmp	r9, r8
 800c68c:	f840 3b04 	str.w	r3, [r0], #4
 800c690:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c694:	d2e8      	bcs.n	800c668 <quorem+0xb0>
 800c696:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c69a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c69e:	b922      	cbnz	r2, 800c6aa <quorem+0xf2>
 800c6a0:	3b04      	subs	r3, #4
 800c6a2:	429d      	cmp	r5, r3
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	d30a      	bcc.n	800c6be <quorem+0x106>
 800c6a8:	613c      	str	r4, [r7, #16]
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	b003      	add	sp, #12
 800c6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b2:	6812      	ldr	r2, [r2, #0]
 800c6b4:	3b04      	subs	r3, #4
 800c6b6:	2a00      	cmp	r2, #0
 800c6b8:	d1cc      	bne.n	800c654 <quorem+0x9c>
 800c6ba:	3c01      	subs	r4, #1
 800c6bc:	e7c7      	b.n	800c64e <quorem+0x96>
 800c6be:	6812      	ldr	r2, [r2, #0]
 800c6c0:	3b04      	subs	r3, #4
 800c6c2:	2a00      	cmp	r2, #0
 800c6c4:	d1f0      	bne.n	800c6a8 <quorem+0xf0>
 800c6c6:	3c01      	subs	r4, #1
 800c6c8:	e7eb      	b.n	800c6a2 <quorem+0xea>
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	e7ee      	b.n	800c6ac <quorem+0xf4>
	...

0800c6d0 <_dtoa_r>:
 800c6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d4:	ed2d 8b02 	vpush	{d8}
 800c6d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c6da:	b091      	sub	sp, #68	; 0x44
 800c6dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c6e0:	ec59 8b10 	vmov	r8, r9, d0
 800c6e4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c6e6:	9106      	str	r1, [sp, #24]
 800c6e8:	4606      	mov	r6, r0
 800c6ea:	9208      	str	r2, [sp, #32]
 800c6ec:	930c      	str	r3, [sp, #48]	; 0x30
 800c6ee:	b975      	cbnz	r5, 800c70e <_dtoa_r+0x3e>
 800c6f0:	2010      	movs	r0, #16
 800c6f2:	f001 f8cf 	bl	800d894 <malloc>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	6270      	str	r0, [r6, #36]	; 0x24
 800c6fa:	b920      	cbnz	r0, 800c706 <_dtoa_r+0x36>
 800c6fc:	4baa      	ldr	r3, [pc, #680]	; (800c9a8 <_dtoa_r+0x2d8>)
 800c6fe:	21ea      	movs	r1, #234	; 0xea
 800c700:	48aa      	ldr	r0, [pc, #680]	; (800c9ac <_dtoa_r+0x2dc>)
 800c702:	f002 f82b 	bl	800e75c <__assert_func>
 800c706:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c70a:	6005      	str	r5, [r0, #0]
 800c70c:	60c5      	str	r5, [r0, #12]
 800c70e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c710:	6819      	ldr	r1, [r3, #0]
 800c712:	b151      	cbz	r1, 800c72a <_dtoa_r+0x5a>
 800c714:	685a      	ldr	r2, [r3, #4]
 800c716:	604a      	str	r2, [r1, #4]
 800c718:	2301      	movs	r3, #1
 800c71a:	4093      	lsls	r3, r2
 800c71c:	608b      	str	r3, [r1, #8]
 800c71e:	4630      	mov	r0, r6
 800c720:	f001 f912 	bl	800d948 <_Bfree>
 800c724:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c726:	2200      	movs	r2, #0
 800c728:	601a      	str	r2, [r3, #0]
 800c72a:	f1b9 0300 	subs.w	r3, r9, #0
 800c72e:	bfbb      	ittet	lt
 800c730:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c734:	9303      	strlt	r3, [sp, #12]
 800c736:	2300      	movge	r3, #0
 800c738:	2201      	movlt	r2, #1
 800c73a:	bfac      	ite	ge
 800c73c:	6023      	strge	r3, [r4, #0]
 800c73e:	6022      	strlt	r2, [r4, #0]
 800c740:	4b9b      	ldr	r3, [pc, #620]	; (800c9b0 <_dtoa_r+0x2e0>)
 800c742:	9c03      	ldr	r4, [sp, #12]
 800c744:	43a3      	bics	r3, r4
 800c746:	d11c      	bne.n	800c782 <_dtoa_r+0xb2>
 800c748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c74a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c74e:	6013      	str	r3, [r2, #0]
 800c750:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c754:	ea53 0308 	orrs.w	r3, r3, r8
 800c758:	f000 84fd 	beq.w	800d156 <_dtoa_r+0xa86>
 800c75c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c75e:	b963      	cbnz	r3, 800c77a <_dtoa_r+0xaa>
 800c760:	4b94      	ldr	r3, [pc, #592]	; (800c9b4 <_dtoa_r+0x2e4>)
 800c762:	e01f      	b.n	800c7a4 <_dtoa_r+0xd4>
 800c764:	4b94      	ldr	r3, [pc, #592]	; (800c9b8 <_dtoa_r+0x2e8>)
 800c766:	9301      	str	r3, [sp, #4]
 800c768:	3308      	adds	r3, #8
 800c76a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c76c:	6013      	str	r3, [r2, #0]
 800c76e:	9801      	ldr	r0, [sp, #4]
 800c770:	b011      	add	sp, #68	; 0x44
 800c772:	ecbd 8b02 	vpop	{d8}
 800c776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c77a:	4b8e      	ldr	r3, [pc, #568]	; (800c9b4 <_dtoa_r+0x2e4>)
 800c77c:	9301      	str	r3, [sp, #4]
 800c77e:	3303      	adds	r3, #3
 800c780:	e7f3      	b.n	800c76a <_dtoa_r+0x9a>
 800c782:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c786:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c78e:	d10b      	bne.n	800c7a8 <_dtoa_r+0xd8>
 800c790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c792:	2301      	movs	r3, #1
 800c794:	6013      	str	r3, [r2, #0]
 800c796:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c798:	2b00      	cmp	r3, #0
 800c79a:	f000 84d9 	beq.w	800d150 <_dtoa_r+0xa80>
 800c79e:	4887      	ldr	r0, [pc, #540]	; (800c9bc <_dtoa_r+0x2ec>)
 800c7a0:	6018      	str	r0, [r3, #0]
 800c7a2:	1e43      	subs	r3, r0, #1
 800c7a4:	9301      	str	r3, [sp, #4]
 800c7a6:	e7e2      	b.n	800c76e <_dtoa_r+0x9e>
 800c7a8:	a90f      	add	r1, sp, #60	; 0x3c
 800c7aa:	aa0e      	add	r2, sp, #56	; 0x38
 800c7ac:	4630      	mov	r0, r6
 800c7ae:	eeb0 0b48 	vmov.f64	d0, d8
 800c7b2:	f001 fc77 	bl	800e0a4 <__d2b>
 800c7b6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800c7ba:	4605      	mov	r5, r0
 800c7bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c7be:	2900      	cmp	r1, #0
 800c7c0:	d046      	beq.n	800c850 <_dtoa_r+0x180>
 800c7c2:	ee18 4a90 	vmov	r4, s17
 800c7c6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c7ca:	ec53 2b18 	vmov	r2, r3, d8
 800c7ce:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800c7d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c7d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c7da:	2400      	movs	r4, #0
 800c7dc:	ec43 2b16 	vmov	d6, r2, r3
 800c7e0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c7e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c990 <_dtoa_r+0x2c0>
 800c7e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c7ec:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800c998 <_dtoa_r+0x2c8>
 800c7f0:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c7f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c9a0 <_dtoa_r+0x2d0>
 800c7f8:	ee07 1a90 	vmov	s15, r1
 800c7fc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c800:	eeb0 7b46 	vmov.f64	d7, d6
 800c804:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c808:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c80c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c814:	ee16 ba90 	vmov	fp, s13
 800c818:	940a      	str	r4, [sp, #40]	; 0x28
 800c81a:	d508      	bpl.n	800c82e <_dtoa_r+0x15e>
 800c81c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c820:	eeb4 6b47 	vcmp.f64	d6, d7
 800c824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c828:	bf18      	it	ne
 800c82a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c82e:	f1bb 0f16 	cmp.w	fp, #22
 800c832:	d82f      	bhi.n	800c894 <_dtoa_r+0x1c4>
 800c834:	4b62      	ldr	r3, [pc, #392]	; (800c9c0 <_dtoa_r+0x2f0>)
 800c836:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c83a:	ed93 7b00 	vldr	d7, [r3]
 800c83e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c846:	d501      	bpl.n	800c84c <_dtoa_r+0x17c>
 800c848:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c84c:	2300      	movs	r3, #0
 800c84e:	e022      	b.n	800c896 <_dtoa_r+0x1c6>
 800c850:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c852:	4401      	add	r1, r0
 800c854:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800c858:	2b20      	cmp	r3, #32
 800c85a:	bfc1      	itttt	gt
 800c85c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c860:	fa04 f303 	lslgt.w	r3, r4, r3
 800c864:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800c868:	fa28 f804 	lsrgt.w	r8, r8, r4
 800c86c:	bfd6      	itet	le
 800c86e:	f1c3 0320 	rsble	r3, r3, #32
 800c872:	ea43 0808 	orrgt.w	r8, r3, r8
 800c876:	fa08 f803 	lslle.w	r8, r8, r3
 800c87a:	ee07 8a90 	vmov	s15, r8
 800c87e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c882:	3901      	subs	r1, #1
 800c884:	ee17 4a90 	vmov	r4, s15
 800c888:	ec53 2b17 	vmov	r2, r3, d7
 800c88c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800c890:	2401      	movs	r4, #1
 800c892:	e7a3      	b.n	800c7dc <_dtoa_r+0x10c>
 800c894:	2301      	movs	r3, #1
 800c896:	930b      	str	r3, [sp, #44]	; 0x2c
 800c898:	1a43      	subs	r3, r0, r1
 800c89a:	1e5a      	subs	r2, r3, #1
 800c89c:	bf45      	ittet	mi
 800c89e:	f1c3 0301 	rsbmi	r3, r3, #1
 800c8a2:	9304      	strmi	r3, [sp, #16]
 800c8a4:	2300      	movpl	r3, #0
 800c8a6:	2300      	movmi	r3, #0
 800c8a8:	9205      	str	r2, [sp, #20]
 800c8aa:	bf54      	ite	pl
 800c8ac:	9304      	strpl	r3, [sp, #16]
 800c8ae:	9305      	strmi	r3, [sp, #20]
 800c8b0:	f1bb 0f00 	cmp.w	fp, #0
 800c8b4:	db18      	blt.n	800c8e8 <_dtoa_r+0x218>
 800c8b6:	9b05      	ldr	r3, [sp, #20]
 800c8b8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800c8bc:	445b      	add	r3, fp
 800c8be:	9305      	str	r3, [sp, #20]
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	9a06      	ldr	r2, [sp, #24]
 800c8c4:	2a09      	cmp	r2, #9
 800c8c6:	d849      	bhi.n	800c95c <_dtoa_r+0x28c>
 800c8c8:	2a05      	cmp	r2, #5
 800c8ca:	bfc4      	itt	gt
 800c8cc:	3a04      	subgt	r2, #4
 800c8ce:	9206      	strgt	r2, [sp, #24]
 800c8d0:	9a06      	ldr	r2, [sp, #24]
 800c8d2:	f1a2 0202 	sub.w	r2, r2, #2
 800c8d6:	bfcc      	ite	gt
 800c8d8:	2400      	movgt	r4, #0
 800c8da:	2401      	movle	r4, #1
 800c8dc:	2a03      	cmp	r2, #3
 800c8de:	d848      	bhi.n	800c972 <_dtoa_r+0x2a2>
 800c8e0:	e8df f002 	tbb	[pc, r2]
 800c8e4:	3a2c2e0b 	.word	0x3a2c2e0b
 800c8e8:	9b04      	ldr	r3, [sp, #16]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	eba3 030b 	sub.w	r3, r3, fp
 800c8f0:	9304      	str	r3, [sp, #16]
 800c8f2:	9209      	str	r2, [sp, #36]	; 0x24
 800c8f4:	f1cb 0300 	rsb	r3, fp, #0
 800c8f8:	e7e3      	b.n	800c8c2 <_dtoa_r+0x1f2>
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	9207      	str	r2, [sp, #28]
 800c8fe:	9a08      	ldr	r2, [sp, #32]
 800c900:	2a00      	cmp	r2, #0
 800c902:	dc39      	bgt.n	800c978 <_dtoa_r+0x2a8>
 800c904:	f04f 0a01 	mov.w	sl, #1
 800c908:	46d1      	mov	r9, sl
 800c90a:	4652      	mov	r2, sl
 800c90c:	f8cd a020 	str.w	sl, [sp, #32]
 800c910:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800c912:	2100      	movs	r1, #0
 800c914:	6079      	str	r1, [r7, #4]
 800c916:	2004      	movs	r0, #4
 800c918:	f100 0c14 	add.w	ip, r0, #20
 800c91c:	4594      	cmp	ip, r2
 800c91e:	6879      	ldr	r1, [r7, #4]
 800c920:	d92f      	bls.n	800c982 <_dtoa_r+0x2b2>
 800c922:	4630      	mov	r0, r6
 800c924:	930d      	str	r3, [sp, #52]	; 0x34
 800c926:	f000 ffcf 	bl	800d8c8 <_Balloc>
 800c92a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c92c:	9001      	str	r0, [sp, #4]
 800c92e:	4602      	mov	r2, r0
 800c930:	2800      	cmp	r0, #0
 800c932:	d149      	bne.n	800c9c8 <_dtoa_r+0x2f8>
 800c934:	4b23      	ldr	r3, [pc, #140]	; (800c9c4 <_dtoa_r+0x2f4>)
 800c936:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c93a:	e6e1      	b.n	800c700 <_dtoa_r+0x30>
 800c93c:	2201      	movs	r2, #1
 800c93e:	e7dd      	b.n	800c8fc <_dtoa_r+0x22c>
 800c940:	2200      	movs	r2, #0
 800c942:	9207      	str	r2, [sp, #28]
 800c944:	9a08      	ldr	r2, [sp, #32]
 800c946:	eb0b 0a02 	add.w	sl, fp, r2
 800c94a:	f10a 0901 	add.w	r9, sl, #1
 800c94e:	464a      	mov	r2, r9
 800c950:	2a01      	cmp	r2, #1
 800c952:	bfb8      	it	lt
 800c954:	2201      	movlt	r2, #1
 800c956:	e7db      	b.n	800c910 <_dtoa_r+0x240>
 800c958:	2201      	movs	r2, #1
 800c95a:	e7f2      	b.n	800c942 <_dtoa_r+0x272>
 800c95c:	2401      	movs	r4, #1
 800c95e:	2200      	movs	r2, #0
 800c960:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800c964:	f04f 3aff 	mov.w	sl, #4294967295
 800c968:	2100      	movs	r1, #0
 800c96a:	46d1      	mov	r9, sl
 800c96c:	2212      	movs	r2, #18
 800c96e:	9108      	str	r1, [sp, #32]
 800c970:	e7ce      	b.n	800c910 <_dtoa_r+0x240>
 800c972:	2201      	movs	r2, #1
 800c974:	9207      	str	r2, [sp, #28]
 800c976:	e7f5      	b.n	800c964 <_dtoa_r+0x294>
 800c978:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c97c:	46d1      	mov	r9, sl
 800c97e:	4652      	mov	r2, sl
 800c980:	e7c6      	b.n	800c910 <_dtoa_r+0x240>
 800c982:	3101      	adds	r1, #1
 800c984:	6079      	str	r1, [r7, #4]
 800c986:	0040      	lsls	r0, r0, #1
 800c988:	e7c6      	b.n	800c918 <_dtoa_r+0x248>
 800c98a:	bf00      	nop
 800c98c:	f3af 8000 	nop.w
 800c990:	636f4361 	.word	0x636f4361
 800c994:	3fd287a7 	.word	0x3fd287a7
 800c998:	8b60c8b3 	.word	0x8b60c8b3
 800c99c:	3fc68a28 	.word	0x3fc68a28
 800c9a0:	509f79fb 	.word	0x509f79fb
 800c9a4:	3fd34413 	.word	0x3fd34413
 800c9a8:	0800f576 	.word	0x0800f576
 800c9ac:	0800f58d 	.word	0x0800f58d
 800c9b0:	7ff00000 	.word	0x7ff00000
 800c9b4:	0800f572 	.word	0x0800f572
 800c9b8:	0800f569 	.word	0x0800f569
 800c9bc:	0800f3ed 	.word	0x0800f3ed
 800c9c0:	0800f6f8 	.word	0x0800f6f8
 800c9c4:	0800f5e8 	.word	0x0800f5e8
 800c9c8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800c9ca:	9901      	ldr	r1, [sp, #4]
 800c9cc:	6011      	str	r1, [r2, #0]
 800c9ce:	f1b9 0f0e 	cmp.w	r9, #14
 800c9d2:	d86c      	bhi.n	800caae <_dtoa_r+0x3de>
 800c9d4:	2c00      	cmp	r4, #0
 800c9d6:	d06a      	beq.n	800caae <_dtoa_r+0x3de>
 800c9d8:	f1bb 0f00 	cmp.w	fp, #0
 800c9dc:	f340 80a0 	ble.w	800cb20 <_dtoa_r+0x450>
 800c9e0:	49c1      	ldr	r1, [pc, #772]	; (800cce8 <_dtoa_r+0x618>)
 800c9e2:	f00b 020f 	and.w	r2, fp, #15
 800c9e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800c9ea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c9ee:	ed92 7b00 	vldr	d7, [r2]
 800c9f2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800c9f6:	f000 8087 	beq.w	800cb08 <_dtoa_r+0x438>
 800c9fa:	4abc      	ldr	r2, [pc, #752]	; (800ccec <_dtoa_r+0x61c>)
 800c9fc:	ed92 6b08 	vldr	d6, [r2, #32]
 800ca00:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ca04:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ca08:	f001 010f 	and.w	r1, r1, #15
 800ca0c:	2203      	movs	r2, #3
 800ca0e:	48b7      	ldr	r0, [pc, #732]	; (800ccec <_dtoa_r+0x61c>)
 800ca10:	2900      	cmp	r1, #0
 800ca12:	d17b      	bne.n	800cb0c <_dtoa_r+0x43c>
 800ca14:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ca18:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ca1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ca20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca22:	2900      	cmp	r1, #0
 800ca24:	f000 80a2 	beq.w	800cb6c <_dtoa_r+0x49c>
 800ca28:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ca2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca30:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ca34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca38:	f140 8098 	bpl.w	800cb6c <_dtoa_r+0x49c>
 800ca3c:	f1b9 0f00 	cmp.w	r9, #0
 800ca40:	f000 8094 	beq.w	800cb6c <_dtoa_r+0x49c>
 800ca44:	f1ba 0f00 	cmp.w	sl, #0
 800ca48:	dd2f      	ble.n	800caaa <_dtoa_r+0x3da>
 800ca4a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ca4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca52:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ca56:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ca5a:	3201      	adds	r2, #1
 800ca5c:	4650      	mov	r0, sl
 800ca5e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ca62:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ca66:	ee07 2a90 	vmov	s15, r2
 800ca6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ca6e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ca72:	ee15 4a90 	vmov	r4, s11
 800ca76:	ec52 1b15 	vmov	r1, r2, d5
 800ca7a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d177      	bne.n	800cb72 <_dtoa_r+0x4a2>
 800ca82:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ca86:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ca8a:	ec42 1b17 	vmov	d7, r1, r2
 800ca8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ca92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca96:	f300 8263 	bgt.w	800cf60 <_dtoa_r+0x890>
 800ca9a:	eeb1 7b47 	vneg.f64	d7, d7
 800ca9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800caa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa6:	f100 8258 	bmi.w	800cf5a <_dtoa_r+0x88a>
 800caaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800caae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cab0:	2a00      	cmp	r2, #0
 800cab2:	f2c0 811d 	blt.w	800ccf0 <_dtoa_r+0x620>
 800cab6:	f1bb 0f0e 	cmp.w	fp, #14
 800caba:	f300 8119 	bgt.w	800ccf0 <_dtoa_r+0x620>
 800cabe:	4b8a      	ldr	r3, [pc, #552]	; (800cce8 <_dtoa_r+0x618>)
 800cac0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cac4:	ed93 6b00 	vldr	d6, [r3]
 800cac8:	9b08      	ldr	r3, [sp, #32]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f280 80b7 	bge.w	800cc3e <_dtoa_r+0x56e>
 800cad0:	f1b9 0f00 	cmp.w	r9, #0
 800cad4:	f300 80b3 	bgt.w	800cc3e <_dtoa_r+0x56e>
 800cad8:	f040 823f 	bne.w	800cf5a <_dtoa_r+0x88a>
 800cadc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cae0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cae4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cae8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800caec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caf0:	464c      	mov	r4, r9
 800caf2:	464f      	mov	r7, r9
 800caf4:	f280 8215 	bge.w	800cf22 <_dtoa_r+0x852>
 800caf8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cafc:	2331      	movs	r3, #49	; 0x31
 800cafe:	f808 3b01 	strb.w	r3, [r8], #1
 800cb02:	f10b 0b01 	add.w	fp, fp, #1
 800cb06:	e211      	b.n	800cf2c <_dtoa_r+0x85c>
 800cb08:	2202      	movs	r2, #2
 800cb0a:	e780      	b.n	800ca0e <_dtoa_r+0x33e>
 800cb0c:	07cc      	lsls	r4, r1, #31
 800cb0e:	d504      	bpl.n	800cb1a <_dtoa_r+0x44a>
 800cb10:	ed90 6b00 	vldr	d6, [r0]
 800cb14:	3201      	adds	r2, #1
 800cb16:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb1a:	1049      	asrs	r1, r1, #1
 800cb1c:	3008      	adds	r0, #8
 800cb1e:	e777      	b.n	800ca10 <_dtoa_r+0x340>
 800cb20:	d022      	beq.n	800cb68 <_dtoa_r+0x498>
 800cb22:	f1cb 0100 	rsb	r1, fp, #0
 800cb26:	4a70      	ldr	r2, [pc, #448]	; (800cce8 <_dtoa_r+0x618>)
 800cb28:	f001 000f 	and.w	r0, r1, #15
 800cb2c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cb30:	ed92 7b00 	vldr	d7, [r2]
 800cb34:	ee28 7b07 	vmul.f64	d7, d8, d7
 800cb38:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cb3c:	486b      	ldr	r0, [pc, #428]	; (800ccec <_dtoa_r+0x61c>)
 800cb3e:	1109      	asrs	r1, r1, #4
 800cb40:	2400      	movs	r4, #0
 800cb42:	2202      	movs	r2, #2
 800cb44:	b929      	cbnz	r1, 800cb52 <_dtoa_r+0x482>
 800cb46:	2c00      	cmp	r4, #0
 800cb48:	f43f af6a 	beq.w	800ca20 <_dtoa_r+0x350>
 800cb4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cb50:	e766      	b.n	800ca20 <_dtoa_r+0x350>
 800cb52:	07cf      	lsls	r7, r1, #31
 800cb54:	d505      	bpl.n	800cb62 <_dtoa_r+0x492>
 800cb56:	ed90 6b00 	vldr	d6, [r0]
 800cb5a:	3201      	adds	r2, #1
 800cb5c:	2401      	movs	r4, #1
 800cb5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb62:	1049      	asrs	r1, r1, #1
 800cb64:	3008      	adds	r0, #8
 800cb66:	e7ed      	b.n	800cb44 <_dtoa_r+0x474>
 800cb68:	2202      	movs	r2, #2
 800cb6a:	e759      	b.n	800ca20 <_dtoa_r+0x350>
 800cb6c:	465f      	mov	r7, fp
 800cb6e:	4648      	mov	r0, r9
 800cb70:	e775      	b.n	800ca5e <_dtoa_r+0x38e>
 800cb72:	ec42 1b17 	vmov	d7, r1, r2
 800cb76:	4a5c      	ldr	r2, [pc, #368]	; (800cce8 <_dtoa_r+0x618>)
 800cb78:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cb7c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800cb80:	9a01      	ldr	r2, [sp, #4]
 800cb82:	1814      	adds	r4, r2, r0
 800cb84:	9a07      	ldr	r2, [sp, #28]
 800cb86:	b352      	cbz	r2, 800cbde <_dtoa_r+0x50e>
 800cb88:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800cb8c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800cb90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cb94:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800cb98:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800cb9c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cba0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cba4:	ee14 2a90 	vmov	r2, s9
 800cba8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cbac:	3230      	adds	r2, #48	; 0x30
 800cbae:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cbb2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbba:	f808 2b01 	strb.w	r2, [r8], #1
 800cbbe:	d439      	bmi.n	800cc34 <_dtoa_r+0x564>
 800cbc0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cbc4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbcc:	d472      	bmi.n	800ccb4 <_dtoa_r+0x5e4>
 800cbce:	45a0      	cmp	r8, r4
 800cbd0:	f43f af6b 	beq.w	800caaa <_dtoa_r+0x3da>
 800cbd4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cbd8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cbdc:	e7e0      	b.n	800cba0 <_dtoa_r+0x4d0>
 800cbde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cbe2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cbe6:	4621      	mov	r1, r4
 800cbe8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800cbec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cbf0:	ee14 2a90 	vmov	r2, s9
 800cbf4:	3230      	adds	r2, #48	; 0x30
 800cbf6:	f808 2b01 	strb.w	r2, [r8], #1
 800cbfa:	45a0      	cmp	r8, r4
 800cbfc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cc00:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cc04:	d118      	bne.n	800cc38 <_dtoa_r+0x568>
 800cc06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cc0a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800cc0e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800cc12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc16:	dc4d      	bgt.n	800ccb4 <_dtoa_r+0x5e4>
 800cc18:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cc1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cc20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc24:	f57f af41 	bpl.w	800caaa <_dtoa_r+0x3da>
 800cc28:	4688      	mov	r8, r1
 800cc2a:	3901      	subs	r1, #1
 800cc2c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800cc30:	2b30      	cmp	r3, #48	; 0x30
 800cc32:	d0f9      	beq.n	800cc28 <_dtoa_r+0x558>
 800cc34:	46bb      	mov	fp, r7
 800cc36:	e02a      	b.n	800cc8e <_dtoa_r+0x5be>
 800cc38:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cc3c:	e7d6      	b.n	800cbec <_dtoa_r+0x51c>
 800cc3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc42:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800cc46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cc4a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cc4e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cc52:	ee15 3a10 	vmov	r3, s10
 800cc56:	3330      	adds	r3, #48	; 0x30
 800cc58:	f808 3b01 	strb.w	r3, [r8], #1
 800cc5c:	9b01      	ldr	r3, [sp, #4]
 800cc5e:	eba8 0303 	sub.w	r3, r8, r3
 800cc62:	4599      	cmp	r9, r3
 800cc64:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cc68:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cc6c:	d133      	bne.n	800ccd6 <_dtoa_r+0x606>
 800cc6e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cc72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc7a:	dc1a      	bgt.n	800ccb2 <_dtoa_r+0x5e2>
 800cc7c:	eeb4 7b46 	vcmp.f64	d7, d6
 800cc80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc84:	d103      	bne.n	800cc8e <_dtoa_r+0x5be>
 800cc86:	ee15 3a10 	vmov	r3, s10
 800cc8a:	07d9      	lsls	r1, r3, #31
 800cc8c:	d411      	bmi.n	800ccb2 <_dtoa_r+0x5e2>
 800cc8e:	4629      	mov	r1, r5
 800cc90:	4630      	mov	r0, r6
 800cc92:	f000 fe59 	bl	800d948 <_Bfree>
 800cc96:	2300      	movs	r3, #0
 800cc98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc9a:	f888 3000 	strb.w	r3, [r8]
 800cc9e:	f10b 0301 	add.w	r3, fp, #1
 800cca2:	6013      	str	r3, [r2, #0]
 800cca4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	f43f ad61 	beq.w	800c76e <_dtoa_r+0x9e>
 800ccac:	f8c3 8000 	str.w	r8, [r3]
 800ccb0:	e55d      	b.n	800c76e <_dtoa_r+0x9e>
 800ccb2:	465f      	mov	r7, fp
 800ccb4:	4643      	mov	r3, r8
 800ccb6:	4698      	mov	r8, r3
 800ccb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccbc:	2a39      	cmp	r2, #57	; 0x39
 800ccbe:	d106      	bne.n	800ccce <_dtoa_r+0x5fe>
 800ccc0:	9a01      	ldr	r2, [sp, #4]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d1f7      	bne.n	800ccb6 <_dtoa_r+0x5e6>
 800ccc6:	9901      	ldr	r1, [sp, #4]
 800ccc8:	2230      	movs	r2, #48	; 0x30
 800ccca:	3701      	adds	r7, #1
 800cccc:	700a      	strb	r2, [r1, #0]
 800ccce:	781a      	ldrb	r2, [r3, #0]
 800ccd0:	3201      	adds	r2, #1
 800ccd2:	701a      	strb	r2, [r3, #0]
 800ccd4:	e7ae      	b.n	800cc34 <_dtoa_r+0x564>
 800ccd6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ccda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ccde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cce2:	d1b2      	bne.n	800cc4a <_dtoa_r+0x57a>
 800cce4:	e7d3      	b.n	800cc8e <_dtoa_r+0x5be>
 800cce6:	bf00      	nop
 800cce8:	0800f6f8 	.word	0x0800f6f8
 800ccec:	0800f6d0 	.word	0x0800f6d0
 800ccf0:	9907      	ldr	r1, [sp, #28]
 800ccf2:	2900      	cmp	r1, #0
 800ccf4:	f000 80d0 	beq.w	800ce98 <_dtoa_r+0x7c8>
 800ccf8:	9906      	ldr	r1, [sp, #24]
 800ccfa:	2901      	cmp	r1, #1
 800ccfc:	f300 80b4 	bgt.w	800ce68 <_dtoa_r+0x798>
 800cd00:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cd02:	2900      	cmp	r1, #0
 800cd04:	f000 80ac 	beq.w	800ce60 <_dtoa_r+0x790>
 800cd08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cd0c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cd10:	461c      	mov	r4, r3
 800cd12:	930a      	str	r3, [sp, #40]	; 0x28
 800cd14:	9b04      	ldr	r3, [sp, #16]
 800cd16:	4413      	add	r3, r2
 800cd18:	9304      	str	r3, [sp, #16]
 800cd1a:	9b05      	ldr	r3, [sp, #20]
 800cd1c:	2101      	movs	r1, #1
 800cd1e:	4413      	add	r3, r2
 800cd20:	4630      	mov	r0, r6
 800cd22:	9305      	str	r3, [sp, #20]
 800cd24:	f000 ff12 	bl	800db4c <__i2b>
 800cd28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd2a:	4607      	mov	r7, r0
 800cd2c:	f1b8 0f00 	cmp.w	r8, #0
 800cd30:	dd0d      	ble.n	800cd4e <_dtoa_r+0x67e>
 800cd32:	9a05      	ldr	r2, [sp, #20]
 800cd34:	2a00      	cmp	r2, #0
 800cd36:	dd0a      	ble.n	800cd4e <_dtoa_r+0x67e>
 800cd38:	4542      	cmp	r2, r8
 800cd3a:	9904      	ldr	r1, [sp, #16]
 800cd3c:	bfa8      	it	ge
 800cd3e:	4642      	movge	r2, r8
 800cd40:	1a89      	subs	r1, r1, r2
 800cd42:	9104      	str	r1, [sp, #16]
 800cd44:	9905      	ldr	r1, [sp, #20]
 800cd46:	eba8 0802 	sub.w	r8, r8, r2
 800cd4a:	1a8a      	subs	r2, r1, r2
 800cd4c:	9205      	str	r2, [sp, #20]
 800cd4e:	b303      	cbz	r3, 800cd92 <_dtoa_r+0x6c2>
 800cd50:	9a07      	ldr	r2, [sp, #28]
 800cd52:	2a00      	cmp	r2, #0
 800cd54:	f000 80a5 	beq.w	800cea2 <_dtoa_r+0x7d2>
 800cd58:	2c00      	cmp	r4, #0
 800cd5a:	dd13      	ble.n	800cd84 <_dtoa_r+0x6b4>
 800cd5c:	4639      	mov	r1, r7
 800cd5e:	4622      	mov	r2, r4
 800cd60:	4630      	mov	r0, r6
 800cd62:	930d      	str	r3, [sp, #52]	; 0x34
 800cd64:	f000 ffb2 	bl	800dccc <__pow5mult>
 800cd68:	462a      	mov	r2, r5
 800cd6a:	4601      	mov	r1, r0
 800cd6c:	4607      	mov	r7, r0
 800cd6e:	4630      	mov	r0, r6
 800cd70:	f000 ff02 	bl	800db78 <__multiply>
 800cd74:	4629      	mov	r1, r5
 800cd76:	900a      	str	r0, [sp, #40]	; 0x28
 800cd78:	4630      	mov	r0, r6
 800cd7a:	f000 fde5 	bl	800d948 <_Bfree>
 800cd7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd82:	4615      	mov	r5, r2
 800cd84:	1b1a      	subs	r2, r3, r4
 800cd86:	d004      	beq.n	800cd92 <_dtoa_r+0x6c2>
 800cd88:	4629      	mov	r1, r5
 800cd8a:	4630      	mov	r0, r6
 800cd8c:	f000 ff9e 	bl	800dccc <__pow5mult>
 800cd90:	4605      	mov	r5, r0
 800cd92:	2101      	movs	r1, #1
 800cd94:	4630      	mov	r0, r6
 800cd96:	f000 fed9 	bl	800db4c <__i2b>
 800cd9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	4604      	mov	r4, r0
 800cda0:	f340 8081 	ble.w	800cea6 <_dtoa_r+0x7d6>
 800cda4:	461a      	mov	r2, r3
 800cda6:	4601      	mov	r1, r0
 800cda8:	4630      	mov	r0, r6
 800cdaa:	f000 ff8f 	bl	800dccc <__pow5mult>
 800cdae:	9b06      	ldr	r3, [sp, #24]
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	dd7a      	ble.n	800ceac <_dtoa_r+0x7dc>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	930a      	str	r3, [sp, #40]	; 0x28
 800cdba:	6922      	ldr	r2, [r4, #16]
 800cdbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cdc0:	6910      	ldr	r0, [r2, #16]
 800cdc2:	f000 fe73 	bl	800daac <__hi0bits>
 800cdc6:	f1c0 0020 	rsb	r0, r0, #32
 800cdca:	9b05      	ldr	r3, [sp, #20]
 800cdcc:	4418      	add	r0, r3
 800cdce:	f010 001f 	ands.w	r0, r0, #31
 800cdd2:	f000 808c 	beq.w	800ceee <_dtoa_r+0x81e>
 800cdd6:	f1c0 0220 	rsb	r2, r0, #32
 800cdda:	2a04      	cmp	r2, #4
 800cddc:	f340 8085 	ble.w	800ceea <_dtoa_r+0x81a>
 800cde0:	f1c0 001c 	rsb	r0, r0, #28
 800cde4:	9b04      	ldr	r3, [sp, #16]
 800cde6:	4403      	add	r3, r0
 800cde8:	9304      	str	r3, [sp, #16]
 800cdea:	9b05      	ldr	r3, [sp, #20]
 800cdec:	4403      	add	r3, r0
 800cdee:	4480      	add	r8, r0
 800cdf0:	9305      	str	r3, [sp, #20]
 800cdf2:	9b04      	ldr	r3, [sp, #16]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	dd05      	ble.n	800ce04 <_dtoa_r+0x734>
 800cdf8:	4629      	mov	r1, r5
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	4630      	mov	r0, r6
 800cdfe:	f000 ffbf 	bl	800dd80 <__lshift>
 800ce02:	4605      	mov	r5, r0
 800ce04:	9b05      	ldr	r3, [sp, #20]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	dd05      	ble.n	800ce16 <_dtoa_r+0x746>
 800ce0a:	4621      	mov	r1, r4
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	4630      	mov	r0, r6
 800ce10:	f000 ffb6 	bl	800dd80 <__lshift>
 800ce14:	4604      	mov	r4, r0
 800ce16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d06a      	beq.n	800cef2 <_dtoa_r+0x822>
 800ce1c:	4621      	mov	r1, r4
 800ce1e:	4628      	mov	r0, r5
 800ce20:	f001 f81e 	bl	800de60 <__mcmp>
 800ce24:	2800      	cmp	r0, #0
 800ce26:	da64      	bge.n	800cef2 <_dtoa_r+0x822>
 800ce28:	2300      	movs	r3, #0
 800ce2a:	4629      	mov	r1, r5
 800ce2c:	220a      	movs	r2, #10
 800ce2e:	4630      	mov	r0, r6
 800ce30:	f000 fdac 	bl	800d98c <__multadd>
 800ce34:	9b07      	ldr	r3, [sp, #28]
 800ce36:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce3a:	4605      	mov	r5, r0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	f000 8191 	beq.w	800d164 <_dtoa_r+0xa94>
 800ce42:	4639      	mov	r1, r7
 800ce44:	2300      	movs	r3, #0
 800ce46:	220a      	movs	r2, #10
 800ce48:	4630      	mov	r0, r6
 800ce4a:	f000 fd9f 	bl	800d98c <__multadd>
 800ce4e:	f1ba 0f00 	cmp.w	sl, #0
 800ce52:	4607      	mov	r7, r0
 800ce54:	f300 808d 	bgt.w	800cf72 <_dtoa_r+0x8a2>
 800ce58:	9b06      	ldr	r3, [sp, #24]
 800ce5a:	2b02      	cmp	r3, #2
 800ce5c:	dc50      	bgt.n	800cf00 <_dtoa_r+0x830>
 800ce5e:	e088      	b.n	800cf72 <_dtoa_r+0x8a2>
 800ce60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce62:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ce66:	e751      	b.n	800cd0c <_dtoa_r+0x63c>
 800ce68:	f109 34ff 	add.w	r4, r9, #4294967295
 800ce6c:	42a3      	cmp	r3, r4
 800ce6e:	bfbf      	itttt	lt
 800ce70:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800ce72:	1ae3      	sublt	r3, r4, r3
 800ce74:	18d2      	addlt	r2, r2, r3
 800ce76:	9209      	strlt	r2, [sp, #36]	; 0x24
 800ce78:	bfb6      	itet	lt
 800ce7a:	4623      	movlt	r3, r4
 800ce7c:	1b1c      	subge	r4, r3, r4
 800ce7e:	2400      	movlt	r4, #0
 800ce80:	f1b9 0f00 	cmp.w	r9, #0
 800ce84:	bfb5      	itete	lt
 800ce86:	9a04      	ldrlt	r2, [sp, #16]
 800ce88:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800ce8c:	eba2 0809 	sublt.w	r8, r2, r9
 800ce90:	464a      	movge	r2, r9
 800ce92:	bfb8      	it	lt
 800ce94:	2200      	movlt	r2, #0
 800ce96:	e73c      	b.n	800cd12 <_dtoa_r+0x642>
 800ce98:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ce9c:	9f07      	ldr	r7, [sp, #28]
 800ce9e:	461c      	mov	r4, r3
 800cea0:	e744      	b.n	800cd2c <_dtoa_r+0x65c>
 800cea2:	461a      	mov	r2, r3
 800cea4:	e770      	b.n	800cd88 <_dtoa_r+0x6b8>
 800cea6:	9b06      	ldr	r3, [sp, #24]
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	dc18      	bgt.n	800cede <_dtoa_r+0x80e>
 800ceac:	9b02      	ldr	r3, [sp, #8]
 800ceae:	b9b3      	cbnz	r3, 800cede <_dtoa_r+0x80e>
 800ceb0:	9b03      	ldr	r3, [sp, #12]
 800ceb2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ceb6:	b9a2      	cbnz	r2, 800cee2 <_dtoa_r+0x812>
 800ceb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cebc:	0d12      	lsrs	r2, r2, #20
 800cebe:	0512      	lsls	r2, r2, #20
 800cec0:	b18a      	cbz	r2, 800cee6 <_dtoa_r+0x816>
 800cec2:	9b04      	ldr	r3, [sp, #16]
 800cec4:	3301      	adds	r3, #1
 800cec6:	9304      	str	r3, [sp, #16]
 800cec8:	9b05      	ldr	r3, [sp, #20]
 800ceca:	3301      	adds	r3, #1
 800cecc:	9305      	str	r3, [sp, #20]
 800cece:	2301      	movs	r3, #1
 800ced0:	930a      	str	r3, [sp, #40]	; 0x28
 800ced2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	f47f af70 	bne.w	800cdba <_dtoa_r+0x6ea>
 800ceda:	2001      	movs	r0, #1
 800cedc:	e775      	b.n	800cdca <_dtoa_r+0x6fa>
 800cede:	2300      	movs	r3, #0
 800cee0:	e7f6      	b.n	800ced0 <_dtoa_r+0x800>
 800cee2:	9b02      	ldr	r3, [sp, #8]
 800cee4:	e7f4      	b.n	800ced0 <_dtoa_r+0x800>
 800cee6:	920a      	str	r2, [sp, #40]	; 0x28
 800cee8:	e7f3      	b.n	800ced2 <_dtoa_r+0x802>
 800ceea:	d082      	beq.n	800cdf2 <_dtoa_r+0x722>
 800ceec:	4610      	mov	r0, r2
 800ceee:	301c      	adds	r0, #28
 800cef0:	e778      	b.n	800cde4 <_dtoa_r+0x714>
 800cef2:	f1b9 0f00 	cmp.w	r9, #0
 800cef6:	dc37      	bgt.n	800cf68 <_dtoa_r+0x898>
 800cef8:	9b06      	ldr	r3, [sp, #24]
 800cefa:	2b02      	cmp	r3, #2
 800cefc:	dd34      	ble.n	800cf68 <_dtoa_r+0x898>
 800cefe:	46ca      	mov	sl, r9
 800cf00:	f1ba 0f00 	cmp.w	sl, #0
 800cf04:	d10d      	bne.n	800cf22 <_dtoa_r+0x852>
 800cf06:	4621      	mov	r1, r4
 800cf08:	4653      	mov	r3, sl
 800cf0a:	2205      	movs	r2, #5
 800cf0c:	4630      	mov	r0, r6
 800cf0e:	f000 fd3d 	bl	800d98c <__multadd>
 800cf12:	4601      	mov	r1, r0
 800cf14:	4604      	mov	r4, r0
 800cf16:	4628      	mov	r0, r5
 800cf18:	f000 ffa2 	bl	800de60 <__mcmp>
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	f73f adeb 	bgt.w	800caf8 <_dtoa_r+0x428>
 800cf22:	9b08      	ldr	r3, [sp, #32]
 800cf24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cf28:	ea6f 0b03 	mvn.w	fp, r3
 800cf2c:	f04f 0900 	mov.w	r9, #0
 800cf30:	4621      	mov	r1, r4
 800cf32:	4630      	mov	r0, r6
 800cf34:	f000 fd08 	bl	800d948 <_Bfree>
 800cf38:	2f00      	cmp	r7, #0
 800cf3a:	f43f aea8 	beq.w	800cc8e <_dtoa_r+0x5be>
 800cf3e:	f1b9 0f00 	cmp.w	r9, #0
 800cf42:	d005      	beq.n	800cf50 <_dtoa_r+0x880>
 800cf44:	45b9      	cmp	r9, r7
 800cf46:	d003      	beq.n	800cf50 <_dtoa_r+0x880>
 800cf48:	4649      	mov	r1, r9
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	f000 fcfc 	bl	800d948 <_Bfree>
 800cf50:	4639      	mov	r1, r7
 800cf52:	4630      	mov	r0, r6
 800cf54:	f000 fcf8 	bl	800d948 <_Bfree>
 800cf58:	e699      	b.n	800cc8e <_dtoa_r+0x5be>
 800cf5a:	2400      	movs	r4, #0
 800cf5c:	4627      	mov	r7, r4
 800cf5e:	e7e0      	b.n	800cf22 <_dtoa_r+0x852>
 800cf60:	46bb      	mov	fp, r7
 800cf62:	4604      	mov	r4, r0
 800cf64:	4607      	mov	r7, r0
 800cf66:	e5c7      	b.n	800caf8 <_dtoa_r+0x428>
 800cf68:	9b07      	ldr	r3, [sp, #28]
 800cf6a:	46ca      	mov	sl, r9
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	f000 8100 	beq.w	800d172 <_dtoa_r+0xaa2>
 800cf72:	f1b8 0f00 	cmp.w	r8, #0
 800cf76:	dd05      	ble.n	800cf84 <_dtoa_r+0x8b4>
 800cf78:	4639      	mov	r1, r7
 800cf7a:	4642      	mov	r2, r8
 800cf7c:	4630      	mov	r0, r6
 800cf7e:	f000 feff 	bl	800dd80 <__lshift>
 800cf82:	4607      	mov	r7, r0
 800cf84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d05d      	beq.n	800d046 <_dtoa_r+0x976>
 800cf8a:	6879      	ldr	r1, [r7, #4]
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	f000 fc9b 	bl	800d8c8 <_Balloc>
 800cf92:	4680      	mov	r8, r0
 800cf94:	b928      	cbnz	r0, 800cfa2 <_dtoa_r+0x8d2>
 800cf96:	4b82      	ldr	r3, [pc, #520]	; (800d1a0 <_dtoa_r+0xad0>)
 800cf98:	4602      	mov	r2, r0
 800cf9a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cf9e:	f7ff bbaf 	b.w	800c700 <_dtoa_r+0x30>
 800cfa2:	693a      	ldr	r2, [r7, #16]
 800cfa4:	3202      	adds	r2, #2
 800cfa6:	0092      	lsls	r2, r2, #2
 800cfa8:	f107 010c 	add.w	r1, r7, #12
 800cfac:	300c      	adds	r0, #12
 800cfae:	f7fd fe23 	bl	800abf8 <memcpy>
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	4641      	mov	r1, r8
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	f000 fee2 	bl	800dd80 <__lshift>
 800cfbc:	9b01      	ldr	r3, [sp, #4]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	9304      	str	r3, [sp, #16]
 800cfc2:	9b01      	ldr	r3, [sp, #4]
 800cfc4:	4453      	add	r3, sl
 800cfc6:	9308      	str	r3, [sp, #32]
 800cfc8:	9b02      	ldr	r3, [sp, #8]
 800cfca:	f003 0301 	and.w	r3, r3, #1
 800cfce:	46b9      	mov	r9, r7
 800cfd0:	9307      	str	r3, [sp, #28]
 800cfd2:	4607      	mov	r7, r0
 800cfd4:	9b04      	ldr	r3, [sp, #16]
 800cfd6:	4621      	mov	r1, r4
 800cfd8:	3b01      	subs	r3, #1
 800cfda:	4628      	mov	r0, r5
 800cfdc:	9302      	str	r3, [sp, #8]
 800cfde:	f7ff faeb 	bl	800c5b8 <quorem>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	3330      	adds	r3, #48	; 0x30
 800cfe6:	9005      	str	r0, [sp, #20]
 800cfe8:	4649      	mov	r1, r9
 800cfea:	4628      	mov	r0, r5
 800cfec:	9309      	str	r3, [sp, #36]	; 0x24
 800cfee:	f000 ff37 	bl	800de60 <__mcmp>
 800cff2:	463a      	mov	r2, r7
 800cff4:	4682      	mov	sl, r0
 800cff6:	4621      	mov	r1, r4
 800cff8:	4630      	mov	r0, r6
 800cffa:	f000 ff4d 	bl	800de98 <__mdiff>
 800cffe:	68c2      	ldr	r2, [r0, #12]
 800d000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d002:	4680      	mov	r8, r0
 800d004:	bb0a      	cbnz	r2, 800d04a <_dtoa_r+0x97a>
 800d006:	4601      	mov	r1, r0
 800d008:	4628      	mov	r0, r5
 800d00a:	f000 ff29 	bl	800de60 <__mcmp>
 800d00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d010:	4602      	mov	r2, r0
 800d012:	4641      	mov	r1, r8
 800d014:	4630      	mov	r0, r6
 800d016:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800d01a:	f000 fc95 	bl	800d948 <_Bfree>
 800d01e:	9b06      	ldr	r3, [sp, #24]
 800d020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d022:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d026:	ea43 0102 	orr.w	r1, r3, r2
 800d02a:	9b07      	ldr	r3, [sp, #28]
 800d02c:	430b      	orrs	r3, r1
 800d02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d030:	d10d      	bne.n	800d04e <_dtoa_r+0x97e>
 800d032:	2b39      	cmp	r3, #57	; 0x39
 800d034:	d029      	beq.n	800d08a <_dtoa_r+0x9ba>
 800d036:	f1ba 0f00 	cmp.w	sl, #0
 800d03a:	dd01      	ble.n	800d040 <_dtoa_r+0x970>
 800d03c:	9b05      	ldr	r3, [sp, #20]
 800d03e:	3331      	adds	r3, #49	; 0x31
 800d040:	9a02      	ldr	r2, [sp, #8]
 800d042:	7013      	strb	r3, [r2, #0]
 800d044:	e774      	b.n	800cf30 <_dtoa_r+0x860>
 800d046:	4638      	mov	r0, r7
 800d048:	e7b8      	b.n	800cfbc <_dtoa_r+0x8ec>
 800d04a:	2201      	movs	r2, #1
 800d04c:	e7e1      	b.n	800d012 <_dtoa_r+0x942>
 800d04e:	f1ba 0f00 	cmp.w	sl, #0
 800d052:	db06      	blt.n	800d062 <_dtoa_r+0x992>
 800d054:	9906      	ldr	r1, [sp, #24]
 800d056:	ea41 0a0a 	orr.w	sl, r1, sl
 800d05a:	9907      	ldr	r1, [sp, #28]
 800d05c:	ea5a 0101 	orrs.w	r1, sl, r1
 800d060:	d120      	bne.n	800d0a4 <_dtoa_r+0x9d4>
 800d062:	2a00      	cmp	r2, #0
 800d064:	ddec      	ble.n	800d040 <_dtoa_r+0x970>
 800d066:	4629      	mov	r1, r5
 800d068:	2201      	movs	r2, #1
 800d06a:	4630      	mov	r0, r6
 800d06c:	9304      	str	r3, [sp, #16]
 800d06e:	f000 fe87 	bl	800dd80 <__lshift>
 800d072:	4621      	mov	r1, r4
 800d074:	4605      	mov	r5, r0
 800d076:	f000 fef3 	bl	800de60 <__mcmp>
 800d07a:	2800      	cmp	r0, #0
 800d07c:	9b04      	ldr	r3, [sp, #16]
 800d07e:	dc02      	bgt.n	800d086 <_dtoa_r+0x9b6>
 800d080:	d1de      	bne.n	800d040 <_dtoa_r+0x970>
 800d082:	07da      	lsls	r2, r3, #31
 800d084:	d5dc      	bpl.n	800d040 <_dtoa_r+0x970>
 800d086:	2b39      	cmp	r3, #57	; 0x39
 800d088:	d1d8      	bne.n	800d03c <_dtoa_r+0x96c>
 800d08a:	9a02      	ldr	r2, [sp, #8]
 800d08c:	2339      	movs	r3, #57	; 0x39
 800d08e:	7013      	strb	r3, [r2, #0]
 800d090:	4643      	mov	r3, r8
 800d092:	4698      	mov	r8, r3
 800d094:	3b01      	subs	r3, #1
 800d096:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d09a:	2a39      	cmp	r2, #57	; 0x39
 800d09c:	d051      	beq.n	800d142 <_dtoa_r+0xa72>
 800d09e:	3201      	adds	r2, #1
 800d0a0:	701a      	strb	r2, [r3, #0]
 800d0a2:	e745      	b.n	800cf30 <_dtoa_r+0x860>
 800d0a4:	2a00      	cmp	r2, #0
 800d0a6:	dd03      	ble.n	800d0b0 <_dtoa_r+0x9e0>
 800d0a8:	2b39      	cmp	r3, #57	; 0x39
 800d0aa:	d0ee      	beq.n	800d08a <_dtoa_r+0x9ba>
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	e7c7      	b.n	800d040 <_dtoa_r+0x970>
 800d0b0:	9a04      	ldr	r2, [sp, #16]
 800d0b2:	9908      	ldr	r1, [sp, #32]
 800d0b4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d0b8:	428a      	cmp	r2, r1
 800d0ba:	d02b      	beq.n	800d114 <_dtoa_r+0xa44>
 800d0bc:	4629      	mov	r1, r5
 800d0be:	2300      	movs	r3, #0
 800d0c0:	220a      	movs	r2, #10
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	f000 fc62 	bl	800d98c <__multadd>
 800d0c8:	45b9      	cmp	r9, r7
 800d0ca:	4605      	mov	r5, r0
 800d0cc:	f04f 0300 	mov.w	r3, #0
 800d0d0:	f04f 020a 	mov.w	r2, #10
 800d0d4:	4649      	mov	r1, r9
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	d107      	bne.n	800d0ea <_dtoa_r+0xa1a>
 800d0da:	f000 fc57 	bl	800d98c <__multadd>
 800d0de:	4681      	mov	r9, r0
 800d0e0:	4607      	mov	r7, r0
 800d0e2:	9b04      	ldr	r3, [sp, #16]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	9304      	str	r3, [sp, #16]
 800d0e8:	e774      	b.n	800cfd4 <_dtoa_r+0x904>
 800d0ea:	f000 fc4f 	bl	800d98c <__multadd>
 800d0ee:	4639      	mov	r1, r7
 800d0f0:	4681      	mov	r9, r0
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	220a      	movs	r2, #10
 800d0f6:	4630      	mov	r0, r6
 800d0f8:	f000 fc48 	bl	800d98c <__multadd>
 800d0fc:	4607      	mov	r7, r0
 800d0fe:	e7f0      	b.n	800d0e2 <_dtoa_r+0xa12>
 800d100:	f1ba 0f00 	cmp.w	sl, #0
 800d104:	9a01      	ldr	r2, [sp, #4]
 800d106:	bfcc      	ite	gt
 800d108:	46d0      	movgt	r8, sl
 800d10a:	f04f 0801 	movle.w	r8, #1
 800d10e:	4490      	add	r8, r2
 800d110:	f04f 0900 	mov.w	r9, #0
 800d114:	4629      	mov	r1, r5
 800d116:	2201      	movs	r2, #1
 800d118:	4630      	mov	r0, r6
 800d11a:	9302      	str	r3, [sp, #8]
 800d11c:	f000 fe30 	bl	800dd80 <__lshift>
 800d120:	4621      	mov	r1, r4
 800d122:	4605      	mov	r5, r0
 800d124:	f000 fe9c 	bl	800de60 <__mcmp>
 800d128:	2800      	cmp	r0, #0
 800d12a:	dcb1      	bgt.n	800d090 <_dtoa_r+0x9c0>
 800d12c:	d102      	bne.n	800d134 <_dtoa_r+0xa64>
 800d12e:	9b02      	ldr	r3, [sp, #8]
 800d130:	07db      	lsls	r3, r3, #31
 800d132:	d4ad      	bmi.n	800d090 <_dtoa_r+0x9c0>
 800d134:	4643      	mov	r3, r8
 800d136:	4698      	mov	r8, r3
 800d138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d13c:	2a30      	cmp	r2, #48	; 0x30
 800d13e:	d0fa      	beq.n	800d136 <_dtoa_r+0xa66>
 800d140:	e6f6      	b.n	800cf30 <_dtoa_r+0x860>
 800d142:	9a01      	ldr	r2, [sp, #4]
 800d144:	429a      	cmp	r2, r3
 800d146:	d1a4      	bne.n	800d092 <_dtoa_r+0x9c2>
 800d148:	f10b 0b01 	add.w	fp, fp, #1
 800d14c:	2331      	movs	r3, #49	; 0x31
 800d14e:	e778      	b.n	800d042 <_dtoa_r+0x972>
 800d150:	4b14      	ldr	r3, [pc, #80]	; (800d1a4 <_dtoa_r+0xad4>)
 800d152:	f7ff bb27 	b.w	800c7a4 <_dtoa_r+0xd4>
 800d156:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f47f ab03 	bne.w	800c764 <_dtoa_r+0x94>
 800d15e:	4b12      	ldr	r3, [pc, #72]	; (800d1a8 <_dtoa_r+0xad8>)
 800d160:	f7ff bb20 	b.w	800c7a4 <_dtoa_r+0xd4>
 800d164:	f1ba 0f00 	cmp.w	sl, #0
 800d168:	dc03      	bgt.n	800d172 <_dtoa_r+0xaa2>
 800d16a:	9b06      	ldr	r3, [sp, #24]
 800d16c:	2b02      	cmp	r3, #2
 800d16e:	f73f aec7 	bgt.w	800cf00 <_dtoa_r+0x830>
 800d172:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d176:	4621      	mov	r1, r4
 800d178:	4628      	mov	r0, r5
 800d17a:	f7ff fa1d 	bl	800c5b8 <quorem>
 800d17e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d182:	f808 3b01 	strb.w	r3, [r8], #1
 800d186:	9a01      	ldr	r2, [sp, #4]
 800d188:	eba8 0202 	sub.w	r2, r8, r2
 800d18c:	4592      	cmp	sl, r2
 800d18e:	ddb7      	ble.n	800d100 <_dtoa_r+0xa30>
 800d190:	4629      	mov	r1, r5
 800d192:	2300      	movs	r3, #0
 800d194:	220a      	movs	r2, #10
 800d196:	4630      	mov	r0, r6
 800d198:	f000 fbf8 	bl	800d98c <__multadd>
 800d19c:	4605      	mov	r5, r0
 800d19e:	e7ea      	b.n	800d176 <_dtoa_r+0xaa6>
 800d1a0:	0800f5e8 	.word	0x0800f5e8
 800d1a4:	0800f3ec 	.word	0x0800f3ec
 800d1a8:	0800f569 	.word	0x0800f569

0800d1ac <rshift>:
 800d1ac:	6903      	ldr	r3, [r0, #16]
 800d1ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d1b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d1ba:	f100 0414 	add.w	r4, r0, #20
 800d1be:	dd45      	ble.n	800d24c <rshift+0xa0>
 800d1c0:	f011 011f 	ands.w	r1, r1, #31
 800d1c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d1c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d1cc:	d10c      	bne.n	800d1e8 <rshift+0x3c>
 800d1ce:	f100 0710 	add.w	r7, r0, #16
 800d1d2:	4629      	mov	r1, r5
 800d1d4:	42b1      	cmp	r1, r6
 800d1d6:	d334      	bcc.n	800d242 <rshift+0x96>
 800d1d8:	1a9b      	subs	r3, r3, r2
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	1eea      	subs	r2, r5, #3
 800d1de:	4296      	cmp	r6, r2
 800d1e0:	bf38      	it	cc
 800d1e2:	2300      	movcc	r3, #0
 800d1e4:	4423      	add	r3, r4
 800d1e6:	e015      	b.n	800d214 <rshift+0x68>
 800d1e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d1ec:	f1c1 0820 	rsb	r8, r1, #32
 800d1f0:	40cf      	lsrs	r7, r1
 800d1f2:	f105 0e04 	add.w	lr, r5, #4
 800d1f6:	46a1      	mov	r9, r4
 800d1f8:	4576      	cmp	r6, lr
 800d1fa:	46f4      	mov	ip, lr
 800d1fc:	d815      	bhi.n	800d22a <rshift+0x7e>
 800d1fe:	1a9a      	subs	r2, r3, r2
 800d200:	0092      	lsls	r2, r2, #2
 800d202:	3a04      	subs	r2, #4
 800d204:	3501      	adds	r5, #1
 800d206:	42ae      	cmp	r6, r5
 800d208:	bf38      	it	cc
 800d20a:	2200      	movcc	r2, #0
 800d20c:	18a3      	adds	r3, r4, r2
 800d20e:	50a7      	str	r7, [r4, r2]
 800d210:	b107      	cbz	r7, 800d214 <rshift+0x68>
 800d212:	3304      	adds	r3, #4
 800d214:	1b1a      	subs	r2, r3, r4
 800d216:	42a3      	cmp	r3, r4
 800d218:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d21c:	bf08      	it	eq
 800d21e:	2300      	moveq	r3, #0
 800d220:	6102      	str	r2, [r0, #16]
 800d222:	bf08      	it	eq
 800d224:	6143      	streq	r3, [r0, #20]
 800d226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d22a:	f8dc c000 	ldr.w	ip, [ip]
 800d22e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d232:	ea4c 0707 	orr.w	r7, ip, r7
 800d236:	f849 7b04 	str.w	r7, [r9], #4
 800d23a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d23e:	40cf      	lsrs	r7, r1
 800d240:	e7da      	b.n	800d1f8 <rshift+0x4c>
 800d242:	f851 cb04 	ldr.w	ip, [r1], #4
 800d246:	f847 cf04 	str.w	ip, [r7, #4]!
 800d24a:	e7c3      	b.n	800d1d4 <rshift+0x28>
 800d24c:	4623      	mov	r3, r4
 800d24e:	e7e1      	b.n	800d214 <rshift+0x68>

0800d250 <__hexdig_fun>:
 800d250:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d254:	2b09      	cmp	r3, #9
 800d256:	d802      	bhi.n	800d25e <__hexdig_fun+0xe>
 800d258:	3820      	subs	r0, #32
 800d25a:	b2c0      	uxtb	r0, r0
 800d25c:	4770      	bx	lr
 800d25e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d262:	2b05      	cmp	r3, #5
 800d264:	d801      	bhi.n	800d26a <__hexdig_fun+0x1a>
 800d266:	3847      	subs	r0, #71	; 0x47
 800d268:	e7f7      	b.n	800d25a <__hexdig_fun+0xa>
 800d26a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d26e:	2b05      	cmp	r3, #5
 800d270:	d801      	bhi.n	800d276 <__hexdig_fun+0x26>
 800d272:	3827      	subs	r0, #39	; 0x27
 800d274:	e7f1      	b.n	800d25a <__hexdig_fun+0xa>
 800d276:	2000      	movs	r0, #0
 800d278:	4770      	bx	lr
	...

0800d27c <__gethex>:
 800d27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d280:	ed2d 8b02 	vpush	{d8}
 800d284:	b089      	sub	sp, #36	; 0x24
 800d286:	ee08 0a10 	vmov	s16, r0
 800d28a:	9304      	str	r3, [sp, #16]
 800d28c:	4bb4      	ldr	r3, [pc, #720]	; (800d560 <__gethex+0x2e4>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	9301      	str	r3, [sp, #4]
 800d292:	4618      	mov	r0, r3
 800d294:	468b      	mov	fp, r1
 800d296:	4690      	mov	r8, r2
 800d298:	f7f2 ffd2 	bl	8000240 <strlen>
 800d29c:	9b01      	ldr	r3, [sp, #4]
 800d29e:	f8db 2000 	ldr.w	r2, [fp]
 800d2a2:	4403      	add	r3, r0
 800d2a4:	4682      	mov	sl, r0
 800d2a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d2aa:	9305      	str	r3, [sp, #20]
 800d2ac:	1c93      	adds	r3, r2, #2
 800d2ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d2b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d2b6:	32fe      	adds	r2, #254	; 0xfe
 800d2b8:	18d1      	adds	r1, r2, r3
 800d2ba:	461f      	mov	r7, r3
 800d2bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d2c0:	9100      	str	r1, [sp, #0]
 800d2c2:	2830      	cmp	r0, #48	; 0x30
 800d2c4:	d0f8      	beq.n	800d2b8 <__gethex+0x3c>
 800d2c6:	f7ff ffc3 	bl	800d250 <__hexdig_fun>
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	d13a      	bne.n	800d346 <__gethex+0xca>
 800d2d0:	9901      	ldr	r1, [sp, #4]
 800d2d2:	4652      	mov	r2, sl
 800d2d4:	4638      	mov	r0, r7
 800d2d6:	f001 fa1f 	bl	800e718 <strncmp>
 800d2da:	4605      	mov	r5, r0
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	d168      	bne.n	800d3b2 <__gethex+0x136>
 800d2e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d2e4:	eb07 060a 	add.w	r6, r7, sl
 800d2e8:	f7ff ffb2 	bl	800d250 <__hexdig_fun>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	d062      	beq.n	800d3b6 <__gethex+0x13a>
 800d2f0:	4633      	mov	r3, r6
 800d2f2:	7818      	ldrb	r0, [r3, #0]
 800d2f4:	2830      	cmp	r0, #48	; 0x30
 800d2f6:	461f      	mov	r7, r3
 800d2f8:	f103 0301 	add.w	r3, r3, #1
 800d2fc:	d0f9      	beq.n	800d2f2 <__gethex+0x76>
 800d2fe:	f7ff ffa7 	bl	800d250 <__hexdig_fun>
 800d302:	2301      	movs	r3, #1
 800d304:	fab0 f480 	clz	r4, r0
 800d308:	0964      	lsrs	r4, r4, #5
 800d30a:	4635      	mov	r5, r6
 800d30c:	9300      	str	r3, [sp, #0]
 800d30e:	463a      	mov	r2, r7
 800d310:	4616      	mov	r6, r2
 800d312:	3201      	adds	r2, #1
 800d314:	7830      	ldrb	r0, [r6, #0]
 800d316:	f7ff ff9b 	bl	800d250 <__hexdig_fun>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d1f8      	bne.n	800d310 <__gethex+0x94>
 800d31e:	9901      	ldr	r1, [sp, #4]
 800d320:	4652      	mov	r2, sl
 800d322:	4630      	mov	r0, r6
 800d324:	f001 f9f8 	bl	800e718 <strncmp>
 800d328:	b980      	cbnz	r0, 800d34c <__gethex+0xd0>
 800d32a:	b94d      	cbnz	r5, 800d340 <__gethex+0xc4>
 800d32c:	eb06 050a 	add.w	r5, r6, sl
 800d330:	462a      	mov	r2, r5
 800d332:	4616      	mov	r6, r2
 800d334:	3201      	adds	r2, #1
 800d336:	7830      	ldrb	r0, [r6, #0]
 800d338:	f7ff ff8a 	bl	800d250 <__hexdig_fun>
 800d33c:	2800      	cmp	r0, #0
 800d33e:	d1f8      	bne.n	800d332 <__gethex+0xb6>
 800d340:	1bad      	subs	r5, r5, r6
 800d342:	00ad      	lsls	r5, r5, #2
 800d344:	e004      	b.n	800d350 <__gethex+0xd4>
 800d346:	2400      	movs	r4, #0
 800d348:	4625      	mov	r5, r4
 800d34a:	e7e0      	b.n	800d30e <__gethex+0x92>
 800d34c:	2d00      	cmp	r5, #0
 800d34e:	d1f7      	bne.n	800d340 <__gethex+0xc4>
 800d350:	7833      	ldrb	r3, [r6, #0]
 800d352:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d356:	2b50      	cmp	r3, #80	; 0x50
 800d358:	d13b      	bne.n	800d3d2 <__gethex+0x156>
 800d35a:	7873      	ldrb	r3, [r6, #1]
 800d35c:	2b2b      	cmp	r3, #43	; 0x2b
 800d35e:	d02c      	beq.n	800d3ba <__gethex+0x13e>
 800d360:	2b2d      	cmp	r3, #45	; 0x2d
 800d362:	d02e      	beq.n	800d3c2 <__gethex+0x146>
 800d364:	1c71      	adds	r1, r6, #1
 800d366:	f04f 0900 	mov.w	r9, #0
 800d36a:	7808      	ldrb	r0, [r1, #0]
 800d36c:	f7ff ff70 	bl	800d250 <__hexdig_fun>
 800d370:	1e43      	subs	r3, r0, #1
 800d372:	b2db      	uxtb	r3, r3
 800d374:	2b18      	cmp	r3, #24
 800d376:	d82c      	bhi.n	800d3d2 <__gethex+0x156>
 800d378:	f1a0 0210 	sub.w	r2, r0, #16
 800d37c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d380:	f7ff ff66 	bl	800d250 <__hexdig_fun>
 800d384:	1e43      	subs	r3, r0, #1
 800d386:	b2db      	uxtb	r3, r3
 800d388:	2b18      	cmp	r3, #24
 800d38a:	d91d      	bls.n	800d3c8 <__gethex+0x14c>
 800d38c:	f1b9 0f00 	cmp.w	r9, #0
 800d390:	d000      	beq.n	800d394 <__gethex+0x118>
 800d392:	4252      	negs	r2, r2
 800d394:	4415      	add	r5, r2
 800d396:	f8cb 1000 	str.w	r1, [fp]
 800d39a:	b1e4      	cbz	r4, 800d3d6 <__gethex+0x15a>
 800d39c:	9b00      	ldr	r3, [sp, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	bf14      	ite	ne
 800d3a2:	2700      	movne	r7, #0
 800d3a4:	2706      	moveq	r7, #6
 800d3a6:	4638      	mov	r0, r7
 800d3a8:	b009      	add	sp, #36	; 0x24
 800d3aa:	ecbd 8b02 	vpop	{d8}
 800d3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b2:	463e      	mov	r6, r7
 800d3b4:	4625      	mov	r5, r4
 800d3b6:	2401      	movs	r4, #1
 800d3b8:	e7ca      	b.n	800d350 <__gethex+0xd4>
 800d3ba:	f04f 0900 	mov.w	r9, #0
 800d3be:	1cb1      	adds	r1, r6, #2
 800d3c0:	e7d3      	b.n	800d36a <__gethex+0xee>
 800d3c2:	f04f 0901 	mov.w	r9, #1
 800d3c6:	e7fa      	b.n	800d3be <__gethex+0x142>
 800d3c8:	230a      	movs	r3, #10
 800d3ca:	fb03 0202 	mla	r2, r3, r2, r0
 800d3ce:	3a10      	subs	r2, #16
 800d3d0:	e7d4      	b.n	800d37c <__gethex+0x100>
 800d3d2:	4631      	mov	r1, r6
 800d3d4:	e7df      	b.n	800d396 <__gethex+0x11a>
 800d3d6:	1bf3      	subs	r3, r6, r7
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	4621      	mov	r1, r4
 800d3dc:	2b07      	cmp	r3, #7
 800d3de:	dc0b      	bgt.n	800d3f8 <__gethex+0x17c>
 800d3e0:	ee18 0a10 	vmov	r0, s16
 800d3e4:	f000 fa70 	bl	800d8c8 <_Balloc>
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	b940      	cbnz	r0, 800d3fe <__gethex+0x182>
 800d3ec:	4b5d      	ldr	r3, [pc, #372]	; (800d564 <__gethex+0x2e8>)
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	21de      	movs	r1, #222	; 0xde
 800d3f2:	485d      	ldr	r0, [pc, #372]	; (800d568 <__gethex+0x2ec>)
 800d3f4:	f001 f9b2 	bl	800e75c <__assert_func>
 800d3f8:	3101      	adds	r1, #1
 800d3fa:	105b      	asrs	r3, r3, #1
 800d3fc:	e7ee      	b.n	800d3dc <__gethex+0x160>
 800d3fe:	f100 0914 	add.w	r9, r0, #20
 800d402:	f04f 0b00 	mov.w	fp, #0
 800d406:	f1ca 0301 	rsb	r3, sl, #1
 800d40a:	f8cd 9008 	str.w	r9, [sp, #8]
 800d40e:	f8cd b000 	str.w	fp, [sp]
 800d412:	9306      	str	r3, [sp, #24]
 800d414:	42b7      	cmp	r7, r6
 800d416:	d340      	bcc.n	800d49a <__gethex+0x21e>
 800d418:	9802      	ldr	r0, [sp, #8]
 800d41a:	9b00      	ldr	r3, [sp, #0]
 800d41c:	f840 3b04 	str.w	r3, [r0], #4
 800d420:	eba0 0009 	sub.w	r0, r0, r9
 800d424:	1080      	asrs	r0, r0, #2
 800d426:	0146      	lsls	r6, r0, #5
 800d428:	6120      	str	r0, [r4, #16]
 800d42a:	4618      	mov	r0, r3
 800d42c:	f000 fb3e 	bl	800daac <__hi0bits>
 800d430:	1a30      	subs	r0, r6, r0
 800d432:	f8d8 6000 	ldr.w	r6, [r8]
 800d436:	42b0      	cmp	r0, r6
 800d438:	dd63      	ble.n	800d502 <__gethex+0x286>
 800d43a:	1b87      	subs	r7, r0, r6
 800d43c:	4639      	mov	r1, r7
 800d43e:	4620      	mov	r0, r4
 800d440:	f000 fedf 	bl	800e202 <__any_on>
 800d444:	4682      	mov	sl, r0
 800d446:	b1a8      	cbz	r0, 800d474 <__gethex+0x1f8>
 800d448:	1e7b      	subs	r3, r7, #1
 800d44a:	1159      	asrs	r1, r3, #5
 800d44c:	f003 021f 	and.w	r2, r3, #31
 800d450:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d454:	f04f 0a01 	mov.w	sl, #1
 800d458:	fa0a f202 	lsl.w	r2, sl, r2
 800d45c:	420a      	tst	r2, r1
 800d45e:	d009      	beq.n	800d474 <__gethex+0x1f8>
 800d460:	4553      	cmp	r3, sl
 800d462:	dd05      	ble.n	800d470 <__gethex+0x1f4>
 800d464:	1eb9      	subs	r1, r7, #2
 800d466:	4620      	mov	r0, r4
 800d468:	f000 fecb 	bl	800e202 <__any_on>
 800d46c:	2800      	cmp	r0, #0
 800d46e:	d145      	bne.n	800d4fc <__gethex+0x280>
 800d470:	f04f 0a02 	mov.w	sl, #2
 800d474:	4639      	mov	r1, r7
 800d476:	4620      	mov	r0, r4
 800d478:	f7ff fe98 	bl	800d1ac <rshift>
 800d47c:	443d      	add	r5, r7
 800d47e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d482:	42ab      	cmp	r3, r5
 800d484:	da4c      	bge.n	800d520 <__gethex+0x2a4>
 800d486:	ee18 0a10 	vmov	r0, s16
 800d48a:	4621      	mov	r1, r4
 800d48c:	f000 fa5c 	bl	800d948 <_Bfree>
 800d490:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d492:	2300      	movs	r3, #0
 800d494:	6013      	str	r3, [r2, #0]
 800d496:	27a3      	movs	r7, #163	; 0xa3
 800d498:	e785      	b.n	800d3a6 <__gethex+0x12a>
 800d49a:	1e73      	subs	r3, r6, #1
 800d49c:	9a05      	ldr	r2, [sp, #20]
 800d49e:	9303      	str	r3, [sp, #12]
 800d4a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d019      	beq.n	800d4dc <__gethex+0x260>
 800d4a8:	f1bb 0f20 	cmp.w	fp, #32
 800d4ac:	d107      	bne.n	800d4be <__gethex+0x242>
 800d4ae:	9b02      	ldr	r3, [sp, #8]
 800d4b0:	9a00      	ldr	r2, [sp, #0]
 800d4b2:	f843 2b04 	str.w	r2, [r3], #4
 800d4b6:	9302      	str	r3, [sp, #8]
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	9300      	str	r3, [sp, #0]
 800d4bc:	469b      	mov	fp, r3
 800d4be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d4c2:	f7ff fec5 	bl	800d250 <__hexdig_fun>
 800d4c6:	9b00      	ldr	r3, [sp, #0]
 800d4c8:	f000 000f 	and.w	r0, r0, #15
 800d4cc:	fa00 f00b 	lsl.w	r0, r0, fp
 800d4d0:	4303      	orrs	r3, r0
 800d4d2:	9300      	str	r3, [sp, #0]
 800d4d4:	f10b 0b04 	add.w	fp, fp, #4
 800d4d8:	9b03      	ldr	r3, [sp, #12]
 800d4da:	e00d      	b.n	800d4f8 <__gethex+0x27c>
 800d4dc:	9b03      	ldr	r3, [sp, #12]
 800d4de:	9a06      	ldr	r2, [sp, #24]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	42bb      	cmp	r3, r7
 800d4e4:	d3e0      	bcc.n	800d4a8 <__gethex+0x22c>
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	9901      	ldr	r1, [sp, #4]
 800d4ea:	9307      	str	r3, [sp, #28]
 800d4ec:	4652      	mov	r2, sl
 800d4ee:	f001 f913 	bl	800e718 <strncmp>
 800d4f2:	9b07      	ldr	r3, [sp, #28]
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	d1d7      	bne.n	800d4a8 <__gethex+0x22c>
 800d4f8:	461e      	mov	r6, r3
 800d4fa:	e78b      	b.n	800d414 <__gethex+0x198>
 800d4fc:	f04f 0a03 	mov.w	sl, #3
 800d500:	e7b8      	b.n	800d474 <__gethex+0x1f8>
 800d502:	da0a      	bge.n	800d51a <__gethex+0x29e>
 800d504:	1a37      	subs	r7, r6, r0
 800d506:	4621      	mov	r1, r4
 800d508:	ee18 0a10 	vmov	r0, s16
 800d50c:	463a      	mov	r2, r7
 800d50e:	f000 fc37 	bl	800dd80 <__lshift>
 800d512:	1bed      	subs	r5, r5, r7
 800d514:	4604      	mov	r4, r0
 800d516:	f100 0914 	add.w	r9, r0, #20
 800d51a:	f04f 0a00 	mov.w	sl, #0
 800d51e:	e7ae      	b.n	800d47e <__gethex+0x202>
 800d520:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d524:	42a8      	cmp	r0, r5
 800d526:	dd72      	ble.n	800d60e <__gethex+0x392>
 800d528:	1b45      	subs	r5, r0, r5
 800d52a:	42ae      	cmp	r6, r5
 800d52c:	dc36      	bgt.n	800d59c <__gethex+0x320>
 800d52e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d532:	2b02      	cmp	r3, #2
 800d534:	d02a      	beq.n	800d58c <__gethex+0x310>
 800d536:	2b03      	cmp	r3, #3
 800d538:	d02c      	beq.n	800d594 <__gethex+0x318>
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d11c      	bne.n	800d578 <__gethex+0x2fc>
 800d53e:	42ae      	cmp	r6, r5
 800d540:	d11a      	bne.n	800d578 <__gethex+0x2fc>
 800d542:	2e01      	cmp	r6, #1
 800d544:	d112      	bne.n	800d56c <__gethex+0x2f0>
 800d546:	9a04      	ldr	r2, [sp, #16]
 800d548:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d54c:	6013      	str	r3, [r2, #0]
 800d54e:	2301      	movs	r3, #1
 800d550:	6123      	str	r3, [r4, #16]
 800d552:	f8c9 3000 	str.w	r3, [r9]
 800d556:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d558:	2762      	movs	r7, #98	; 0x62
 800d55a:	601c      	str	r4, [r3, #0]
 800d55c:	e723      	b.n	800d3a6 <__gethex+0x12a>
 800d55e:	bf00      	nop
 800d560:	0800f660 	.word	0x0800f660
 800d564:	0800f5e8 	.word	0x0800f5e8
 800d568:	0800f5f9 	.word	0x0800f5f9
 800d56c:	1e71      	subs	r1, r6, #1
 800d56e:	4620      	mov	r0, r4
 800d570:	f000 fe47 	bl	800e202 <__any_on>
 800d574:	2800      	cmp	r0, #0
 800d576:	d1e6      	bne.n	800d546 <__gethex+0x2ca>
 800d578:	ee18 0a10 	vmov	r0, s16
 800d57c:	4621      	mov	r1, r4
 800d57e:	f000 f9e3 	bl	800d948 <_Bfree>
 800d582:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d584:	2300      	movs	r3, #0
 800d586:	6013      	str	r3, [r2, #0]
 800d588:	2750      	movs	r7, #80	; 0x50
 800d58a:	e70c      	b.n	800d3a6 <__gethex+0x12a>
 800d58c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d1f2      	bne.n	800d578 <__gethex+0x2fc>
 800d592:	e7d8      	b.n	800d546 <__gethex+0x2ca>
 800d594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d596:	2b00      	cmp	r3, #0
 800d598:	d1d5      	bne.n	800d546 <__gethex+0x2ca>
 800d59a:	e7ed      	b.n	800d578 <__gethex+0x2fc>
 800d59c:	1e6f      	subs	r7, r5, #1
 800d59e:	f1ba 0f00 	cmp.w	sl, #0
 800d5a2:	d131      	bne.n	800d608 <__gethex+0x38c>
 800d5a4:	b127      	cbz	r7, 800d5b0 <__gethex+0x334>
 800d5a6:	4639      	mov	r1, r7
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	f000 fe2a 	bl	800e202 <__any_on>
 800d5ae:	4682      	mov	sl, r0
 800d5b0:	117b      	asrs	r3, r7, #5
 800d5b2:	2101      	movs	r1, #1
 800d5b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d5b8:	f007 071f 	and.w	r7, r7, #31
 800d5bc:	fa01 f707 	lsl.w	r7, r1, r7
 800d5c0:	421f      	tst	r7, r3
 800d5c2:	4629      	mov	r1, r5
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	bf18      	it	ne
 800d5c8:	f04a 0a02 	orrne.w	sl, sl, #2
 800d5cc:	1b76      	subs	r6, r6, r5
 800d5ce:	f7ff fded 	bl	800d1ac <rshift>
 800d5d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d5d6:	2702      	movs	r7, #2
 800d5d8:	f1ba 0f00 	cmp.w	sl, #0
 800d5dc:	d048      	beq.n	800d670 <__gethex+0x3f4>
 800d5de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d5e2:	2b02      	cmp	r3, #2
 800d5e4:	d015      	beq.n	800d612 <__gethex+0x396>
 800d5e6:	2b03      	cmp	r3, #3
 800d5e8:	d017      	beq.n	800d61a <__gethex+0x39e>
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d109      	bne.n	800d602 <__gethex+0x386>
 800d5ee:	f01a 0f02 	tst.w	sl, #2
 800d5f2:	d006      	beq.n	800d602 <__gethex+0x386>
 800d5f4:	f8d9 0000 	ldr.w	r0, [r9]
 800d5f8:	ea4a 0a00 	orr.w	sl, sl, r0
 800d5fc:	f01a 0f01 	tst.w	sl, #1
 800d600:	d10e      	bne.n	800d620 <__gethex+0x3a4>
 800d602:	f047 0710 	orr.w	r7, r7, #16
 800d606:	e033      	b.n	800d670 <__gethex+0x3f4>
 800d608:	f04f 0a01 	mov.w	sl, #1
 800d60c:	e7d0      	b.n	800d5b0 <__gethex+0x334>
 800d60e:	2701      	movs	r7, #1
 800d610:	e7e2      	b.n	800d5d8 <__gethex+0x35c>
 800d612:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d614:	f1c3 0301 	rsb	r3, r3, #1
 800d618:	9315      	str	r3, [sp, #84]	; 0x54
 800d61a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d0f0      	beq.n	800d602 <__gethex+0x386>
 800d620:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d624:	f104 0314 	add.w	r3, r4, #20
 800d628:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d62c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d630:	f04f 0c00 	mov.w	ip, #0
 800d634:	4618      	mov	r0, r3
 800d636:	f853 2b04 	ldr.w	r2, [r3], #4
 800d63a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d63e:	d01c      	beq.n	800d67a <__gethex+0x3fe>
 800d640:	3201      	adds	r2, #1
 800d642:	6002      	str	r2, [r0, #0]
 800d644:	2f02      	cmp	r7, #2
 800d646:	f104 0314 	add.w	r3, r4, #20
 800d64a:	d13f      	bne.n	800d6cc <__gethex+0x450>
 800d64c:	f8d8 2000 	ldr.w	r2, [r8]
 800d650:	3a01      	subs	r2, #1
 800d652:	42b2      	cmp	r2, r6
 800d654:	d10a      	bne.n	800d66c <__gethex+0x3f0>
 800d656:	1171      	asrs	r1, r6, #5
 800d658:	2201      	movs	r2, #1
 800d65a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d65e:	f006 061f 	and.w	r6, r6, #31
 800d662:	fa02 f606 	lsl.w	r6, r2, r6
 800d666:	421e      	tst	r6, r3
 800d668:	bf18      	it	ne
 800d66a:	4617      	movne	r7, r2
 800d66c:	f047 0720 	orr.w	r7, r7, #32
 800d670:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d672:	601c      	str	r4, [r3, #0]
 800d674:	9b04      	ldr	r3, [sp, #16]
 800d676:	601d      	str	r5, [r3, #0]
 800d678:	e695      	b.n	800d3a6 <__gethex+0x12a>
 800d67a:	4299      	cmp	r1, r3
 800d67c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d680:	d8d8      	bhi.n	800d634 <__gethex+0x3b8>
 800d682:	68a3      	ldr	r3, [r4, #8]
 800d684:	459b      	cmp	fp, r3
 800d686:	db19      	blt.n	800d6bc <__gethex+0x440>
 800d688:	6861      	ldr	r1, [r4, #4]
 800d68a:	ee18 0a10 	vmov	r0, s16
 800d68e:	3101      	adds	r1, #1
 800d690:	f000 f91a 	bl	800d8c8 <_Balloc>
 800d694:	4681      	mov	r9, r0
 800d696:	b918      	cbnz	r0, 800d6a0 <__gethex+0x424>
 800d698:	4b1a      	ldr	r3, [pc, #104]	; (800d704 <__gethex+0x488>)
 800d69a:	4602      	mov	r2, r0
 800d69c:	2184      	movs	r1, #132	; 0x84
 800d69e:	e6a8      	b.n	800d3f2 <__gethex+0x176>
 800d6a0:	6922      	ldr	r2, [r4, #16]
 800d6a2:	3202      	adds	r2, #2
 800d6a4:	f104 010c 	add.w	r1, r4, #12
 800d6a8:	0092      	lsls	r2, r2, #2
 800d6aa:	300c      	adds	r0, #12
 800d6ac:	f7fd faa4 	bl	800abf8 <memcpy>
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	ee18 0a10 	vmov	r0, s16
 800d6b6:	f000 f947 	bl	800d948 <_Bfree>
 800d6ba:	464c      	mov	r4, r9
 800d6bc:	6923      	ldr	r3, [r4, #16]
 800d6be:	1c5a      	adds	r2, r3, #1
 800d6c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d6c4:	6122      	str	r2, [r4, #16]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	615a      	str	r2, [r3, #20]
 800d6ca:	e7bb      	b.n	800d644 <__gethex+0x3c8>
 800d6cc:	6922      	ldr	r2, [r4, #16]
 800d6ce:	455a      	cmp	r2, fp
 800d6d0:	dd0b      	ble.n	800d6ea <__gethex+0x46e>
 800d6d2:	2101      	movs	r1, #1
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	f7ff fd69 	bl	800d1ac <rshift>
 800d6da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d6de:	3501      	adds	r5, #1
 800d6e0:	42ab      	cmp	r3, r5
 800d6e2:	f6ff aed0 	blt.w	800d486 <__gethex+0x20a>
 800d6e6:	2701      	movs	r7, #1
 800d6e8:	e7c0      	b.n	800d66c <__gethex+0x3f0>
 800d6ea:	f016 061f 	ands.w	r6, r6, #31
 800d6ee:	d0fa      	beq.n	800d6e6 <__gethex+0x46a>
 800d6f0:	4453      	add	r3, sl
 800d6f2:	f1c6 0620 	rsb	r6, r6, #32
 800d6f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d6fa:	f000 f9d7 	bl	800daac <__hi0bits>
 800d6fe:	42b0      	cmp	r0, r6
 800d700:	dbe7      	blt.n	800d6d2 <__gethex+0x456>
 800d702:	e7f0      	b.n	800d6e6 <__gethex+0x46a>
 800d704:	0800f5e8 	.word	0x0800f5e8

0800d708 <L_shift>:
 800d708:	f1c2 0208 	rsb	r2, r2, #8
 800d70c:	0092      	lsls	r2, r2, #2
 800d70e:	b570      	push	{r4, r5, r6, lr}
 800d710:	f1c2 0620 	rsb	r6, r2, #32
 800d714:	6843      	ldr	r3, [r0, #4]
 800d716:	6804      	ldr	r4, [r0, #0]
 800d718:	fa03 f506 	lsl.w	r5, r3, r6
 800d71c:	432c      	orrs	r4, r5
 800d71e:	40d3      	lsrs	r3, r2
 800d720:	6004      	str	r4, [r0, #0]
 800d722:	f840 3f04 	str.w	r3, [r0, #4]!
 800d726:	4288      	cmp	r0, r1
 800d728:	d3f4      	bcc.n	800d714 <L_shift+0xc>
 800d72a:	bd70      	pop	{r4, r5, r6, pc}

0800d72c <__match>:
 800d72c:	b530      	push	{r4, r5, lr}
 800d72e:	6803      	ldr	r3, [r0, #0]
 800d730:	3301      	adds	r3, #1
 800d732:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d736:	b914      	cbnz	r4, 800d73e <__match+0x12>
 800d738:	6003      	str	r3, [r0, #0]
 800d73a:	2001      	movs	r0, #1
 800d73c:	bd30      	pop	{r4, r5, pc}
 800d73e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d742:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d746:	2d19      	cmp	r5, #25
 800d748:	bf98      	it	ls
 800d74a:	3220      	addls	r2, #32
 800d74c:	42a2      	cmp	r2, r4
 800d74e:	d0f0      	beq.n	800d732 <__match+0x6>
 800d750:	2000      	movs	r0, #0
 800d752:	e7f3      	b.n	800d73c <__match+0x10>

0800d754 <__hexnan>:
 800d754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d758:	680b      	ldr	r3, [r1, #0]
 800d75a:	115e      	asrs	r6, r3, #5
 800d75c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d760:	f013 031f 	ands.w	r3, r3, #31
 800d764:	b087      	sub	sp, #28
 800d766:	bf18      	it	ne
 800d768:	3604      	addne	r6, #4
 800d76a:	2500      	movs	r5, #0
 800d76c:	1f37      	subs	r7, r6, #4
 800d76e:	4690      	mov	r8, r2
 800d770:	6802      	ldr	r2, [r0, #0]
 800d772:	9301      	str	r3, [sp, #4]
 800d774:	4682      	mov	sl, r0
 800d776:	f846 5c04 	str.w	r5, [r6, #-4]
 800d77a:	46b9      	mov	r9, r7
 800d77c:	463c      	mov	r4, r7
 800d77e:	9502      	str	r5, [sp, #8]
 800d780:	46ab      	mov	fp, r5
 800d782:	7851      	ldrb	r1, [r2, #1]
 800d784:	1c53      	adds	r3, r2, #1
 800d786:	9303      	str	r3, [sp, #12]
 800d788:	b341      	cbz	r1, 800d7dc <__hexnan+0x88>
 800d78a:	4608      	mov	r0, r1
 800d78c:	9205      	str	r2, [sp, #20]
 800d78e:	9104      	str	r1, [sp, #16]
 800d790:	f7ff fd5e 	bl	800d250 <__hexdig_fun>
 800d794:	2800      	cmp	r0, #0
 800d796:	d14f      	bne.n	800d838 <__hexnan+0xe4>
 800d798:	9904      	ldr	r1, [sp, #16]
 800d79a:	9a05      	ldr	r2, [sp, #20]
 800d79c:	2920      	cmp	r1, #32
 800d79e:	d818      	bhi.n	800d7d2 <__hexnan+0x7e>
 800d7a0:	9b02      	ldr	r3, [sp, #8]
 800d7a2:	459b      	cmp	fp, r3
 800d7a4:	dd13      	ble.n	800d7ce <__hexnan+0x7a>
 800d7a6:	454c      	cmp	r4, r9
 800d7a8:	d206      	bcs.n	800d7b8 <__hexnan+0x64>
 800d7aa:	2d07      	cmp	r5, #7
 800d7ac:	dc04      	bgt.n	800d7b8 <__hexnan+0x64>
 800d7ae:	462a      	mov	r2, r5
 800d7b0:	4649      	mov	r1, r9
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	f7ff ffa8 	bl	800d708 <L_shift>
 800d7b8:	4544      	cmp	r4, r8
 800d7ba:	d950      	bls.n	800d85e <__hexnan+0x10a>
 800d7bc:	2300      	movs	r3, #0
 800d7be:	f1a4 0904 	sub.w	r9, r4, #4
 800d7c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d7c6:	f8cd b008 	str.w	fp, [sp, #8]
 800d7ca:	464c      	mov	r4, r9
 800d7cc:	461d      	mov	r5, r3
 800d7ce:	9a03      	ldr	r2, [sp, #12]
 800d7d0:	e7d7      	b.n	800d782 <__hexnan+0x2e>
 800d7d2:	2929      	cmp	r1, #41	; 0x29
 800d7d4:	d156      	bne.n	800d884 <__hexnan+0x130>
 800d7d6:	3202      	adds	r2, #2
 800d7d8:	f8ca 2000 	str.w	r2, [sl]
 800d7dc:	f1bb 0f00 	cmp.w	fp, #0
 800d7e0:	d050      	beq.n	800d884 <__hexnan+0x130>
 800d7e2:	454c      	cmp	r4, r9
 800d7e4:	d206      	bcs.n	800d7f4 <__hexnan+0xa0>
 800d7e6:	2d07      	cmp	r5, #7
 800d7e8:	dc04      	bgt.n	800d7f4 <__hexnan+0xa0>
 800d7ea:	462a      	mov	r2, r5
 800d7ec:	4649      	mov	r1, r9
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f7ff ff8a 	bl	800d708 <L_shift>
 800d7f4:	4544      	cmp	r4, r8
 800d7f6:	d934      	bls.n	800d862 <__hexnan+0x10e>
 800d7f8:	f1a8 0204 	sub.w	r2, r8, #4
 800d7fc:	4623      	mov	r3, r4
 800d7fe:	f853 1b04 	ldr.w	r1, [r3], #4
 800d802:	f842 1f04 	str.w	r1, [r2, #4]!
 800d806:	429f      	cmp	r7, r3
 800d808:	d2f9      	bcs.n	800d7fe <__hexnan+0xaa>
 800d80a:	1b3b      	subs	r3, r7, r4
 800d80c:	f023 0303 	bic.w	r3, r3, #3
 800d810:	3304      	adds	r3, #4
 800d812:	3401      	adds	r4, #1
 800d814:	3e03      	subs	r6, #3
 800d816:	42b4      	cmp	r4, r6
 800d818:	bf88      	it	hi
 800d81a:	2304      	movhi	r3, #4
 800d81c:	4443      	add	r3, r8
 800d81e:	2200      	movs	r2, #0
 800d820:	f843 2b04 	str.w	r2, [r3], #4
 800d824:	429f      	cmp	r7, r3
 800d826:	d2fb      	bcs.n	800d820 <__hexnan+0xcc>
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	b91b      	cbnz	r3, 800d834 <__hexnan+0xe0>
 800d82c:	4547      	cmp	r7, r8
 800d82e:	d127      	bne.n	800d880 <__hexnan+0x12c>
 800d830:	2301      	movs	r3, #1
 800d832:	603b      	str	r3, [r7, #0]
 800d834:	2005      	movs	r0, #5
 800d836:	e026      	b.n	800d886 <__hexnan+0x132>
 800d838:	3501      	adds	r5, #1
 800d83a:	2d08      	cmp	r5, #8
 800d83c:	f10b 0b01 	add.w	fp, fp, #1
 800d840:	dd06      	ble.n	800d850 <__hexnan+0xfc>
 800d842:	4544      	cmp	r4, r8
 800d844:	d9c3      	bls.n	800d7ce <__hexnan+0x7a>
 800d846:	2300      	movs	r3, #0
 800d848:	f844 3c04 	str.w	r3, [r4, #-4]
 800d84c:	2501      	movs	r5, #1
 800d84e:	3c04      	subs	r4, #4
 800d850:	6822      	ldr	r2, [r4, #0]
 800d852:	f000 000f 	and.w	r0, r0, #15
 800d856:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d85a:	6022      	str	r2, [r4, #0]
 800d85c:	e7b7      	b.n	800d7ce <__hexnan+0x7a>
 800d85e:	2508      	movs	r5, #8
 800d860:	e7b5      	b.n	800d7ce <__hexnan+0x7a>
 800d862:	9b01      	ldr	r3, [sp, #4]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d0df      	beq.n	800d828 <__hexnan+0xd4>
 800d868:	f04f 32ff 	mov.w	r2, #4294967295
 800d86c:	f1c3 0320 	rsb	r3, r3, #32
 800d870:	fa22 f303 	lsr.w	r3, r2, r3
 800d874:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d878:	401a      	ands	r2, r3
 800d87a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d87e:	e7d3      	b.n	800d828 <__hexnan+0xd4>
 800d880:	3f04      	subs	r7, #4
 800d882:	e7d1      	b.n	800d828 <__hexnan+0xd4>
 800d884:	2004      	movs	r0, #4
 800d886:	b007      	add	sp, #28
 800d888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d88c <_localeconv_r>:
 800d88c:	4800      	ldr	r0, [pc, #0]	; (800d890 <_localeconv_r+0x4>)
 800d88e:	4770      	bx	lr
 800d890:	2000016c 	.word	0x2000016c

0800d894 <malloc>:
 800d894:	4b02      	ldr	r3, [pc, #8]	; (800d8a0 <malloc+0xc>)
 800d896:	4601      	mov	r1, r0
 800d898:	6818      	ldr	r0, [r3, #0]
 800d89a:	f000 bd55 	b.w	800e348 <_malloc_r>
 800d89e:	bf00      	nop
 800d8a0:	20000014 	.word	0x20000014

0800d8a4 <__ascii_mbtowc>:
 800d8a4:	b082      	sub	sp, #8
 800d8a6:	b901      	cbnz	r1, 800d8aa <__ascii_mbtowc+0x6>
 800d8a8:	a901      	add	r1, sp, #4
 800d8aa:	b142      	cbz	r2, 800d8be <__ascii_mbtowc+0x1a>
 800d8ac:	b14b      	cbz	r3, 800d8c2 <__ascii_mbtowc+0x1e>
 800d8ae:	7813      	ldrb	r3, [r2, #0]
 800d8b0:	600b      	str	r3, [r1, #0]
 800d8b2:	7812      	ldrb	r2, [r2, #0]
 800d8b4:	1e10      	subs	r0, r2, #0
 800d8b6:	bf18      	it	ne
 800d8b8:	2001      	movne	r0, #1
 800d8ba:	b002      	add	sp, #8
 800d8bc:	4770      	bx	lr
 800d8be:	4610      	mov	r0, r2
 800d8c0:	e7fb      	b.n	800d8ba <__ascii_mbtowc+0x16>
 800d8c2:	f06f 0001 	mvn.w	r0, #1
 800d8c6:	e7f8      	b.n	800d8ba <__ascii_mbtowc+0x16>

0800d8c8 <_Balloc>:
 800d8c8:	b570      	push	{r4, r5, r6, lr}
 800d8ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	460d      	mov	r5, r1
 800d8d0:	b976      	cbnz	r6, 800d8f0 <_Balloc+0x28>
 800d8d2:	2010      	movs	r0, #16
 800d8d4:	f7ff ffde 	bl	800d894 <malloc>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	6260      	str	r0, [r4, #36]	; 0x24
 800d8dc:	b920      	cbnz	r0, 800d8e8 <_Balloc+0x20>
 800d8de:	4b18      	ldr	r3, [pc, #96]	; (800d940 <_Balloc+0x78>)
 800d8e0:	4818      	ldr	r0, [pc, #96]	; (800d944 <_Balloc+0x7c>)
 800d8e2:	2166      	movs	r1, #102	; 0x66
 800d8e4:	f000 ff3a 	bl	800e75c <__assert_func>
 800d8e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8ec:	6006      	str	r6, [r0, #0]
 800d8ee:	60c6      	str	r6, [r0, #12]
 800d8f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d8f2:	68f3      	ldr	r3, [r6, #12]
 800d8f4:	b183      	cbz	r3, 800d918 <_Balloc+0x50>
 800d8f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8f8:	68db      	ldr	r3, [r3, #12]
 800d8fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d8fe:	b9b8      	cbnz	r0, 800d930 <_Balloc+0x68>
 800d900:	2101      	movs	r1, #1
 800d902:	fa01 f605 	lsl.w	r6, r1, r5
 800d906:	1d72      	adds	r2, r6, #5
 800d908:	0092      	lsls	r2, r2, #2
 800d90a:	4620      	mov	r0, r4
 800d90c:	f000 fc9a 	bl	800e244 <_calloc_r>
 800d910:	b160      	cbz	r0, 800d92c <_Balloc+0x64>
 800d912:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d916:	e00e      	b.n	800d936 <_Balloc+0x6e>
 800d918:	2221      	movs	r2, #33	; 0x21
 800d91a:	2104      	movs	r1, #4
 800d91c:	4620      	mov	r0, r4
 800d91e:	f000 fc91 	bl	800e244 <_calloc_r>
 800d922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d924:	60f0      	str	r0, [r6, #12]
 800d926:	68db      	ldr	r3, [r3, #12]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d1e4      	bne.n	800d8f6 <_Balloc+0x2e>
 800d92c:	2000      	movs	r0, #0
 800d92e:	bd70      	pop	{r4, r5, r6, pc}
 800d930:	6802      	ldr	r2, [r0, #0]
 800d932:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d936:	2300      	movs	r3, #0
 800d938:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d93c:	e7f7      	b.n	800d92e <_Balloc+0x66>
 800d93e:	bf00      	nop
 800d940:	0800f576 	.word	0x0800f576
 800d944:	0800f674 	.word	0x0800f674

0800d948 <_Bfree>:
 800d948:	b570      	push	{r4, r5, r6, lr}
 800d94a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d94c:	4605      	mov	r5, r0
 800d94e:	460c      	mov	r4, r1
 800d950:	b976      	cbnz	r6, 800d970 <_Bfree+0x28>
 800d952:	2010      	movs	r0, #16
 800d954:	f7ff ff9e 	bl	800d894 <malloc>
 800d958:	4602      	mov	r2, r0
 800d95a:	6268      	str	r0, [r5, #36]	; 0x24
 800d95c:	b920      	cbnz	r0, 800d968 <_Bfree+0x20>
 800d95e:	4b09      	ldr	r3, [pc, #36]	; (800d984 <_Bfree+0x3c>)
 800d960:	4809      	ldr	r0, [pc, #36]	; (800d988 <_Bfree+0x40>)
 800d962:	218a      	movs	r1, #138	; 0x8a
 800d964:	f000 fefa 	bl	800e75c <__assert_func>
 800d968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d96c:	6006      	str	r6, [r0, #0]
 800d96e:	60c6      	str	r6, [r0, #12]
 800d970:	b13c      	cbz	r4, 800d982 <_Bfree+0x3a>
 800d972:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d974:	6862      	ldr	r2, [r4, #4]
 800d976:	68db      	ldr	r3, [r3, #12]
 800d978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d97c:	6021      	str	r1, [r4, #0]
 800d97e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d982:	bd70      	pop	{r4, r5, r6, pc}
 800d984:	0800f576 	.word	0x0800f576
 800d988:	0800f674 	.word	0x0800f674

0800d98c <__multadd>:
 800d98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d990:	690d      	ldr	r5, [r1, #16]
 800d992:	4607      	mov	r7, r0
 800d994:	460c      	mov	r4, r1
 800d996:	461e      	mov	r6, r3
 800d998:	f101 0c14 	add.w	ip, r1, #20
 800d99c:	2000      	movs	r0, #0
 800d99e:	f8dc 3000 	ldr.w	r3, [ip]
 800d9a2:	b299      	uxth	r1, r3
 800d9a4:	fb02 6101 	mla	r1, r2, r1, r6
 800d9a8:	0c1e      	lsrs	r6, r3, #16
 800d9aa:	0c0b      	lsrs	r3, r1, #16
 800d9ac:	fb02 3306 	mla	r3, r2, r6, r3
 800d9b0:	b289      	uxth	r1, r1
 800d9b2:	3001      	adds	r0, #1
 800d9b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d9b8:	4285      	cmp	r5, r0
 800d9ba:	f84c 1b04 	str.w	r1, [ip], #4
 800d9be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d9c2:	dcec      	bgt.n	800d99e <__multadd+0x12>
 800d9c4:	b30e      	cbz	r6, 800da0a <__multadd+0x7e>
 800d9c6:	68a3      	ldr	r3, [r4, #8]
 800d9c8:	42ab      	cmp	r3, r5
 800d9ca:	dc19      	bgt.n	800da00 <__multadd+0x74>
 800d9cc:	6861      	ldr	r1, [r4, #4]
 800d9ce:	4638      	mov	r0, r7
 800d9d0:	3101      	adds	r1, #1
 800d9d2:	f7ff ff79 	bl	800d8c8 <_Balloc>
 800d9d6:	4680      	mov	r8, r0
 800d9d8:	b928      	cbnz	r0, 800d9e6 <__multadd+0x5a>
 800d9da:	4602      	mov	r2, r0
 800d9dc:	4b0c      	ldr	r3, [pc, #48]	; (800da10 <__multadd+0x84>)
 800d9de:	480d      	ldr	r0, [pc, #52]	; (800da14 <__multadd+0x88>)
 800d9e0:	21b5      	movs	r1, #181	; 0xb5
 800d9e2:	f000 febb 	bl	800e75c <__assert_func>
 800d9e6:	6922      	ldr	r2, [r4, #16]
 800d9e8:	3202      	adds	r2, #2
 800d9ea:	f104 010c 	add.w	r1, r4, #12
 800d9ee:	0092      	lsls	r2, r2, #2
 800d9f0:	300c      	adds	r0, #12
 800d9f2:	f7fd f901 	bl	800abf8 <memcpy>
 800d9f6:	4621      	mov	r1, r4
 800d9f8:	4638      	mov	r0, r7
 800d9fa:	f7ff ffa5 	bl	800d948 <_Bfree>
 800d9fe:	4644      	mov	r4, r8
 800da00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800da04:	3501      	adds	r5, #1
 800da06:	615e      	str	r6, [r3, #20]
 800da08:	6125      	str	r5, [r4, #16]
 800da0a:	4620      	mov	r0, r4
 800da0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da10:	0800f5e8 	.word	0x0800f5e8
 800da14:	0800f674 	.word	0x0800f674

0800da18 <__s2b>:
 800da18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da1c:	460c      	mov	r4, r1
 800da1e:	4615      	mov	r5, r2
 800da20:	461f      	mov	r7, r3
 800da22:	2209      	movs	r2, #9
 800da24:	3308      	adds	r3, #8
 800da26:	4606      	mov	r6, r0
 800da28:	fb93 f3f2 	sdiv	r3, r3, r2
 800da2c:	2100      	movs	r1, #0
 800da2e:	2201      	movs	r2, #1
 800da30:	429a      	cmp	r2, r3
 800da32:	db09      	blt.n	800da48 <__s2b+0x30>
 800da34:	4630      	mov	r0, r6
 800da36:	f7ff ff47 	bl	800d8c8 <_Balloc>
 800da3a:	b940      	cbnz	r0, 800da4e <__s2b+0x36>
 800da3c:	4602      	mov	r2, r0
 800da3e:	4b19      	ldr	r3, [pc, #100]	; (800daa4 <__s2b+0x8c>)
 800da40:	4819      	ldr	r0, [pc, #100]	; (800daa8 <__s2b+0x90>)
 800da42:	21ce      	movs	r1, #206	; 0xce
 800da44:	f000 fe8a 	bl	800e75c <__assert_func>
 800da48:	0052      	lsls	r2, r2, #1
 800da4a:	3101      	adds	r1, #1
 800da4c:	e7f0      	b.n	800da30 <__s2b+0x18>
 800da4e:	9b08      	ldr	r3, [sp, #32]
 800da50:	6143      	str	r3, [r0, #20]
 800da52:	2d09      	cmp	r5, #9
 800da54:	f04f 0301 	mov.w	r3, #1
 800da58:	6103      	str	r3, [r0, #16]
 800da5a:	dd16      	ble.n	800da8a <__s2b+0x72>
 800da5c:	f104 0909 	add.w	r9, r4, #9
 800da60:	46c8      	mov	r8, r9
 800da62:	442c      	add	r4, r5
 800da64:	f818 3b01 	ldrb.w	r3, [r8], #1
 800da68:	4601      	mov	r1, r0
 800da6a:	3b30      	subs	r3, #48	; 0x30
 800da6c:	220a      	movs	r2, #10
 800da6e:	4630      	mov	r0, r6
 800da70:	f7ff ff8c 	bl	800d98c <__multadd>
 800da74:	45a0      	cmp	r8, r4
 800da76:	d1f5      	bne.n	800da64 <__s2b+0x4c>
 800da78:	f1a5 0408 	sub.w	r4, r5, #8
 800da7c:	444c      	add	r4, r9
 800da7e:	1b2d      	subs	r5, r5, r4
 800da80:	1963      	adds	r3, r4, r5
 800da82:	42bb      	cmp	r3, r7
 800da84:	db04      	blt.n	800da90 <__s2b+0x78>
 800da86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da8a:	340a      	adds	r4, #10
 800da8c:	2509      	movs	r5, #9
 800da8e:	e7f6      	b.n	800da7e <__s2b+0x66>
 800da90:	f814 3b01 	ldrb.w	r3, [r4], #1
 800da94:	4601      	mov	r1, r0
 800da96:	3b30      	subs	r3, #48	; 0x30
 800da98:	220a      	movs	r2, #10
 800da9a:	4630      	mov	r0, r6
 800da9c:	f7ff ff76 	bl	800d98c <__multadd>
 800daa0:	e7ee      	b.n	800da80 <__s2b+0x68>
 800daa2:	bf00      	nop
 800daa4:	0800f5e8 	.word	0x0800f5e8
 800daa8:	0800f674 	.word	0x0800f674

0800daac <__hi0bits>:
 800daac:	0c03      	lsrs	r3, r0, #16
 800daae:	041b      	lsls	r3, r3, #16
 800dab0:	b9d3      	cbnz	r3, 800dae8 <__hi0bits+0x3c>
 800dab2:	0400      	lsls	r0, r0, #16
 800dab4:	2310      	movs	r3, #16
 800dab6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800daba:	bf04      	itt	eq
 800dabc:	0200      	lsleq	r0, r0, #8
 800dabe:	3308      	addeq	r3, #8
 800dac0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dac4:	bf04      	itt	eq
 800dac6:	0100      	lsleq	r0, r0, #4
 800dac8:	3304      	addeq	r3, #4
 800daca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dace:	bf04      	itt	eq
 800dad0:	0080      	lsleq	r0, r0, #2
 800dad2:	3302      	addeq	r3, #2
 800dad4:	2800      	cmp	r0, #0
 800dad6:	db05      	blt.n	800dae4 <__hi0bits+0x38>
 800dad8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dadc:	f103 0301 	add.w	r3, r3, #1
 800dae0:	bf08      	it	eq
 800dae2:	2320      	moveq	r3, #32
 800dae4:	4618      	mov	r0, r3
 800dae6:	4770      	bx	lr
 800dae8:	2300      	movs	r3, #0
 800daea:	e7e4      	b.n	800dab6 <__hi0bits+0xa>

0800daec <__lo0bits>:
 800daec:	6803      	ldr	r3, [r0, #0]
 800daee:	f013 0207 	ands.w	r2, r3, #7
 800daf2:	4601      	mov	r1, r0
 800daf4:	d00b      	beq.n	800db0e <__lo0bits+0x22>
 800daf6:	07da      	lsls	r2, r3, #31
 800daf8:	d423      	bmi.n	800db42 <__lo0bits+0x56>
 800dafa:	0798      	lsls	r0, r3, #30
 800dafc:	bf49      	itett	mi
 800dafe:	085b      	lsrmi	r3, r3, #1
 800db00:	089b      	lsrpl	r3, r3, #2
 800db02:	2001      	movmi	r0, #1
 800db04:	600b      	strmi	r3, [r1, #0]
 800db06:	bf5c      	itt	pl
 800db08:	600b      	strpl	r3, [r1, #0]
 800db0a:	2002      	movpl	r0, #2
 800db0c:	4770      	bx	lr
 800db0e:	b298      	uxth	r0, r3
 800db10:	b9a8      	cbnz	r0, 800db3e <__lo0bits+0x52>
 800db12:	0c1b      	lsrs	r3, r3, #16
 800db14:	2010      	movs	r0, #16
 800db16:	b2da      	uxtb	r2, r3
 800db18:	b90a      	cbnz	r2, 800db1e <__lo0bits+0x32>
 800db1a:	3008      	adds	r0, #8
 800db1c:	0a1b      	lsrs	r3, r3, #8
 800db1e:	071a      	lsls	r2, r3, #28
 800db20:	bf04      	itt	eq
 800db22:	091b      	lsreq	r3, r3, #4
 800db24:	3004      	addeq	r0, #4
 800db26:	079a      	lsls	r2, r3, #30
 800db28:	bf04      	itt	eq
 800db2a:	089b      	lsreq	r3, r3, #2
 800db2c:	3002      	addeq	r0, #2
 800db2e:	07da      	lsls	r2, r3, #31
 800db30:	d403      	bmi.n	800db3a <__lo0bits+0x4e>
 800db32:	085b      	lsrs	r3, r3, #1
 800db34:	f100 0001 	add.w	r0, r0, #1
 800db38:	d005      	beq.n	800db46 <__lo0bits+0x5a>
 800db3a:	600b      	str	r3, [r1, #0]
 800db3c:	4770      	bx	lr
 800db3e:	4610      	mov	r0, r2
 800db40:	e7e9      	b.n	800db16 <__lo0bits+0x2a>
 800db42:	2000      	movs	r0, #0
 800db44:	4770      	bx	lr
 800db46:	2020      	movs	r0, #32
 800db48:	4770      	bx	lr
	...

0800db4c <__i2b>:
 800db4c:	b510      	push	{r4, lr}
 800db4e:	460c      	mov	r4, r1
 800db50:	2101      	movs	r1, #1
 800db52:	f7ff feb9 	bl	800d8c8 <_Balloc>
 800db56:	4602      	mov	r2, r0
 800db58:	b928      	cbnz	r0, 800db66 <__i2b+0x1a>
 800db5a:	4b05      	ldr	r3, [pc, #20]	; (800db70 <__i2b+0x24>)
 800db5c:	4805      	ldr	r0, [pc, #20]	; (800db74 <__i2b+0x28>)
 800db5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800db62:	f000 fdfb 	bl	800e75c <__assert_func>
 800db66:	2301      	movs	r3, #1
 800db68:	6144      	str	r4, [r0, #20]
 800db6a:	6103      	str	r3, [r0, #16]
 800db6c:	bd10      	pop	{r4, pc}
 800db6e:	bf00      	nop
 800db70:	0800f5e8 	.word	0x0800f5e8
 800db74:	0800f674 	.word	0x0800f674

0800db78 <__multiply>:
 800db78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db7c:	4691      	mov	r9, r2
 800db7e:	690a      	ldr	r2, [r1, #16]
 800db80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db84:	429a      	cmp	r2, r3
 800db86:	bfb8      	it	lt
 800db88:	460b      	movlt	r3, r1
 800db8a:	460c      	mov	r4, r1
 800db8c:	bfbc      	itt	lt
 800db8e:	464c      	movlt	r4, r9
 800db90:	4699      	movlt	r9, r3
 800db92:	6927      	ldr	r7, [r4, #16]
 800db94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800db98:	68a3      	ldr	r3, [r4, #8]
 800db9a:	6861      	ldr	r1, [r4, #4]
 800db9c:	eb07 060a 	add.w	r6, r7, sl
 800dba0:	42b3      	cmp	r3, r6
 800dba2:	b085      	sub	sp, #20
 800dba4:	bfb8      	it	lt
 800dba6:	3101      	addlt	r1, #1
 800dba8:	f7ff fe8e 	bl	800d8c8 <_Balloc>
 800dbac:	b930      	cbnz	r0, 800dbbc <__multiply+0x44>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	4b44      	ldr	r3, [pc, #272]	; (800dcc4 <__multiply+0x14c>)
 800dbb2:	4845      	ldr	r0, [pc, #276]	; (800dcc8 <__multiply+0x150>)
 800dbb4:	f240 115d 	movw	r1, #349	; 0x15d
 800dbb8:	f000 fdd0 	bl	800e75c <__assert_func>
 800dbbc:	f100 0514 	add.w	r5, r0, #20
 800dbc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dbc4:	462b      	mov	r3, r5
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	4543      	cmp	r3, r8
 800dbca:	d321      	bcc.n	800dc10 <__multiply+0x98>
 800dbcc:	f104 0314 	add.w	r3, r4, #20
 800dbd0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dbd4:	f109 0314 	add.w	r3, r9, #20
 800dbd8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dbdc:	9202      	str	r2, [sp, #8]
 800dbde:	1b3a      	subs	r2, r7, r4
 800dbe0:	3a15      	subs	r2, #21
 800dbe2:	f022 0203 	bic.w	r2, r2, #3
 800dbe6:	3204      	adds	r2, #4
 800dbe8:	f104 0115 	add.w	r1, r4, #21
 800dbec:	428f      	cmp	r7, r1
 800dbee:	bf38      	it	cc
 800dbf0:	2204      	movcc	r2, #4
 800dbf2:	9201      	str	r2, [sp, #4]
 800dbf4:	9a02      	ldr	r2, [sp, #8]
 800dbf6:	9303      	str	r3, [sp, #12]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d80c      	bhi.n	800dc16 <__multiply+0x9e>
 800dbfc:	2e00      	cmp	r6, #0
 800dbfe:	dd03      	ble.n	800dc08 <__multiply+0x90>
 800dc00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d05a      	beq.n	800dcbe <__multiply+0x146>
 800dc08:	6106      	str	r6, [r0, #16]
 800dc0a:	b005      	add	sp, #20
 800dc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc10:	f843 2b04 	str.w	r2, [r3], #4
 800dc14:	e7d8      	b.n	800dbc8 <__multiply+0x50>
 800dc16:	f8b3 a000 	ldrh.w	sl, [r3]
 800dc1a:	f1ba 0f00 	cmp.w	sl, #0
 800dc1e:	d024      	beq.n	800dc6a <__multiply+0xf2>
 800dc20:	f104 0e14 	add.w	lr, r4, #20
 800dc24:	46a9      	mov	r9, r5
 800dc26:	f04f 0c00 	mov.w	ip, #0
 800dc2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dc2e:	f8d9 1000 	ldr.w	r1, [r9]
 800dc32:	fa1f fb82 	uxth.w	fp, r2
 800dc36:	b289      	uxth	r1, r1
 800dc38:	fb0a 110b 	mla	r1, sl, fp, r1
 800dc3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dc40:	f8d9 2000 	ldr.w	r2, [r9]
 800dc44:	4461      	add	r1, ip
 800dc46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc4a:	fb0a c20b 	mla	r2, sl, fp, ip
 800dc4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dc52:	b289      	uxth	r1, r1
 800dc54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc58:	4577      	cmp	r7, lr
 800dc5a:	f849 1b04 	str.w	r1, [r9], #4
 800dc5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc62:	d8e2      	bhi.n	800dc2a <__multiply+0xb2>
 800dc64:	9a01      	ldr	r2, [sp, #4]
 800dc66:	f845 c002 	str.w	ip, [r5, r2]
 800dc6a:	9a03      	ldr	r2, [sp, #12]
 800dc6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dc70:	3304      	adds	r3, #4
 800dc72:	f1b9 0f00 	cmp.w	r9, #0
 800dc76:	d020      	beq.n	800dcba <__multiply+0x142>
 800dc78:	6829      	ldr	r1, [r5, #0]
 800dc7a:	f104 0c14 	add.w	ip, r4, #20
 800dc7e:	46ae      	mov	lr, r5
 800dc80:	f04f 0a00 	mov.w	sl, #0
 800dc84:	f8bc b000 	ldrh.w	fp, [ip]
 800dc88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dc8c:	fb09 220b 	mla	r2, r9, fp, r2
 800dc90:	4492      	add	sl, r2
 800dc92:	b289      	uxth	r1, r1
 800dc94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dc98:	f84e 1b04 	str.w	r1, [lr], #4
 800dc9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dca0:	f8be 1000 	ldrh.w	r1, [lr]
 800dca4:	0c12      	lsrs	r2, r2, #16
 800dca6:	fb09 1102 	mla	r1, r9, r2, r1
 800dcaa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dcae:	4567      	cmp	r7, ip
 800dcb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dcb4:	d8e6      	bhi.n	800dc84 <__multiply+0x10c>
 800dcb6:	9a01      	ldr	r2, [sp, #4]
 800dcb8:	50a9      	str	r1, [r5, r2]
 800dcba:	3504      	adds	r5, #4
 800dcbc:	e79a      	b.n	800dbf4 <__multiply+0x7c>
 800dcbe:	3e01      	subs	r6, #1
 800dcc0:	e79c      	b.n	800dbfc <__multiply+0x84>
 800dcc2:	bf00      	nop
 800dcc4:	0800f5e8 	.word	0x0800f5e8
 800dcc8:	0800f674 	.word	0x0800f674

0800dccc <__pow5mult>:
 800dccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcd0:	4615      	mov	r5, r2
 800dcd2:	f012 0203 	ands.w	r2, r2, #3
 800dcd6:	4606      	mov	r6, r0
 800dcd8:	460f      	mov	r7, r1
 800dcda:	d007      	beq.n	800dcec <__pow5mult+0x20>
 800dcdc:	4c25      	ldr	r4, [pc, #148]	; (800dd74 <__pow5mult+0xa8>)
 800dcde:	3a01      	subs	r2, #1
 800dce0:	2300      	movs	r3, #0
 800dce2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dce6:	f7ff fe51 	bl	800d98c <__multadd>
 800dcea:	4607      	mov	r7, r0
 800dcec:	10ad      	asrs	r5, r5, #2
 800dcee:	d03d      	beq.n	800dd6c <__pow5mult+0xa0>
 800dcf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dcf2:	b97c      	cbnz	r4, 800dd14 <__pow5mult+0x48>
 800dcf4:	2010      	movs	r0, #16
 800dcf6:	f7ff fdcd 	bl	800d894 <malloc>
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	6270      	str	r0, [r6, #36]	; 0x24
 800dcfe:	b928      	cbnz	r0, 800dd0c <__pow5mult+0x40>
 800dd00:	4b1d      	ldr	r3, [pc, #116]	; (800dd78 <__pow5mult+0xac>)
 800dd02:	481e      	ldr	r0, [pc, #120]	; (800dd7c <__pow5mult+0xb0>)
 800dd04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dd08:	f000 fd28 	bl	800e75c <__assert_func>
 800dd0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd10:	6004      	str	r4, [r0, #0]
 800dd12:	60c4      	str	r4, [r0, #12]
 800dd14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dd18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd1c:	b94c      	cbnz	r4, 800dd32 <__pow5mult+0x66>
 800dd1e:	f240 2171 	movw	r1, #625	; 0x271
 800dd22:	4630      	mov	r0, r6
 800dd24:	f7ff ff12 	bl	800db4c <__i2b>
 800dd28:	2300      	movs	r3, #0
 800dd2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd2e:	4604      	mov	r4, r0
 800dd30:	6003      	str	r3, [r0, #0]
 800dd32:	f04f 0900 	mov.w	r9, #0
 800dd36:	07eb      	lsls	r3, r5, #31
 800dd38:	d50a      	bpl.n	800dd50 <__pow5mult+0x84>
 800dd3a:	4639      	mov	r1, r7
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	4630      	mov	r0, r6
 800dd40:	f7ff ff1a 	bl	800db78 <__multiply>
 800dd44:	4639      	mov	r1, r7
 800dd46:	4680      	mov	r8, r0
 800dd48:	4630      	mov	r0, r6
 800dd4a:	f7ff fdfd 	bl	800d948 <_Bfree>
 800dd4e:	4647      	mov	r7, r8
 800dd50:	106d      	asrs	r5, r5, #1
 800dd52:	d00b      	beq.n	800dd6c <__pow5mult+0xa0>
 800dd54:	6820      	ldr	r0, [r4, #0]
 800dd56:	b938      	cbnz	r0, 800dd68 <__pow5mult+0x9c>
 800dd58:	4622      	mov	r2, r4
 800dd5a:	4621      	mov	r1, r4
 800dd5c:	4630      	mov	r0, r6
 800dd5e:	f7ff ff0b 	bl	800db78 <__multiply>
 800dd62:	6020      	str	r0, [r4, #0]
 800dd64:	f8c0 9000 	str.w	r9, [r0]
 800dd68:	4604      	mov	r4, r0
 800dd6a:	e7e4      	b.n	800dd36 <__pow5mult+0x6a>
 800dd6c:	4638      	mov	r0, r7
 800dd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd72:	bf00      	nop
 800dd74:	0800f7c0 	.word	0x0800f7c0
 800dd78:	0800f576 	.word	0x0800f576
 800dd7c:	0800f674 	.word	0x0800f674

0800dd80 <__lshift>:
 800dd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd84:	460c      	mov	r4, r1
 800dd86:	6849      	ldr	r1, [r1, #4]
 800dd88:	6923      	ldr	r3, [r4, #16]
 800dd8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dd8e:	68a3      	ldr	r3, [r4, #8]
 800dd90:	4607      	mov	r7, r0
 800dd92:	4691      	mov	r9, r2
 800dd94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd98:	f108 0601 	add.w	r6, r8, #1
 800dd9c:	42b3      	cmp	r3, r6
 800dd9e:	db0b      	blt.n	800ddb8 <__lshift+0x38>
 800dda0:	4638      	mov	r0, r7
 800dda2:	f7ff fd91 	bl	800d8c8 <_Balloc>
 800dda6:	4605      	mov	r5, r0
 800dda8:	b948      	cbnz	r0, 800ddbe <__lshift+0x3e>
 800ddaa:	4602      	mov	r2, r0
 800ddac:	4b2a      	ldr	r3, [pc, #168]	; (800de58 <__lshift+0xd8>)
 800ddae:	482b      	ldr	r0, [pc, #172]	; (800de5c <__lshift+0xdc>)
 800ddb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ddb4:	f000 fcd2 	bl	800e75c <__assert_func>
 800ddb8:	3101      	adds	r1, #1
 800ddba:	005b      	lsls	r3, r3, #1
 800ddbc:	e7ee      	b.n	800dd9c <__lshift+0x1c>
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	f100 0114 	add.w	r1, r0, #20
 800ddc4:	f100 0210 	add.w	r2, r0, #16
 800ddc8:	4618      	mov	r0, r3
 800ddca:	4553      	cmp	r3, sl
 800ddcc:	db37      	blt.n	800de3e <__lshift+0xbe>
 800ddce:	6920      	ldr	r0, [r4, #16]
 800ddd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ddd4:	f104 0314 	add.w	r3, r4, #20
 800ddd8:	f019 091f 	ands.w	r9, r9, #31
 800dddc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dde0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dde4:	d02f      	beq.n	800de46 <__lshift+0xc6>
 800dde6:	f1c9 0e20 	rsb	lr, r9, #32
 800ddea:	468a      	mov	sl, r1
 800ddec:	f04f 0c00 	mov.w	ip, #0
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	fa02 f209 	lsl.w	r2, r2, r9
 800ddf6:	ea42 020c 	orr.w	r2, r2, ip
 800ddfa:	f84a 2b04 	str.w	r2, [sl], #4
 800ddfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800de02:	4298      	cmp	r0, r3
 800de04:	fa22 fc0e 	lsr.w	ip, r2, lr
 800de08:	d8f2      	bhi.n	800ddf0 <__lshift+0x70>
 800de0a:	1b03      	subs	r3, r0, r4
 800de0c:	3b15      	subs	r3, #21
 800de0e:	f023 0303 	bic.w	r3, r3, #3
 800de12:	3304      	adds	r3, #4
 800de14:	f104 0215 	add.w	r2, r4, #21
 800de18:	4290      	cmp	r0, r2
 800de1a:	bf38      	it	cc
 800de1c:	2304      	movcc	r3, #4
 800de1e:	f841 c003 	str.w	ip, [r1, r3]
 800de22:	f1bc 0f00 	cmp.w	ip, #0
 800de26:	d001      	beq.n	800de2c <__lshift+0xac>
 800de28:	f108 0602 	add.w	r6, r8, #2
 800de2c:	3e01      	subs	r6, #1
 800de2e:	4638      	mov	r0, r7
 800de30:	612e      	str	r6, [r5, #16]
 800de32:	4621      	mov	r1, r4
 800de34:	f7ff fd88 	bl	800d948 <_Bfree>
 800de38:	4628      	mov	r0, r5
 800de3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800de42:	3301      	adds	r3, #1
 800de44:	e7c1      	b.n	800ddca <__lshift+0x4a>
 800de46:	3904      	subs	r1, #4
 800de48:	f853 2b04 	ldr.w	r2, [r3], #4
 800de4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800de50:	4298      	cmp	r0, r3
 800de52:	d8f9      	bhi.n	800de48 <__lshift+0xc8>
 800de54:	e7ea      	b.n	800de2c <__lshift+0xac>
 800de56:	bf00      	nop
 800de58:	0800f5e8 	.word	0x0800f5e8
 800de5c:	0800f674 	.word	0x0800f674

0800de60 <__mcmp>:
 800de60:	b530      	push	{r4, r5, lr}
 800de62:	6902      	ldr	r2, [r0, #16]
 800de64:	690c      	ldr	r4, [r1, #16]
 800de66:	1b12      	subs	r2, r2, r4
 800de68:	d10e      	bne.n	800de88 <__mcmp+0x28>
 800de6a:	f100 0314 	add.w	r3, r0, #20
 800de6e:	3114      	adds	r1, #20
 800de70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800de74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800de78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800de7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800de80:	42a5      	cmp	r5, r4
 800de82:	d003      	beq.n	800de8c <__mcmp+0x2c>
 800de84:	d305      	bcc.n	800de92 <__mcmp+0x32>
 800de86:	2201      	movs	r2, #1
 800de88:	4610      	mov	r0, r2
 800de8a:	bd30      	pop	{r4, r5, pc}
 800de8c:	4283      	cmp	r3, r0
 800de8e:	d3f3      	bcc.n	800de78 <__mcmp+0x18>
 800de90:	e7fa      	b.n	800de88 <__mcmp+0x28>
 800de92:	f04f 32ff 	mov.w	r2, #4294967295
 800de96:	e7f7      	b.n	800de88 <__mcmp+0x28>

0800de98 <__mdiff>:
 800de98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de9c:	460c      	mov	r4, r1
 800de9e:	4606      	mov	r6, r0
 800dea0:	4611      	mov	r1, r2
 800dea2:	4620      	mov	r0, r4
 800dea4:	4690      	mov	r8, r2
 800dea6:	f7ff ffdb 	bl	800de60 <__mcmp>
 800deaa:	1e05      	subs	r5, r0, #0
 800deac:	d110      	bne.n	800ded0 <__mdiff+0x38>
 800deae:	4629      	mov	r1, r5
 800deb0:	4630      	mov	r0, r6
 800deb2:	f7ff fd09 	bl	800d8c8 <_Balloc>
 800deb6:	b930      	cbnz	r0, 800dec6 <__mdiff+0x2e>
 800deb8:	4b3a      	ldr	r3, [pc, #232]	; (800dfa4 <__mdiff+0x10c>)
 800deba:	4602      	mov	r2, r0
 800debc:	f240 2132 	movw	r1, #562	; 0x232
 800dec0:	4839      	ldr	r0, [pc, #228]	; (800dfa8 <__mdiff+0x110>)
 800dec2:	f000 fc4b 	bl	800e75c <__assert_func>
 800dec6:	2301      	movs	r3, #1
 800dec8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800decc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded0:	bfa4      	itt	ge
 800ded2:	4643      	movge	r3, r8
 800ded4:	46a0      	movge	r8, r4
 800ded6:	4630      	mov	r0, r6
 800ded8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dedc:	bfa6      	itte	ge
 800dede:	461c      	movge	r4, r3
 800dee0:	2500      	movge	r5, #0
 800dee2:	2501      	movlt	r5, #1
 800dee4:	f7ff fcf0 	bl	800d8c8 <_Balloc>
 800dee8:	b920      	cbnz	r0, 800def4 <__mdiff+0x5c>
 800deea:	4b2e      	ldr	r3, [pc, #184]	; (800dfa4 <__mdiff+0x10c>)
 800deec:	4602      	mov	r2, r0
 800deee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800def2:	e7e5      	b.n	800dec0 <__mdiff+0x28>
 800def4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800def8:	6926      	ldr	r6, [r4, #16]
 800defa:	60c5      	str	r5, [r0, #12]
 800defc:	f104 0914 	add.w	r9, r4, #20
 800df00:	f108 0514 	add.w	r5, r8, #20
 800df04:	f100 0e14 	add.w	lr, r0, #20
 800df08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800df0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800df10:	f108 0210 	add.w	r2, r8, #16
 800df14:	46f2      	mov	sl, lr
 800df16:	2100      	movs	r1, #0
 800df18:	f859 3b04 	ldr.w	r3, [r9], #4
 800df1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800df20:	fa1f f883 	uxth.w	r8, r3
 800df24:	fa11 f18b 	uxtah	r1, r1, fp
 800df28:	0c1b      	lsrs	r3, r3, #16
 800df2a:	eba1 0808 	sub.w	r8, r1, r8
 800df2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800df32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800df36:	fa1f f888 	uxth.w	r8, r8
 800df3a:	1419      	asrs	r1, r3, #16
 800df3c:	454e      	cmp	r6, r9
 800df3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800df42:	f84a 3b04 	str.w	r3, [sl], #4
 800df46:	d8e7      	bhi.n	800df18 <__mdiff+0x80>
 800df48:	1b33      	subs	r3, r6, r4
 800df4a:	3b15      	subs	r3, #21
 800df4c:	f023 0303 	bic.w	r3, r3, #3
 800df50:	3304      	adds	r3, #4
 800df52:	3415      	adds	r4, #21
 800df54:	42a6      	cmp	r6, r4
 800df56:	bf38      	it	cc
 800df58:	2304      	movcc	r3, #4
 800df5a:	441d      	add	r5, r3
 800df5c:	4473      	add	r3, lr
 800df5e:	469e      	mov	lr, r3
 800df60:	462e      	mov	r6, r5
 800df62:	4566      	cmp	r6, ip
 800df64:	d30e      	bcc.n	800df84 <__mdiff+0xec>
 800df66:	f10c 0203 	add.w	r2, ip, #3
 800df6a:	1b52      	subs	r2, r2, r5
 800df6c:	f022 0203 	bic.w	r2, r2, #3
 800df70:	3d03      	subs	r5, #3
 800df72:	45ac      	cmp	ip, r5
 800df74:	bf38      	it	cc
 800df76:	2200      	movcc	r2, #0
 800df78:	441a      	add	r2, r3
 800df7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800df7e:	b17b      	cbz	r3, 800dfa0 <__mdiff+0x108>
 800df80:	6107      	str	r7, [r0, #16]
 800df82:	e7a3      	b.n	800decc <__mdiff+0x34>
 800df84:	f856 8b04 	ldr.w	r8, [r6], #4
 800df88:	fa11 f288 	uxtah	r2, r1, r8
 800df8c:	1414      	asrs	r4, r2, #16
 800df8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800df92:	b292      	uxth	r2, r2
 800df94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800df98:	f84e 2b04 	str.w	r2, [lr], #4
 800df9c:	1421      	asrs	r1, r4, #16
 800df9e:	e7e0      	b.n	800df62 <__mdiff+0xca>
 800dfa0:	3f01      	subs	r7, #1
 800dfa2:	e7ea      	b.n	800df7a <__mdiff+0xe2>
 800dfa4:	0800f5e8 	.word	0x0800f5e8
 800dfa8:	0800f674 	.word	0x0800f674

0800dfac <__ulp>:
 800dfac:	b082      	sub	sp, #8
 800dfae:	ed8d 0b00 	vstr	d0, [sp]
 800dfb2:	9b01      	ldr	r3, [sp, #4]
 800dfb4:	4912      	ldr	r1, [pc, #72]	; (800e000 <__ulp+0x54>)
 800dfb6:	4019      	ands	r1, r3
 800dfb8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dfbc:	2900      	cmp	r1, #0
 800dfbe:	dd05      	ble.n	800dfcc <__ulp+0x20>
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	ec43 2b10 	vmov	d0, r2, r3
 800dfc8:	b002      	add	sp, #8
 800dfca:	4770      	bx	lr
 800dfcc:	4249      	negs	r1, r1
 800dfce:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dfd2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dfd6:	f04f 0200 	mov.w	r2, #0
 800dfda:	f04f 0300 	mov.w	r3, #0
 800dfde:	da04      	bge.n	800dfea <__ulp+0x3e>
 800dfe0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dfe4:	fa41 f300 	asr.w	r3, r1, r0
 800dfe8:	e7ec      	b.n	800dfc4 <__ulp+0x18>
 800dfea:	f1a0 0114 	sub.w	r1, r0, #20
 800dfee:	291e      	cmp	r1, #30
 800dff0:	bfda      	itte	le
 800dff2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dff6:	fa20 f101 	lsrle.w	r1, r0, r1
 800dffa:	2101      	movgt	r1, #1
 800dffc:	460a      	mov	r2, r1
 800dffe:	e7e1      	b.n	800dfc4 <__ulp+0x18>
 800e000:	7ff00000 	.word	0x7ff00000

0800e004 <__b2d>:
 800e004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e006:	6905      	ldr	r5, [r0, #16]
 800e008:	f100 0714 	add.w	r7, r0, #20
 800e00c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e010:	1f2e      	subs	r6, r5, #4
 800e012:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e016:	4620      	mov	r0, r4
 800e018:	f7ff fd48 	bl	800daac <__hi0bits>
 800e01c:	f1c0 0320 	rsb	r3, r0, #32
 800e020:	280a      	cmp	r0, #10
 800e022:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e0a0 <__b2d+0x9c>
 800e026:	600b      	str	r3, [r1, #0]
 800e028:	dc14      	bgt.n	800e054 <__b2d+0x50>
 800e02a:	f1c0 0e0b 	rsb	lr, r0, #11
 800e02e:	fa24 f10e 	lsr.w	r1, r4, lr
 800e032:	42b7      	cmp	r7, r6
 800e034:	ea41 030c 	orr.w	r3, r1, ip
 800e038:	bf34      	ite	cc
 800e03a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e03e:	2100      	movcs	r1, #0
 800e040:	3015      	adds	r0, #21
 800e042:	fa04 f000 	lsl.w	r0, r4, r0
 800e046:	fa21 f10e 	lsr.w	r1, r1, lr
 800e04a:	ea40 0201 	orr.w	r2, r0, r1
 800e04e:	ec43 2b10 	vmov	d0, r2, r3
 800e052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e054:	42b7      	cmp	r7, r6
 800e056:	bf3a      	itte	cc
 800e058:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e05c:	f1a5 0608 	subcc.w	r6, r5, #8
 800e060:	2100      	movcs	r1, #0
 800e062:	380b      	subs	r0, #11
 800e064:	d017      	beq.n	800e096 <__b2d+0x92>
 800e066:	f1c0 0c20 	rsb	ip, r0, #32
 800e06a:	fa04 f500 	lsl.w	r5, r4, r0
 800e06e:	42be      	cmp	r6, r7
 800e070:	fa21 f40c 	lsr.w	r4, r1, ip
 800e074:	ea45 0504 	orr.w	r5, r5, r4
 800e078:	bf8c      	ite	hi
 800e07a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e07e:	2400      	movls	r4, #0
 800e080:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e084:	fa01 f000 	lsl.w	r0, r1, r0
 800e088:	fa24 f40c 	lsr.w	r4, r4, ip
 800e08c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e090:	ea40 0204 	orr.w	r2, r0, r4
 800e094:	e7db      	b.n	800e04e <__b2d+0x4a>
 800e096:	ea44 030c 	orr.w	r3, r4, ip
 800e09a:	460a      	mov	r2, r1
 800e09c:	e7d7      	b.n	800e04e <__b2d+0x4a>
 800e09e:	bf00      	nop
 800e0a0:	3ff00000 	.word	0x3ff00000

0800e0a4 <__d2b>:
 800e0a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e0a8:	4689      	mov	r9, r1
 800e0aa:	2101      	movs	r1, #1
 800e0ac:	ec57 6b10 	vmov	r6, r7, d0
 800e0b0:	4690      	mov	r8, r2
 800e0b2:	f7ff fc09 	bl	800d8c8 <_Balloc>
 800e0b6:	4604      	mov	r4, r0
 800e0b8:	b930      	cbnz	r0, 800e0c8 <__d2b+0x24>
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	4b25      	ldr	r3, [pc, #148]	; (800e154 <__d2b+0xb0>)
 800e0be:	4826      	ldr	r0, [pc, #152]	; (800e158 <__d2b+0xb4>)
 800e0c0:	f240 310a 	movw	r1, #778	; 0x30a
 800e0c4:	f000 fb4a 	bl	800e75c <__assert_func>
 800e0c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e0cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e0d0:	bb35      	cbnz	r5, 800e120 <__d2b+0x7c>
 800e0d2:	2e00      	cmp	r6, #0
 800e0d4:	9301      	str	r3, [sp, #4]
 800e0d6:	d028      	beq.n	800e12a <__d2b+0x86>
 800e0d8:	4668      	mov	r0, sp
 800e0da:	9600      	str	r6, [sp, #0]
 800e0dc:	f7ff fd06 	bl	800daec <__lo0bits>
 800e0e0:	9900      	ldr	r1, [sp, #0]
 800e0e2:	b300      	cbz	r0, 800e126 <__d2b+0x82>
 800e0e4:	9a01      	ldr	r2, [sp, #4]
 800e0e6:	f1c0 0320 	rsb	r3, r0, #32
 800e0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e0ee:	430b      	orrs	r3, r1
 800e0f0:	40c2      	lsrs	r2, r0
 800e0f2:	6163      	str	r3, [r4, #20]
 800e0f4:	9201      	str	r2, [sp, #4]
 800e0f6:	9b01      	ldr	r3, [sp, #4]
 800e0f8:	61a3      	str	r3, [r4, #24]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	bf14      	ite	ne
 800e0fe:	2202      	movne	r2, #2
 800e100:	2201      	moveq	r2, #1
 800e102:	6122      	str	r2, [r4, #16]
 800e104:	b1d5      	cbz	r5, 800e13c <__d2b+0x98>
 800e106:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e10a:	4405      	add	r5, r0
 800e10c:	f8c9 5000 	str.w	r5, [r9]
 800e110:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e114:	f8c8 0000 	str.w	r0, [r8]
 800e118:	4620      	mov	r0, r4
 800e11a:	b003      	add	sp, #12
 800e11c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e124:	e7d5      	b.n	800e0d2 <__d2b+0x2e>
 800e126:	6161      	str	r1, [r4, #20]
 800e128:	e7e5      	b.n	800e0f6 <__d2b+0x52>
 800e12a:	a801      	add	r0, sp, #4
 800e12c:	f7ff fcde 	bl	800daec <__lo0bits>
 800e130:	9b01      	ldr	r3, [sp, #4]
 800e132:	6163      	str	r3, [r4, #20]
 800e134:	2201      	movs	r2, #1
 800e136:	6122      	str	r2, [r4, #16]
 800e138:	3020      	adds	r0, #32
 800e13a:	e7e3      	b.n	800e104 <__d2b+0x60>
 800e13c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e140:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e144:	f8c9 0000 	str.w	r0, [r9]
 800e148:	6918      	ldr	r0, [r3, #16]
 800e14a:	f7ff fcaf 	bl	800daac <__hi0bits>
 800e14e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e152:	e7df      	b.n	800e114 <__d2b+0x70>
 800e154:	0800f5e8 	.word	0x0800f5e8
 800e158:	0800f674 	.word	0x0800f674

0800e15c <__ratio>:
 800e15c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e160:	4688      	mov	r8, r1
 800e162:	4669      	mov	r1, sp
 800e164:	4681      	mov	r9, r0
 800e166:	f7ff ff4d 	bl	800e004 <__b2d>
 800e16a:	a901      	add	r1, sp, #4
 800e16c:	4640      	mov	r0, r8
 800e16e:	ec55 4b10 	vmov	r4, r5, d0
 800e172:	ee10 aa10 	vmov	sl, s0
 800e176:	f7ff ff45 	bl	800e004 <__b2d>
 800e17a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e17e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e182:	1a59      	subs	r1, r3, r1
 800e184:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e188:	1ad3      	subs	r3, r2, r3
 800e18a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e18e:	ec57 6b10 	vmov	r6, r7, d0
 800e192:	2b00      	cmp	r3, #0
 800e194:	bfd6      	itet	le
 800e196:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e19a:	462a      	movgt	r2, r5
 800e19c:	463a      	movle	r2, r7
 800e19e:	46ab      	mov	fp, r5
 800e1a0:	bfd6      	itet	le
 800e1a2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800e1a6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e1aa:	ee00 3a90 	vmovle	s1, r3
 800e1ae:	ec4b ab17 	vmov	d7, sl, fp
 800e1b2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800e1b6:	b003      	add	sp, #12
 800e1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e1bc <__copybits>:
 800e1bc:	3901      	subs	r1, #1
 800e1be:	b570      	push	{r4, r5, r6, lr}
 800e1c0:	1149      	asrs	r1, r1, #5
 800e1c2:	6914      	ldr	r4, [r2, #16]
 800e1c4:	3101      	adds	r1, #1
 800e1c6:	f102 0314 	add.w	r3, r2, #20
 800e1ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e1ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e1d2:	1f05      	subs	r5, r0, #4
 800e1d4:	42a3      	cmp	r3, r4
 800e1d6:	d30c      	bcc.n	800e1f2 <__copybits+0x36>
 800e1d8:	1aa3      	subs	r3, r4, r2
 800e1da:	3b11      	subs	r3, #17
 800e1dc:	f023 0303 	bic.w	r3, r3, #3
 800e1e0:	3211      	adds	r2, #17
 800e1e2:	42a2      	cmp	r2, r4
 800e1e4:	bf88      	it	hi
 800e1e6:	2300      	movhi	r3, #0
 800e1e8:	4418      	add	r0, r3
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	4288      	cmp	r0, r1
 800e1ee:	d305      	bcc.n	800e1fc <__copybits+0x40>
 800e1f0:	bd70      	pop	{r4, r5, r6, pc}
 800e1f2:	f853 6b04 	ldr.w	r6, [r3], #4
 800e1f6:	f845 6f04 	str.w	r6, [r5, #4]!
 800e1fa:	e7eb      	b.n	800e1d4 <__copybits+0x18>
 800e1fc:	f840 3b04 	str.w	r3, [r0], #4
 800e200:	e7f4      	b.n	800e1ec <__copybits+0x30>

0800e202 <__any_on>:
 800e202:	f100 0214 	add.w	r2, r0, #20
 800e206:	6900      	ldr	r0, [r0, #16]
 800e208:	114b      	asrs	r3, r1, #5
 800e20a:	4298      	cmp	r0, r3
 800e20c:	b510      	push	{r4, lr}
 800e20e:	db11      	blt.n	800e234 <__any_on+0x32>
 800e210:	dd0a      	ble.n	800e228 <__any_on+0x26>
 800e212:	f011 011f 	ands.w	r1, r1, #31
 800e216:	d007      	beq.n	800e228 <__any_on+0x26>
 800e218:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e21c:	fa24 f001 	lsr.w	r0, r4, r1
 800e220:	fa00 f101 	lsl.w	r1, r0, r1
 800e224:	428c      	cmp	r4, r1
 800e226:	d10b      	bne.n	800e240 <__any_on+0x3e>
 800e228:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d803      	bhi.n	800e238 <__any_on+0x36>
 800e230:	2000      	movs	r0, #0
 800e232:	bd10      	pop	{r4, pc}
 800e234:	4603      	mov	r3, r0
 800e236:	e7f7      	b.n	800e228 <__any_on+0x26>
 800e238:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e23c:	2900      	cmp	r1, #0
 800e23e:	d0f5      	beq.n	800e22c <__any_on+0x2a>
 800e240:	2001      	movs	r0, #1
 800e242:	e7f6      	b.n	800e232 <__any_on+0x30>

0800e244 <_calloc_r>:
 800e244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e246:	fba1 2402 	umull	r2, r4, r1, r2
 800e24a:	b94c      	cbnz	r4, 800e260 <_calloc_r+0x1c>
 800e24c:	4611      	mov	r1, r2
 800e24e:	9201      	str	r2, [sp, #4]
 800e250:	f000 f87a 	bl	800e348 <_malloc_r>
 800e254:	9a01      	ldr	r2, [sp, #4]
 800e256:	4605      	mov	r5, r0
 800e258:	b930      	cbnz	r0, 800e268 <_calloc_r+0x24>
 800e25a:	4628      	mov	r0, r5
 800e25c:	b003      	add	sp, #12
 800e25e:	bd30      	pop	{r4, r5, pc}
 800e260:	220c      	movs	r2, #12
 800e262:	6002      	str	r2, [r0, #0]
 800e264:	2500      	movs	r5, #0
 800e266:	e7f8      	b.n	800e25a <_calloc_r+0x16>
 800e268:	4621      	mov	r1, r4
 800e26a:	f7fc fcd3 	bl	800ac14 <memset>
 800e26e:	e7f4      	b.n	800e25a <_calloc_r+0x16>

0800e270 <_free_r>:
 800e270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e272:	2900      	cmp	r1, #0
 800e274:	d044      	beq.n	800e300 <_free_r+0x90>
 800e276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e27a:	9001      	str	r0, [sp, #4]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	f1a1 0404 	sub.w	r4, r1, #4
 800e282:	bfb8      	it	lt
 800e284:	18e4      	addlt	r4, r4, r3
 800e286:	f000 fab3 	bl	800e7f0 <__malloc_lock>
 800e28a:	4a1e      	ldr	r2, [pc, #120]	; (800e304 <_free_r+0x94>)
 800e28c:	9801      	ldr	r0, [sp, #4]
 800e28e:	6813      	ldr	r3, [r2, #0]
 800e290:	b933      	cbnz	r3, 800e2a0 <_free_r+0x30>
 800e292:	6063      	str	r3, [r4, #4]
 800e294:	6014      	str	r4, [r2, #0]
 800e296:	b003      	add	sp, #12
 800e298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e29c:	f000 baae 	b.w	800e7fc <__malloc_unlock>
 800e2a0:	42a3      	cmp	r3, r4
 800e2a2:	d908      	bls.n	800e2b6 <_free_r+0x46>
 800e2a4:	6825      	ldr	r5, [r4, #0]
 800e2a6:	1961      	adds	r1, r4, r5
 800e2a8:	428b      	cmp	r3, r1
 800e2aa:	bf01      	itttt	eq
 800e2ac:	6819      	ldreq	r1, [r3, #0]
 800e2ae:	685b      	ldreq	r3, [r3, #4]
 800e2b0:	1949      	addeq	r1, r1, r5
 800e2b2:	6021      	streq	r1, [r4, #0]
 800e2b4:	e7ed      	b.n	800e292 <_free_r+0x22>
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	b10b      	cbz	r3, 800e2c0 <_free_r+0x50>
 800e2bc:	42a3      	cmp	r3, r4
 800e2be:	d9fa      	bls.n	800e2b6 <_free_r+0x46>
 800e2c0:	6811      	ldr	r1, [r2, #0]
 800e2c2:	1855      	adds	r5, r2, r1
 800e2c4:	42a5      	cmp	r5, r4
 800e2c6:	d10b      	bne.n	800e2e0 <_free_r+0x70>
 800e2c8:	6824      	ldr	r4, [r4, #0]
 800e2ca:	4421      	add	r1, r4
 800e2cc:	1854      	adds	r4, r2, r1
 800e2ce:	42a3      	cmp	r3, r4
 800e2d0:	6011      	str	r1, [r2, #0]
 800e2d2:	d1e0      	bne.n	800e296 <_free_r+0x26>
 800e2d4:	681c      	ldr	r4, [r3, #0]
 800e2d6:	685b      	ldr	r3, [r3, #4]
 800e2d8:	6053      	str	r3, [r2, #4]
 800e2da:	4421      	add	r1, r4
 800e2dc:	6011      	str	r1, [r2, #0]
 800e2de:	e7da      	b.n	800e296 <_free_r+0x26>
 800e2e0:	d902      	bls.n	800e2e8 <_free_r+0x78>
 800e2e2:	230c      	movs	r3, #12
 800e2e4:	6003      	str	r3, [r0, #0]
 800e2e6:	e7d6      	b.n	800e296 <_free_r+0x26>
 800e2e8:	6825      	ldr	r5, [r4, #0]
 800e2ea:	1961      	adds	r1, r4, r5
 800e2ec:	428b      	cmp	r3, r1
 800e2ee:	bf04      	itt	eq
 800e2f0:	6819      	ldreq	r1, [r3, #0]
 800e2f2:	685b      	ldreq	r3, [r3, #4]
 800e2f4:	6063      	str	r3, [r4, #4]
 800e2f6:	bf04      	itt	eq
 800e2f8:	1949      	addeq	r1, r1, r5
 800e2fa:	6021      	streq	r1, [r4, #0]
 800e2fc:	6054      	str	r4, [r2, #4]
 800e2fe:	e7ca      	b.n	800e296 <_free_r+0x26>
 800e300:	b003      	add	sp, #12
 800e302:	bd30      	pop	{r4, r5, pc}
 800e304:	20004dfc 	.word	0x20004dfc

0800e308 <sbrk_aligned>:
 800e308:	b570      	push	{r4, r5, r6, lr}
 800e30a:	4e0e      	ldr	r6, [pc, #56]	; (800e344 <sbrk_aligned+0x3c>)
 800e30c:	460c      	mov	r4, r1
 800e30e:	6831      	ldr	r1, [r6, #0]
 800e310:	4605      	mov	r5, r0
 800e312:	b911      	cbnz	r1, 800e31a <sbrk_aligned+0x12>
 800e314:	f000 f9f0 	bl	800e6f8 <_sbrk_r>
 800e318:	6030      	str	r0, [r6, #0]
 800e31a:	4621      	mov	r1, r4
 800e31c:	4628      	mov	r0, r5
 800e31e:	f000 f9eb 	bl	800e6f8 <_sbrk_r>
 800e322:	1c43      	adds	r3, r0, #1
 800e324:	d00a      	beq.n	800e33c <sbrk_aligned+0x34>
 800e326:	1cc4      	adds	r4, r0, #3
 800e328:	f024 0403 	bic.w	r4, r4, #3
 800e32c:	42a0      	cmp	r0, r4
 800e32e:	d007      	beq.n	800e340 <sbrk_aligned+0x38>
 800e330:	1a21      	subs	r1, r4, r0
 800e332:	4628      	mov	r0, r5
 800e334:	f000 f9e0 	bl	800e6f8 <_sbrk_r>
 800e338:	3001      	adds	r0, #1
 800e33a:	d101      	bne.n	800e340 <sbrk_aligned+0x38>
 800e33c:	f04f 34ff 	mov.w	r4, #4294967295
 800e340:	4620      	mov	r0, r4
 800e342:	bd70      	pop	{r4, r5, r6, pc}
 800e344:	20004e00 	.word	0x20004e00

0800e348 <_malloc_r>:
 800e348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e34c:	1ccd      	adds	r5, r1, #3
 800e34e:	f025 0503 	bic.w	r5, r5, #3
 800e352:	3508      	adds	r5, #8
 800e354:	2d0c      	cmp	r5, #12
 800e356:	bf38      	it	cc
 800e358:	250c      	movcc	r5, #12
 800e35a:	2d00      	cmp	r5, #0
 800e35c:	4607      	mov	r7, r0
 800e35e:	db01      	blt.n	800e364 <_malloc_r+0x1c>
 800e360:	42a9      	cmp	r1, r5
 800e362:	d905      	bls.n	800e370 <_malloc_r+0x28>
 800e364:	230c      	movs	r3, #12
 800e366:	603b      	str	r3, [r7, #0]
 800e368:	2600      	movs	r6, #0
 800e36a:	4630      	mov	r0, r6
 800e36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e370:	4e2e      	ldr	r6, [pc, #184]	; (800e42c <_malloc_r+0xe4>)
 800e372:	f000 fa3d 	bl	800e7f0 <__malloc_lock>
 800e376:	6833      	ldr	r3, [r6, #0]
 800e378:	461c      	mov	r4, r3
 800e37a:	bb34      	cbnz	r4, 800e3ca <_malloc_r+0x82>
 800e37c:	4629      	mov	r1, r5
 800e37e:	4638      	mov	r0, r7
 800e380:	f7ff ffc2 	bl	800e308 <sbrk_aligned>
 800e384:	1c43      	adds	r3, r0, #1
 800e386:	4604      	mov	r4, r0
 800e388:	d14d      	bne.n	800e426 <_malloc_r+0xde>
 800e38a:	6834      	ldr	r4, [r6, #0]
 800e38c:	4626      	mov	r6, r4
 800e38e:	2e00      	cmp	r6, #0
 800e390:	d140      	bne.n	800e414 <_malloc_r+0xcc>
 800e392:	6823      	ldr	r3, [r4, #0]
 800e394:	4631      	mov	r1, r6
 800e396:	4638      	mov	r0, r7
 800e398:	eb04 0803 	add.w	r8, r4, r3
 800e39c:	f000 f9ac 	bl	800e6f8 <_sbrk_r>
 800e3a0:	4580      	cmp	r8, r0
 800e3a2:	d13a      	bne.n	800e41a <_malloc_r+0xd2>
 800e3a4:	6821      	ldr	r1, [r4, #0]
 800e3a6:	3503      	adds	r5, #3
 800e3a8:	1a6d      	subs	r5, r5, r1
 800e3aa:	f025 0503 	bic.w	r5, r5, #3
 800e3ae:	3508      	adds	r5, #8
 800e3b0:	2d0c      	cmp	r5, #12
 800e3b2:	bf38      	it	cc
 800e3b4:	250c      	movcc	r5, #12
 800e3b6:	4629      	mov	r1, r5
 800e3b8:	4638      	mov	r0, r7
 800e3ba:	f7ff ffa5 	bl	800e308 <sbrk_aligned>
 800e3be:	3001      	adds	r0, #1
 800e3c0:	d02b      	beq.n	800e41a <_malloc_r+0xd2>
 800e3c2:	6823      	ldr	r3, [r4, #0]
 800e3c4:	442b      	add	r3, r5
 800e3c6:	6023      	str	r3, [r4, #0]
 800e3c8:	e00e      	b.n	800e3e8 <_malloc_r+0xa0>
 800e3ca:	6822      	ldr	r2, [r4, #0]
 800e3cc:	1b52      	subs	r2, r2, r5
 800e3ce:	d41e      	bmi.n	800e40e <_malloc_r+0xc6>
 800e3d0:	2a0b      	cmp	r2, #11
 800e3d2:	d916      	bls.n	800e402 <_malloc_r+0xba>
 800e3d4:	1961      	adds	r1, r4, r5
 800e3d6:	42a3      	cmp	r3, r4
 800e3d8:	6025      	str	r5, [r4, #0]
 800e3da:	bf18      	it	ne
 800e3dc:	6059      	strne	r1, [r3, #4]
 800e3de:	6863      	ldr	r3, [r4, #4]
 800e3e0:	bf08      	it	eq
 800e3e2:	6031      	streq	r1, [r6, #0]
 800e3e4:	5162      	str	r2, [r4, r5]
 800e3e6:	604b      	str	r3, [r1, #4]
 800e3e8:	4638      	mov	r0, r7
 800e3ea:	f104 060b 	add.w	r6, r4, #11
 800e3ee:	f000 fa05 	bl	800e7fc <__malloc_unlock>
 800e3f2:	f026 0607 	bic.w	r6, r6, #7
 800e3f6:	1d23      	adds	r3, r4, #4
 800e3f8:	1af2      	subs	r2, r6, r3
 800e3fa:	d0b6      	beq.n	800e36a <_malloc_r+0x22>
 800e3fc:	1b9b      	subs	r3, r3, r6
 800e3fe:	50a3      	str	r3, [r4, r2]
 800e400:	e7b3      	b.n	800e36a <_malloc_r+0x22>
 800e402:	6862      	ldr	r2, [r4, #4]
 800e404:	42a3      	cmp	r3, r4
 800e406:	bf0c      	ite	eq
 800e408:	6032      	streq	r2, [r6, #0]
 800e40a:	605a      	strne	r2, [r3, #4]
 800e40c:	e7ec      	b.n	800e3e8 <_malloc_r+0xa0>
 800e40e:	4623      	mov	r3, r4
 800e410:	6864      	ldr	r4, [r4, #4]
 800e412:	e7b2      	b.n	800e37a <_malloc_r+0x32>
 800e414:	4634      	mov	r4, r6
 800e416:	6876      	ldr	r6, [r6, #4]
 800e418:	e7b9      	b.n	800e38e <_malloc_r+0x46>
 800e41a:	230c      	movs	r3, #12
 800e41c:	603b      	str	r3, [r7, #0]
 800e41e:	4638      	mov	r0, r7
 800e420:	f000 f9ec 	bl	800e7fc <__malloc_unlock>
 800e424:	e7a1      	b.n	800e36a <_malloc_r+0x22>
 800e426:	6025      	str	r5, [r4, #0]
 800e428:	e7de      	b.n	800e3e8 <_malloc_r+0xa0>
 800e42a:	bf00      	nop
 800e42c:	20004dfc 	.word	0x20004dfc

0800e430 <__ssputs_r>:
 800e430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e434:	688e      	ldr	r6, [r1, #8]
 800e436:	429e      	cmp	r6, r3
 800e438:	4682      	mov	sl, r0
 800e43a:	460c      	mov	r4, r1
 800e43c:	4690      	mov	r8, r2
 800e43e:	461f      	mov	r7, r3
 800e440:	d838      	bhi.n	800e4b4 <__ssputs_r+0x84>
 800e442:	898a      	ldrh	r2, [r1, #12]
 800e444:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e448:	d032      	beq.n	800e4b0 <__ssputs_r+0x80>
 800e44a:	6825      	ldr	r5, [r4, #0]
 800e44c:	6909      	ldr	r1, [r1, #16]
 800e44e:	eba5 0901 	sub.w	r9, r5, r1
 800e452:	6965      	ldr	r5, [r4, #20]
 800e454:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e458:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e45c:	3301      	adds	r3, #1
 800e45e:	444b      	add	r3, r9
 800e460:	106d      	asrs	r5, r5, #1
 800e462:	429d      	cmp	r5, r3
 800e464:	bf38      	it	cc
 800e466:	461d      	movcc	r5, r3
 800e468:	0553      	lsls	r3, r2, #21
 800e46a:	d531      	bpl.n	800e4d0 <__ssputs_r+0xa0>
 800e46c:	4629      	mov	r1, r5
 800e46e:	f7ff ff6b 	bl	800e348 <_malloc_r>
 800e472:	4606      	mov	r6, r0
 800e474:	b950      	cbnz	r0, 800e48c <__ssputs_r+0x5c>
 800e476:	230c      	movs	r3, #12
 800e478:	f8ca 3000 	str.w	r3, [sl]
 800e47c:	89a3      	ldrh	r3, [r4, #12]
 800e47e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e482:	81a3      	strh	r3, [r4, #12]
 800e484:	f04f 30ff 	mov.w	r0, #4294967295
 800e488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e48c:	6921      	ldr	r1, [r4, #16]
 800e48e:	464a      	mov	r2, r9
 800e490:	f7fc fbb2 	bl	800abf8 <memcpy>
 800e494:	89a3      	ldrh	r3, [r4, #12]
 800e496:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e49a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e49e:	81a3      	strh	r3, [r4, #12]
 800e4a0:	6126      	str	r6, [r4, #16]
 800e4a2:	6165      	str	r5, [r4, #20]
 800e4a4:	444e      	add	r6, r9
 800e4a6:	eba5 0509 	sub.w	r5, r5, r9
 800e4aa:	6026      	str	r6, [r4, #0]
 800e4ac:	60a5      	str	r5, [r4, #8]
 800e4ae:	463e      	mov	r6, r7
 800e4b0:	42be      	cmp	r6, r7
 800e4b2:	d900      	bls.n	800e4b6 <__ssputs_r+0x86>
 800e4b4:	463e      	mov	r6, r7
 800e4b6:	6820      	ldr	r0, [r4, #0]
 800e4b8:	4632      	mov	r2, r6
 800e4ba:	4641      	mov	r1, r8
 800e4bc:	f000 f97e 	bl	800e7bc <memmove>
 800e4c0:	68a3      	ldr	r3, [r4, #8]
 800e4c2:	1b9b      	subs	r3, r3, r6
 800e4c4:	60a3      	str	r3, [r4, #8]
 800e4c6:	6823      	ldr	r3, [r4, #0]
 800e4c8:	4433      	add	r3, r6
 800e4ca:	6023      	str	r3, [r4, #0]
 800e4cc:	2000      	movs	r0, #0
 800e4ce:	e7db      	b.n	800e488 <__ssputs_r+0x58>
 800e4d0:	462a      	mov	r2, r5
 800e4d2:	f000 f999 	bl	800e808 <_realloc_r>
 800e4d6:	4606      	mov	r6, r0
 800e4d8:	2800      	cmp	r0, #0
 800e4da:	d1e1      	bne.n	800e4a0 <__ssputs_r+0x70>
 800e4dc:	6921      	ldr	r1, [r4, #16]
 800e4de:	4650      	mov	r0, sl
 800e4e0:	f7ff fec6 	bl	800e270 <_free_r>
 800e4e4:	e7c7      	b.n	800e476 <__ssputs_r+0x46>
	...

0800e4e8 <_svfiprintf_r>:
 800e4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ec:	4698      	mov	r8, r3
 800e4ee:	898b      	ldrh	r3, [r1, #12]
 800e4f0:	061b      	lsls	r3, r3, #24
 800e4f2:	b09d      	sub	sp, #116	; 0x74
 800e4f4:	4607      	mov	r7, r0
 800e4f6:	460d      	mov	r5, r1
 800e4f8:	4614      	mov	r4, r2
 800e4fa:	d50e      	bpl.n	800e51a <_svfiprintf_r+0x32>
 800e4fc:	690b      	ldr	r3, [r1, #16]
 800e4fe:	b963      	cbnz	r3, 800e51a <_svfiprintf_r+0x32>
 800e500:	2140      	movs	r1, #64	; 0x40
 800e502:	f7ff ff21 	bl	800e348 <_malloc_r>
 800e506:	6028      	str	r0, [r5, #0]
 800e508:	6128      	str	r0, [r5, #16]
 800e50a:	b920      	cbnz	r0, 800e516 <_svfiprintf_r+0x2e>
 800e50c:	230c      	movs	r3, #12
 800e50e:	603b      	str	r3, [r7, #0]
 800e510:	f04f 30ff 	mov.w	r0, #4294967295
 800e514:	e0d1      	b.n	800e6ba <_svfiprintf_r+0x1d2>
 800e516:	2340      	movs	r3, #64	; 0x40
 800e518:	616b      	str	r3, [r5, #20]
 800e51a:	2300      	movs	r3, #0
 800e51c:	9309      	str	r3, [sp, #36]	; 0x24
 800e51e:	2320      	movs	r3, #32
 800e520:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e524:	f8cd 800c 	str.w	r8, [sp, #12]
 800e528:	2330      	movs	r3, #48	; 0x30
 800e52a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e6d4 <_svfiprintf_r+0x1ec>
 800e52e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e532:	f04f 0901 	mov.w	r9, #1
 800e536:	4623      	mov	r3, r4
 800e538:	469a      	mov	sl, r3
 800e53a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e53e:	b10a      	cbz	r2, 800e544 <_svfiprintf_r+0x5c>
 800e540:	2a25      	cmp	r2, #37	; 0x25
 800e542:	d1f9      	bne.n	800e538 <_svfiprintf_r+0x50>
 800e544:	ebba 0b04 	subs.w	fp, sl, r4
 800e548:	d00b      	beq.n	800e562 <_svfiprintf_r+0x7a>
 800e54a:	465b      	mov	r3, fp
 800e54c:	4622      	mov	r2, r4
 800e54e:	4629      	mov	r1, r5
 800e550:	4638      	mov	r0, r7
 800e552:	f7ff ff6d 	bl	800e430 <__ssputs_r>
 800e556:	3001      	adds	r0, #1
 800e558:	f000 80aa 	beq.w	800e6b0 <_svfiprintf_r+0x1c8>
 800e55c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e55e:	445a      	add	r2, fp
 800e560:	9209      	str	r2, [sp, #36]	; 0x24
 800e562:	f89a 3000 	ldrb.w	r3, [sl]
 800e566:	2b00      	cmp	r3, #0
 800e568:	f000 80a2 	beq.w	800e6b0 <_svfiprintf_r+0x1c8>
 800e56c:	2300      	movs	r3, #0
 800e56e:	f04f 32ff 	mov.w	r2, #4294967295
 800e572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e576:	f10a 0a01 	add.w	sl, sl, #1
 800e57a:	9304      	str	r3, [sp, #16]
 800e57c:	9307      	str	r3, [sp, #28]
 800e57e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e582:	931a      	str	r3, [sp, #104]	; 0x68
 800e584:	4654      	mov	r4, sl
 800e586:	2205      	movs	r2, #5
 800e588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e58c:	4851      	ldr	r0, [pc, #324]	; (800e6d4 <_svfiprintf_r+0x1ec>)
 800e58e:	f7f1 fe5f 	bl	8000250 <memchr>
 800e592:	9a04      	ldr	r2, [sp, #16]
 800e594:	b9d8      	cbnz	r0, 800e5ce <_svfiprintf_r+0xe6>
 800e596:	06d0      	lsls	r0, r2, #27
 800e598:	bf44      	itt	mi
 800e59a:	2320      	movmi	r3, #32
 800e59c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5a0:	0711      	lsls	r1, r2, #28
 800e5a2:	bf44      	itt	mi
 800e5a4:	232b      	movmi	r3, #43	; 0x2b
 800e5a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e5ae:	2b2a      	cmp	r3, #42	; 0x2a
 800e5b0:	d015      	beq.n	800e5de <_svfiprintf_r+0xf6>
 800e5b2:	9a07      	ldr	r2, [sp, #28]
 800e5b4:	4654      	mov	r4, sl
 800e5b6:	2000      	movs	r0, #0
 800e5b8:	f04f 0c0a 	mov.w	ip, #10
 800e5bc:	4621      	mov	r1, r4
 800e5be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5c2:	3b30      	subs	r3, #48	; 0x30
 800e5c4:	2b09      	cmp	r3, #9
 800e5c6:	d94e      	bls.n	800e666 <_svfiprintf_r+0x17e>
 800e5c8:	b1b0      	cbz	r0, 800e5f8 <_svfiprintf_r+0x110>
 800e5ca:	9207      	str	r2, [sp, #28]
 800e5cc:	e014      	b.n	800e5f8 <_svfiprintf_r+0x110>
 800e5ce:	eba0 0308 	sub.w	r3, r0, r8
 800e5d2:	fa09 f303 	lsl.w	r3, r9, r3
 800e5d6:	4313      	orrs	r3, r2
 800e5d8:	9304      	str	r3, [sp, #16]
 800e5da:	46a2      	mov	sl, r4
 800e5dc:	e7d2      	b.n	800e584 <_svfiprintf_r+0x9c>
 800e5de:	9b03      	ldr	r3, [sp, #12]
 800e5e0:	1d19      	adds	r1, r3, #4
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	9103      	str	r1, [sp, #12]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	bfbb      	ittet	lt
 800e5ea:	425b      	neglt	r3, r3
 800e5ec:	f042 0202 	orrlt.w	r2, r2, #2
 800e5f0:	9307      	strge	r3, [sp, #28]
 800e5f2:	9307      	strlt	r3, [sp, #28]
 800e5f4:	bfb8      	it	lt
 800e5f6:	9204      	strlt	r2, [sp, #16]
 800e5f8:	7823      	ldrb	r3, [r4, #0]
 800e5fa:	2b2e      	cmp	r3, #46	; 0x2e
 800e5fc:	d10c      	bne.n	800e618 <_svfiprintf_r+0x130>
 800e5fe:	7863      	ldrb	r3, [r4, #1]
 800e600:	2b2a      	cmp	r3, #42	; 0x2a
 800e602:	d135      	bne.n	800e670 <_svfiprintf_r+0x188>
 800e604:	9b03      	ldr	r3, [sp, #12]
 800e606:	1d1a      	adds	r2, r3, #4
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	9203      	str	r2, [sp, #12]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	bfb8      	it	lt
 800e610:	f04f 33ff 	movlt.w	r3, #4294967295
 800e614:	3402      	adds	r4, #2
 800e616:	9305      	str	r3, [sp, #20]
 800e618:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e6e4 <_svfiprintf_r+0x1fc>
 800e61c:	7821      	ldrb	r1, [r4, #0]
 800e61e:	2203      	movs	r2, #3
 800e620:	4650      	mov	r0, sl
 800e622:	f7f1 fe15 	bl	8000250 <memchr>
 800e626:	b140      	cbz	r0, 800e63a <_svfiprintf_r+0x152>
 800e628:	2340      	movs	r3, #64	; 0x40
 800e62a:	eba0 000a 	sub.w	r0, r0, sl
 800e62e:	fa03 f000 	lsl.w	r0, r3, r0
 800e632:	9b04      	ldr	r3, [sp, #16]
 800e634:	4303      	orrs	r3, r0
 800e636:	3401      	adds	r4, #1
 800e638:	9304      	str	r3, [sp, #16]
 800e63a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e63e:	4826      	ldr	r0, [pc, #152]	; (800e6d8 <_svfiprintf_r+0x1f0>)
 800e640:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e644:	2206      	movs	r2, #6
 800e646:	f7f1 fe03 	bl	8000250 <memchr>
 800e64a:	2800      	cmp	r0, #0
 800e64c:	d038      	beq.n	800e6c0 <_svfiprintf_r+0x1d8>
 800e64e:	4b23      	ldr	r3, [pc, #140]	; (800e6dc <_svfiprintf_r+0x1f4>)
 800e650:	bb1b      	cbnz	r3, 800e69a <_svfiprintf_r+0x1b2>
 800e652:	9b03      	ldr	r3, [sp, #12]
 800e654:	3307      	adds	r3, #7
 800e656:	f023 0307 	bic.w	r3, r3, #7
 800e65a:	3308      	adds	r3, #8
 800e65c:	9303      	str	r3, [sp, #12]
 800e65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e660:	4433      	add	r3, r6
 800e662:	9309      	str	r3, [sp, #36]	; 0x24
 800e664:	e767      	b.n	800e536 <_svfiprintf_r+0x4e>
 800e666:	fb0c 3202 	mla	r2, ip, r2, r3
 800e66a:	460c      	mov	r4, r1
 800e66c:	2001      	movs	r0, #1
 800e66e:	e7a5      	b.n	800e5bc <_svfiprintf_r+0xd4>
 800e670:	2300      	movs	r3, #0
 800e672:	3401      	adds	r4, #1
 800e674:	9305      	str	r3, [sp, #20]
 800e676:	4619      	mov	r1, r3
 800e678:	f04f 0c0a 	mov.w	ip, #10
 800e67c:	4620      	mov	r0, r4
 800e67e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e682:	3a30      	subs	r2, #48	; 0x30
 800e684:	2a09      	cmp	r2, #9
 800e686:	d903      	bls.n	800e690 <_svfiprintf_r+0x1a8>
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d0c5      	beq.n	800e618 <_svfiprintf_r+0x130>
 800e68c:	9105      	str	r1, [sp, #20]
 800e68e:	e7c3      	b.n	800e618 <_svfiprintf_r+0x130>
 800e690:	fb0c 2101 	mla	r1, ip, r1, r2
 800e694:	4604      	mov	r4, r0
 800e696:	2301      	movs	r3, #1
 800e698:	e7f0      	b.n	800e67c <_svfiprintf_r+0x194>
 800e69a:	ab03      	add	r3, sp, #12
 800e69c:	9300      	str	r3, [sp, #0]
 800e69e:	462a      	mov	r2, r5
 800e6a0:	4b0f      	ldr	r3, [pc, #60]	; (800e6e0 <_svfiprintf_r+0x1f8>)
 800e6a2:	a904      	add	r1, sp, #16
 800e6a4:	4638      	mov	r0, r7
 800e6a6:	f7fc fb4f 	bl	800ad48 <_printf_float>
 800e6aa:	1c42      	adds	r2, r0, #1
 800e6ac:	4606      	mov	r6, r0
 800e6ae:	d1d6      	bne.n	800e65e <_svfiprintf_r+0x176>
 800e6b0:	89ab      	ldrh	r3, [r5, #12]
 800e6b2:	065b      	lsls	r3, r3, #25
 800e6b4:	f53f af2c 	bmi.w	800e510 <_svfiprintf_r+0x28>
 800e6b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6ba:	b01d      	add	sp, #116	; 0x74
 800e6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6c0:	ab03      	add	r3, sp, #12
 800e6c2:	9300      	str	r3, [sp, #0]
 800e6c4:	462a      	mov	r2, r5
 800e6c6:	4b06      	ldr	r3, [pc, #24]	; (800e6e0 <_svfiprintf_r+0x1f8>)
 800e6c8:	a904      	add	r1, sp, #16
 800e6ca:	4638      	mov	r0, r7
 800e6cc:	f7fc fdc8 	bl	800b260 <_printf_i>
 800e6d0:	e7eb      	b.n	800e6aa <_svfiprintf_r+0x1c2>
 800e6d2:	bf00      	nop
 800e6d4:	0800f7cc 	.word	0x0800f7cc
 800e6d8:	0800f7d6 	.word	0x0800f7d6
 800e6dc:	0800ad49 	.word	0x0800ad49
 800e6e0:	0800e431 	.word	0x0800e431
 800e6e4:	0800f7d2 	.word	0x0800f7d2

0800e6e8 <nan>:
 800e6e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e6f0 <nan+0x8>
 800e6ec:	4770      	bx	lr
 800e6ee:	bf00      	nop
 800e6f0:	00000000 	.word	0x00000000
 800e6f4:	7ff80000 	.word	0x7ff80000

0800e6f8 <_sbrk_r>:
 800e6f8:	b538      	push	{r3, r4, r5, lr}
 800e6fa:	4d06      	ldr	r5, [pc, #24]	; (800e714 <_sbrk_r+0x1c>)
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	4604      	mov	r4, r0
 800e700:	4608      	mov	r0, r1
 800e702:	602b      	str	r3, [r5, #0]
 800e704:	f7f3 fea2 	bl	800244c <_sbrk>
 800e708:	1c43      	adds	r3, r0, #1
 800e70a:	d102      	bne.n	800e712 <_sbrk_r+0x1a>
 800e70c:	682b      	ldr	r3, [r5, #0]
 800e70e:	b103      	cbz	r3, 800e712 <_sbrk_r+0x1a>
 800e710:	6023      	str	r3, [r4, #0]
 800e712:	bd38      	pop	{r3, r4, r5, pc}
 800e714:	20004e04 	.word	0x20004e04

0800e718 <strncmp>:
 800e718:	b510      	push	{r4, lr}
 800e71a:	b17a      	cbz	r2, 800e73c <strncmp+0x24>
 800e71c:	4603      	mov	r3, r0
 800e71e:	3901      	subs	r1, #1
 800e720:	1884      	adds	r4, r0, r2
 800e722:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e726:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e72a:	4290      	cmp	r0, r2
 800e72c:	d101      	bne.n	800e732 <strncmp+0x1a>
 800e72e:	42a3      	cmp	r3, r4
 800e730:	d101      	bne.n	800e736 <strncmp+0x1e>
 800e732:	1a80      	subs	r0, r0, r2
 800e734:	bd10      	pop	{r4, pc}
 800e736:	2800      	cmp	r0, #0
 800e738:	d1f3      	bne.n	800e722 <strncmp+0xa>
 800e73a:	e7fa      	b.n	800e732 <strncmp+0x1a>
 800e73c:	4610      	mov	r0, r2
 800e73e:	e7f9      	b.n	800e734 <strncmp+0x1c>

0800e740 <__ascii_wctomb>:
 800e740:	b149      	cbz	r1, 800e756 <__ascii_wctomb+0x16>
 800e742:	2aff      	cmp	r2, #255	; 0xff
 800e744:	bf85      	ittet	hi
 800e746:	238a      	movhi	r3, #138	; 0x8a
 800e748:	6003      	strhi	r3, [r0, #0]
 800e74a:	700a      	strbls	r2, [r1, #0]
 800e74c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e750:	bf98      	it	ls
 800e752:	2001      	movls	r0, #1
 800e754:	4770      	bx	lr
 800e756:	4608      	mov	r0, r1
 800e758:	4770      	bx	lr
	...

0800e75c <__assert_func>:
 800e75c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e75e:	4614      	mov	r4, r2
 800e760:	461a      	mov	r2, r3
 800e762:	4b09      	ldr	r3, [pc, #36]	; (800e788 <__assert_func+0x2c>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	4605      	mov	r5, r0
 800e768:	68d8      	ldr	r0, [r3, #12]
 800e76a:	b14c      	cbz	r4, 800e780 <__assert_func+0x24>
 800e76c:	4b07      	ldr	r3, [pc, #28]	; (800e78c <__assert_func+0x30>)
 800e76e:	9100      	str	r1, [sp, #0]
 800e770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e774:	4906      	ldr	r1, [pc, #24]	; (800e790 <__assert_func+0x34>)
 800e776:	462b      	mov	r3, r5
 800e778:	f000 f80e 	bl	800e798 <fiprintf>
 800e77c:	f000 fa8c 	bl	800ec98 <abort>
 800e780:	4b04      	ldr	r3, [pc, #16]	; (800e794 <__assert_func+0x38>)
 800e782:	461c      	mov	r4, r3
 800e784:	e7f3      	b.n	800e76e <__assert_func+0x12>
 800e786:	bf00      	nop
 800e788:	20000014 	.word	0x20000014
 800e78c:	0800f7dd 	.word	0x0800f7dd
 800e790:	0800f7ea 	.word	0x0800f7ea
 800e794:	0800f818 	.word	0x0800f818

0800e798 <fiprintf>:
 800e798:	b40e      	push	{r1, r2, r3}
 800e79a:	b503      	push	{r0, r1, lr}
 800e79c:	4601      	mov	r1, r0
 800e79e:	ab03      	add	r3, sp, #12
 800e7a0:	4805      	ldr	r0, [pc, #20]	; (800e7b8 <fiprintf+0x20>)
 800e7a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7a6:	6800      	ldr	r0, [r0, #0]
 800e7a8:	9301      	str	r3, [sp, #4]
 800e7aa:	f000 f885 	bl	800e8b8 <_vfiprintf_r>
 800e7ae:	b002      	add	sp, #8
 800e7b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7b4:	b003      	add	sp, #12
 800e7b6:	4770      	bx	lr
 800e7b8:	20000014 	.word	0x20000014

0800e7bc <memmove>:
 800e7bc:	4288      	cmp	r0, r1
 800e7be:	b510      	push	{r4, lr}
 800e7c0:	eb01 0402 	add.w	r4, r1, r2
 800e7c4:	d902      	bls.n	800e7cc <memmove+0x10>
 800e7c6:	4284      	cmp	r4, r0
 800e7c8:	4623      	mov	r3, r4
 800e7ca:	d807      	bhi.n	800e7dc <memmove+0x20>
 800e7cc:	1e43      	subs	r3, r0, #1
 800e7ce:	42a1      	cmp	r1, r4
 800e7d0:	d008      	beq.n	800e7e4 <memmove+0x28>
 800e7d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e7da:	e7f8      	b.n	800e7ce <memmove+0x12>
 800e7dc:	4402      	add	r2, r0
 800e7de:	4601      	mov	r1, r0
 800e7e0:	428a      	cmp	r2, r1
 800e7e2:	d100      	bne.n	800e7e6 <memmove+0x2a>
 800e7e4:	bd10      	pop	{r4, pc}
 800e7e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e7ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e7ee:	e7f7      	b.n	800e7e0 <memmove+0x24>

0800e7f0 <__malloc_lock>:
 800e7f0:	4801      	ldr	r0, [pc, #4]	; (800e7f8 <__malloc_lock+0x8>)
 800e7f2:	f000 bc11 	b.w	800f018 <__retarget_lock_acquire_recursive>
 800e7f6:	bf00      	nop
 800e7f8:	20004e08 	.word	0x20004e08

0800e7fc <__malloc_unlock>:
 800e7fc:	4801      	ldr	r0, [pc, #4]	; (800e804 <__malloc_unlock+0x8>)
 800e7fe:	f000 bc0c 	b.w	800f01a <__retarget_lock_release_recursive>
 800e802:	bf00      	nop
 800e804:	20004e08 	.word	0x20004e08

0800e808 <_realloc_r>:
 800e808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e80c:	4680      	mov	r8, r0
 800e80e:	4614      	mov	r4, r2
 800e810:	460e      	mov	r6, r1
 800e812:	b921      	cbnz	r1, 800e81e <_realloc_r+0x16>
 800e814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e818:	4611      	mov	r1, r2
 800e81a:	f7ff bd95 	b.w	800e348 <_malloc_r>
 800e81e:	b92a      	cbnz	r2, 800e82c <_realloc_r+0x24>
 800e820:	f7ff fd26 	bl	800e270 <_free_r>
 800e824:	4625      	mov	r5, r4
 800e826:	4628      	mov	r0, r5
 800e828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e82c:	f000 fc5c 	bl	800f0e8 <_malloc_usable_size_r>
 800e830:	4284      	cmp	r4, r0
 800e832:	4607      	mov	r7, r0
 800e834:	d802      	bhi.n	800e83c <_realloc_r+0x34>
 800e836:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e83a:	d812      	bhi.n	800e862 <_realloc_r+0x5a>
 800e83c:	4621      	mov	r1, r4
 800e83e:	4640      	mov	r0, r8
 800e840:	f7ff fd82 	bl	800e348 <_malloc_r>
 800e844:	4605      	mov	r5, r0
 800e846:	2800      	cmp	r0, #0
 800e848:	d0ed      	beq.n	800e826 <_realloc_r+0x1e>
 800e84a:	42bc      	cmp	r4, r7
 800e84c:	4622      	mov	r2, r4
 800e84e:	4631      	mov	r1, r6
 800e850:	bf28      	it	cs
 800e852:	463a      	movcs	r2, r7
 800e854:	f7fc f9d0 	bl	800abf8 <memcpy>
 800e858:	4631      	mov	r1, r6
 800e85a:	4640      	mov	r0, r8
 800e85c:	f7ff fd08 	bl	800e270 <_free_r>
 800e860:	e7e1      	b.n	800e826 <_realloc_r+0x1e>
 800e862:	4635      	mov	r5, r6
 800e864:	e7df      	b.n	800e826 <_realloc_r+0x1e>

0800e866 <__sfputc_r>:
 800e866:	6893      	ldr	r3, [r2, #8]
 800e868:	3b01      	subs	r3, #1
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	b410      	push	{r4}
 800e86e:	6093      	str	r3, [r2, #8]
 800e870:	da08      	bge.n	800e884 <__sfputc_r+0x1e>
 800e872:	6994      	ldr	r4, [r2, #24]
 800e874:	42a3      	cmp	r3, r4
 800e876:	db01      	blt.n	800e87c <__sfputc_r+0x16>
 800e878:	290a      	cmp	r1, #10
 800e87a:	d103      	bne.n	800e884 <__sfputc_r+0x1e>
 800e87c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e880:	f000 b94a 	b.w	800eb18 <__swbuf_r>
 800e884:	6813      	ldr	r3, [r2, #0]
 800e886:	1c58      	adds	r0, r3, #1
 800e888:	6010      	str	r0, [r2, #0]
 800e88a:	7019      	strb	r1, [r3, #0]
 800e88c:	4608      	mov	r0, r1
 800e88e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e892:	4770      	bx	lr

0800e894 <__sfputs_r>:
 800e894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e896:	4606      	mov	r6, r0
 800e898:	460f      	mov	r7, r1
 800e89a:	4614      	mov	r4, r2
 800e89c:	18d5      	adds	r5, r2, r3
 800e89e:	42ac      	cmp	r4, r5
 800e8a0:	d101      	bne.n	800e8a6 <__sfputs_r+0x12>
 800e8a2:	2000      	movs	r0, #0
 800e8a4:	e007      	b.n	800e8b6 <__sfputs_r+0x22>
 800e8a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8aa:	463a      	mov	r2, r7
 800e8ac:	4630      	mov	r0, r6
 800e8ae:	f7ff ffda 	bl	800e866 <__sfputc_r>
 800e8b2:	1c43      	adds	r3, r0, #1
 800e8b4:	d1f3      	bne.n	800e89e <__sfputs_r+0xa>
 800e8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e8b8 <_vfiprintf_r>:
 800e8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8bc:	460d      	mov	r5, r1
 800e8be:	b09d      	sub	sp, #116	; 0x74
 800e8c0:	4614      	mov	r4, r2
 800e8c2:	4698      	mov	r8, r3
 800e8c4:	4606      	mov	r6, r0
 800e8c6:	b118      	cbz	r0, 800e8d0 <_vfiprintf_r+0x18>
 800e8c8:	6983      	ldr	r3, [r0, #24]
 800e8ca:	b90b      	cbnz	r3, 800e8d0 <_vfiprintf_r+0x18>
 800e8cc:	f000 fb06 	bl	800eedc <__sinit>
 800e8d0:	4b89      	ldr	r3, [pc, #548]	; (800eaf8 <_vfiprintf_r+0x240>)
 800e8d2:	429d      	cmp	r5, r3
 800e8d4:	d11b      	bne.n	800e90e <_vfiprintf_r+0x56>
 800e8d6:	6875      	ldr	r5, [r6, #4]
 800e8d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8da:	07d9      	lsls	r1, r3, #31
 800e8dc:	d405      	bmi.n	800e8ea <_vfiprintf_r+0x32>
 800e8de:	89ab      	ldrh	r3, [r5, #12]
 800e8e0:	059a      	lsls	r2, r3, #22
 800e8e2:	d402      	bmi.n	800e8ea <_vfiprintf_r+0x32>
 800e8e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8e6:	f000 fb97 	bl	800f018 <__retarget_lock_acquire_recursive>
 800e8ea:	89ab      	ldrh	r3, [r5, #12]
 800e8ec:	071b      	lsls	r3, r3, #28
 800e8ee:	d501      	bpl.n	800e8f4 <_vfiprintf_r+0x3c>
 800e8f0:	692b      	ldr	r3, [r5, #16]
 800e8f2:	b9eb      	cbnz	r3, 800e930 <_vfiprintf_r+0x78>
 800e8f4:	4629      	mov	r1, r5
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	f000 f960 	bl	800ebbc <__swsetup_r>
 800e8fc:	b1c0      	cbz	r0, 800e930 <_vfiprintf_r+0x78>
 800e8fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e900:	07dc      	lsls	r4, r3, #31
 800e902:	d50e      	bpl.n	800e922 <_vfiprintf_r+0x6a>
 800e904:	f04f 30ff 	mov.w	r0, #4294967295
 800e908:	b01d      	add	sp, #116	; 0x74
 800e90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e90e:	4b7b      	ldr	r3, [pc, #492]	; (800eafc <_vfiprintf_r+0x244>)
 800e910:	429d      	cmp	r5, r3
 800e912:	d101      	bne.n	800e918 <_vfiprintf_r+0x60>
 800e914:	68b5      	ldr	r5, [r6, #8]
 800e916:	e7df      	b.n	800e8d8 <_vfiprintf_r+0x20>
 800e918:	4b79      	ldr	r3, [pc, #484]	; (800eb00 <_vfiprintf_r+0x248>)
 800e91a:	429d      	cmp	r5, r3
 800e91c:	bf08      	it	eq
 800e91e:	68f5      	ldreq	r5, [r6, #12]
 800e920:	e7da      	b.n	800e8d8 <_vfiprintf_r+0x20>
 800e922:	89ab      	ldrh	r3, [r5, #12]
 800e924:	0598      	lsls	r0, r3, #22
 800e926:	d4ed      	bmi.n	800e904 <_vfiprintf_r+0x4c>
 800e928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e92a:	f000 fb76 	bl	800f01a <__retarget_lock_release_recursive>
 800e92e:	e7e9      	b.n	800e904 <_vfiprintf_r+0x4c>
 800e930:	2300      	movs	r3, #0
 800e932:	9309      	str	r3, [sp, #36]	; 0x24
 800e934:	2320      	movs	r3, #32
 800e936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e93a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e93e:	2330      	movs	r3, #48	; 0x30
 800e940:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eb04 <_vfiprintf_r+0x24c>
 800e944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e948:	f04f 0901 	mov.w	r9, #1
 800e94c:	4623      	mov	r3, r4
 800e94e:	469a      	mov	sl, r3
 800e950:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e954:	b10a      	cbz	r2, 800e95a <_vfiprintf_r+0xa2>
 800e956:	2a25      	cmp	r2, #37	; 0x25
 800e958:	d1f9      	bne.n	800e94e <_vfiprintf_r+0x96>
 800e95a:	ebba 0b04 	subs.w	fp, sl, r4
 800e95e:	d00b      	beq.n	800e978 <_vfiprintf_r+0xc0>
 800e960:	465b      	mov	r3, fp
 800e962:	4622      	mov	r2, r4
 800e964:	4629      	mov	r1, r5
 800e966:	4630      	mov	r0, r6
 800e968:	f7ff ff94 	bl	800e894 <__sfputs_r>
 800e96c:	3001      	adds	r0, #1
 800e96e:	f000 80aa 	beq.w	800eac6 <_vfiprintf_r+0x20e>
 800e972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e974:	445a      	add	r2, fp
 800e976:	9209      	str	r2, [sp, #36]	; 0x24
 800e978:	f89a 3000 	ldrb.w	r3, [sl]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f000 80a2 	beq.w	800eac6 <_vfiprintf_r+0x20e>
 800e982:	2300      	movs	r3, #0
 800e984:	f04f 32ff 	mov.w	r2, #4294967295
 800e988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e98c:	f10a 0a01 	add.w	sl, sl, #1
 800e990:	9304      	str	r3, [sp, #16]
 800e992:	9307      	str	r3, [sp, #28]
 800e994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e998:	931a      	str	r3, [sp, #104]	; 0x68
 800e99a:	4654      	mov	r4, sl
 800e99c:	2205      	movs	r2, #5
 800e99e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9a2:	4858      	ldr	r0, [pc, #352]	; (800eb04 <_vfiprintf_r+0x24c>)
 800e9a4:	f7f1 fc54 	bl	8000250 <memchr>
 800e9a8:	9a04      	ldr	r2, [sp, #16]
 800e9aa:	b9d8      	cbnz	r0, 800e9e4 <_vfiprintf_r+0x12c>
 800e9ac:	06d1      	lsls	r1, r2, #27
 800e9ae:	bf44      	itt	mi
 800e9b0:	2320      	movmi	r3, #32
 800e9b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9b6:	0713      	lsls	r3, r2, #28
 800e9b8:	bf44      	itt	mi
 800e9ba:	232b      	movmi	r3, #43	; 0x2b
 800e9bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9c0:	f89a 3000 	ldrb.w	r3, [sl]
 800e9c4:	2b2a      	cmp	r3, #42	; 0x2a
 800e9c6:	d015      	beq.n	800e9f4 <_vfiprintf_r+0x13c>
 800e9c8:	9a07      	ldr	r2, [sp, #28]
 800e9ca:	4654      	mov	r4, sl
 800e9cc:	2000      	movs	r0, #0
 800e9ce:	f04f 0c0a 	mov.w	ip, #10
 800e9d2:	4621      	mov	r1, r4
 800e9d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9d8:	3b30      	subs	r3, #48	; 0x30
 800e9da:	2b09      	cmp	r3, #9
 800e9dc:	d94e      	bls.n	800ea7c <_vfiprintf_r+0x1c4>
 800e9de:	b1b0      	cbz	r0, 800ea0e <_vfiprintf_r+0x156>
 800e9e0:	9207      	str	r2, [sp, #28]
 800e9e2:	e014      	b.n	800ea0e <_vfiprintf_r+0x156>
 800e9e4:	eba0 0308 	sub.w	r3, r0, r8
 800e9e8:	fa09 f303 	lsl.w	r3, r9, r3
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	9304      	str	r3, [sp, #16]
 800e9f0:	46a2      	mov	sl, r4
 800e9f2:	e7d2      	b.n	800e99a <_vfiprintf_r+0xe2>
 800e9f4:	9b03      	ldr	r3, [sp, #12]
 800e9f6:	1d19      	adds	r1, r3, #4
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	9103      	str	r1, [sp, #12]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	bfbb      	ittet	lt
 800ea00:	425b      	neglt	r3, r3
 800ea02:	f042 0202 	orrlt.w	r2, r2, #2
 800ea06:	9307      	strge	r3, [sp, #28]
 800ea08:	9307      	strlt	r3, [sp, #28]
 800ea0a:	bfb8      	it	lt
 800ea0c:	9204      	strlt	r2, [sp, #16]
 800ea0e:	7823      	ldrb	r3, [r4, #0]
 800ea10:	2b2e      	cmp	r3, #46	; 0x2e
 800ea12:	d10c      	bne.n	800ea2e <_vfiprintf_r+0x176>
 800ea14:	7863      	ldrb	r3, [r4, #1]
 800ea16:	2b2a      	cmp	r3, #42	; 0x2a
 800ea18:	d135      	bne.n	800ea86 <_vfiprintf_r+0x1ce>
 800ea1a:	9b03      	ldr	r3, [sp, #12]
 800ea1c:	1d1a      	adds	r2, r3, #4
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	9203      	str	r2, [sp, #12]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	bfb8      	it	lt
 800ea26:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea2a:	3402      	adds	r4, #2
 800ea2c:	9305      	str	r3, [sp, #20]
 800ea2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eb14 <_vfiprintf_r+0x25c>
 800ea32:	7821      	ldrb	r1, [r4, #0]
 800ea34:	2203      	movs	r2, #3
 800ea36:	4650      	mov	r0, sl
 800ea38:	f7f1 fc0a 	bl	8000250 <memchr>
 800ea3c:	b140      	cbz	r0, 800ea50 <_vfiprintf_r+0x198>
 800ea3e:	2340      	movs	r3, #64	; 0x40
 800ea40:	eba0 000a 	sub.w	r0, r0, sl
 800ea44:	fa03 f000 	lsl.w	r0, r3, r0
 800ea48:	9b04      	ldr	r3, [sp, #16]
 800ea4a:	4303      	orrs	r3, r0
 800ea4c:	3401      	adds	r4, #1
 800ea4e:	9304      	str	r3, [sp, #16]
 800ea50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea54:	482c      	ldr	r0, [pc, #176]	; (800eb08 <_vfiprintf_r+0x250>)
 800ea56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea5a:	2206      	movs	r2, #6
 800ea5c:	f7f1 fbf8 	bl	8000250 <memchr>
 800ea60:	2800      	cmp	r0, #0
 800ea62:	d03f      	beq.n	800eae4 <_vfiprintf_r+0x22c>
 800ea64:	4b29      	ldr	r3, [pc, #164]	; (800eb0c <_vfiprintf_r+0x254>)
 800ea66:	bb1b      	cbnz	r3, 800eab0 <_vfiprintf_r+0x1f8>
 800ea68:	9b03      	ldr	r3, [sp, #12]
 800ea6a:	3307      	adds	r3, #7
 800ea6c:	f023 0307 	bic.w	r3, r3, #7
 800ea70:	3308      	adds	r3, #8
 800ea72:	9303      	str	r3, [sp, #12]
 800ea74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea76:	443b      	add	r3, r7
 800ea78:	9309      	str	r3, [sp, #36]	; 0x24
 800ea7a:	e767      	b.n	800e94c <_vfiprintf_r+0x94>
 800ea7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea80:	460c      	mov	r4, r1
 800ea82:	2001      	movs	r0, #1
 800ea84:	e7a5      	b.n	800e9d2 <_vfiprintf_r+0x11a>
 800ea86:	2300      	movs	r3, #0
 800ea88:	3401      	adds	r4, #1
 800ea8a:	9305      	str	r3, [sp, #20]
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	f04f 0c0a 	mov.w	ip, #10
 800ea92:	4620      	mov	r0, r4
 800ea94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea98:	3a30      	subs	r2, #48	; 0x30
 800ea9a:	2a09      	cmp	r2, #9
 800ea9c:	d903      	bls.n	800eaa6 <_vfiprintf_r+0x1ee>
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d0c5      	beq.n	800ea2e <_vfiprintf_r+0x176>
 800eaa2:	9105      	str	r1, [sp, #20]
 800eaa4:	e7c3      	b.n	800ea2e <_vfiprintf_r+0x176>
 800eaa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaaa:	4604      	mov	r4, r0
 800eaac:	2301      	movs	r3, #1
 800eaae:	e7f0      	b.n	800ea92 <_vfiprintf_r+0x1da>
 800eab0:	ab03      	add	r3, sp, #12
 800eab2:	9300      	str	r3, [sp, #0]
 800eab4:	462a      	mov	r2, r5
 800eab6:	4b16      	ldr	r3, [pc, #88]	; (800eb10 <_vfiprintf_r+0x258>)
 800eab8:	a904      	add	r1, sp, #16
 800eaba:	4630      	mov	r0, r6
 800eabc:	f7fc f944 	bl	800ad48 <_printf_float>
 800eac0:	4607      	mov	r7, r0
 800eac2:	1c78      	adds	r0, r7, #1
 800eac4:	d1d6      	bne.n	800ea74 <_vfiprintf_r+0x1bc>
 800eac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eac8:	07d9      	lsls	r1, r3, #31
 800eaca:	d405      	bmi.n	800ead8 <_vfiprintf_r+0x220>
 800eacc:	89ab      	ldrh	r3, [r5, #12]
 800eace:	059a      	lsls	r2, r3, #22
 800ead0:	d402      	bmi.n	800ead8 <_vfiprintf_r+0x220>
 800ead2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ead4:	f000 faa1 	bl	800f01a <__retarget_lock_release_recursive>
 800ead8:	89ab      	ldrh	r3, [r5, #12]
 800eada:	065b      	lsls	r3, r3, #25
 800eadc:	f53f af12 	bmi.w	800e904 <_vfiprintf_r+0x4c>
 800eae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eae2:	e711      	b.n	800e908 <_vfiprintf_r+0x50>
 800eae4:	ab03      	add	r3, sp, #12
 800eae6:	9300      	str	r3, [sp, #0]
 800eae8:	462a      	mov	r2, r5
 800eaea:	4b09      	ldr	r3, [pc, #36]	; (800eb10 <_vfiprintf_r+0x258>)
 800eaec:	a904      	add	r1, sp, #16
 800eaee:	4630      	mov	r0, r6
 800eaf0:	f7fc fbb6 	bl	800b260 <_printf_i>
 800eaf4:	e7e4      	b.n	800eac0 <_vfiprintf_r+0x208>
 800eaf6:	bf00      	nop
 800eaf8:	0800f83c 	.word	0x0800f83c
 800eafc:	0800f85c 	.word	0x0800f85c
 800eb00:	0800f81c 	.word	0x0800f81c
 800eb04:	0800f7cc 	.word	0x0800f7cc
 800eb08:	0800f7d6 	.word	0x0800f7d6
 800eb0c:	0800ad49 	.word	0x0800ad49
 800eb10:	0800e895 	.word	0x0800e895
 800eb14:	0800f7d2 	.word	0x0800f7d2

0800eb18 <__swbuf_r>:
 800eb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb1a:	460e      	mov	r6, r1
 800eb1c:	4614      	mov	r4, r2
 800eb1e:	4605      	mov	r5, r0
 800eb20:	b118      	cbz	r0, 800eb2a <__swbuf_r+0x12>
 800eb22:	6983      	ldr	r3, [r0, #24]
 800eb24:	b90b      	cbnz	r3, 800eb2a <__swbuf_r+0x12>
 800eb26:	f000 f9d9 	bl	800eedc <__sinit>
 800eb2a:	4b21      	ldr	r3, [pc, #132]	; (800ebb0 <__swbuf_r+0x98>)
 800eb2c:	429c      	cmp	r4, r3
 800eb2e:	d12b      	bne.n	800eb88 <__swbuf_r+0x70>
 800eb30:	686c      	ldr	r4, [r5, #4]
 800eb32:	69a3      	ldr	r3, [r4, #24]
 800eb34:	60a3      	str	r3, [r4, #8]
 800eb36:	89a3      	ldrh	r3, [r4, #12]
 800eb38:	071a      	lsls	r2, r3, #28
 800eb3a:	d52f      	bpl.n	800eb9c <__swbuf_r+0x84>
 800eb3c:	6923      	ldr	r3, [r4, #16]
 800eb3e:	b36b      	cbz	r3, 800eb9c <__swbuf_r+0x84>
 800eb40:	6923      	ldr	r3, [r4, #16]
 800eb42:	6820      	ldr	r0, [r4, #0]
 800eb44:	1ac0      	subs	r0, r0, r3
 800eb46:	6963      	ldr	r3, [r4, #20]
 800eb48:	b2f6      	uxtb	r6, r6
 800eb4a:	4283      	cmp	r3, r0
 800eb4c:	4637      	mov	r7, r6
 800eb4e:	dc04      	bgt.n	800eb5a <__swbuf_r+0x42>
 800eb50:	4621      	mov	r1, r4
 800eb52:	4628      	mov	r0, r5
 800eb54:	f000 f92e 	bl	800edb4 <_fflush_r>
 800eb58:	bb30      	cbnz	r0, 800eba8 <__swbuf_r+0x90>
 800eb5a:	68a3      	ldr	r3, [r4, #8]
 800eb5c:	3b01      	subs	r3, #1
 800eb5e:	60a3      	str	r3, [r4, #8]
 800eb60:	6823      	ldr	r3, [r4, #0]
 800eb62:	1c5a      	adds	r2, r3, #1
 800eb64:	6022      	str	r2, [r4, #0]
 800eb66:	701e      	strb	r6, [r3, #0]
 800eb68:	6963      	ldr	r3, [r4, #20]
 800eb6a:	3001      	adds	r0, #1
 800eb6c:	4283      	cmp	r3, r0
 800eb6e:	d004      	beq.n	800eb7a <__swbuf_r+0x62>
 800eb70:	89a3      	ldrh	r3, [r4, #12]
 800eb72:	07db      	lsls	r3, r3, #31
 800eb74:	d506      	bpl.n	800eb84 <__swbuf_r+0x6c>
 800eb76:	2e0a      	cmp	r6, #10
 800eb78:	d104      	bne.n	800eb84 <__swbuf_r+0x6c>
 800eb7a:	4621      	mov	r1, r4
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	f000 f919 	bl	800edb4 <_fflush_r>
 800eb82:	b988      	cbnz	r0, 800eba8 <__swbuf_r+0x90>
 800eb84:	4638      	mov	r0, r7
 800eb86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb88:	4b0a      	ldr	r3, [pc, #40]	; (800ebb4 <__swbuf_r+0x9c>)
 800eb8a:	429c      	cmp	r4, r3
 800eb8c:	d101      	bne.n	800eb92 <__swbuf_r+0x7a>
 800eb8e:	68ac      	ldr	r4, [r5, #8]
 800eb90:	e7cf      	b.n	800eb32 <__swbuf_r+0x1a>
 800eb92:	4b09      	ldr	r3, [pc, #36]	; (800ebb8 <__swbuf_r+0xa0>)
 800eb94:	429c      	cmp	r4, r3
 800eb96:	bf08      	it	eq
 800eb98:	68ec      	ldreq	r4, [r5, #12]
 800eb9a:	e7ca      	b.n	800eb32 <__swbuf_r+0x1a>
 800eb9c:	4621      	mov	r1, r4
 800eb9e:	4628      	mov	r0, r5
 800eba0:	f000 f80c 	bl	800ebbc <__swsetup_r>
 800eba4:	2800      	cmp	r0, #0
 800eba6:	d0cb      	beq.n	800eb40 <__swbuf_r+0x28>
 800eba8:	f04f 37ff 	mov.w	r7, #4294967295
 800ebac:	e7ea      	b.n	800eb84 <__swbuf_r+0x6c>
 800ebae:	bf00      	nop
 800ebb0:	0800f83c 	.word	0x0800f83c
 800ebb4:	0800f85c 	.word	0x0800f85c
 800ebb8:	0800f81c 	.word	0x0800f81c

0800ebbc <__swsetup_r>:
 800ebbc:	4b32      	ldr	r3, [pc, #200]	; (800ec88 <__swsetup_r+0xcc>)
 800ebbe:	b570      	push	{r4, r5, r6, lr}
 800ebc0:	681d      	ldr	r5, [r3, #0]
 800ebc2:	4606      	mov	r6, r0
 800ebc4:	460c      	mov	r4, r1
 800ebc6:	b125      	cbz	r5, 800ebd2 <__swsetup_r+0x16>
 800ebc8:	69ab      	ldr	r3, [r5, #24]
 800ebca:	b913      	cbnz	r3, 800ebd2 <__swsetup_r+0x16>
 800ebcc:	4628      	mov	r0, r5
 800ebce:	f000 f985 	bl	800eedc <__sinit>
 800ebd2:	4b2e      	ldr	r3, [pc, #184]	; (800ec8c <__swsetup_r+0xd0>)
 800ebd4:	429c      	cmp	r4, r3
 800ebd6:	d10f      	bne.n	800ebf8 <__swsetup_r+0x3c>
 800ebd8:	686c      	ldr	r4, [r5, #4]
 800ebda:	89a3      	ldrh	r3, [r4, #12]
 800ebdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ebe0:	0719      	lsls	r1, r3, #28
 800ebe2:	d42c      	bmi.n	800ec3e <__swsetup_r+0x82>
 800ebe4:	06dd      	lsls	r5, r3, #27
 800ebe6:	d411      	bmi.n	800ec0c <__swsetup_r+0x50>
 800ebe8:	2309      	movs	r3, #9
 800ebea:	6033      	str	r3, [r6, #0]
 800ebec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ebf0:	81a3      	strh	r3, [r4, #12]
 800ebf2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebf6:	e03e      	b.n	800ec76 <__swsetup_r+0xba>
 800ebf8:	4b25      	ldr	r3, [pc, #148]	; (800ec90 <__swsetup_r+0xd4>)
 800ebfa:	429c      	cmp	r4, r3
 800ebfc:	d101      	bne.n	800ec02 <__swsetup_r+0x46>
 800ebfe:	68ac      	ldr	r4, [r5, #8]
 800ec00:	e7eb      	b.n	800ebda <__swsetup_r+0x1e>
 800ec02:	4b24      	ldr	r3, [pc, #144]	; (800ec94 <__swsetup_r+0xd8>)
 800ec04:	429c      	cmp	r4, r3
 800ec06:	bf08      	it	eq
 800ec08:	68ec      	ldreq	r4, [r5, #12]
 800ec0a:	e7e6      	b.n	800ebda <__swsetup_r+0x1e>
 800ec0c:	0758      	lsls	r0, r3, #29
 800ec0e:	d512      	bpl.n	800ec36 <__swsetup_r+0x7a>
 800ec10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec12:	b141      	cbz	r1, 800ec26 <__swsetup_r+0x6a>
 800ec14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec18:	4299      	cmp	r1, r3
 800ec1a:	d002      	beq.n	800ec22 <__swsetup_r+0x66>
 800ec1c:	4630      	mov	r0, r6
 800ec1e:	f7ff fb27 	bl	800e270 <_free_r>
 800ec22:	2300      	movs	r3, #0
 800ec24:	6363      	str	r3, [r4, #52]	; 0x34
 800ec26:	89a3      	ldrh	r3, [r4, #12]
 800ec28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ec2c:	81a3      	strh	r3, [r4, #12]
 800ec2e:	2300      	movs	r3, #0
 800ec30:	6063      	str	r3, [r4, #4]
 800ec32:	6923      	ldr	r3, [r4, #16]
 800ec34:	6023      	str	r3, [r4, #0]
 800ec36:	89a3      	ldrh	r3, [r4, #12]
 800ec38:	f043 0308 	orr.w	r3, r3, #8
 800ec3c:	81a3      	strh	r3, [r4, #12]
 800ec3e:	6923      	ldr	r3, [r4, #16]
 800ec40:	b94b      	cbnz	r3, 800ec56 <__swsetup_r+0x9a>
 800ec42:	89a3      	ldrh	r3, [r4, #12]
 800ec44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ec48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec4c:	d003      	beq.n	800ec56 <__swsetup_r+0x9a>
 800ec4e:	4621      	mov	r1, r4
 800ec50:	4630      	mov	r0, r6
 800ec52:	f000 fa09 	bl	800f068 <__smakebuf_r>
 800ec56:	89a0      	ldrh	r0, [r4, #12]
 800ec58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec5c:	f010 0301 	ands.w	r3, r0, #1
 800ec60:	d00a      	beq.n	800ec78 <__swsetup_r+0xbc>
 800ec62:	2300      	movs	r3, #0
 800ec64:	60a3      	str	r3, [r4, #8]
 800ec66:	6963      	ldr	r3, [r4, #20]
 800ec68:	425b      	negs	r3, r3
 800ec6a:	61a3      	str	r3, [r4, #24]
 800ec6c:	6923      	ldr	r3, [r4, #16]
 800ec6e:	b943      	cbnz	r3, 800ec82 <__swsetup_r+0xc6>
 800ec70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec74:	d1ba      	bne.n	800ebec <__swsetup_r+0x30>
 800ec76:	bd70      	pop	{r4, r5, r6, pc}
 800ec78:	0781      	lsls	r1, r0, #30
 800ec7a:	bf58      	it	pl
 800ec7c:	6963      	ldrpl	r3, [r4, #20]
 800ec7e:	60a3      	str	r3, [r4, #8]
 800ec80:	e7f4      	b.n	800ec6c <__swsetup_r+0xb0>
 800ec82:	2000      	movs	r0, #0
 800ec84:	e7f7      	b.n	800ec76 <__swsetup_r+0xba>
 800ec86:	bf00      	nop
 800ec88:	20000014 	.word	0x20000014
 800ec8c:	0800f83c 	.word	0x0800f83c
 800ec90:	0800f85c 	.word	0x0800f85c
 800ec94:	0800f81c 	.word	0x0800f81c

0800ec98 <abort>:
 800ec98:	b508      	push	{r3, lr}
 800ec9a:	2006      	movs	r0, #6
 800ec9c:	f000 fa54 	bl	800f148 <raise>
 800eca0:	2001      	movs	r0, #1
 800eca2:	f7f3 fb5b 	bl	800235c <_exit>
	...

0800eca8 <__sflush_r>:
 800eca8:	898a      	ldrh	r2, [r1, #12]
 800ecaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecae:	4605      	mov	r5, r0
 800ecb0:	0710      	lsls	r0, r2, #28
 800ecb2:	460c      	mov	r4, r1
 800ecb4:	d458      	bmi.n	800ed68 <__sflush_r+0xc0>
 800ecb6:	684b      	ldr	r3, [r1, #4]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	dc05      	bgt.n	800ecc8 <__sflush_r+0x20>
 800ecbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	dc02      	bgt.n	800ecc8 <__sflush_r+0x20>
 800ecc2:	2000      	movs	r0, #0
 800ecc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ecca:	2e00      	cmp	r6, #0
 800eccc:	d0f9      	beq.n	800ecc2 <__sflush_r+0x1a>
 800ecce:	2300      	movs	r3, #0
 800ecd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ecd4:	682f      	ldr	r7, [r5, #0]
 800ecd6:	602b      	str	r3, [r5, #0]
 800ecd8:	d032      	beq.n	800ed40 <__sflush_r+0x98>
 800ecda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ecdc:	89a3      	ldrh	r3, [r4, #12]
 800ecde:	075a      	lsls	r2, r3, #29
 800ece0:	d505      	bpl.n	800ecee <__sflush_r+0x46>
 800ece2:	6863      	ldr	r3, [r4, #4]
 800ece4:	1ac0      	subs	r0, r0, r3
 800ece6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ece8:	b10b      	cbz	r3, 800ecee <__sflush_r+0x46>
 800ecea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ecec:	1ac0      	subs	r0, r0, r3
 800ecee:	2300      	movs	r3, #0
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ecf4:	6a21      	ldr	r1, [r4, #32]
 800ecf6:	4628      	mov	r0, r5
 800ecf8:	47b0      	blx	r6
 800ecfa:	1c43      	adds	r3, r0, #1
 800ecfc:	89a3      	ldrh	r3, [r4, #12]
 800ecfe:	d106      	bne.n	800ed0e <__sflush_r+0x66>
 800ed00:	6829      	ldr	r1, [r5, #0]
 800ed02:	291d      	cmp	r1, #29
 800ed04:	d82c      	bhi.n	800ed60 <__sflush_r+0xb8>
 800ed06:	4a2a      	ldr	r2, [pc, #168]	; (800edb0 <__sflush_r+0x108>)
 800ed08:	40ca      	lsrs	r2, r1
 800ed0a:	07d6      	lsls	r6, r2, #31
 800ed0c:	d528      	bpl.n	800ed60 <__sflush_r+0xb8>
 800ed0e:	2200      	movs	r2, #0
 800ed10:	6062      	str	r2, [r4, #4]
 800ed12:	04d9      	lsls	r1, r3, #19
 800ed14:	6922      	ldr	r2, [r4, #16]
 800ed16:	6022      	str	r2, [r4, #0]
 800ed18:	d504      	bpl.n	800ed24 <__sflush_r+0x7c>
 800ed1a:	1c42      	adds	r2, r0, #1
 800ed1c:	d101      	bne.n	800ed22 <__sflush_r+0x7a>
 800ed1e:	682b      	ldr	r3, [r5, #0]
 800ed20:	b903      	cbnz	r3, 800ed24 <__sflush_r+0x7c>
 800ed22:	6560      	str	r0, [r4, #84]	; 0x54
 800ed24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed26:	602f      	str	r7, [r5, #0]
 800ed28:	2900      	cmp	r1, #0
 800ed2a:	d0ca      	beq.n	800ecc2 <__sflush_r+0x1a>
 800ed2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed30:	4299      	cmp	r1, r3
 800ed32:	d002      	beq.n	800ed3a <__sflush_r+0x92>
 800ed34:	4628      	mov	r0, r5
 800ed36:	f7ff fa9b 	bl	800e270 <_free_r>
 800ed3a:	2000      	movs	r0, #0
 800ed3c:	6360      	str	r0, [r4, #52]	; 0x34
 800ed3e:	e7c1      	b.n	800ecc4 <__sflush_r+0x1c>
 800ed40:	6a21      	ldr	r1, [r4, #32]
 800ed42:	2301      	movs	r3, #1
 800ed44:	4628      	mov	r0, r5
 800ed46:	47b0      	blx	r6
 800ed48:	1c41      	adds	r1, r0, #1
 800ed4a:	d1c7      	bne.n	800ecdc <__sflush_r+0x34>
 800ed4c:	682b      	ldr	r3, [r5, #0]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d0c4      	beq.n	800ecdc <__sflush_r+0x34>
 800ed52:	2b1d      	cmp	r3, #29
 800ed54:	d001      	beq.n	800ed5a <__sflush_r+0xb2>
 800ed56:	2b16      	cmp	r3, #22
 800ed58:	d101      	bne.n	800ed5e <__sflush_r+0xb6>
 800ed5a:	602f      	str	r7, [r5, #0]
 800ed5c:	e7b1      	b.n	800ecc2 <__sflush_r+0x1a>
 800ed5e:	89a3      	ldrh	r3, [r4, #12]
 800ed60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed64:	81a3      	strh	r3, [r4, #12]
 800ed66:	e7ad      	b.n	800ecc4 <__sflush_r+0x1c>
 800ed68:	690f      	ldr	r7, [r1, #16]
 800ed6a:	2f00      	cmp	r7, #0
 800ed6c:	d0a9      	beq.n	800ecc2 <__sflush_r+0x1a>
 800ed6e:	0793      	lsls	r3, r2, #30
 800ed70:	680e      	ldr	r6, [r1, #0]
 800ed72:	bf08      	it	eq
 800ed74:	694b      	ldreq	r3, [r1, #20]
 800ed76:	600f      	str	r7, [r1, #0]
 800ed78:	bf18      	it	ne
 800ed7a:	2300      	movne	r3, #0
 800ed7c:	eba6 0807 	sub.w	r8, r6, r7
 800ed80:	608b      	str	r3, [r1, #8]
 800ed82:	f1b8 0f00 	cmp.w	r8, #0
 800ed86:	dd9c      	ble.n	800ecc2 <__sflush_r+0x1a>
 800ed88:	6a21      	ldr	r1, [r4, #32]
 800ed8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ed8c:	4643      	mov	r3, r8
 800ed8e:	463a      	mov	r2, r7
 800ed90:	4628      	mov	r0, r5
 800ed92:	47b0      	blx	r6
 800ed94:	2800      	cmp	r0, #0
 800ed96:	dc06      	bgt.n	800eda6 <__sflush_r+0xfe>
 800ed98:	89a3      	ldrh	r3, [r4, #12]
 800ed9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed9e:	81a3      	strh	r3, [r4, #12]
 800eda0:	f04f 30ff 	mov.w	r0, #4294967295
 800eda4:	e78e      	b.n	800ecc4 <__sflush_r+0x1c>
 800eda6:	4407      	add	r7, r0
 800eda8:	eba8 0800 	sub.w	r8, r8, r0
 800edac:	e7e9      	b.n	800ed82 <__sflush_r+0xda>
 800edae:	bf00      	nop
 800edb0:	20400001 	.word	0x20400001

0800edb4 <_fflush_r>:
 800edb4:	b538      	push	{r3, r4, r5, lr}
 800edb6:	690b      	ldr	r3, [r1, #16]
 800edb8:	4605      	mov	r5, r0
 800edba:	460c      	mov	r4, r1
 800edbc:	b913      	cbnz	r3, 800edc4 <_fflush_r+0x10>
 800edbe:	2500      	movs	r5, #0
 800edc0:	4628      	mov	r0, r5
 800edc2:	bd38      	pop	{r3, r4, r5, pc}
 800edc4:	b118      	cbz	r0, 800edce <_fflush_r+0x1a>
 800edc6:	6983      	ldr	r3, [r0, #24]
 800edc8:	b90b      	cbnz	r3, 800edce <_fflush_r+0x1a>
 800edca:	f000 f887 	bl	800eedc <__sinit>
 800edce:	4b14      	ldr	r3, [pc, #80]	; (800ee20 <_fflush_r+0x6c>)
 800edd0:	429c      	cmp	r4, r3
 800edd2:	d11b      	bne.n	800ee0c <_fflush_r+0x58>
 800edd4:	686c      	ldr	r4, [r5, #4]
 800edd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d0ef      	beq.n	800edbe <_fflush_r+0xa>
 800edde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ede0:	07d0      	lsls	r0, r2, #31
 800ede2:	d404      	bmi.n	800edee <_fflush_r+0x3a>
 800ede4:	0599      	lsls	r1, r3, #22
 800ede6:	d402      	bmi.n	800edee <_fflush_r+0x3a>
 800ede8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edea:	f000 f915 	bl	800f018 <__retarget_lock_acquire_recursive>
 800edee:	4628      	mov	r0, r5
 800edf0:	4621      	mov	r1, r4
 800edf2:	f7ff ff59 	bl	800eca8 <__sflush_r>
 800edf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800edf8:	07da      	lsls	r2, r3, #31
 800edfa:	4605      	mov	r5, r0
 800edfc:	d4e0      	bmi.n	800edc0 <_fflush_r+0xc>
 800edfe:	89a3      	ldrh	r3, [r4, #12]
 800ee00:	059b      	lsls	r3, r3, #22
 800ee02:	d4dd      	bmi.n	800edc0 <_fflush_r+0xc>
 800ee04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee06:	f000 f908 	bl	800f01a <__retarget_lock_release_recursive>
 800ee0a:	e7d9      	b.n	800edc0 <_fflush_r+0xc>
 800ee0c:	4b05      	ldr	r3, [pc, #20]	; (800ee24 <_fflush_r+0x70>)
 800ee0e:	429c      	cmp	r4, r3
 800ee10:	d101      	bne.n	800ee16 <_fflush_r+0x62>
 800ee12:	68ac      	ldr	r4, [r5, #8]
 800ee14:	e7df      	b.n	800edd6 <_fflush_r+0x22>
 800ee16:	4b04      	ldr	r3, [pc, #16]	; (800ee28 <_fflush_r+0x74>)
 800ee18:	429c      	cmp	r4, r3
 800ee1a:	bf08      	it	eq
 800ee1c:	68ec      	ldreq	r4, [r5, #12]
 800ee1e:	e7da      	b.n	800edd6 <_fflush_r+0x22>
 800ee20:	0800f83c 	.word	0x0800f83c
 800ee24:	0800f85c 	.word	0x0800f85c
 800ee28:	0800f81c 	.word	0x0800f81c

0800ee2c <std>:
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	b510      	push	{r4, lr}
 800ee30:	4604      	mov	r4, r0
 800ee32:	e9c0 3300 	strd	r3, r3, [r0]
 800ee36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee3a:	6083      	str	r3, [r0, #8]
 800ee3c:	8181      	strh	r1, [r0, #12]
 800ee3e:	6643      	str	r3, [r0, #100]	; 0x64
 800ee40:	81c2      	strh	r2, [r0, #14]
 800ee42:	6183      	str	r3, [r0, #24]
 800ee44:	4619      	mov	r1, r3
 800ee46:	2208      	movs	r2, #8
 800ee48:	305c      	adds	r0, #92	; 0x5c
 800ee4a:	f7fb fee3 	bl	800ac14 <memset>
 800ee4e:	4b05      	ldr	r3, [pc, #20]	; (800ee64 <std+0x38>)
 800ee50:	6263      	str	r3, [r4, #36]	; 0x24
 800ee52:	4b05      	ldr	r3, [pc, #20]	; (800ee68 <std+0x3c>)
 800ee54:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee56:	4b05      	ldr	r3, [pc, #20]	; (800ee6c <std+0x40>)
 800ee58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee5a:	4b05      	ldr	r3, [pc, #20]	; (800ee70 <std+0x44>)
 800ee5c:	6224      	str	r4, [r4, #32]
 800ee5e:	6323      	str	r3, [r4, #48]	; 0x30
 800ee60:	bd10      	pop	{r4, pc}
 800ee62:	bf00      	nop
 800ee64:	0800f181 	.word	0x0800f181
 800ee68:	0800f1a3 	.word	0x0800f1a3
 800ee6c:	0800f1db 	.word	0x0800f1db
 800ee70:	0800f1ff 	.word	0x0800f1ff

0800ee74 <_cleanup_r>:
 800ee74:	4901      	ldr	r1, [pc, #4]	; (800ee7c <_cleanup_r+0x8>)
 800ee76:	f000 b8af 	b.w	800efd8 <_fwalk_reent>
 800ee7a:	bf00      	nop
 800ee7c:	0800edb5 	.word	0x0800edb5

0800ee80 <__sfmoreglue>:
 800ee80:	b570      	push	{r4, r5, r6, lr}
 800ee82:	2268      	movs	r2, #104	; 0x68
 800ee84:	1e4d      	subs	r5, r1, #1
 800ee86:	4355      	muls	r5, r2
 800ee88:	460e      	mov	r6, r1
 800ee8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ee8e:	f7ff fa5b 	bl	800e348 <_malloc_r>
 800ee92:	4604      	mov	r4, r0
 800ee94:	b140      	cbz	r0, 800eea8 <__sfmoreglue+0x28>
 800ee96:	2100      	movs	r1, #0
 800ee98:	e9c0 1600 	strd	r1, r6, [r0]
 800ee9c:	300c      	adds	r0, #12
 800ee9e:	60a0      	str	r0, [r4, #8]
 800eea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eea4:	f7fb feb6 	bl	800ac14 <memset>
 800eea8:	4620      	mov	r0, r4
 800eeaa:	bd70      	pop	{r4, r5, r6, pc}

0800eeac <__sfp_lock_acquire>:
 800eeac:	4801      	ldr	r0, [pc, #4]	; (800eeb4 <__sfp_lock_acquire+0x8>)
 800eeae:	f000 b8b3 	b.w	800f018 <__retarget_lock_acquire_recursive>
 800eeb2:	bf00      	nop
 800eeb4:	20004e09 	.word	0x20004e09

0800eeb8 <__sfp_lock_release>:
 800eeb8:	4801      	ldr	r0, [pc, #4]	; (800eec0 <__sfp_lock_release+0x8>)
 800eeba:	f000 b8ae 	b.w	800f01a <__retarget_lock_release_recursive>
 800eebe:	bf00      	nop
 800eec0:	20004e09 	.word	0x20004e09

0800eec4 <__sinit_lock_acquire>:
 800eec4:	4801      	ldr	r0, [pc, #4]	; (800eecc <__sinit_lock_acquire+0x8>)
 800eec6:	f000 b8a7 	b.w	800f018 <__retarget_lock_acquire_recursive>
 800eeca:	bf00      	nop
 800eecc:	20004e0a 	.word	0x20004e0a

0800eed0 <__sinit_lock_release>:
 800eed0:	4801      	ldr	r0, [pc, #4]	; (800eed8 <__sinit_lock_release+0x8>)
 800eed2:	f000 b8a2 	b.w	800f01a <__retarget_lock_release_recursive>
 800eed6:	bf00      	nop
 800eed8:	20004e0a 	.word	0x20004e0a

0800eedc <__sinit>:
 800eedc:	b510      	push	{r4, lr}
 800eede:	4604      	mov	r4, r0
 800eee0:	f7ff fff0 	bl	800eec4 <__sinit_lock_acquire>
 800eee4:	69a3      	ldr	r3, [r4, #24]
 800eee6:	b11b      	cbz	r3, 800eef0 <__sinit+0x14>
 800eee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eeec:	f7ff bff0 	b.w	800eed0 <__sinit_lock_release>
 800eef0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eef4:	6523      	str	r3, [r4, #80]	; 0x50
 800eef6:	4b13      	ldr	r3, [pc, #76]	; (800ef44 <__sinit+0x68>)
 800eef8:	4a13      	ldr	r2, [pc, #76]	; (800ef48 <__sinit+0x6c>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	62a2      	str	r2, [r4, #40]	; 0x28
 800eefe:	42a3      	cmp	r3, r4
 800ef00:	bf04      	itt	eq
 800ef02:	2301      	moveq	r3, #1
 800ef04:	61a3      	streq	r3, [r4, #24]
 800ef06:	4620      	mov	r0, r4
 800ef08:	f000 f820 	bl	800ef4c <__sfp>
 800ef0c:	6060      	str	r0, [r4, #4]
 800ef0e:	4620      	mov	r0, r4
 800ef10:	f000 f81c 	bl	800ef4c <__sfp>
 800ef14:	60a0      	str	r0, [r4, #8]
 800ef16:	4620      	mov	r0, r4
 800ef18:	f000 f818 	bl	800ef4c <__sfp>
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	60e0      	str	r0, [r4, #12]
 800ef20:	2104      	movs	r1, #4
 800ef22:	6860      	ldr	r0, [r4, #4]
 800ef24:	f7ff ff82 	bl	800ee2c <std>
 800ef28:	68a0      	ldr	r0, [r4, #8]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	2109      	movs	r1, #9
 800ef2e:	f7ff ff7d 	bl	800ee2c <std>
 800ef32:	68e0      	ldr	r0, [r4, #12]
 800ef34:	2202      	movs	r2, #2
 800ef36:	2112      	movs	r1, #18
 800ef38:	f7ff ff78 	bl	800ee2c <std>
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	61a3      	str	r3, [r4, #24]
 800ef40:	e7d2      	b.n	800eee8 <__sinit+0xc>
 800ef42:	bf00      	nop
 800ef44:	0800f3d8 	.word	0x0800f3d8
 800ef48:	0800ee75 	.word	0x0800ee75

0800ef4c <__sfp>:
 800ef4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef4e:	4607      	mov	r7, r0
 800ef50:	f7ff ffac 	bl	800eeac <__sfp_lock_acquire>
 800ef54:	4b1e      	ldr	r3, [pc, #120]	; (800efd0 <__sfp+0x84>)
 800ef56:	681e      	ldr	r6, [r3, #0]
 800ef58:	69b3      	ldr	r3, [r6, #24]
 800ef5a:	b913      	cbnz	r3, 800ef62 <__sfp+0x16>
 800ef5c:	4630      	mov	r0, r6
 800ef5e:	f7ff ffbd 	bl	800eedc <__sinit>
 800ef62:	3648      	adds	r6, #72	; 0x48
 800ef64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef68:	3b01      	subs	r3, #1
 800ef6a:	d503      	bpl.n	800ef74 <__sfp+0x28>
 800ef6c:	6833      	ldr	r3, [r6, #0]
 800ef6e:	b30b      	cbz	r3, 800efb4 <__sfp+0x68>
 800ef70:	6836      	ldr	r6, [r6, #0]
 800ef72:	e7f7      	b.n	800ef64 <__sfp+0x18>
 800ef74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef78:	b9d5      	cbnz	r5, 800efb0 <__sfp+0x64>
 800ef7a:	4b16      	ldr	r3, [pc, #88]	; (800efd4 <__sfp+0x88>)
 800ef7c:	60e3      	str	r3, [r4, #12]
 800ef7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ef82:	6665      	str	r5, [r4, #100]	; 0x64
 800ef84:	f000 f847 	bl	800f016 <__retarget_lock_init_recursive>
 800ef88:	f7ff ff96 	bl	800eeb8 <__sfp_lock_release>
 800ef8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ef90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ef94:	6025      	str	r5, [r4, #0]
 800ef96:	61a5      	str	r5, [r4, #24]
 800ef98:	2208      	movs	r2, #8
 800ef9a:	4629      	mov	r1, r5
 800ef9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800efa0:	f7fb fe38 	bl	800ac14 <memset>
 800efa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800efa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800efac:	4620      	mov	r0, r4
 800efae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efb0:	3468      	adds	r4, #104	; 0x68
 800efb2:	e7d9      	b.n	800ef68 <__sfp+0x1c>
 800efb4:	2104      	movs	r1, #4
 800efb6:	4638      	mov	r0, r7
 800efb8:	f7ff ff62 	bl	800ee80 <__sfmoreglue>
 800efbc:	4604      	mov	r4, r0
 800efbe:	6030      	str	r0, [r6, #0]
 800efc0:	2800      	cmp	r0, #0
 800efc2:	d1d5      	bne.n	800ef70 <__sfp+0x24>
 800efc4:	f7ff ff78 	bl	800eeb8 <__sfp_lock_release>
 800efc8:	230c      	movs	r3, #12
 800efca:	603b      	str	r3, [r7, #0]
 800efcc:	e7ee      	b.n	800efac <__sfp+0x60>
 800efce:	bf00      	nop
 800efd0:	0800f3d8 	.word	0x0800f3d8
 800efd4:	ffff0001 	.word	0xffff0001

0800efd8 <_fwalk_reent>:
 800efd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efdc:	4606      	mov	r6, r0
 800efde:	4688      	mov	r8, r1
 800efe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800efe4:	2700      	movs	r7, #0
 800efe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800efea:	f1b9 0901 	subs.w	r9, r9, #1
 800efee:	d505      	bpl.n	800effc <_fwalk_reent+0x24>
 800eff0:	6824      	ldr	r4, [r4, #0]
 800eff2:	2c00      	cmp	r4, #0
 800eff4:	d1f7      	bne.n	800efe6 <_fwalk_reent+0xe>
 800eff6:	4638      	mov	r0, r7
 800eff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800effc:	89ab      	ldrh	r3, [r5, #12]
 800effe:	2b01      	cmp	r3, #1
 800f000:	d907      	bls.n	800f012 <_fwalk_reent+0x3a>
 800f002:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f006:	3301      	adds	r3, #1
 800f008:	d003      	beq.n	800f012 <_fwalk_reent+0x3a>
 800f00a:	4629      	mov	r1, r5
 800f00c:	4630      	mov	r0, r6
 800f00e:	47c0      	blx	r8
 800f010:	4307      	orrs	r7, r0
 800f012:	3568      	adds	r5, #104	; 0x68
 800f014:	e7e9      	b.n	800efea <_fwalk_reent+0x12>

0800f016 <__retarget_lock_init_recursive>:
 800f016:	4770      	bx	lr

0800f018 <__retarget_lock_acquire_recursive>:
 800f018:	4770      	bx	lr

0800f01a <__retarget_lock_release_recursive>:
 800f01a:	4770      	bx	lr

0800f01c <__swhatbuf_r>:
 800f01c:	b570      	push	{r4, r5, r6, lr}
 800f01e:	460e      	mov	r6, r1
 800f020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f024:	2900      	cmp	r1, #0
 800f026:	b096      	sub	sp, #88	; 0x58
 800f028:	4614      	mov	r4, r2
 800f02a:	461d      	mov	r5, r3
 800f02c:	da08      	bge.n	800f040 <__swhatbuf_r+0x24>
 800f02e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f032:	2200      	movs	r2, #0
 800f034:	602a      	str	r2, [r5, #0]
 800f036:	061a      	lsls	r2, r3, #24
 800f038:	d410      	bmi.n	800f05c <__swhatbuf_r+0x40>
 800f03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f03e:	e00e      	b.n	800f05e <__swhatbuf_r+0x42>
 800f040:	466a      	mov	r2, sp
 800f042:	f000 f903 	bl	800f24c <_fstat_r>
 800f046:	2800      	cmp	r0, #0
 800f048:	dbf1      	blt.n	800f02e <__swhatbuf_r+0x12>
 800f04a:	9a01      	ldr	r2, [sp, #4]
 800f04c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f050:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f054:	425a      	negs	r2, r3
 800f056:	415a      	adcs	r2, r3
 800f058:	602a      	str	r2, [r5, #0]
 800f05a:	e7ee      	b.n	800f03a <__swhatbuf_r+0x1e>
 800f05c:	2340      	movs	r3, #64	; 0x40
 800f05e:	2000      	movs	r0, #0
 800f060:	6023      	str	r3, [r4, #0]
 800f062:	b016      	add	sp, #88	; 0x58
 800f064:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f068 <__smakebuf_r>:
 800f068:	898b      	ldrh	r3, [r1, #12]
 800f06a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f06c:	079d      	lsls	r5, r3, #30
 800f06e:	4606      	mov	r6, r0
 800f070:	460c      	mov	r4, r1
 800f072:	d507      	bpl.n	800f084 <__smakebuf_r+0x1c>
 800f074:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f078:	6023      	str	r3, [r4, #0]
 800f07a:	6123      	str	r3, [r4, #16]
 800f07c:	2301      	movs	r3, #1
 800f07e:	6163      	str	r3, [r4, #20]
 800f080:	b002      	add	sp, #8
 800f082:	bd70      	pop	{r4, r5, r6, pc}
 800f084:	ab01      	add	r3, sp, #4
 800f086:	466a      	mov	r2, sp
 800f088:	f7ff ffc8 	bl	800f01c <__swhatbuf_r>
 800f08c:	9900      	ldr	r1, [sp, #0]
 800f08e:	4605      	mov	r5, r0
 800f090:	4630      	mov	r0, r6
 800f092:	f7ff f959 	bl	800e348 <_malloc_r>
 800f096:	b948      	cbnz	r0, 800f0ac <__smakebuf_r+0x44>
 800f098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f09c:	059a      	lsls	r2, r3, #22
 800f09e:	d4ef      	bmi.n	800f080 <__smakebuf_r+0x18>
 800f0a0:	f023 0303 	bic.w	r3, r3, #3
 800f0a4:	f043 0302 	orr.w	r3, r3, #2
 800f0a8:	81a3      	strh	r3, [r4, #12]
 800f0aa:	e7e3      	b.n	800f074 <__smakebuf_r+0xc>
 800f0ac:	4b0d      	ldr	r3, [pc, #52]	; (800f0e4 <__smakebuf_r+0x7c>)
 800f0ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800f0b0:	89a3      	ldrh	r3, [r4, #12]
 800f0b2:	6020      	str	r0, [r4, #0]
 800f0b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0b8:	81a3      	strh	r3, [r4, #12]
 800f0ba:	9b00      	ldr	r3, [sp, #0]
 800f0bc:	6163      	str	r3, [r4, #20]
 800f0be:	9b01      	ldr	r3, [sp, #4]
 800f0c0:	6120      	str	r0, [r4, #16]
 800f0c2:	b15b      	cbz	r3, 800f0dc <__smakebuf_r+0x74>
 800f0c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	f000 f8d1 	bl	800f270 <_isatty_r>
 800f0ce:	b128      	cbz	r0, 800f0dc <__smakebuf_r+0x74>
 800f0d0:	89a3      	ldrh	r3, [r4, #12]
 800f0d2:	f023 0303 	bic.w	r3, r3, #3
 800f0d6:	f043 0301 	orr.w	r3, r3, #1
 800f0da:	81a3      	strh	r3, [r4, #12]
 800f0dc:	89a0      	ldrh	r0, [r4, #12]
 800f0de:	4305      	orrs	r5, r0
 800f0e0:	81a5      	strh	r5, [r4, #12]
 800f0e2:	e7cd      	b.n	800f080 <__smakebuf_r+0x18>
 800f0e4:	0800ee75 	.word	0x0800ee75

0800f0e8 <_malloc_usable_size_r>:
 800f0e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0ec:	1f18      	subs	r0, r3, #4
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	bfbc      	itt	lt
 800f0f2:	580b      	ldrlt	r3, [r1, r0]
 800f0f4:	18c0      	addlt	r0, r0, r3
 800f0f6:	4770      	bx	lr

0800f0f8 <_raise_r>:
 800f0f8:	291f      	cmp	r1, #31
 800f0fa:	b538      	push	{r3, r4, r5, lr}
 800f0fc:	4604      	mov	r4, r0
 800f0fe:	460d      	mov	r5, r1
 800f100:	d904      	bls.n	800f10c <_raise_r+0x14>
 800f102:	2316      	movs	r3, #22
 800f104:	6003      	str	r3, [r0, #0]
 800f106:	f04f 30ff 	mov.w	r0, #4294967295
 800f10a:	bd38      	pop	{r3, r4, r5, pc}
 800f10c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f10e:	b112      	cbz	r2, 800f116 <_raise_r+0x1e>
 800f110:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f114:	b94b      	cbnz	r3, 800f12a <_raise_r+0x32>
 800f116:	4620      	mov	r0, r4
 800f118:	f000 f830 	bl	800f17c <_getpid_r>
 800f11c:	462a      	mov	r2, r5
 800f11e:	4601      	mov	r1, r0
 800f120:	4620      	mov	r0, r4
 800f122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f126:	f000 b817 	b.w	800f158 <_kill_r>
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d00a      	beq.n	800f144 <_raise_r+0x4c>
 800f12e:	1c59      	adds	r1, r3, #1
 800f130:	d103      	bne.n	800f13a <_raise_r+0x42>
 800f132:	2316      	movs	r3, #22
 800f134:	6003      	str	r3, [r0, #0]
 800f136:	2001      	movs	r0, #1
 800f138:	e7e7      	b.n	800f10a <_raise_r+0x12>
 800f13a:	2400      	movs	r4, #0
 800f13c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f140:	4628      	mov	r0, r5
 800f142:	4798      	blx	r3
 800f144:	2000      	movs	r0, #0
 800f146:	e7e0      	b.n	800f10a <_raise_r+0x12>

0800f148 <raise>:
 800f148:	4b02      	ldr	r3, [pc, #8]	; (800f154 <raise+0xc>)
 800f14a:	4601      	mov	r1, r0
 800f14c:	6818      	ldr	r0, [r3, #0]
 800f14e:	f7ff bfd3 	b.w	800f0f8 <_raise_r>
 800f152:	bf00      	nop
 800f154:	20000014 	.word	0x20000014

0800f158 <_kill_r>:
 800f158:	b538      	push	{r3, r4, r5, lr}
 800f15a:	4d07      	ldr	r5, [pc, #28]	; (800f178 <_kill_r+0x20>)
 800f15c:	2300      	movs	r3, #0
 800f15e:	4604      	mov	r4, r0
 800f160:	4608      	mov	r0, r1
 800f162:	4611      	mov	r1, r2
 800f164:	602b      	str	r3, [r5, #0]
 800f166:	f7f3 f8e9 	bl	800233c <_kill>
 800f16a:	1c43      	adds	r3, r0, #1
 800f16c:	d102      	bne.n	800f174 <_kill_r+0x1c>
 800f16e:	682b      	ldr	r3, [r5, #0]
 800f170:	b103      	cbz	r3, 800f174 <_kill_r+0x1c>
 800f172:	6023      	str	r3, [r4, #0]
 800f174:	bd38      	pop	{r3, r4, r5, pc}
 800f176:	bf00      	nop
 800f178:	20004e04 	.word	0x20004e04

0800f17c <_getpid_r>:
 800f17c:	f7f3 b8d6 	b.w	800232c <_getpid>

0800f180 <__sread>:
 800f180:	b510      	push	{r4, lr}
 800f182:	460c      	mov	r4, r1
 800f184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f188:	f000 f894 	bl	800f2b4 <_read_r>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	bfab      	itete	ge
 800f190:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f192:	89a3      	ldrhlt	r3, [r4, #12]
 800f194:	181b      	addge	r3, r3, r0
 800f196:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f19a:	bfac      	ite	ge
 800f19c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f19e:	81a3      	strhlt	r3, [r4, #12]
 800f1a0:	bd10      	pop	{r4, pc}

0800f1a2 <__swrite>:
 800f1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1a6:	461f      	mov	r7, r3
 800f1a8:	898b      	ldrh	r3, [r1, #12]
 800f1aa:	05db      	lsls	r3, r3, #23
 800f1ac:	4605      	mov	r5, r0
 800f1ae:	460c      	mov	r4, r1
 800f1b0:	4616      	mov	r6, r2
 800f1b2:	d505      	bpl.n	800f1c0 <__swrite+0x1e>
 800f1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1b8:	2302      	movs	r3, #2
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	f000 f868 	bl	800f290 <_lseek_r>
 800f1c0:	89a3      	ldrh	r3, [r4, #12]
 800f1c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f1ca:	81a3      	strh	r3, [r4, #12]
 800f1cc:	4632      	mov	r2, r6
 800f1ce:	463b      	mov	r3, r7
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1d6:	f000 b817 	b.w	800f208 <_write_r>

0800f1da <__sseek>:
 800f1da:	b510      	push	{r4, lr}
 800f1dc:	460c      	mov	r4, r1
 800f1de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1e2:	f000 f855 	bl	800f290 <_lseek_r>
 800f1e6:	1c43      	adds	r3, r0, #1
 800f1e8:	89a3      	ldrh	r3, [r4, #12]
 800f1ea:	bf15      	itete	ne
 800f1ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800f1ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f1f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f1f6:	81a3      	strheq	r3, [r4, #12]
 800f1f8:	bf18      	it	ne
 800f1fa:	81a3      	strhne	r3, [r4, #12]
 800f1fc:	bd10      	pop	{r4, pc}

0800f1fe <__sclose>:
 800f1fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f202:	f000 b813 	b.w	800f22c <_close_r>
	...

0800f208 <_write_r>:
 800f208:	b538      	push	{r3, r4, r5, lr}
 800f20a:	4d07      	ldr	r5, [pc, #28]	; (800f228 <_write_r+0x20>)
 800f20c:	4604      	mov	r4, r0
 800f20e:	4608      	mov	r0, r1
 800f210:	4611      	mov	r1, r2
 800f212:	2200      	movs	r2, #0
 800f214:	602a      	str	r2, [r5, #0]
 800f216:	461a      	mov	r2, r3
 800f218:	f7f3 f8c7 	bl	80023aa <_write>
 800f21c:	1c43      	adds	r3, r0, #1
 800f21e:	d102      	bne.n	800f226 <_write_r+0x1e>
 800f220:	682b      	ldr	r3, [r5, #0]
 800f222:	b103      	cbz	r3, 800f226 <_write_r+0x1e>
 800f224:	6023      	str	r3, [r4, #0]
 800f226:	bd38      	pop	{r3, r4, r5, pc}
 800f228:	20004e04 	.word	0x20004e04

0800f22c <_close_r>:
 800f22c:	b538      	push	{r3, r4, r5, lr}
 800f22e:	4d06      	ldr	r5, [pc, #24]	; (800f248 <_close_r+0x1c>)
 800f230:	2300      	movs	r3, #0
 800f232:	4604      	mov	r4, r0
 800f234:	4608      	mov	r0, r1
 800f236:	602b      	str	r3, [r5, #0]
 800f238:	f7f3 f8d3 	bl	80023e2 <_close>
 800f23c:	1c43      	adds	r3, r0, #1
 800f23e:	d102      	bne.n	800f246 <_close_r+0x1a>
 800f240:	682b      	ldr	r3, [r5, #0]
 800f242:	b103      	cbz	r3, 800f246 <_close_r+0x1a>
 800f244:	6023      	str	r3, [r4, #0]
 800f246:	bd38      	pop	{r3, r4, r5, pc}
 800f248:	20004e04 	.word	0x20004e04

0800f24c <_fstat_r>:
 800f24c:	b538      	push	{r3, r4, r5, lr}
 800f24e:	4d07      	ldr	r5, [pc, #28]	; (800f26c <_fstat_r+0x20>)
 800f250:	2300      	movs	r3, #0
 800f252:	4604      	mov	r4, r0
 800f254:	4608      	mov	r0, r1
 800f256:	4611      	mov	r1, r2
 800f258:	602b      	str	r3, [r5, #0]
 800f25a:	f7f3 f8ce 	bl	80023fa <_fstat>
 800f25e:	1c43      	adds	r3, r0, #1
 800f260:	d102      	bne.n	800f268 <_fstat_r+0x1c>
 800f262:	682b      	ldr	r3, [r5, #0]
 800f264:	b103      	cbz	r3, 800f268 <_fstat_r+0x1c>
 800f266:	6023      	str	r3, [r4, #0]
 800f268:	bd38      	pop	{r3, r4, r5, pc}
 800f26a:	bf00      	nop
 800f26c:	20004e04 	.word	0x20004e04

0800f270 <_isatty_r>:
 800f270:	b538      	push	{r3, r4, r5, lr}
 800f272:	4d06      	ldr	r5, [pc, #24]	; (800f28c <_isatty_r+0x1c>)
 800f274:	2300      	movs	r3, #0
 800f276:	4604      	mov	r4, r0
 800f278:	4608      	mov	r0, r1
 800f27a:	602b      	str	r3, [r5, #0]
 800f27c:	f7f3 f8cd 	bl	800241a <_isatty>
 800f280:	1c43      	adds	r3, r0, #1
 800f282:	d102      	bne.n	800f28a <_isatty_r+0x1a>
 800f284:	682b      	ldr	r3, [r5, #0]
 800f286:	b103      	cbz	r3, 800f28a <_isatty_r+0x1a>
 800f288:	6023      	str	r3, [r4, #0]
 800f28a:	bd38      	pop	{r3, r4, r5, pc}
 800f28c:	20004e04 	.word	0x20004e04

0800f290 <_lseek_r>:
 800f290:	b538      	push	{r3, r4, r5, lr}
 800f292:	4d07      	ldr	r5, [pc, #28]	; (800f2b0 <_lseek_r+0x20>)
 800f294:	4604      	mov	r4, r0
 800f296:	4608      	mov	r0, r1
 800f298:	4611      	mov	r1, r2
 800f29a:	2200      	movs	r2, #0
 800f29c:	602a      	str	r2, [r5, #0]
 800f29e:	461a      	mov	r2, r3
 800f2a0:	f7f3 f8c6 	bl	8002430 <_lseek>
 800f2a4:	1c43      	adds	r3, r0, #1
 800f2a6:	d102      	bne.n	800f2ae <_lseek_r+0x1e>
 800f2a8:	682b      	ldr	r3, [r5, #0]
 800f2aa:	b103      	cbz	r3, 800f2ae <_lseek_r+0x1e>
 800f2ac:	6023      	str	r3, [r4, #0]
 800f2ae:	bd38      	pop	{r3, r4, r5, pc}
 800f2b0:	20004e04 	.word	0x20004e04

0800f2b4 <_read_r>:
 800f2b4:	b538      	push	{r3, r4, r5, lr}
 800f2b6:	4d07      	ldr	r5, [pc, #28]	; (800f2d4 <_read_r+0x20>)
 800f2b8:	4604      	mov	r4, r0
 800f2ba:	4608      	mov	r0, r1
 800f2bc:	4611      	mov	r1, r2
 800f2be:	2200      	movs	r2, #0
 800f2c0:	602a      	str	r2, [r5, #0]
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	f7f3 f854 	bl	8002370 <_read>
 800f2c8:	1c43      	adds	r3, r0, #1
 800f2ca:	d102      	bne.n	800f2d2 <_read_r+0x1e>
 800f2cc:	682b      	ldr	r3, [r5, #0]
 800f2ce:	b103      	cbz	r3, 800f2d2 <_read_r+0x1e>
 800f2d0:	6023      	str	r3, [r4, #0]
 800f2d2:	bd38      	pop	{r3, r4, r5, pc}
 800f2d4:	20004e04 	.word	0x20004e04

0800f2d8 <_init>:
 800f2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2da:	bf00      	nop
 800f2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2de:	bc08      	pop	{r3}
 800f2e0:	469e      	mov	lr, r3
 800f2e2:	4770      	bx	lr

0800f2e4 <_fini>:
 800f2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2e6:	bf00      	nop
 800f2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2ea:	bc08      	pop	{r3}
 800f2ec:	469e      	mov	lr, r3
 800f2ee:	4770      	bx	lr
